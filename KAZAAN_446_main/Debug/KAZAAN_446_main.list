
KAZAAN_446_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076c4  080076c4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076cc  080076cc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d0  080076d0  000176d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080076d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000020  080076f4  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  080076f4  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fc8  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7b  00000000  00000000  00038018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0003ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003bca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023764  00000000  00000000  0003ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164b7  00000000  00000000  0006042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3c7a  00000000  00000000  000768e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a55d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004900  00000000  00000000  0014a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000020 	.word	0x20000020
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007674 	.word	0x08007674

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000024 	.word	0x20000024
 8000200:	08007674 	.word	0x08007674

08000204 <__aeabi_dmul>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000212:	bf1d      	ittte	ne
 8000214:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000218:	ea94 0f0c 	teqne	r4, ip
 800021c:	ea95 0f0c 	teqne	r5, ip
 8000220:	f000 f8de 	bleq	80003e0 <__aeabi_dmul+0x1dc>
 8000224:	442c      	add	r4, r5
 8000226:	ea81 0603 	eor.w	r6, r1, r3
 800022a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000232:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000236:	bf18      	it	ne
 8000238:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800023c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000244:	d038      	beq.n	80002b8 <__aeabi_dmul+0xb4>
 8000246:	fba0 ce02 	umull	ip, lr, r0, r2
 800024a:	f04f 0500 	mov.w	r5, #0
 800024e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000252:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000256:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025a:	f04f 0600 	mov.w	r6, #0
 800025e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000262:	f09c 0f00 	teq	ip, #0
 8000266:	bf18      	it	ne
 8000268:	f04e 0e01 	orrne.w	lr, lr, #1
 800026c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000270:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000274:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000278:	d204      	bcs.n	8000284 <__aeabi_dmul+0x80>
 800027a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027e:	416d      	adcs	r5, r5
 8000280:	eb46 0606 	adc.w	r6, r6, r6
 8000284:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000288:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800028c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000290:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000294:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000298:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800029c:	bf88      	it	hi
 800029e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a2:	d81e      	bhi.n	80002e2 <__aeabi_dmul+0xde>
 80002a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002bc:	ea46 0101 	orr.w	r1, r6, r1
 80002c0:	ea40 0002 	orr.w	r0, r0, r2
 80002c4:	ea81 0103 	eor.w	r1, r1, r3
 80002c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002cc:	bfc2      	ittt	gt
 80002ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d6:	bd70      	popgt	{r4, r5, r6, pc}
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f04f 0e00 	mov.w	lr, #0
 80002e0:	3c01      	subs	r4, #1
 80002e2:	f300 80ab 	bgt.w	800043c <__aeabi_dmul+0x238>
 80002e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ea:	bfde      	ittt	le
 80002ec:	2000      	movle	r0, #0
 80002ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f2:	bd70      	pople	{r4, r5, r6, pc}
 80002f4:	f1c4 0400 	rsb	r4, r4, #0
 80002f8:	3c20      	subs	r4, #32
 80002fa:	da35      	bge.n	8000368 <__aeabi_dmul+0x164>
 80002fc:	340c      	adds	r4, #12
 80002fe:	dc1b      	bgt.n	8000338 <__aeabi_dmul+0x134>
 8000300:	f104 0414 	add.w	r4, r4, #20
 8000304:	f1c4 0520 	rsb	r5, r4, #32
 8000308:	fa00 f305 	lsl.w	r3, r0, r5
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f205 	lsl.w	r2, r1, r5
 8000314:	ea40 0002 	orr.w	r0, r0, r2
 8000318:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800031c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	fa21 f604 	lsr.w	r6, r1, r4
 8000328:	eb42 0106 	adc.w	r1, r2, r6
 800032c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000330:	bf08      	it	eq
 8000332:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f1c4 040c 	rsb	r4, r4, #12
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f304 	lsl.w	r3, r0, r4
 8000344:	fa20 f005 	lsr.w	r0, r0, r5
 8000348:	fa01 f204 	lsl.w	r2, r1, r4
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000358:	f141 0100 	adc.w	r1, r1, #0
 800035c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000360:	bf08      	it	eq
 8000362:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000366:	bd70      	pop	{r4, r5, r6, pc}
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f205 	lsl.w	r2, r0, r5
 8000370:	ea4e 0e02 	orr.w	lr, lr, r2
 8000374:	fa20 f304 	lsr.w	r3, r0, r4
 8000378:	fa01 f205 	lsl.w	r2, r1, r5
 800037c:	ea43 0302 	orr.w	r3, r3, r2
 8000380:	fa21 f004 	lsr.w	r0, r1, r4
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	fa21 f204 	lsr.w	r2, r1, r4
 800038c:	ea20 0002 	bic.w	r0, r0, r2
 8000390:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000394:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000398:	bf08      	it	eq
 800039a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039e:	bd70      	pop	{r4, r5, r6, pc}
 80003a0:	f094 0f00 	teq	r4, #0
 80003a4:	d10f      	bne.n	80003c6 <__aeabi_dmul+0x1c2>
 80003a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003aa:	0040      	lsls	r0, r0, #1
 80003ac:	eb41 0101 	adc.w	r1, r1, r1
 80003b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b4:	bf08      	it	eq
 80003b6:	3c01      	subeq	r4, #1
 80003b8:	d0f7      	beq.n	80003aa <__aeabi_dmul+0x1a6>
 80003ba:	ea41 0106 	orr.w	r1, r1, r6
 80003be:	f095 0f00 	teq	r5, #0
 80003c2:	bf18      	it	ne
 80003c4:	4770      	bxne	lr
 80003c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	eb43 0303 	adc.w	r3, r3, r3
 80003d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d4:	bf08      	it	eq
 80003d6:	3d01      	subeq	r5, #1
 80003d8:	d0f7      	beq.n	80003ca <__aeabi_dmul+0x1c6>
 80003da:	ea43 0306 	orr.w	r3, r3, r6
 80003de:	4770      	bx	lr
 80003e0:	ea94 0f0c 	teq	r4, ip
 80003e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e8:	bf18      	it	ne
 80003ea:	ea95 0f0c 	teqne	r5, ip
 80003ee:	d00c      	beq.n	800040a <__aeabi_dmul+0x206>
 80003f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f4:	bf18      	it	ne
 80003f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fa:	d1d1      	bne.n	80003a0 <__aeabi_dmul+0x19c>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f04f 0000 	mov.w	r0, #0
 8000408:	bd70      	pop	{r4, r5, r6, pc}
 800040a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040e:	bf06      	itte	eq
 8000410:	4610      	moveq	r0, r2
 8000412:	4619      	moveq	r1, r3
 8000414:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000418:	d019      	beq.n	800044e <__aeabi_dmul+0x24a>
 800041a:	ea94 0f0c 	teq	r4, ip
 800041e:	d102      	bne.n	8000426 <__aeabi_dmul+0x222>
 8000420:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000424:	d113      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000426:	ea95 0f0c 	teq	r5, ip
 800042a:	d105      	bne.n	8000438 <__aeabi_dmul+0x234>
 800042c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000430:	bf1c      	itt	ne
 8000432:	4610      	movne	r0, r2
 8000434:	4619      	movne	r1, r3
 8000436:	d10a      	bne.n	800044e <__aeabi_dmul+0x24a>
 8000438:	ea81 0103 	eor.w	r1, r1, r3
 800043c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000440:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd70      	pop	{r4, r5, r6, pc}
 800044e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000452:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000456:	bd70      	pop	{r4, r5, r6, pc}

08000458 <__aeabi_drsub>:
 8000458:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800045c:	e002      	b.n	8000464 <__adddf3>
 800045e:	bf00      	nop

08000460 <__aeabi_dsub>:
 8000460:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000464 <__adddf3>:
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046e:	ea94 0f05 	teq	r4, r5
 8000472:	bf08      	it	eq
 8000474:	ea90 0f02 	teqeq	r0, r2
 8000478:	bf1f      	itttt	ne
 800047a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000482:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000486:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048a:	f000 80e2 	beq.w	8000652 <__adddf3+0x1ee>
 800048e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000492:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000496:	bfb8      	it	lt
 8000498:	426d      	neglt	r5, r5
 800049a:	dd0c      	ble.n	80004b6 <__adddf3+0x52>
 800049c:	442c      	add	r4, r5
 800049e:	ea80 0202 	eor.w	r2, r0, r2
 80004a2:	ea81 0303 	eor.w	r3, r1, r3
 80004a6:	ea82 0000 	eor.w	r0, r2, r0
 80004aa:	ea83 0101 	eor.w	r1, r3, r1
 80004ae:	ea80 0202 	eor.w	r2, r0, r2
 80004b2:	ea81 0303 	eor.w	r3, r1, r3
 80004b6:	2d36      	cmp	r5, #54	; 0x36
 80004b8:	bf88      	it	hi
 80004ba:	bd30      	pophi	{r4, r5, pc}
 80004bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x70>
 80004ce:	4240      	negs	r0, r0
 80004d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x84>
 80004e2:	4252      	negs	r2, r2
 80004e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e8:	ea94 0f05 	teq	r4, r5
 80004ec:	f000 80a7 	beq.w	800063e <__adddf3+0x1da>
 80004f0:	f1a4 0401 	sub.w	r4, r4, #1
 80004f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f8:	db0d      	blt.n	8000516 <__adddf3+0xb2>
 80004fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000502:	1880      	adds	r0, r0, r2
 8000504:	f141 0100 	adc.w	r1, r1, #0
 8000508:	fa03 f20e 	lsl.w	r2, r3, lr
 800050c:	1880      	adds	r0, r0, r2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	4159      	adcs	r1, r3
 8000514:	e00e      	b.n	8000534 <__adddf3+0xd0>
 8000516:	f1a5 0520 	sub.w	r5, r5, #32
 800051a:	f10e 0e20 	add.w	lr, lr, #32
 800051e:	2a01      	cmp	r2, #1
 8000520:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000524:	bf28      	it	cs
 8000526:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	18c0      	adds	r0, r0, r3
 8000530:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	d507      	bpl.n	800054a <__adddf3+0xe6>
 800053a:	f04f 0e00 	mov.w	lr, #0
 800053e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000542:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000546:	eb6e 0101 	sbc.w	r1, lr, r1
 800054a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054e:	d31b      	bcc.n	8000588 <__adddf3+0x124>
 8000550:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000554:	d30c      	bcc.n	8000570 <__adddf3+0x10c>
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	ea5f 0030 	movs.w	r0, r0, rrx
 800055c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000560:	f104 0401 	add.w	r4, r4, #1
 8000564:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000568:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800056c:	f080 809a 	bcs.w	80006a4 <__adddf3+0x240>
 8000570:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	ea41 0105 	orr.w	r1, r1, r5
 8000586:	bd30      	pop	{r4, r5, pc}
 8000588:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800058c:	4140      	adcs	r0, r0
 800058e:	eb41 0101 	adc.w	r1, r1, r1
 8000592:	3c01      	subs	r4, #1
 8000594:	bf28      	it	cs
 8000596:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059a:	d2e9      	bcs.n	8000570 <__adddf3+0x10c>
 800059c:	f091 0f00 	teq	r1, #0
 80005a0:	bf04      	itt	eq
 80005a2:	4601      	moveq	r1, r0
 80005a4:	2000      	moveq	r0, #0
 80005a6:	fab1 f381 	clz	r3, r1
 80005aa:	bf08      	it	eq
 80005ac:	3320      	addeq	r3, #32
 80005ae:	f1a3 030b 	sub.w	r3, r3, #11
 80005b2:	f1b3 0220 	subs.w	r2, r3, #32
 80005b6:	da0c      	bge.n	80005d2 <__adddf3+0x16e>
 80005b8:	320c      	adds	r2, #12
 80005ba:	dd08      	ble.n	80005ce <__adddf3+0x16a>
 80005bc:	f102 0c14 	add.w	ip, r2, #20
 80005c0:	f1c2 020c 	rsb	r2, r2, #12
 80005c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c8:	fa21 f102 	lsr.w	r1, r1, r2
 80005cc:	e00c      	b.n	80005e8 <__adddf3+0x184>
 80005ce:	f102 0214 	add.w	r2, r2, #20
 80005d2:	bfd8      	it	le
 80005d4:	f1c2 0c20 	rsble	ip, r2, #32
 80005d8:	fa01 f102 	lsl.w	r1, r1, r2
 80005dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e0:	bfdc      	itt	le
 80005e2:	ea41 010c 	orrle.w	r1, r1, ip
 80005e6:	4090      	lslle	r0, r2
 80005e8:	1ae4      	subs	r4, r4, r3
 80005ea:	bfa2      	ittt	ge
 80005ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f0:	4329      	orrge	r1, r5
 80005f2:	bd30      	popge	{r4, r5, pc}
 80005f4:	ea6f 0404 	mvn.w	r4, r4
 80005f8:	3c1f      	subs	r4, #31
 80005fa:	da1c      	bge.n	8000636 <__adddf3+0x1d2>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc0e      	bgt.n	800061e <__adddf3+0x1ba>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0220 	rsb	r2, r4, #32
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f302 	lsl.w	r3, r1, r2
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	fa21 f304 	lsr.w	r3, r1, r4
 8000618:	ea45 0103 	orr.w	r1, r5, r3
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	f1c4 040c 	rsb	r4, r4, #12
 8000622:	f1c4 0220 	rsb	r2, r4, #32
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 f304 	lsl.w	r3, r1, r4
 800062e:	ea40 0003 	orr.w	r0, r0, r3
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	fa21 f004 	lsr.w	r0, r1, r4
 800063a:	4629      	mov	r1, r5
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f094 0f00 	teq	r4, #0
 8000642:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000646:	bf06      	itte	eq
 8000648:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800064c:	3401      	addeq	r4, #1
 800064e:	3d01      	subne	r5, #1
 8000650:	e74e      	b.n	80004f0 <__adddf3+0x8c>
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf18      	it	ne
 8000658:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800065c:	d029      	beq.n	80006b2 <__adddf3+0x24e>
 800065e:	ea94 0f05 	teq	r4, r5
 8000662:	bf08      	it	eq
 8000664:	ea90 0f02 	teqeq	r0, r2
 8000668:	d005      	beq.n	8000676 <__adddf3+0x212>
 800066a:	ea54 0c00 	orrs.w	ip, r4, r0
 800066e:	bf04      	itt	eq
 8000670:	4619      	moveq	r1, r3
 8000672:	4610      	moveq	r0, r2
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea91 0f03 	teq	r1, r3
 800067a:	bf1e      	ittt	ne
 800067c:	2100      	movne	r1, #0
 800067e:	2000      	movne	r0, #0
 8000680:	bd30      	popne	{r4, r5, pc}
 8000682:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000686:	d105      	bne.n	8000694 <__adddf3+0x230>
 8000688:	0040      	lsls	r0, r0, #1
 800068a:	4149      	adcs	r1, r1
 800068c:	bf28      	it	cs
 800068e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000692:	bd30      	pop	{r4, r5, pc}
 8000694:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000698:	bf3c      	itt	cc
 800069a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069e:	bd30      	popcc	{r4, r5, pc}
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006ac:	f04f 0000 	mov.w	r0, #0
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b6:	bf1a      	itte	ne
 80006b8:	4619      	movne	r1, r3
 80006ba:	4610      	movne	r0, r2
 80006bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c0:	bf1c      	itt	ne
 80006c2:	460b      	movne	r3, r1
 80006c4:	4602      	movne	r2, r0
 80006c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ca:	bf06      	itte	eq
 80006cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d0:	ea91 0f03 	teqeq	r1, r3
 80006d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	bf00      	nop

080006dc <__aeabi_ui2d>:
 80006dc:	f090 0f00 	teq	r0, #0
 80006e0:	bf04      	itt	eq
 80006e2:	2100      	moveq	r1, #0
 80006e4:	4770      	bxeq	lr
 80006e6:	b530      	push	{r4, r5, lr}
 80006e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f0:	f04f 0500 	mov.w	r5, #0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e750      	b.n	800059c <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_i2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e73e      	b.n	800059c <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_f2d>:
 8000720:	0042      	lsls	r2, r0, #1
 8000722:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000726:	ea4f 0131 	mov.w	r1, r1, rrx
 800072a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072e:	bf1f      	itttt	ne
 8000730:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000734:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000738:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800073c:	4770      	bxne	lr
 800073e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000742:	bf08      	it	eq
 8000744:	4770      	bxeq	lr
 8000746:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074a:	bf04      	itt	eq
 800074c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800075c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000760:	e71c      	b.n	800059c <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_ul2d>:
 8000764:	ea50 0201 	orrs.w	r2, r0, r1
 8000768:	bf08      	it	eq
 800076a:	4770      	bxeq	lr
 800076c:	b530      	push	{r4, r5, lr}
 800076e:	f04f 0500 	mov.w	r5, #0
 8000772:	e00a      	b.n	800078a <__aeabi_l2d+0x16>

08000774 <__aeabi_l2d>:
 8000774:	ea50 0201 	orrs.w	r2, r0, r1
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	b530      	push	{r4, r5, lr}
 800077e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000782:	d502      	bpl.n	800078a <__aeabi_l2d+0x16>
 8000784:	4240      	negs	r0, r0
 8000786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000792:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000796:	f43f aed8 	beq.w	800054a <__adddf3+0xe6>
 800079a:	f04f 0203 	mov.w	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007aa:	bf18      	it	ne
 80007ac:	3203      	addne	r2, #3
 80007ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b2:	f1c2 0320 	rsb	r3, r2, #32
 80007b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ba:	fa20 f002 	lsr.w	r0, r0, r2
 80007be:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c2:	ea40 000e 	orr.w	r0, r0, lr
 80007c6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ca:	4414      	add	r4, r2
 80007cc:	e6bd      	b.n	800054a <__adddf3+0xe6>
 80007ce:	bf00      	nop

080007d0 <__aeabi_d2iz>:
 80007d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007d8:	d215      	bcs.n	8000806 <__aeabi_d2iz+0x36>
 80007da:	d511      	bpl.n	8000800 <__aeabi_d2iz+0x30>
 80007dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e4:	d912      	bls.n	800080c <__aeabi_d2iz+0x3c>
 80007e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	bf18      	it	ne
 80007fc:	4240      	negne	r0, r0
 80007fe:	4770      	bx	lr
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	4770      	bx	lr
 8000806:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800080a:	d105      	bne.n	8000818 <__aeabi_d2iz+0x48>
 800080c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000810:	bf08      	it	eq
 8000812:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000816:	4770      	bx	lr
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_uldivmod>:
 8000820:	b953      	cbnz	r3, 8000838 <__aeabi_uldivmod+0x18>
 8000822:	b94a      	cbnz	r2, 8000838 <__aeabi_uldivmod+0x18>
 8000824:	2900      	cmp	r1, #0
 8000826:	bf08      	it	eq
 8000828:	2800      	cmpeq	r0, #0
 800082a:	bf1c      	itt	ne
 800082c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000830:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000834:	f000 b96e 	b.w	8000b14 <__aeabi_idiv0>
 8000838:	f1ad 0c08 	sub.w	ip, sp, #8
 800083c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000840:	f000 f806 	bl	8000850 <__udivmoddi4>
 8000844:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084c:	b004      	add	sp, #16
 800084e:	4770      	bx	lr

08000850 <__udivmoddi4>:
 8000850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000854:	9d08      	ldr	r5, [sp, #32]
 8000856:	4604      	mov	r4, r0
 8000858:	468c      	mov	ip, r1
 800085a:	2b00      	cmp	r3, #0
 800085c:	f040 8083 	bne.w	8000966 <__udivmoddi4+0x116>
 8000860:	428a      	cmp	r2, r1
 8000862:	4617      	mov	r7, r2
 8000864:	d947      	bls.n	80008f6 <__udivmoddi4+0xa6>
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	b142      	cbz	r2, 800087e <__udivmoddi4+0x2e>
 800086c:	f1c2 0020 	rsb	r0, r2, #32
 8000870:	fa24 f000 	lsr.w	r0, r4, r0
 8000874:	4091      	lsls	r1, r2
 8000876:	4097      	lsls	r7, r2
 8000878:	ea40 0c01 	orr.w	ip, r0, r1
 800087c:	4094      	lsls	r4, r2
 800087e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000882:	0c23      	lsrs	r3, r4, #16
 8000884:	fbbc f6f8 	udiv	r6, ip, r8
 8000888:	fa1f fe87 	uxth.w	lr, r7
 800088c:	fb08 c116 	mls	r1, r8, r6, ip
 8000890:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000894:	fb06 f10e 	mul.w	r1, r6, lr
 8000898:	4299      	cmp	r1, r3
 800089a:	d909      	bls.n	80008b0 <__udivmoddi4+0x60>
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008a2:	f080 8119 	bcs.w	8000ad8 <__udivmoddi4+0x288>
 80008a6:	4299      	cmp	r1, r3
 80008a8:	f240 8116 	bls.w	8000ad8 <__udivmoddi4+0x288>
 80008ac:	3e02      	subs	r6, #2
 80008ae:	443b      	add	r3, r7
 80008b0:	1a5b      	subs	r3, r3, r1
 80008b2:	b2a4      	uxth	r4, r4
 80008b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80008b8:	fb08 3310 	mls	r3, r8, r0, r3
 80008bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008c4:	45a6      	cmp	lr, r4
 80008c6:	d909      	bls.n	80008dc <__udivmoddi4+0x8c>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008ce:	f080 8105 	bcs.w	8000adc <__udivmoddi4+0x28c>
 80008d2:	45a6      	cmp	lr, r4
 80008d4:	f240 8102 	bls.w	8000adc <__udivmoddi4+0x28c>
 80008d8:	3802      	subs	r0, #2
 80008da:	443c      	add	r4, r7
 80008dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008e0:	eba4 040e 	sub.w	r4, r4, lr
 80008e4:	2600      	movs	r6, #0
 80008e6:	b11d      	cbz	r5, 80008f0 <__udivmoddi4+0xa0>
 80008e8:	40d4      	lsrs	r4, r2
 80008ea:	2300      	movs	r3, #0
 80008ec:	e9c5 4300 	strd	r4, r3, [r5]
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	b902      	cbnz	r2, 80008fa <__udivmoddi4+0xaa>
 80008f8:	deff      	udf	#255	; 0xff
 80008fa:	fab2 f282 	clz	r2, r2
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d150      	bne.n	80009a4 <__udivmoddi4+0x154>
 8000902:	1bcb      	subs	r3, r1, r7
 8000904:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000908:	fa1f f887 	uxth.w	r8, r7
 800090c:	2601      	movs	r6, #1
 800090e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000912:	0c21      	lsrs	r1, r4, #16
 8000914:	fb0e 331c 	mls	r3, lr, ip, r3
 8000918:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800091c:	fb08 f30c 	mul.w	r3, r8, ip
 8000920:	428b      	cmp	r3, r1
 8000922:	d907      	bls.n	8000934 <__udivmoddi4+0xe4>
 8000924:	1879      	adds	r1, r7, r1
 8000926:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800092a:	d202      	bcs.n	8000932 <__udivmoddi4+0xe2>
 800092c:	428b      	cmp	r3, r1
 800092e:	f200 80e9 	bhi.w	8000b04 <__udivmoddi4+0x2b4>
 8000932:	4684      	mov	ip, r0
 8000934:	1ac9      	subs	r1, r1, r3
 8000936:	b2a3      	uxth	r3, r4
 8000938:	fbb1 f0fe 	udiv	r0, r1, lr
 800093c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000940:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000944:	fb08 f800 	mul.w	r8, r8, r0
 8000948:	45a0      	cmp	r8, r4
 800094a:	d907      	bls.n	800095c <__udivmoddi4+0x10c>
 800094c:	193c      	adds	r4, r7, r4
 800094e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x10a>
 8000954:	45a0      	cmp	r8, r4
 8000956:	f200 80d9 	bhi.w	8000b0c <__udivmoddi4+0x2bc>
 800095a:	4618      	mov	r0, r3
 800095c:	eba4 0408 	sub.w	r4, r4, r8
 8000960:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000964:	e7bf      	b.n	80008e6 <__udivmoddi4+0x96>
 8000966:	428b      	cmp	r3, r1
 8000968:	d909      	bls.n	800097e <__udivmoddi4+0x12e>
 800096a:	2d00      	cmp	r5, #0
 800096c:	f000 80b1 	beq.w	8000ad2 <__udivmoddi4+0x282>
 8000970:	2600      	movs	r6, #0
 8000972:	e9c5 0100 	strd	r0, r1, [r5]
 8000976:	4630      	mov	r0, r6
 8000978:	4631      	mov	r1, r6
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	fab3 f683 	clz	r6, r3
 8000982:	2e00      	cmp	r6, #0
 8000984:	d14a      	bne.n	8000a1c <__udivmoddi4+0x1cc>
 8000986:	428b      	cmp	r3, r1
 8000988:	d302      	bcc.n	8000990 <__udivmoddi4+0x140>
 800098a:	4282      	cmp	r2, r0
 800098c:	f200 80b8 	bhi.w	8000b00 <__udivmoddi4+0x2b0>
 8000990:	1a84      	subs	r4, r0, r2
 8000992:	eb61 0103 	sbc.w	r1, r1, r3
 8000996:	2001      	movs	r0, #1
 8000998:	468c      	mov	ip, r1
 800099a:	2d00      	cmp	r5, #0
 800099c:	d0a8      	beq.n	80008f0 <__udivmoddi4+0xa0>
 800099e:	e9c5 4c00 	strd	r4, ip, [r5]
 80009a2:	e7a5      	b.n	80008f0 <__udivmoddi4+0xa0>
 80009a4:	f1c2 0320 	rsb	r3, r2, #32
 80009a8:	fa20 f603 	lsr.w	r6, r0, r3
 80009ac:	4097      	lsls	r7, r2
 80009ae:	fa01 f002 	lsl.w	r0, r1, r2
 80009b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b6:	40d9      	lsrs	r1, r3
 80009b8:	4330      	orrs	r0, r6
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80009c0:	fa1f f887 	uxth.w	r8, r7
 80009c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80009c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009cc:	fb06 f108 	mul.w	r1, r6, r8
 80009d0:	4299      	cmp	r1, r3
 80009d2:	fa04 f402 	lsl.w	r4, r4, r2
 80009d6:	d909      	bls.n	80009ec <__udivmoddi4+0x19c>
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80009de:	f080 808d 	bcs.w	8000afc <__udivmoddi4+0x2ac>
 80009e2:	4299      	cmp	r1, r3
 80009e4:	f240 808a 	bls.w	8000afc <__udivmoddi4+0x2ac>
 80009e8:	3e02      	subs	r6, #2
 80009ea:	443b      	add	r3, r7
 80009ec:	1a5b      	subs	r3, r3, r1
 80009ee:	b281      	uxth	r1, r0
 80009f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80009f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80009f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009fc:	fb00 f308 	mul.w	r3, r0, r8
 8000a00:	428b      	cmp	r3, r1
 8000a02:	d907      	bls.n	8000a14 <__udivmoddi4+0x1c4>
 8000a04:	1879      	adds	r1, r7, r1
 8000a06:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a0a:	d273      	bcs.n	8000af4 <__udivmoddi4+0x2a4>
 8000a0c:	428b      	cmp	r3, r1
 8000a0e:	d971      	bls.n	8000af4 <__udivmoddi4+0x2a4>
 8000a10:	3802      	subs	r0, #2
 8000a12:	4439      	add	r1, r7
 8000a14:	1acb      	subs	r3, r1, r3
 8000a16:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a1a:	e778      	b.n	800090e <__udivmoddi4+0xbe>
 8000a1c:	f1c6 0c20 	rsb	ip, r6, #32
 8000a20:	fa03 f406 	lsl.w	r4, r3, r6
 8000a24:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a28:	431c      	orrs	r4, r3
 8000a2a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a32:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a36:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a3a:	431f      	orrs	r7, r3
 8000a3c:	0c3b      	lsrs	r3, r7, #16
 8000a3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a42:	fa1f f884 	uxth.w	r8, r4
 8000a46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a4e:	fb09 fa08 	mul.w	sl, r9, r8
 8000a52:	458a      	cmp	sl, r1
 8000a54:	fa02 f206 	lsl.w	r2, r2, r6
 8000a58:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x220>
 8000a5e:	1861      	adds	r1, r4, r1
 8000a60:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a64:	d248      	bcs.n	8000af8 <__udivmoddi4+0x2a8>
 8000a66:	458a      	cmp	sl, r1
 8000a68:	d946      	bls.n	8000af8 <__udivmoddi4+0x2a8>
 8000a6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000a6e:	4421      	add	r1, r4
 8000a70:	eba1 010a 	sub.w	r1, r1, sl
 8000a74:	b2bf      	uxth	r7, r7
 8000a76:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a7a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a7e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a82:	fb00 f808 	mul.w	r8, r0, r8
 8000a86:	45b8      	cmp	r8, r7
 8000a88:	d907      	bls.n	8000a9a <__udivmoddi4+0x24a>
 8000a8a:	19e7      	adds	r7, r4, r7
 8000a8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a90:	d22e      	bcs.n	8000af0 <__udivmoddi4+0x2a0>
 8000a92:	45b8      	cmp	r8, r7
 8000a94:	d92c      	bls.n	8000af0 <__udivmoddi4+0x2a0>
 8000a96:	3802      	subs	r0, #2
 8000a98:	4427      	add	r7, r4
 8000a9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a9e:	eba7 0708 	sub.w	r7, r7, r8
 8000aa2:	fba0 8902 	umull	r8, r9, r0, r2
 8000aa6:	454f      	cmp	r7, r9
 8000aa8:	46c6      	mov	lr, r8
 8000aaa:	4649      	mov	r1, r9
 8000aac:	d31a      	bcc.n	8000ae4 <__udivmoddi4+0x294>
 8000aae:	d017      	beq.n	8000ae0 <__udivmoddi4+0x290>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x27a>
 8000ab2:	ebb3 020e 	subs.w	r2, r3, lr
 8000ab6:	eb67 0701 	sbc.w	r7, r7, r1
 8000aba:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000abe:	40f2      	lsrs	r2, r6
 8000ac0:	ea4c 0202 	orr.w	r2, ip, r2
 8000ac4:	40f7      	lsrs	r7, r6
 8000ac6:	e9c5 2700 	strd	r2, r7, [r5]
 8000aca:	2600      	movs	r6, #0
 8000acc:	4631      	mov	r1, r6
 8000ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad2:	462e      	mov	r6, r5
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	e70b      	b.n	80008f0 <__udivmoddi4+0xa0>
 8000ad8:	4606      	mov	r6, r0
 8000ada:	e6e9      	b.n	80008b0 <__udivmoddi4+0x60>
 8000adc:	4618      	mov	r0, r3
 8000ade:	e6fd      	b.n	80008dc <__udivmoddi4+0x8c>
 8000ae0:	4543      	cmp	r3, r8
 8000ae2:	d2e5      	bcs.n	8000ab0 <__udivmoddi4+0x260>
 8000ae4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ae8:	eb69 0104 	sbc.w	r1, r9, r4
 8000aec:	3801      	subs	r0, #1
 8000aee:	e7df      	b.n	8000ab0 <__udivmoddi4+0x260>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e7d2      	b.n	8000a9a <__udivmoddi4+0x24a>
 8000af4:	4660      	mov	r0, ip
 8000af6:	e78d      	b.n	8000a14 <__udivmoddi4+0x1c4>
 8000af8:	4681      	mov	r9, r0
 8000afa:	e7b9      	b.n	8000a70 <__udivmoddi4+0x220>
 8000afc:	4666      	mov	r6, ip
 8000afe:	e775      	b.n	80009ec <__udivmoddi4+0x19c>
 8000b00:	4630      	mov	r0, r6
 8000b02:	e74a      	b.n	800099a <__udivmoddi4+0x14a>
 8000b04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b08:	4439      	add	r1, r7
 8000b0a:	e713      	b.n	8000934 <__udivmoddi4+0xe4>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	443c      	add	r4, r7
 8000b10:	e724      	b.n	800095c <__udivmoddi4+0x10c>
 8000b12:	bf00      	nop

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <appInit>:
static int Encoder_Num_3rd = 1;
static int Encoder_Num_JP = 1;
static bool _is_JPC = false;
static int JPC_stations[4] = {0};

int appInit(void){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	Lottery_1st2nd_SetSpeed(0);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 fa9b 	bl	8001058 <Lottery_1st2nd_SetSpeed>
	Lottery_3rd_SetSpeed(0);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f000 fad0 	bl	80010c8 <Lottery_3rd_SetSpeed>
	Lottery_JP_SetSpeed(0,0);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f000 fb0c 	bl	8001148 <Lottery_JP_SetSpeed>
	return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <appTask>:

int appTask(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	Encoder_1st();
 8000b3e:	f000 f8ed 	bl	8000d1c <Encoder_1st>
	Encoder_2nd();
 8000b42:	f000 f953 	bl	8000dec <Encoder_2nd>
	Encoder_3rd();
 8000b46:	f000 f9b9 	bl	8000ebc <Encoder_3rd>
	Encoder_JP();
 8000b4a:	f000 fa1f 	bl	8000f8c <Encoder_JP>
	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 8000b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b52:	4867      	ldr	r0, [pc, #412]	; (8000cf0 <appTask+0x1b8>)
 8000b54:	f001 f9db 	bl	8001f0e <D_GPIO_Read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d011      	beq.n	8000b88 <appTask+0x50>
		IO_SET_USERLED();
 8000b64:	2120      	movs	r1, #32
 8000b66:	4863      	ldr	r0, [pc, #396]	; (8000cf4 <appTask+0x1bc>)
 8000b68:	f001 f9b1 	bl	8001ece <D_GPIO_Set>
		//IO_SET_BLDC2_ENA();
		//D_PWM_Set(BLDC1,50);
		//D_PWM_Set(BLDC2,50);
		//D_PWM_Set(BLDC3,300);
		//IO_SET_JP_LED();
		Lottery_1st2nd_SetSpeed(500);
 8000b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b70:	f000 fa72 	bl	8001058 <Lottery_1st2nd_SetSpeed>
		Lottery_3rd_SetSpeed(800);
 8000b74:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b78:	f000 faa6 	bl	80010c8 <Lottery_3rd_SetSpeed>
		Lottery_JP_SetSpeed(300,0);
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b82:	f000 fae1 	bl	8001148 <Lottery_JP_SetSpeed>
 8000b86:	e00e      	b.n	8000ba6 <appTask+0x6e>

		//JP_Lift_Down();
	}else{
		IO_RESET_USERLED();
 8000b88:	2120      	movs	r1, #32
 8000b8a:	485a      	ldr	r0, [pc, #360]	; (8000cf4 <appTask+0x1bc>)
 8000b8c:	f001 f9af 	bl	8001eee <D_GPIO_Reset>
		//IO_RESET_BLDC3_ENA();
		//D_PWM_Set(BLDC1,300);
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//IO_RESET_JP_LED();
		Lottery_1st2nd_SetSpeed(100);
 8000b90:	2064      	movs	r0, #100	; 0x64
 8000b92:	f000 fa61 	bl	8001058 <Lottery_1st2nd_SetSpeed>
		Lottery_3rd_SetSpeed(300);
 8000b96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b9a:	f000 fa95 	bl	80010c8 <Lottery_3rd_SetSpeed>
		Lottery_JP_SetSpeed(10,0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	200a      	movs	r0, #10
 8000ba2:	f000 fad1 	bl	8001148 <Lottery_JP_SetSpeed>
	}else{
		IO_SET_JP_LED();
	}
	*/

	int16_t debug_bits = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_1ST_HOME() << 5);
 8000bae:	2180      	movs	r1, #128	; 0x80
 8000bb0:	4851      	ldr	r0, [pc, #324]	; (8000cf8 <appTask+0x1c0>)
 8000bb2:	f001 f9ac 	bl	8001f0e <D_GPIO_Read>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	015b      	lsls	r3, r3, #5
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_1ST_ENC() << 4);
 8000bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc6:	484b      	ldr	r0, [pc, #300]	; (8000cf4 <appTask+0x1bc>)
 8000bc8:	f001 f9a1 	bl	8001f0e <D_GPIO_Read>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_2ND_HOME() << 3);
 8000bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bdc:	4844      	ldr	r0, [pc, #272]	; (8000cf0 <appTask+0x1b8>)
 8000bde:	f001 f996 	bl	8001f0e <D_GPIO_Read>
 8000be2:	4603      	mov	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_2ND_ENC() << 2);
 8000bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf2:	483f      	ldr	r0, [pc, #252]	; (8000cf0 <appTask+0x1b8>)
 8000bf4:	f001 f98b 	bl	8001f0e <D_GPIO_Read>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	b21a      	sxth	r2, r3
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_3RD_HOME() << 1);
 8000c04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c08:	4839      	ldr	r0, [pc, #228]	; (8000cf0 <appTask+0x1b8>)
 8000c0a:	f001 f980 	bl	8001f0e <D_GPIO_Read>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_3RD_ENC() << 0);
 8000c1a:	2104      	movs	r1, #4
 8000c1c:	4837      	ldr	r0, [pc, #220]	; (8000cfc <appTask+0x1c4>)
 8000c1e:	f001 f976 	bl	8001f0e <D_GPIO_Read>
 8000c22:	4603      	mov	r3, r0
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_HOME() << 13);
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	4831      	ldr	r0, [pc, #196]	; (8000cf4 <appTask+0x1bc>)
 8000c30:	f001 f96d 	bl	8001f0e <D_GPIO_Read>
 8000c34:	4603      	mov	r3, r0
 8000c36:	035b      	lsls	r3, r3, #13
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_ENC() << 12);
 8000c40:	2110      	movs	r1, #16
 8000c42:	482c      	ldr	r0, [pc, #176]	; (8000cf4 <appTask+0x1bc>)
 8000c44:	f001 f963 	bl	8001f0e <D_GPIO_Read>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	031b      	lsls	r3, r3, #12
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_FRONT() << 11);
 8000c54:	2102      	movs	r1, #2
 8000c56:	4826      	ldr	r0, [pc, #152]	; (8000cf0 <appTask+0x1b8>)
 8000c58:	f001 f959 	bl	8001f0e <D_GPIO_Read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	02db      	lsls	r3, r3, #11
 8000c60:	b21a      	sxth	r2, r3
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_REAR() << 10);
 8000c68:	2101      	movs	r1, #1
 8000c6a:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <appTask+0x1b8>)
 8000c6c:	f001 f94f 	bl	8001f0e <D_GPIO_Read>
 8000c70:	4603      	mov	r3, r0
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_UPPER() << 9);
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <appTask+0x1b8>)
 8000c80:	f001 f945 	bl	8001f0e <D_GPIO_Read>
 8000c84:	4603      	mov	r3, r0
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	b21a      	sxth	r2, r3
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_LOWER() << 8);
 8000c90:	2104      	movs	r1, #4
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <appTask+0x1b8>)
 8000c94:	f001 f93b 	bl	8001f0e <D_GPIO_Read>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	80fb      	strh	r3, [r7, #6]
	D_Mess_printf("\033[1;1H");
 8000ca4:	4816      	ldr	r0, [pc, #88]	; (8000d00 <appTask+0x1c8>)
 8000ca6:	f001 f947 	bl	8001f38 <D_Mess_printf>
	D_Mess_printf("%016b\n", debug_bits);
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4814      	ldr	r0, [pc, #80]	; (8000d04 <appTask+0x1cc>)
 8000cb2:	f001 f941 	bl	8001f38 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_1st);
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <appTask+0x1d0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <appTask+0x1d4>)
 8000cbe:	f001 f93b 	bl	8001f38 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_2nd);
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <appTask+0x1d8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4810      	ldr	r0, [pc, #64]	; (8000d0c <appTask+0x1d4>)
 8000cca:	f001 f935 	bl	8001f38 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_3rd);
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <appTask+0x1dc>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <appTask+0x1d4>)
 8000cd6:	f001 f92f 	bl	8001f38 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_JP);
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <appTask+0x1e0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480a      	ldr	r0, [pc, #40]	; (8000d0c <appTask+0x1d4>)
 8000ce2:	f001 f929 	bl	8001f38 <D_Mess_printf>


	return 0;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40020c00 	.word	0x40020c00
 8000d00:	0800768c 	.word	0x0800768c
 8000d04:	08007694 	.word	0x08007694
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	0800769c 	.word	0x0800769c
 8000d10:	20000004 	.word	0x20000004
 8000d14:	20000008 	.word	0x20000008
 8000d18:	2000000c 	.word	0x2000000c

08000d1c <Encoder_1st>:
		break;
	}
	RecentTime = G_System_counter;
}

static int Encoder_1st(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_1ST_ENC();
 8000d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d26:	482a      	ldr	r0, [pc, #168]	; (8000dd0 <Encoder_1st+0xb4>)
 8000d28:	f001 f8f1 	bl	8001f0e <D_GPIO_Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_1ST_HOME();
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	4828      	ldr	r0, [pc, #160]	; (8000dd4 <Encoder_1st+0xb8>)
 8000d34:	f001 f8eb 	bl	8001f0e <D_GPIO_Read>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 8000d3c:	4b26      	ldr	r3, [pc, #152]	; (8000dd8 <Encoder_1st+0xbc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d005      	beq.n	8000d52 <Encoder_1st+0x36>
		enc_change_count++;
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <Encoder_1st+0xc0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <Encoder_1st+0xc0>)
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e002      	b.n	8000d58 <Encoder_1st+0x3c>
	}else{
		enc_change_count = 0;
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <Encoder_1st+0xc0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <Encoder_1st+0xc0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	dd0d      	ble.n	8000d7c <Encoder_1st+0x60>
		recent_enc_state = enc_state;
 8000d60:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <Encoder_1st+0xbc>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <Encoder_1st+0xc0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d104      	bne.n	8000d7c <Encoder_1st+0x60>
			Encoder_Num_1st++;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <Encoder_1st+0xc4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <Encoder_1st+0xc4>)
 8000d7a:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <Encoder_1st+0xc8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	683a      	ldr	r2, [r7, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d005      	beq.n	8000d92 <Encoder_1st+0x76>
		home_change_count++;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <Encoder_1st+0xcc>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <Encoder_1st+0xcc>)
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e002      	b.n	8000d98 <Encoder_1st+0x7c>
	}else{
		home_change_count = 0;
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <Encoder_1st+0xcc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <Encoder_1st+0xcc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	dd0b      	ble.n	8000db8 <Encoder_1st+0x9c>
		recent_home_state = home_state;
 8000da0:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <Encoder_1st+0xc8>)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <Encoder_1st+0xcc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d102      	bne.n	8000db8 <Encoder_1st+0x9c>
			Encoder_Num_1st = 24;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <Encoder_1st+0xc4>)
 8000db4:	2218      	movs	r2, #24
 8000db6:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_1st > 24){
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <Encoder_1st+0xc4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b18      	cmp	r3, #24
 8000dbe:	dd02      	ble.n	8000dc6 <Encoder_1st+0xaa>
		Encoder_Num_1st = 1;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <Encoder_1st+0xc4>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
	}
}
 8000dc6:	bf00      	nop
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020400 	.word	0x40020400
 8000dd8:	2000003c 	.word	0x2000003c
 8000ddc:	20000040 	.word	0x20000040
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000044 	.word	0x20000044
 8000de8:	20000048 	.word	0x20000048

08000dec <Encoder_2nd>:

static int Encoder_2nd(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_2ND_ENC();
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <Encoder_2nd+0xb8>)
 8000df8:	f001 f889 	bl	8001f0e <D_GPIO_Read>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_2ND_HOME();
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	4827      	ldr	r0, [pc, #156]	; (8000ea4 <Encoder_2nd+0xb8>)
 8000e06:	f001 f882 	bl	8001f0e <D_GPIO_Read>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <Encoder_2nd+0xbc>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d005      	beq.n	8000e24 <Encoder_2nd+0x38>
		enc_change_count++;
 8000e18:	4b24      	ldr	r3, [pc, #144]	; (8000eac <Encoder_2nd+0xc0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	4a23      	ldr	r2, [pc, #140]	; (8000eac <Encoder_2nd+0xc0>)
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	e002      	b.n	8000e2a <Encoder_2nd+0x3e>
	}else{
		enc_change_count = 0;
 8000e24:	4b21      	ldr	r3, [pc, #132]	; (8000eac <Encoder_2nd+0xc0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <Encoder_2nd+0xc0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	dd0d      	ble.n	8000e4e <Encoder_2nd+0x62>
		recent_enc_state = enc_state;
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <Encoder_2nd+0xbc>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <Encoder_2nd+0xc0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d104      	bne.n	8000e4e <Encoder_2nd+0x62>
			Encoder_Num_2nd++;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <Encoder_2nd+0xc4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <Encoder_2nd+0xc4>)
 8000e4c:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <Encoder_2nd+0xc8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	683a      	ldr	r2, [r7, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d005      	beq.n	8000e64 <Encoder_2nd+0x78>
		home_change_count++;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <Encoder_2nd+0xcc>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <Encoder_2nd+0xcc>)
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e002      	b.n	8000e6a <Encoder_2nd+0x7e>
	}else{
		home_change_count = 0;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <Encoder_2nd+0xcc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <Encoder_2nd+0xcc>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	dd0b      	ble.n	8000e8a <Encoder_2nd+0x9e>
		recent_home_state = home_state;
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <Encoder_2nd+0xc8>)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <Encoder_2nd+0xcc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d102      	bne.n	8000e8a <Encoder_2nd+0x9e>
			Encoder_Num_2nd = 15;
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <Encoder_2nd+0xc4>)
 8000e86:	220f      	movs	r2, #15
 8000e88:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_2nd > 15){
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <Encoder_2nd+0xc4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b0f      	cmp	r3, #15
 8000e90:	dd02      	ble.n	8000e98 <Encoder_2nd+0xac>
		Encoder_Num_2nd = 1;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <Encoder_2nd+0xc4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
	}
}
 8000e98:	bf00      	nop
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	2000004c 	.word	0x2000004c
 8000eac:	20000050 	.word	0x20000050
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	20000054 	.word	0x20000054
 8000eb8:	20000058 	.word	0x20000058

08000ebc <Encoder_3rd>:

static int Encoder_3rd(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_3RD_ENC();
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	482a      	ldr	r0, [pc, #168]	; (8000f70 <Encoder_3rd+0xb4>)
 8000ec6:	f001 f822 	bl	8001f0e <D_GPIO_Read>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_3RD_HOME();
 8000ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed2:	4828      	ldr	r0, [pc, #160]	; (8000f74 <Encoder_3rd+0xb8>)
 8000ed4:	f001 f81b 	bl	8001f0e <D_GPIO_Read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <Encoder_3rd+0xbc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d005      	beq.n	8000ef2 <Encoder_3rd+0x36>
		enc_change_count++;
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <Encoder_3rd+0xc0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <Encoder_3rd+0xc0>)
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e002      	b.n	8000ef8 <Encoder_3rd+0x3c>
	}else{
		enc_change_count = 0;
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <Encoder_3rd+0xc0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8000ef8:	4b20      	ldr	r3, [pc, #128]	; (8000f7c <Encoder_3rd+0xc0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	dd0d      	ble.n	8000f1c <Encoder_3rd+0x60>
		recent_enc_state = enc_state;
 8000f00:	4a1d      	ldr	r2, [pc, #116]	; (8000f78 <Encoder_3rd+0xbc>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <Encoder_3rd+0xc0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d104      	bne.n	8000f1c <Encoder_3rd+0x60>
			Encoder_Num_3rd++;
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <Encoder_3rd+0xc4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <Encoder_3rd+0xc4>)
 8000f1a:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <Encoder_3rd+0xc8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d005      	beq.n	8000f32 <Encoder_3rd+0x76>
		home_change_count++;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <Encoder_3rd+0xcc>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4a16      	ldr	r2, [pc, #88]	; (8000f88 <Encoder_3rd+0xcc>)
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e002      	b.n	8000f38 <Encoder_3rd+0x7c>
	}else{
		home_change_count = 0;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <Encoder_3rd+0xcc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <Encoder_3rd+0xcc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	dd0b      	ble.n	8000f58 <Encoder_3rd+0x9c>
		recent_home_state = home_state;
 8000f40:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <Encoder_3rd+0xc8>)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <Encoder_3rd+0xcc>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d102      	bne.n	8000f58 <Encoder_3rd+0x9c>
			Encoder_Num_3rd = 6;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <Encoder_3rd+0xc4>)
 8000f54:	2206      	movs	r2, #6
 8000f56:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_3rd > 6){
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <Encoder_3rd+0xc4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b06      	cmp	r3, #6
 8000f5e:	dd02      	ble.n	8000f66 <Encoder_3rd+0xaa>
		Encoder_Num_3rd = 1;
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <Encoder_3rd+0xc4>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
	}
}
 8000f66:	bf00      	nop
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40020800 	.word	0x40020800
 8000f78:	2000005c 	.word	0x2000005c
 8000f7c:	20000060 	.word	0x20000060
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000064 	.word	0x20000064
 8000f88:	20000068 	.word	0x20000068

08000f8c <Encoder_JP>:


static int Encoder_JP(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_JP_ENC();
 8000f92:	2110      	movs	r1, #16
 8000f94:	482a      	ldr	r0, [pc, #168]	; (8001040 <Encoder_JP+0xb4>)
 8000f96:	f000 ffba 	bl	8001f0e <D_GPIO_Read>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_JP_HOME();
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4827      	ldr	r0, [pc, #156]	; (8001040 <Encoder_JP+0xb4>)
 8000fa2:	f000 ffb4 	bl	8001f0e <D_GPIO_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <Encoder_JP+0xb8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d005      	beq.n	8000fc0 <Encoder_JP+0x34>
		enc_change_count++;
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <Encoder_JP+0xbc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <Encoder_JP+0xbc>)
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e002      	b.n	8000fc6 <Encoder_JP+0x3a>
	}else{
		enc_change_count = 0;
 8000fc0:	4b21      	ldr	r3, [pc, #132]	; (8001048 <Encoder_JP+0xbc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8000fc6:	4b20      	ldr	r3, [pc, #128]	; (8001048 <Encoder_JP+0xbc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	dd0d      	ble.n	8000fea <Encoder_JP+0x5e>
		recent_enc_state = enc_state;
 8000fce:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <Encoder_JP+0xb8>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <Encoder_JP+0xbc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d104      	bne.n	8000fea <Encoder_JP+0x5e>
			Encoder_Num_JP++;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <Encoder_JP+0xc0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <Encoder_JP+0xc0>)
 8000fe8:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <Encoder_JP+0xc4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d005      	beq.n	8001000 <Encoder_JP+0x74>
		home_change_count++;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <Encoder_JP+0xc8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <Encoder_JP+0xc8>)
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e002      	b.n	8001006 <Encoder_JP+0x7a>
	}else{
		home_change_count = 0;
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <Encoder_JP+0xc8>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <Encoder_JP+0xc8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b04      	cmp	r3, #4
 800100c:	dd0b      	ble.n	8001026 <Encoder_JP+0x9a>
		recent_home_state = home_state;
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <Encoder_JP+0xc4>)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <Encoder_JP+0xc8>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d102      	bne.n	8001026 <Encoder_JP+0x9a>
			Encoder_Num_JP = 12;
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <Encoder_JP+0xc0>)
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_JP > 12){
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <Encoder_JP+0xc0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b0c      	cmp	r3, #12
 800102c:	dd02      	ble.n	8001034 <Encoder_JP+0xa8>
		Encoder_Num_JP = 1;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <Encoder_JP+0xc0>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
	}
}
 8001034:	bf00      	nop
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020000 	.word	0x40020000
 8001044:	2000006c 	.word	0x2000006c
 8001048:	20000070 	.word	0x20000070
 800104c:	2000000c 	.word	0x2000000c
 8001050:	20000074 	.word	0x20000074
 8001054:	20000078 	.word	0x20000078

08001058 <Lottery_1st2nd_SetSpeed>:


static void Lottery_1st2nd_SetSpeed(int speed){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	if(speed >= 1000) speed = 1000;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001066:	db02      	blt.n	800106e <Lottery_1st2nd_SetSpeed+0x16>
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	607b      	str	r3, [r7, #4]
	if(speed <= 0) speed = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	dc01      	bgt.n	8001078 <Lottery_1st2nd_SetSpeed+0x20>
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
	int setSpeed = (BLDC_MAX_SPEED / 1000.0) * speed;
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fb3f 	bl	80006fc <__aeabi_i2d>
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <Lottery_1st2nd_SetSpeed+0x68>)
 8001084:	f7ff f8be 	bl	8000204 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fb9e 	bl	80007d0 <__aeabi_d2iz>
 8001094:	4603      	mov	r3, r0
 8001096:	60fb      	str	r3, [r7, #12]
	if(setSpeed == 0){
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d104      	bne.n	80010a8 <Lottery_1st2nd_SetSpeed+0x50>
		IO_RESET_BLDC1_ENA();
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4808      	ldr	r0, [pc, #32]	; (80010c4 <Lottery_1st2nd_SetSpeed+0x6c>)
 80010a2:	f000 ff14 	bl	8001ece <D_GPIO_Set>
 80010a6:	e003      	b.n	80010b0 <Lottery_1st2nd_SetSpeed+0x58>
	}else{
		IO_SET_BLDC1_ENA();
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <Lottery_1st2nd_SetSpeed+0x6c>)
 80010ac:	f000 ff1f 	bl	8001eee <D_GPIO_Reset>
	}
	D_PWM_Set(BLDC1,setSpeed);
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	2004      	movs	r0, #4
 80010b4:	f001 f96e 	bl	8002394 <D_PWM_Set>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40140000 	.word	0x40140000
 80010c4:	40020800 	.word	0x40020800

080010c8 <Lottery_3rd_SetSpeed>:

static void Lottery_3rd_SetSpeed(int speed){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	IO_SET_BLDC2_DIR();
 80010d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010d4:	481a      	ldr	r0, [pc, #104]	; (8001140 <Lottery_3rd_SetSpeed+0x78>)
 80010d6:	f000 fefa 	bl	8001ece <D_GPIO_Set>
	if(speed >= 1000) speed = 1000;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e0:	db02      	blt.n	80010e8 <Lottery_3rd_SetSpeed+0x20>
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	607b      	str	r3, [r7, #4]
	if(speed <= 0) speed = 0;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc01      	bgt.n	80010f2 <Lottery_3rd_SetSpeed+0x2a>
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
	int setSpeed = (BLDC_MAX_SPEED / 1000.0) * speed;
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fb02 	bl	80006fc <__aeabi_i2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <Lottery_3rd_SetSpeed+0x7c>)
 80010fe:	f7ff f881 	bl	8000204 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fb61 	bl	80007d0 <__aeabi_d2iz>
 800110e:	4603      	mov	r3, r0
 8001110:	60fb      	str	r3, [r7, #12]
	if(setSpeed == 0){
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d105      	bne.n	8001124 <Lottery_3rd_SetSpeed+0x5c>
		IO_RESET_BLDC2_ENA();
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <Lottery_3rd_SetSpeed+0x78>)
 800111e:	f000 fed6 	bl	8001ece <D_GPIO_Set>
 8001122:	e004      	b.n	800112e <Lottery_3rd_SetSpeed+0x66>
	}else{
		IO_SET_BLDC2_ENA();
 8001124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <Lottery_3rd_SetSpeed+0x78>)
 800112a:	f000 fee0 	bl	8001eee <D_GPIO_Reset>
	}
	D_PWM_Set(BLDC2,setSpeed);
 800112e:	68f9      	ldr	r1, [r7, #12]
 8001130:	2002      	movs	r0, #2
 8001132:	f001 f92f 	bl	8002394 <D_PWM_Set>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020000 	.word	0x40020000
 8001144:	40140000 	.word	0x40140000

08001148 <Lottery_JP_SetSpeed>:

static void Lottery_JP_SetSpeed(int speed, int direction){
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	if(speed >= 1000) speed = 1000;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001158:	db02      	blt.n	8001160 <Lottery_JP_SetSpeed+0x18>
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	607b      	str	r3, [r7, #4]
	if(speed <= 0) speed = 0;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	dc01      	bgt.n	800116a <Lottery_JP_SetSpeed+0x22>
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
	int setSpeed = (BLDC_MAX_SPEED / 1000.0) * speed;
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fac6 	bl	80006fc <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <Lottery_JP_SetSpeed+0x8c>)
 8001176:	f7ff f845 	bl	8000204 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fb25 	bl	80007d0 <__aeabi_d2iz>
 8001186:	4603      	mov	r3, r0
 8001188:	60fb      	str	r3, [r7, #12]
	if(setSpeed == 0){
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d105      	bne.n	800119c <Lottery_JP_SetSpeed+0x54>
		IO_RESET_BLDC3_ENA();
 8001190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001194:	4810      	ldr	r0, [pc, #64]	; (80011d8 <Lottery_JP_SetSpeed+0x90>)
 8001196:	f000 fe9a 	bl	8001ece <D_GPIO_Set>
 800119a:	e004      	b.n	80011a6 <Lottery_JP_SetSpeed+0x5e>
	}else{
		IO_SET_BLDC3_ENA();
 800119c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <Lottery_JP_SetSpeed+0x90>)
 80011a2:	f000 fea4 	bl	8001eee <D_GPIO_Reset>
	}
	if(direction == 0){
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d104      	bne.n	80011b6 <Lottery_JP_SetSpeed+0x6e>
		IO_RESET_BLDC3_DIR();
 80011ac:	2104      	movs	r1, #4
 80011ae:	480a      	ldr	r0, [pc, #40]	; (80011d8 <Lottery_JP_SetSpeed+0x90>)
 80011b0:	f000 fe9d 	bl	8001eee <D_GPIO_Reset>
 80011b4:	e006      	b.n	80011c4 <Lottery_JP_SetSpeed+0x7c>
	}else if(direction == 1){
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d103      	bne.n	80011c4 <Lottery_JP_SetSpeed+0x7c>
		IO_SET_BLDC3_DIR();
 80011bc:	2104      	movs	r1, #4
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <Lottery_JP_SetSpeed+0x90>)
 80011c0:	f000 fe85 	bl	8001ece <D_GPIO_Set>
	}
	D_PWM_Set(BLDC3,setSpeed);
 80011c4:	68f9      	ldr	r1, [r7, #12]
 80011c6:	2001      	movs	r0, #1
 80011c8:	f001 f8e4 	bl	8002394 <D_PWM_Set>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40140000 	.word	0x40140000
 80011d8:	40020400 	.word	0x40020400

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f001 f908 	bl	80023f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f816 	bl	8001214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 f9f2 	bl	80015d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f000 f99a 	bl	8001524 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011f0:	f000 f944 	bl	800147c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80011f4:	f000 f96c 	bl	80014d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011f8:	f000 f87a 	bl	80012f0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80011fc:	f000 f8a6 	bl	800134c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 8001200:	f001 f8b2 	bl	8002368 <D_PWM_Init>

  appInit();
 8001204:	f7ff fc88 	bl	8000b18 <appInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 8001208:	f7ff fc96 	bl	8000b38 <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 800120c:	f000 feb4 	bl	8001f78 <D_Mess_flush>
	  appTask();
 8001210:	e7fa      	b.n	8001208 <main+0x2c>
	...

08001214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b094      	sub	sp, #80	; 0x50
 8001218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	2234      	movs	r2, #52	; 0x34
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fa1e 	bl	8007664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <SystemClock_Config+0xd4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <SystemClock_Config+0xd4>)
 8001242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <SystemClock_Config+0xd4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <SystemClock_Config+0xd8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001260:	4a22      	ldr	r2, [pc, #136]	; (80012ec <SystemClock_Config+0xd8>)
 8001262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <SystemClock_Config+0xd8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127c:	2310      	movs	r3, #16
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001284:	2300      	movs	r3, #0
 8001286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001288:	2310      	movs	r3, #16
 800128a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800128c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001292:	2304      	movs	r3, #4
 8001294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001296:	2302      	movs	r3, #2
 8001298:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129a:	2302      	movs	r3, #2
 800129c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 f8e2 	bl	800546c <HAL_RCC_OscConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012ae:	f000 fa7f 	bl	80017b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	2302      	movs	r3, #2
 80012b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2102      	movs	r1, #2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fe00 	bl	8004ed4 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012da:	f000 fa69 	bl	80017b0 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3750      	adds	r7, #80	; 0x50
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2220      	movs	r2, #32
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f001 ffbb 	bl	80032a8 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fa3a 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000540 	.word	0x20000540
 8001344:	40005400 	.word	0x40005400
 8001348:	000186a0 	.word	0x000186a0

0800134c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <MX_TIM3_Init+0x128>)
 800137e:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <MX_TIM3_Init+0x12c>)
 8001380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001382:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_TIM3_Init+0x128>)
 8001384:	2253      	movs	r2, #83	; 0x53
 8001386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_TIM3_Init+0x128>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <MX_TIM3_Init+0x128>)
 8001390:	f241 3287 	movw	r2, #4999	; 0x1387
 8001394:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_TIM3_Init+0x128>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_TIM3_Init+0x128>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a2:	4834      	ldr	r0, [pc, #208]	; (8001474 <MX_TIM3_Init+0x128>)
 80013a4:	f004 fb00 	bl	80059a8 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80013ae:	f000 f9ff 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013bc:	4619      	mov	r1, r3
 80013be:	482d      	ldr	r0, [pc, #180]	; (8001474 <MX_TIM3_Init+0x128>)
 80013c0:	f004 fd24 	bl	8005e0c <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80013ca:	f000 f9f1 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ce:	4829      	ldr	r0, [pc, #164]	; (8001474 <MX_TIM3_Init+0x128>)
 80013d0:	f004 fb39 	bl	8005a46 <HAL_TIM_PWM_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013da:	f000 f9e9 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	4619      	mov	r1, r3
 80013ec:	4821      	ldr	r0, [pc, #132]	; (8001474 <MX_TIM3_Init+0x128>)
 80013ee:	f005 f8e5 	bl	80065bc <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80013f8:	f000 f9da 	bl	80017b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fc:	2360      	movs	r3, #96	; 0x60
 80013fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	4818      	ldr	r0, [pc, #96]	; (8001474 <MX_TIM3_Init+0x128>)
 8001414:	f004 fc38 	bl	8005c88 <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800141e:	f000 f9c7 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2204      	movs	r2, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4812      	ldr	r0, [pc, #72]	; (8001474 <MX_TIM3_Init+0x128>)
 800142a:	f004 fc2d 	bl	8005c88 <HAL_TIM_PWM_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001434:	f000 f9bc 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2208      	movs	r2, #8
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM3_Init+0x128>)
 8001440:	f004 fc22 	bl	8005c88 <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800144a:	f000 f9b1 	bl	80017b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	220c      	movs	r2, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM3_Init+0x128>)
 8001456:	f004 fc17 	bl	8005c88 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001460:	f000 f9a6 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM3_Init+0x128>)
 8001466:	f000 fab1 	bl	80019cc <HAL_TIM_MspPostInit>

}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	; 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000594 	.word	0x20000594
 8001478:	40000400 	.word	0x40000400

0800147c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_USART1_UART_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001488:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800148c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014b4:	f005 f8fe 	bl	80066b4 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014be:	f000 f977 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200006fc 	.word	0x200006fc
 80014cc:	40011000 	.word	0x40011000

080014d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART2_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001508:	f005 f8d4 	bl	80066b4 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f000 f94d 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200007a0 	.word	0x200007a0
 8001520:	40004400 	.word	0x40004400

08001524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b27      	ldr	r3, [pc, #156]	; (80015cc <MX_DMA_Init+0xa8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a26      	ldr	r2, [pc, #152]	; (80015cc <MX_DMA_Init+0xa8>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_DMA_Init+0xa8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_DMA_Init+0xa8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <MX_DMA_Init+0xa8>)
 8001550:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_DMA_Init+0xa8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	200b      	movs	r0, #11
 8001568:	f001 f891 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800156c:	200b      	movs	r0, #11
 800156e:	f001 f8aa 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2010      	movs	r0, #16
 8001578:	f001 f889 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800157c:	2010      	movs	r0, #16
 800157e:	f001 f8a2 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2011      	movs	r0, #17
 8001588:	f001 f881 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800158c:	2011      	movs	r0, #17
 800158e:	f001 f89a 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	202f      	movs	r0, #47	; 0x2f
 8001598:	f001 f879 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800159c:	202f      	movs	r0, #47	; 0x2f
 800159e:	f001 f892 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	203a      	movs	r0, #58	; 0x3a
 80015a8:	f001 f871 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80015ac:	203a      	movs	r0, #58	; 0x3a
 80015ae:	f001 f88a 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2046      	movs	r0, #70	; 0x46
 80015b8:	f001 f869 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80015bc:	2046      	movs	r0, #70	; 0x46
 80015be:	f001 f882 	bl	80026c6 <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b63      	ldr	r3, [pc, #396]	; (8001778 <MX_GPIO_Init+0x1a8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a62      	ldr	r2, [pc, #392]	; (8001778 <MX_GPIO_Init+0x1a8>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b60      	ldr	r3, [pc, #384]	; (8001778 <MX_GPIO_Init+0x1a8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a5b      	ldr	r2, [pc, #364]	; (8001778 <MX_GPIO_Init+0x1a8>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b59      	ldr	r3, [pc, #356]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b55      	ldr	r3, [pc, #340]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a54      	ldr	r2, [pc, #336]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b4e      	ldr	r3, [pc, #312]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a4d      	ldr	r2, [pc, #308]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <MX_GPIO_Init+0x1a8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <MX_GPIO_Init+0x1a8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a46      	ldr	r2, [pc, #280]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <MX_GPIO_Init+0x1a8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8001678:	4840      	ldr	r0, [pc, #256]	; (800177c <MX_GPIO_Init+0x1ac>)
 800167a:	f001 fdfb 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001684:	483e      	ldr	r0, [pc, #248]	; (8001780 <MX_GPIO_Init+0x1b0>)
 8001686:	f001 fdf5 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f24d 0104 	movw	r1, #53252	; 0xd004
 8001690:	483c      	ldr	r0, [pc, #240]	; (8001784 <MX_GPIO_Init+0x1b4>)
 8001692:	f001 fdef 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4834      	ldr	r0, [pc, #208]	; (8001780 <MX_GPIO_Init+0x1b0>)
 80016ae:	f001 fc35 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016b2:	f641 430f 	movw	r3, #7183	; 0x1c0f
 80016b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	482e      	ldr	r0, [pc, #184]	; (8001780 <MX_GPIO_Init+0x1b0>)
 80016c8:	f001 fc28 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 80016cc:	f248 0312 	movw	r3, #32786	; 0x8012
 80016d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4826      	ldr	r0, [pc, #152]	; (800177c <MX_GPIO_Init+0x1ac>)
 80016e2:	f001 fc1b 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80016e6:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80016ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	481f      	ldr	r0, [pc, #124]	; (800177c <MX_GPIO_Init+0x1ac>)
 8001700:	f001 fc0c 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001704:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <MX_GPIO_Init+0x1b0>)
 800171e:	f001 fbfd 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001722:	f24d 0304 	movw	r3, #53252	; 0xd004
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	4812      	ldr	r0, [pc, #72]	; (8001784 <MX_GPIO_Init+0x1b4>)
 800173c:	f001 fbee 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001740:	2304      	movs	r3, #4
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001748:	2301      	movs	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_GPIO_Init+0x1b8>)
 8001754:	f001 fbe2 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001760:	2301      	movs	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_GPIO_Init+0x1b4>)
 800176c:	f001 fbd6 	bl	8002f1c <HAL_GPIO_Init>

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020800 	.word	0x40020800
 8001784:	40020400 	.word	0x40020400
 8001788:	40020c00 	.word	0x40020c00

0800178c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_UART_TxCpltCallback+0x20>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 800179e:	f000 fc1d 	bl	8001fdc <D_Mess_TransitionCompletedCallBack>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40004400 	.word	0x40004400

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <Error_Handler+0x8>
	...

080017bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_MspInit+0x4c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_MspInit+0x4c>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_MspInit+0x4c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_MspInit+0x4c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <HAL_MspInit+0x4c>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6413      	str	r3, [r2, #64]	; 0x40
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_MspInit+0x4c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017fa:	2007      	movs	r0, #7
 80017fc:	f000 ff3c 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800

0800180c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a50      	ldr	r2, [pc, #320]	; (800196c <HAL_I2C_MspInit+0x160>)
 800182a:	4293      	cmp	r3, r2
 800182c:	f040 8099 	bne.w	8001962 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_I2C_MspInit+0x164>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4a4d      	ldr	r2, [pc, #308]	; (8001970 <HAL_I2C_MspInit+0x164>)
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
 8001840:	4b4b      	ldr	r3, [pc, #300]	; (8001970 <HAL_I2C_MspInit+0x164>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800184c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001852:	2312      	movs	r3, #18
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800185e:	2304      	movs	r3, #4
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4842      	ldr	r0, [pc, #264]	; (8001974 <HAL_I2C_MspInit+0x168>)
 800186a:	f001 fb57 	bl	8002f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_I2C_MspInit+0x164>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	4a3e      	ldr	r2, [pc, #248]	; (8001970 <HAL_I2C_MspInit+0x164>)
 8001878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800187c:	6413      	str	r3, [r2, #64]	; 0x40
 800187e:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <HAL_I2C_MspInit+0x164>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 800188c:	4a3b      	ldr	r2, [pc, #236]	; (800197c <HAL_I2C_MspInit+0x170>)
 800188e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 8001892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001896:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018aa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018b8:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c4:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018ca:	482b      	ldr	r0, [pc, #172]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018cc:	f000 ff16 	bl	80026fc <HAL_DMA_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80018d6:	f7ff ff6b 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018de:	639a      	str	r2, [r3, #56]	; 0x38
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_I2C_MspInit+0x16c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_I2C_MspInit+0x174>)
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <HAL_I2C_MspInit+0x178>)
 80018ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_I2C_MspInit+0x174>)
 80018ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018f4:	4b22      	ldr	r3, [pc, #136]	; (8001980 <HAL_I2C_MspInit+0x174>)
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_I2C_MspInit+0x174>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <HAL_I2C_MspInit+0x174>)
 8001902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001906:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_I2C_MspInit+0x174>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_I2C_MspInit+0x174>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_I2C_MspInit+0x174>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_I2C_MspInit+0x174>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_I2C_MspInit+0x174>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001926:	4816      	ldr	r0, [pc, #88]	; (8001980 <HAL_I2C_MspInit+0x174>)
 8001928:	f000 fee8 	bl	80026fc <HAL_DMA_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001932:	f7ff ff3d 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_I2C_MspInit+0x174>)
 800193a:	635a      	str	r2, [r3, #52]	; 0x34
 800193c:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_I2C_MspInit+0x174>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	201f      	movs	r0, #31
 8001948:	f000 fea1 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800194c:	201f      	movs	r0, #31
 800194e:	f000 feba 	bl	80026c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2020      	movs	r0, #32
 8001958:	f000 fe99 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800195c:	2020      	movs	r0, #32
 800195e:	f000 feb2 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40005400 	.word	0x40005400
 8001970:	40023800 	.word	0x40023800
 8001974:	40020400 	.word	0x40020400
 8001978:	20000740 	.word	0x20000740
 800197c:	40026010 	.word	0x40026010
 8001980:	200004e0 	.word	0x200004e0
 8001984:	400260b8 	.word	0x400260b8

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10d      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40023800 	.word	0x40023800

080019cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <HAL_TIM_MspPostInit+0xa4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d13b      	bne.n	8001a66 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_TIM_MspPostInit+0xa8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a1f      	ldr	r2, [pc, #124]	; (8001a74 <HAL_TIM_MspPostInit+0xa8>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_TIM_MspPostInit+0xa8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_TIM_MspPostInit+0xa8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_TIM_MspPostInit+0xa8>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_TIM_MspPostInit+0xa8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a26:	23c0      	movs	r3, #192	; 0xc0
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a36:	2302      	movs	r3, #2
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <HAL_TIM_MspPostInit+0xac>)
 8001a42:	f001 fa6b 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a46:	2303      	movs	r3, #3
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a56:	2302      	movs	r3, #2
 8001a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4806      	ldr	r0, [pc, #24]	; (8001a7c <HAL_TIM_MspPostInit+0xb0>)
 8001a62:	f001 fa5b 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a97      	ldr	r2, [pc, #604]	; (8001cfc <HAL_UART_MspInit+0x27c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	f040 8092 	bne.w	8001bc8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	4b95      	ldr	r3, [pc, #596]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	4a94      	ldr	r2, [pc, #592]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001aae:	f043 0310 	orr.w	r3, r3, #16
 8001ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab4:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	4a8d      	ldr	r2, [pc, #564]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad0:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001adc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	2303      	movs	r3, #3
 8001aec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aee:	2307      	movs	r3, #7
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4882      	ldr	r0, [pc, #520]	; (8001d04 <HAL_UART_MspInit+0x284>)
 8001afa:	f001 fa0f 	bl	8002f1c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001afe:	4b82      	ldr	r3, [pc, #520]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b00:	4a82      	ldr	r2, [pc, #520]	; (8001d0c <HAL_UART_MspInit+0x28c>)
 8001b02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b04:	4b80      	ldr	r3, [pc, #512]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b0c:	4b7e      	ldr	r3, [pc, #504]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b12:	4b7d      	ldr	r3, [pc, #500]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b18:	4b7b      	ldr	r3, [pc, #492]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b1e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b20:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b26:	4b78      	ldr	r3, [pc, #480]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b2c:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b32:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b38:	4b73      	ldr	r3, [pc, #460]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b3e:	4872      	ldr	r0, [pc, #456]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b40:	f000 fddc 	bl	80026fc <HAL_DMA_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001b4a:	f7ff fe31 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a6d      	ldr	r2, [pc, #436]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
 8001b54:	4a6c      	ldr	r2, [pc, #432]	; (8001d08 <HAL_UART_MspInit+0x288>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b5c:	4a6d      	ldr	r2, [pc, #436]	; (8001d14 <HAL_UART_MspInit+0x294>)
 8001b5e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001b60:	4b6b      	ldr	r3, [pc, #428]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b66:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b68:	4b69      	ldr	r3, [pc, #420]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6e:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b74:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b7c:	4b64      	ldr	r3, [pc, #400]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b88:	4b61      	ldr	r3, [pc, #388]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8e:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b94:	4b5e      	ldr	r3, [pc, #376]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b9a:	485d      	ldr	r0, [pc, #372]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001b9c:	f000 fdae 	bl	80026fc <HAL_DMA_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001ba6:	f7ff fe03 	bl	80017b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb0:	4a57      	ldr	r2, [pc, #348]	; (8001d10 <HAL_UART_MspInit+0x290>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	2025      	movs	r0, #37	; 0x25
 8001bbc:	f000 fd67 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc0:	2025      	movs	r0, #37	; 0x25
 8001bc2:	f000 fd80 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc6:	e095      	b.n	8001cf4 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a52      	ldr	r2, [pc, #328]	; (8001d18 <HAL_UART_MspInit+0x298>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f040 8090 	bne.w	8001cf4 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a41      	ldr	r2, [pc, #260]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_UART_MspInit+0x280>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4837      	ldr	r0, [pc, #220]	; (8001d04 <HAL_UART_MspInit+0x284>)
 8001c28:	f001 f978 	bl	8002f1c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c2e:	4a3c      	ldr	r2, [pc, #240]	; (8001d20 <HAL_UART_MspInit+0x2a0>)
 8001c30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c38:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c46:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4e:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c60:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c6c:	482b      	ldr	r0, [pc, #172]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c6e:	f000 fd45 	bl	80026fc <HAL_DMA_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001c78:	f7ff fd9a 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
 8001c82:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_UART_MspInit+0x29c>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c88:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001c8a:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <HAL_UART_MspInit+0x2a8>)
 8001c8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001c90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001caa:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cc8:	4816      	ldr	r0, [pc, #88]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001cca:	f000 fd17 	bl	80026fc <HAL_DMA_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001cd4:	f7ff fd6c 	bl	80017b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001cde:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_UART_MspInit+0x2a4>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2026      	movs	r0, #38	; 0x26
 8001cea:	f000 fcd0 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cee:	2026      	movs	r0, #38	; 0x26
 8001cf0:	f000 fce9 	bl	80026c6 <HAL_NVIC_EnableIRQ>
}
 8001cf4:	bf00      	nop
 8001cf6:	3730      	adds	r7, #48	; 0x30
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	2000063c 	.word	0x2000063c
 8001d0c:	40026440 	.word	0x40026440
 8001d10:	200005dc 	.word	0x200005dc
 8001d14:	400264b8 	.word	0x400264b8
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	20000480 	.word	0x20000480
 8001d20:	40026088 	.word	0x40026088
 8001d24:	2000069c 	.word	0x2000069c
 8001d28:	400260a0 	.word	0x400260a0

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <NMI_Handler+0x4>

08001d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <HardFault_Handler+0x4>

08001d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <MemManage_Handler+0x4>

08001d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d78:	f000 fb8e 	bl	8002498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <SysTick_Handler+0x18>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	4a02      	ldr	r2, [pc, #8]	; (8001d8c <SysTick_Handler+0x18>)
 8001d84:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000007c 	.word	0x2000007c

08001d90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <DMA1_Stream0_IRQHandler+0x10>)
 8001d96:	f000 fe49 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000740 	.word	0x20000740

08001da4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <DMA1_Stream5_IRQHandler+0x10>)
 8001daa:	f000 fe3f 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000480 	.word	0x20000480

08001db8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <DMA1_Stream6_IRQHandler+0x10>)
 8001dbe:	f000 fe35 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	2000069c 	.word	0x2000069c

08001dcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <I2C1_EV_IRQHandler+0x10>)
 8001dd2:	f001 fbad 	bl	8003530 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000540 	.word	0x20000540

08001de0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <I2C1_ER_IRQHandler+0x10>)
 8001de6:	f001 fd14 	bl	8003812 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000540 	.word	0x20000540

08001df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <USART1_IRQHandler+0x10>)
 8001dfa:	f004 fd27 	bl	800684c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200006fc 	.word	0x200006fc

08001e08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <USART2_IRQHandler+0x10>)
 8001e0e:	f004 fd1d 	bl	800684c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200007a0 	.word	0x200007a0

08001e1c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <DMA1_Stream7_IRQHandler+0x10>)
 8001e22:	f000 fe03 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200004e0 	.word	0x200004e0

08001e30 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA2_Stream2_IRQHandler+0x10>)
 8001e36:	f000 fdf9 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000063c 	.word	0x2000063c

08001e44 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA2_Stream7_IRQHandler+0x10>)
 8001e4a:	f000 fdef 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200005dc 	.word	0x200005dc

08001e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <SystemInit+0x20>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <SystemInit+0x20>)
 8001e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e82:	490e      	ldr	r1, [pc, #56]	; (8001ebc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e84:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e98:	4c0b      	ldr	r4, [pc, #44]	; (8001ec8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ea6:	f7ff ffd7 	bl	8001e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f005 fbb7 	bl	800761c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eae:	f7ff f995 	bl	80011dc <main>
  bx  lr    
 8001eb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ebc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001ec0:	080076d4 	.word	0x080076d4
  ldr r2, =_sbss
 8001ec4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001ec8:	200007f4 	.word	0x200007f4

08001ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ecc:	e7fe      	b.n	8001ecc <ADC_IRQHandler>

08001ece <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f001 f9c7 	bl	8003274 <HAL_GPIO_WritePin>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	2200      	movs	r2, #0
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f001 f9b7 	bl	8003274 <HAL_GPIO_WritePin>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8001f1a:	887b      	ldrh	r3, [r7, #2]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f001 f990 	bl	8003244 <HAL_GPIO_ReadPin>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 8001f38:	b40f      	push	{r0, r1, r2, r3}
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	6938      	ldr	r0, [r7, #16]
 8001f4a:	f000 f891 	bl	8002070 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <D_Mess_printf+0x38>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <D_Mess_printf+0x3c>)
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f5a:	dd01      	ble.n	8001f60 <D_Mess_printf+0x28>
	  D_Mess_flush();
 8001f5c:	f000 f80c 	bl	8001f78 <D_Mess_flush>
  }
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f6a:	b004      	add	sp, #16
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200007ec 	.word	0x200007ec
 8001f74:	20000080 	.word	0x20000080

08001f78 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <D_Mess_flush+0x54>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <D_Mess_flush+0x1c>
		outptr = buff;
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <D_Mess_flush+0x58>)
 8001f8e:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <D_Mess_flush+0x5c>)
 8001f90:	601a      	str	r2, [r3, #0]
		return;
 8001f92:	e01a      	b.n	8001fca <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <D_Mess_flush+0x58>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <D_Mess_flush+0x58>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	490b      	ldr	r1, [pc, #44]	; (8001fd0 <D_Mess_flush+0x58>)
 8001fa4:	600a      	str	r2, [r1, #0]
 8001fa6:	220a      	movs	r2, #10
 8001fa8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <D_Mess_flush+0x58>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <D_Mess_flush+0x5c>)
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4907      	ldr	r1, [pc, #28]	; (8001fd4 <D_Mess_flush+0x5c>)
 8001fb8:	4807      	ldr	r0, [pc, #28]	; (8001fd8 <D_Mess_flush+0x60>)
 8001fba:	f004 fbc9 	bl	8006750 <HAL_UART_Transmit_DMA>
		had_completed = false;
 8001fbe:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <D_Mess_flush+0x54>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <D_Mess_flush+0x58>)
 8001fc6:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <D_Mess_flush+0x5c>)
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	200007ec 	.word	0x200007ec
 8001fd4:	20000080 	.word	0x20000080
 8001fd8:	200007a0 	.word	0x200007a0

08001fdc <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  had_completed = true;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <D_Mess_TransitionCompletedCallBack+0x14>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	20000014 	.word	0x20000014

08001ff4 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2b0a      	cmp	r3, #10
 8002002:	d102      	bne.n	800200a <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8002004:	200d      	movs	r0, #13
 8002006:	f7ff fff5 	bl	8001ff4 <xputc>
  }
  if( outptr ){
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <xputc+0x48>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <xputc+0x48>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	4908      	ldr	r1, [pc, #32]	; (800203c <xputc+0x48>)
 800201a:	600a      	str	r2, [r1, #0]
 800201c:	79fa      	ldrb	r2, [r7, #7]
 800201e:	701a      	strb	r2, [r3, #0]
    return;
 8002020:	e008      	b.n	8002034 <xputc+0x40>
  }

  if( xfunc_out ){
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <xputc+0x4c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d004      	beq.n	8002034 <xputc+0x40>
    xfunc_out((unsigned char)c);
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <xputc+0x4c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	79fa      	ldrb	r2, [r7, #7]
 8002030:	4610      	mov	r0, r2
 8002032:	4798      	blx	r3
  }
}
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200007ec 	.word	0x200007ec
 8002040:	200007e8 	.word	0x200007e8

08002044 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  while( *str ){
 800204c:	e006      	b.n	800205c <xputs+0x18>
    xputc(*str++);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	607a      	str	r2, [r7, #4]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ffcc 	bl	8001ff4 <xputc>
  while( *str ){
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f4      	bne.n	800204e <xputs+0xa>
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8002070:	b580      	push	{r7, lr}
 8002072:	b08e      	sub	sp, #56	; 0x38
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 8002084:	7ffb      	ldrb	r3, [r7, #31]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8167 	beq.w	800235a <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 800208c:	7ffb      	ldrb	r3, [r7, #31]
 800208e:	2b25      	cmp	r3, #37	; 0x25
 8002090:	d004      	beq.n	800209c <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ffad 	bl	8001ff4 <xputc>
 800209a:	e15d      	b.n	8002358 <xvprintf+0x2e8>
    }
    f = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 80020aa:	7ffb      	ldrb	r3, [r7, #31]
 80020ac:	2b30      	cmp	r3, #48	; 0x30
 80020ae:	d107      	bne.n	80020c0 <xvprintf+0x50>
      f = 1; c = *fmt++;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	77fb      	strb	r3, [r7, #31]
 80020be:	e009      	b.n	80020d4 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
 80020c2:	2b2d      	cmp	r3, #45	; 0x2d
 80020c4:	d106      	bne.n	80020d4 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 80020c6:	2302      	movs	r3, #2
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 80020d4:	2300      	movs	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d8:	e00e      	b.n	80020f8 <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 80020da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	461a      	mov	r2, r3
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	4413      	add	r3, r2
 80020ea:	3b30      	subs	r3, #48	; 0x30
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	77fb      	strb	r3, [r7, #31]
 80020f8:	7ffb      	ldrb	r3, [r7, #31]
 80020fa:	2b2f      	cmp	r3, #47	; 0x2f
 80020fc:	d902      	bls.n	8002104 <xvprintf+0x94>
 80020fe:	7ffb      	ldrb	r3, [r7, #31]
 8002100:	2b39      	cmp	r3, #57	; 0x39
 8002102:	d9ea      	bls.n	80020da <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8002104:	7ffb      	ldrb	r3, [r7, #31]
 8002106:	2b6c      	cmp	r3, #108	; 0x6c
 8002108:	d002      	beq.n	8002110 <xvprintf+0xa0>
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b4c      	cmp	r3, #76	; 0x4c
 800210e:	d108      	bne.n	8002122 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 8002122:	7ffb      	ldrb	r3, [r7, #31]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 811a 	beq.w	800235e <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 800212e:	7fbb      	ldrb	r3, [r7, #30]
 8002130:	2b60      	cmp	r3, #96	; 0x60
 8002132:	d902      	bls.n	800213a <xvprintf+0xca>
      d -= 0x20;
 8002134:	7fbb      	ldrb	r3, [r7, #30]
 8002136:	3b20      	subs	r3, #32
 8002138:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 800213a:	7fbb      	ldrb	r3, [r7, #30]
 800213c:	3b42      	subs	r3, #66	; 0x42
 800213e:	2b16      	cmp	r3, #22
 8002140:	d873      	bhi.n	800222a <xvprintf+0x1ba>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <xvprintf+0xd8>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	08002213 	.word	0x08002213
 800214c:	08002201 	.word	0x08002201
 8002150:	0800221f 	.word	0x0800221f
 8002154:	0800222b 	.word	0x0800222b
 8002158:	0800222b 	.word	0x0800222b
 800215c:	0800222b 	.word	0x0800222b
 8002160:	0800222b 	.word	0x0800222b
 8002164:	0800222b 	.word	0x0800222b
 8002168:	0800222b 	.word	0x0800222b
 800216c:	0800222b 	.word	0x0800222b
 8002170:	0800222b 	.word	0x0800222b
 8002174:	0800222b 	.word	0x0800222b
 8002178:	0800222b 	.word	0x0800222b
 800217c:	08002219 	.word	0x08002219
 8002180:	0800222b 	.word	0x0800222b
 8002184:	0800222b 	.word	0x0800222b
 8002188:	0800222b 	.word	0x0800222b
 800218c:	080021a5 	.word	0x080021a5
 8002190:	0800222b 	.word	0x0800222b
 8002194:	0800221f 	.word	0x0800221f
 8002198:	0800222b 	.word	0x0800222b
 800219c:	0800222b 	.word	0x0800222b
 80021a0:	08002225 	.word	0x08002225
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	1d1a      	adds	r2, r3, #4
 80021a8:	603a      	str	r2, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b2:	e002      	b.n	80021ba <xvprintf+0x14a>
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	3301      	adds	r3, #1
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f6      	bne.n	80021b4 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 80021c6:	e002      	b.n	80021ce <xvprintf+0x15e>
        xputc(' ');
 80021c8:	2020      	movs	r0, #32
 80021ca:	f7ff ff13 	bl	8001ff4 <xputc>
      while( !( f & 2 ) && j++ < w ){
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <xvprintf+0x174>
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f1      	bhi.n	80021c8 <xvprintf+0x158>
      }
      xputs(p);
 80021e4:	69b8      	ldr	r0, [r7, #24]
 80021e6:	f7ff ff2d 	bl	8002044 <xputs>
      while( j++ < w ){
 80021ea:	e002      	b.n	80021f2 <xvprintf+0x182>
        xputc(' ');
 80021ec:	2020      	movs	r0, #32
 80021ee:	f7ff ff01 	bl	8001ff4 <xputc>
      while( j++ < w ){
 80021f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d8f6      	bhi.n	80021ec <xvprintf+0x17c>
      }
      continue;
 80021fe:	e0ab      	b.n	8002358 <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	1d1a      	adds	r2, r3, #4
 8002204:	603a      	str	r2, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fef2 	bl	8001ff4 <xputc>
 8002210:	e0a2      	b.n	8002358 <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 8002212:	2302      	movs	r3, #2
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
 8002216:	e00d      	b.n	8002234 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 8002218:	2308      	movs	r3, #8
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
 800221c:	e00a      	b.n	8002234 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 800221e:	230a      	movs	r3, #10
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
 8002222:	e007      	b.n	8002234 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 8002224:	2310      	movs	r3, #16
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
 8002228:	e004      	b.n	8002234 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 800222a:	7ffb      	ldrb	r3, [r7, #31]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fee1 	bl	8001ff4 <xputc>
 8002232:	e091      	b.n	8002358 <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <xvprintf+0x1d8>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	1d1a      	adds	r2, r3, #4
 8002242:	603a      	str	r2, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e00b      	b.n	8002260 <xvprintf+0x1f0>
 8002248:	7fbb      	ldrb	r3, [r7, #30]
 800224a:	2b44      	cmp	r3, #68	; 0x44
 800224c:	d104      	bne.n	8002258 <xvprintf+0x1e8>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	1d1a      	adds	r2, r3, #4
 8002252:	603a      	str	r2, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e003      	b.n	8002260 <xvprintf+0x1f0>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	1d1a      	adds	r2, r3, #4
 800225c:	603a      	str	r2, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8002262:	7fbb      	ldrb	r3, [r7, #30]
 8002264:	2b44      	cmp	r3, #68	; 0x44
 8002266:	d109      	bne.n	800227c <xvprintf+0x20c>
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b00      	cmp	r3, #0
 800226c:	da06      	bge.n	800227c <xvprintf+0x20c>
      v = 0 - v;
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	425b      	negs	r3, r3
 8002272:	623b      	str	r3, [r7, #32]
      f |= 8;
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	f043 0308 	orr.w	r3, r3, #8
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002284:	fbb3 f2f2 	udiv	r2, r3, r2
 8002288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800228a:	fb01 f202 	mul.w	r2, r1, r2
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	77bb      	strb	r3, [r7, #30]
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 800229c:	7fbb      	ldrb	r3, [r7, #30]
 800229e:	2b09      	cmp	r3, #9
 80022a0:	d908      	bls.n	80022b4 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	2b78      	cmp	r3, #120	; 0x78
 80022a6:	d101      	bne.n	80022ac <xvprintf+0x23c>
 80022a8:	2227      	movs	r2, #39	; 0x27
 80022aa:	e000      	b.n	80022ae <xvprintf+0x23e>
 80022ac:	2207      	movs	r2, #7
 80022ae:	7fbb      	ldrb	r3, [r7, #30]
 80022b0:	4413      	add	r3, r2
 80022b2:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	633a      	str	r2, [r7, #48]	; 0x30
 80022ba:	7fba      	ldrb	r2, [r7, #30]
 80022bc:	3230      	adds	r2, #48	; 0x30
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022c4:	440b      	add	r3, r1
 80022c6:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <xvprintf+0x266>
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d9d4      	bls.n	8002280 <xvprintf+0x210>
    if( f & 8 ){
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <xvprintf+0x282>
      s[i++] = '-';
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	633a      	str	r2, [r7, #48]	; 0x30
 80022e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ea:	4413      	add	r3, r2
 80022ec:	222d      	movs	r2, #45	; 0x2d
 80022ee:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 80022f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <xvprintf+0x294>
 8002300:	2330      	movs	r3, #48	; 0x30
 8002302:	e000      	b.n	8002306 <xvprintf+0x296>
 8002304:	2320      	movs	r3, #32
 8002306:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8002308:	e003      	b.n	8002312 <xvprintf+0x2a2>
      xputc(d);
 800230a:	7fbb      	ldrb	r3, [r7, #30]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fe71 	bl	8001ff4 <xputc>
    while( !( f & 2 ) && j++ < w ){
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <xvprintf+0x2b8>
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f0      	bhi.n	800230a <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	3b01      	subs	r3, #1
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
 800232e:	f107 0208 	add.w	r2, r7, #8
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	4413      	add	r3, r2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fe5b 	bl	8001ff4 <xputc>
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f1      	bne.n	8002328 <xvprintf+0x2b8>
    while( j++ < w ){
 8002344:	e002      	b.n	800234c <xvprintf+0x2dc>
      xputc(' ');
 8002346:	2020      	movs	r0, #32
 8002348:	f7ff fe54 	bl	8001ff4 <xputc>
    while( j++ < w ){
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002354:	429a      	cmp	r2, r3
 8002356:	d8f6      	bhi.n	8002346 <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8002358:	e68f      	b.n	800207a <xvprintf+0xa>
      break;                                            /* End of format? */
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 800235e:	bf00      	nop
    }
  }
} /* xvprintf */
 8002360:	bf00      	nop
 8002362:	3738      	adds	r7, #56	; 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800236c:	2100      	movs	r1, #0
 800236e:	4808      	ldr	r0, [pc, #32]	; (8002390 <D_PWM_Init+0x28>)
 8002370:	f003 fbc2 	bl	8005af8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002374:	2104      	movs	r1, #4
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <D_PWM_Init+0x28>)
 8002378:	f003 fbbe 	bl	8005af8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800237c:	2108      	movs	r1, #8
 800237e:	4804      	ldr	r0, [pc, #16]	; (8002390 <D_PWM_Init+0x28>)
 8002380:	f003 fbba 	bl	8005af8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002384:	210c      	movs	r1, #12
 8002386:	4802      	ldr	r0, [pc, #8]	; (8002390 <D_PWM_Init+0x28>)
 8002388:	f003 fbb6 	bl	8005af8 <HAL_TIM_PWM_Start>
}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000594 	.word	0x20000594

08002394 <D_PWM_Set>:

void D_PWM_Set(int channel, int value){
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d81e      	bhi.n	80023e4 <D_PWM_Set+0x50>
 80023a6:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <D_PWM_Set+0x18>)
 80023a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ac:	080023bd 	.word	0x080023bd
 80023b0:	080023c7 	.word	0x080023c7
 80023b4:	080023d1 	.word	0x080023d1
 80023b8:	080023db 	.word	0x080023db
	switch(channel){
	case 1:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <D_PWM_Set+0x5c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80023c4:	e00e      	b.n	80023e4 <D_PWM_Set+0x50>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <D_PWM_Set+0x5c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80023ce:	e009      	b.n	80023e4 <D_PWM_Set+0x50>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 80023d0:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <D_PWM_Set+0x5c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80023d8:	e004      	b.n	80023e4 <D_PWM_Set+0x50>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, value);
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <D_PWM_Set+0x5c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80023e2:	bf00      	nop
	}
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	20000594 	.word	0x20000594

080023f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f8:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_Init+0x40>)
 80023fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002402:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_Init+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_Init+0x40>)
 800240a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800240e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_Init+0x40>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_Init+0x40>)
 8002416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f000 f92b 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002422:	2000      	movs	r0, #0
 8002424:	f000 f808 	bl	8002438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002428:	f7ff f9c8 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023c00 	.word	0x40023c00

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x54>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_InitTick+0x58>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f943 	bl	80026e2 <HAL_SYSTICK_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e00e      	b.n	8002484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d80a      	bhi.n	8002482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246c:	2200      	movs	r2, #0
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002474:	f000 f90b 	bl	800268e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <HAL_InitTick+0x5c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000010 	.word	0x20000010
 8002490:	2000001c 	.word	0x2000001c
 8002494:	20000018 	.word	0x20000018

08002498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x20>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x24>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_IncTick+0x24>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	2000001c 	.word	0x2000001c
 80024bc:	200007f0 	.word	0x200007f0

080024c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return uwTick;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_GetTick+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	200007f0 	.word	0x200007f0

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff29 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff3e 	bl	8002520 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff8e 	bl	80025cc <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5d 	bl	8002578 <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff31 	bl	800253c <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa2 	bl	8002634 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff feda 	bl	80024c0 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e099      	b.n	800284c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002738:	e00f      	b.n	800275a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273a:	f7ff fec1 	bl	80024c0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	d908      	bls.n	800275a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2203      	movs	r2, #3
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e078      	b.n	800284c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e8      	bne.n	800273a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_DMA_Init+0x158>)
 8002774:	4013      	ands	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d117      	bne.n	800281e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fb0f 	bl	8002e24 <DMA_CheckFifoParam>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800281a:	2301      	movs	r3, #1
 800281c:	e016      	b.n	800284c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fac6 	bl	8002db8 <DMA_CalcBaseAndBitshift>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	f010803f 	.word	0xf010803f

08002858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_DMA_Start_IT+0x26>
 800287a:	2302      	movs	r3, #2
 800287c:	e040      	b.n	8002900 <HAL_DMA_Start_IT+0xa8>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d12f      	bne.n	80028f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fa58 	bl	8002d5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	223f      	movs	r2, #63	; 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0216 	orr.w	r2, r2, #22
 80028c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0208 	orr.w	r2, r2, #8
 80028de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e005      	b.n	80028fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002916:	f7ff fdd3 	bl	80024c0 <HAL_GetTick>
 800291a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d008      	beq.n	800293a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e052      	b.n	80029e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0216 	bic.w	r2, r2, #22
 8002948:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002958:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_DMA_Abort+0x62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0208 	bic.w	r2, r2, #8
 8002978:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298a:	e013      	b.n	80029b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298c:	f7ff fd98 	bl	80024c0 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b05      	cmp	r3, #5
 8002998:	d90c      	bls.n	80029b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2203      	movs	r2, #3
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e015      	b.n	80029e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e4      	bne.n	800298c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	223f      	movs	r2, #63	; 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d004      	beq.n	8002a06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00c      	b.n	8002a20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2205      	movs	r2, #5
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a38:	4b92      	ldr	r3, [pc, #584]	; (8002c84 <HAL_DMA_IRQHandler+0x258>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a92      	ldr	r2, [pc, #584]	; (8002c88 <HAL_DMA_IRQHandler+0x25c>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0a9b      	lsrs	r3, r3, #10
 8002a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2208      	movs	r2, #8
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0204 	bic.w	r2, r2, #4
 8002a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2208      	movs	r2, #8
 8002a86:	409a      	lsls	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2201      	movs	r2, #1
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2204      	movs	r2, #4
 8002af2:	409a      	lsls	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2210      	movs	r2, #16
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d043      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d03c      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2210      	movs	r2, #16
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d018      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d108      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d024      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
 8002b5a:	e01f      	b.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01b      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e016      	b.n	8002b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0208 	bic.w	r2, r2, #8
 8002b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 808e 	beq.w	8002cca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8086 	beq.w	8002cca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d136      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0216 	bic.w	r2, r2, #22
 8002be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x1da>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0208 	bic.w	r2, r2, #8
 8002c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	223f      	movs	r2, #63	; 0x3f
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d07d      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
        }
        return;
 8002c42:	e078      	b.n	8002d36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01c      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d108      	bne.n	8002c72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d030      	beq.n	8002cca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
 8002c70:	e02b      	b.n	8002cca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	4798      	blx	r3
 8002c82:	e022      	b.n	8002cca <HAL_DMA_IRQHandler+0x29e>
 8002c84:	20000010 	.word	0x20000010
 8002c88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0210 	bic.w	r2, r2, #16
 8002ca8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d032      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d022      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2205      	movs	r2, #5
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d307      	bcc.n	8002d12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f2      	bne.n	8002cf6 <HAL_DMA_IRQHandler+0x2ca>
 8002d10:	e000      	b.n	8002d14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d12:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e000      	b.n	8002d38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d36:	bf00      	nop
    }
  }
}
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop

08002d40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4e:	b2db      	uxtb	r3, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b40      	cmp	r3, #64	; 0x40
 8002d88:	d108      	bne.n	8002d9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d9a:	e007      	b.n	8002dac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3b10      	subs	r3, #16
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <DMA_CalcBaseAndBitshift+0x64>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002dd2:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <DMA_CalcBaseAndBitshift+0x68>)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d909      	bls.n	8002dfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dee:	f023 0303 	bic.w	r3, r3, #3
 8002df2:	1d1a      	adds	r2, r3, #4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	659a      	str	r2, [r3, #88]	; 0x58
 8002df8:	e007      	b.n	8002e0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	aaaaaaab 	.word	0xaaaaaaab
 8002e20:	080076bc 	.word	0x080076bc

08002e24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d11f      	bne.n	8002e7e <DMA_CheckFifoParam+0x5a>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d856      	bhi.n	8002ef2 <DMA_CheckFifoParam+0xce>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <DMA_CheckFifoParam+0x28>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e6f 	.word	0x08002e6f
 8002e54:	08002e5d 	.word	0x08002e5d
 8002e58:	08002ef3 	.word	0x08002ef3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d046      	beq.n	8002ef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6c:	e043      	b.n	8002ef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e76:	d140      	bne.n	8002efa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e03d      	b.n	8002efa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e86:	d121      	bne.n	8002ecc <DMA_CheckFifoParam+0xa8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d837      	bhi.n	8002efe <DMA_CheckFifoParam+0xda>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <DMA_CheckFifoParam+0x70>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ea5 	.word	0x08002ea5
 8002e98:	08002eab 	.word	0x08002eab
 8002e9c:	08002ea5 	.word	0x08002ea5
 8002ea0:	08002ebd 	.word	0x08002ebd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea8:	e030      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d025      	beq.n	8002f02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eba:	e022      	b.n	8002f02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ec4:	d11f      	bne.n	8002f06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eca:	e01c      	b.n	8002f06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d903      	bls.n	8002eda <DMA_CheckFifoParam+0xb6>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d003      	beq.n	8002ee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ed8:	e018      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      break;
 8002ede:	e015      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef0:	e00b      	b.n	8002f0a <DMA_CheckFifoParam+0xe6>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e00a      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e008      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002efa:	bf00      	nop
 8002efc:	e006      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002efe:	bf00      	nop
 8002f00:	e004      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e165      	b.n	8003204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 8154 	bne.w	80031fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80ae 	beq.w	80031fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_GPIO_Init+0x300>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4a5c      	ldr	r2, [pc, #368]	; (800321c <HAL_GPIO_Init+0x300>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_GPIO_Init+0x300>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030be:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_GPIO_Init+0x304>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_GPIO_Init+0x308>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x21a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_GPIO_Init+0x30c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x216>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_GPIO_Init+0x310>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x212>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_GPIO_Init+0x314>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x20e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4b      	ldr	r2, [pc, #300]	; (8003234 <HAL_GPIO_Init+0x318>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x20a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <HAL_GPIO_Init+0x31c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x206>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_GPIO_Init+0x320>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x202>
 800311a:	2306      	movs	r3, #6
 800311c:	e00c      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800311e:	2307      	movs	r3, #7
 8003120:	e00a      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003122:	2305      	movs	r3, #5
 8003124:	e008      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003126:	2304      	movs	r3, #4
 8003128:	e006      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800312a:	2303      	movs	r3, #3
 800312c:	e004      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800312e:	2302      	movs	r3, #2
 8003130:	e002      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003136:	2300      	movs	r3, #0
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	f002 0203 	and.w	r2, r2, #3
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	4093      	lsls	r3, r2
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003148:	4935      	ldr	r1, [pc, #212]	; (8003220 <HAL_GPIO_Init+0x304>)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003156:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <HAL_GPIO_Init+0x324>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800317a:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_GPIO_Init+0x324>)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_GPIO_Init+0x324>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ce:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f8:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	f67f ae96 	bls.w	8002f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3724      	adds	r7, #36	; 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	40013800 	.word	0x40013800
 8003224:	40020000 	.word	0x40020000
 8003228:	40020400 	.word	0x40020400
 800322c:	40020800 	.word	0x40020800
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40021000 	.word	0x40021000
 8003238:	40021400 	.word	0x40021400
 800323c:	40021800 	.word	0x40021800
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	e001      	b.n	8003266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e12b      	b.n	8003512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe fa9c 	bl	800180c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800330c:	f001 fed4 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4a81      	ldr	r2, [pc, #516]	; (800351c <HAL_I2C_Init+0x274>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d807      	bhi.n	800332c <HAL_I2C_Init+0x84>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a80      	ldr	r2, [pc, #512]	; (8003520 <HAL_I2C_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e006      	b.n	800333a <HAL_I2C_Init+0x92>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a7d      	ldr	r2, [pc, #500]	; (8003524 <HAL_I2C_Init+0x27c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0e7      	b.n	8003512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a78      	ldr	r2, [pc, #480]	; (8003528 <HAL_I2C_Init+0x280>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a6a      	ldr	r2, [pc, #424]	; (800351c <HAL_I2C_Init+0x274>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d802      	bhi.n	800337c <HAL_I2C_Init+0xd4>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3301      	adds	r3, #1
 800337a:	e009      	b.n	8003390 <HAL_I2C_Init+0xe8>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	4a69      	ldr	r2, [pc, #420]	; (800352c <HAL_I2C_Init+0x284>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	3301      	adds	r3, #1
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	430b      	orrs	r3, r1
 8003396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	495c      	ldr	r1, [pc, #368]	; (800351c <HAL_I2C_Init+0x274>)
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d819      	bhi.n	80033e4 <HAL_I2C_Init+0x13c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e59      	subs	r1, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033c4:	400b      	ands	r3, r1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_I2C_Init+0x138>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e59      	subs	r1, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	e051      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e04f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <HAL_I2C_Init+0x168>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e012      	b.n	8003436 <HAL_I2C_Init+0x18e>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Init+0x196>
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <HAL_I2C_Init+0x1bc>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e58      	subs	r0, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	440b      	add	r3, r1
 8003454:	fbb0 f3f3 	udiv	r3, r0, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003462:	e00f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1e58      	subs	r0, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	0099      	lsls	r1, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	fbb0 f3f3 	udiv	r3, r0, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6809      	ldr	r1, [r1, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6911      	ldr	r1, [r2, #16]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	000186a0 	.word	0x000186a0
 8003520:	001e847f 	.word	0x001e847f
 8003524:	003d08ff 	.word	0x003d08ff
 8003528:	431bde83 	.word	0x431bde83
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003550:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b10      	cmp	r3, #16
 800355e:	d003      	beq.n	8003568 <HAL_I2C_EV_IRQHandler+0x38>
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	f040 80c1 	bne.w	80036ea <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_I2C_EV_IRQHandler+0x6e>
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003588:	d003      	beq.n	8003592 <HAL_I2C_EV_IRQHandler+0x62>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003590:	d101      	bne.n	8003596 <HAL_I2C_EV_IRQHandler+0x66>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_I2C_EV_IRQHandler+0x68>
 8003596:	2300      	movs	r3, #0
 8003598:	2b01      	cmp	r3, #1
 800359a:	f000 8132 	beq.w	8003802 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00c      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x92>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	0a5b      	lsrs	r3, r3, #9
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f001 fc71 	bl	8004e9c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fd79 	bl	80040b2 <I2C_Master_SB>
 80035c0:	e092      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	08db      	lsrs	r3, r3, #3
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0xb2>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	0a5b      	lsrs	r3, r3, #9
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fdef 	bl	80041be <I2C_Master_ADD10>
 80035e0:	e082      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_I2C_EV_IRQHandler+0xd2>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	0a5b      	lsrs	r3, r3, #9
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fe09 	bl	8004212 <I2C_Master_ADDR>
 8003600:	e072      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d03b      	beq.n	8003686 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361c:	f000 80f3 	beq.w	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	09db      	lsrs	r3, r3, #7
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00f      	beq.n	800364c <HAL_I2C_EV_IRQHandler+0x11c>
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	0a9b      	lsrs	r3, r3, #10
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d009      	beq.n	800364c <HAL_I2C_EV_IRQHandler+0x11c>
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f9f3 	bl	8003a30 <I2C_MasterTransmit_TXE>
 800364a:	e04d      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80d6 	beq.w	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	0a5b      	lsrs	r3, r3, #9
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80cf 	beq.w	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003668:	7bbb      	ldrb	r3, [r7, #14]
 800366a:	2b21      	cmp	r3, #33	; 0x21
 800366c:	d103      	bne.n	8003676 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa7a 	bl	8003b68 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003674:	e0c7      	b.n	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b40      	cmp	r3, #64	; 0x40
 800367a:	f040 80c4 	bne.w	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fae8 	bl	8003c54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003684:	e0bf      	b.n	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003694:	f000 80b7 	beq.w	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00f      	beq.n	80036c4 <HAL_I2C_EV_IRQHandler+0x194>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_I2C_EV_IRQHandler+0x194>
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb5d 	bl	8003d7c <I2C_MasterReceive_RXNE>
 80036c2:	e011      	b.n	80036e8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 809a 	beq.w	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	0a5b      	lsrs	r3, r3, #9
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8093 	beq.w	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fbfc 	bl	8003ede <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036e6:	e08e      	b.n	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
 80036e8:	e08d      	b.n	8003806 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e007      	b.n	800370c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d012      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0x20e>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	0a5b      	lsrs	r3, r3, #9
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 ffba 	bl	80046b0 <I2C_Slave_ADDR>
 800373c:	e066      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0x22e>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	0a5b      	lsrs	r3, r3, #9
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fff4 	bl	8004744 <I2C_Slave_STOPF>
 800375c:	e056      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800375e:	7bbb      	ldrb	r3, [r7, #14]
 8003760:	2b21      	cmp	r3, #33	; 0x21
 8003762:	d002      	beq.n	800376a <HAL_I2C_EV_IRQHandler+0x23a>
 8003764:	7bbb      	ldrb	r3, [r7, #14]
 8003766:	2b29      	cmp	r3, #41	; 0x29
 8003768:	d125      	bne.n	80037b6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	09db      	lsrs	r3, r3, #7
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00f      	beq.n	8003796 <HAL_I2C_EV_IRQHandler+0x266>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	0a9b      	lsrs	r3, r3, #10
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_I2C_EV_IRQHandler+0x266>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	089b      	lsrs	r3, r3, #2
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fed0 	bl	8004534 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003794:	e039      	b.n	800380a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d033      	beq.n	800380a <HAL_I2C_EV_IRQHandler+0x2da>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	0a5b      	lsrs	r3, r3, #9
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d02d      	beq.n	800380a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fefd 	bl	80045ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037b4:	e029      	b.n	800380a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00f      	beq.n	80037e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	0a9b      	lsrs	r3, r3, #10
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 ff08 	bl	80045f0 <I2C_SlaveReceive_RXNE>
 80037e0:	e014      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	0a5b      	lsrs	r3, r3, #9
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 ff36 	bl	800466c <I2C_SlaveReceive_BTF>
 8003800:	e004      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800380a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b08a      	sub	sp, #40	; 0x28
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003834:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00e      	beq.n	8003860 <HAL_I2C_ER_IRQHandler+0x4e>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800385e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	0a5b      	lsrs	r3, r3, #9
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <HAL_I2C_ER_IRQHandler+0x78>
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	f043 0302 	orr.w	r3, r3, #2
 800387e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003888:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	0a9b      	lsrs	r3, r3, #10
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d03f      	beq.n	8003916 <HAL_I2C_ER_IRQHandler+0x104>
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d039      	beq.n	8003916 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80038a2:	7efb      	ldrb	r3, [r7, #27]
 80038a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038bc:	7ebb      	ldrb	r3, [r7, #26]
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d112      	bne.n	80038e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10f      	bne.n	80038e8 <HAL_I2C_ER_IRQHandler+0xd6>
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	2b21      	cmp	r3, #33	; 0x21
 80038cc:	d008      	beq.n	80038e0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038ce:	7cfb      	ldrb	r3, [r7, #19]
 80038d0:	2b29      	cmp	r3, #41	; 0x29
 80038d2:	d005      	beq.n	80038e0 <HAL_I2C_ER_IRQHandler+0xce>
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	2b28      	cmp	r3, #40	; 0x28
 80038d8:	d106      	bne.n	80038e8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b21      	cmp	r3, #33	; 0x21
 80038de:	d103      	bne.n	80038e8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 f85f 	bl	80049a4 <I2C_Slave_AF>
 80038e6:	e016      	b.n	8003916 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80038fa:	7efb      	ldrb	r3, [r7, #27]
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d002      	beq.n	8003906 <HAL_I2C_ER_IRQHandler+0xf4>
 8003900:	7efb      	ldrb	r3, [r7, #27]
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d107      	bne.n	8003916 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003914:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	0adb      	lsrs	r3, r3, #11
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <HAL_I2C_ER_IRQHandler+0x12e>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800393e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	431a      	orrs	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f001 f896 	bl	8004a84 <I2C_ITError>
  }
}
 8003958:	bf00      	nop
 800395a:	3728      	adds	r7, #40	; 0x28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
 80039bc:	4613      	mov	r3, r2
 80039be:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d150      	bne.n	8003af8 <I2C_MasterTransmit_TXE+0xc8>
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b21      	cmp	r3, #33	; 0x21
 8003a5a:	d14d      	bne.n	8003af8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d01d      	beq.n	8003a9e <I2C_MasterTransmit_TXE+0x6e>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d01a      	beq.n	8003a9e <I2C_MasterTransmit_TXE+0x6e>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6e:	d016      	beq.n	8003a9e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a7e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2211      	movs	r2, #17
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff62 	bl	8003960 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a9c:	e060      	b.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d107      	bne.n	8003ae8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff7d 	bl	80039e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ae6:	e03b      	b.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff35 	bl	8003960 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003af6:	e033      	b.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b21      	cmp	r3, #33	; 0x21
 8003afc:	d005      	beq.n	8003b0a <I2C_MasterTransmit_TXE+0xda>
 8003afe:	7bbb      	ldrb	r3, [r7, #14]
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d12d      	bne.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b22      	cmp	r3, #34	; 0x22
 8003b08:	d12a      	bne.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b22:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b24:	e01c      	b.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d103      	bne.n	8003b3a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f88e 	bl	8003c54 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b38:	e012      	b.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b5e:	e7ff      	b.n	8003b60 <I2C_MasterTransmit_TXE+0x130>
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b21      	cmp	r3, #33	; 0x21
 8003b80:	d164      	bne.n	8003c4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d012      	beq.n	8003bb2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bb0:	e04c      	b.n	8003c4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d01d      	beq.n	8003bf4 <I2C_MasterTransmit_BTF+0x8c>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d01a      	beq.n	8003bf4 <I2C_MasterTransmit_BTF+0x8c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc4:	d016      	beq.n	8003bf4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bd4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2211      	movs	r2, #17
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff feb7 	bl	8003960 <HAL_I2C_MasterTxCpltCallback>
}
 8003bf2:	e02b      	b.n	8003c4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d107      	bne.n	8003c3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fed2 	bl	80039e0 <HAL_I2C_MemTxCpltCallback>
}
 8003c3c:	e006      	b.n	8003c4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fe8a 	bl	8003960 <HAL_I2C_MasterTxCpltCallback>
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11d      	bne.n	8003ca8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10b      	bne.n	8003c8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	1c9a      	adds	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003c8a:	e073      	b.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	121b      	asrs	r3, r3, #8
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ca6:	e065      	b.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10b      	bne.n	8003cc8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cc6:	e055      	b.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d151      	bne.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b22      	cmp	r3, #34	; 0x22
 8003cd4:	d10d      	bne.n	8003cf2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cf0:	e040      	b.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d015      	beq.n	8003d28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b21      	cmp	r3, #33	; 0x21
 8003d00:	d112      	bne.n	8003d28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d26:	e025      	b.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d120      	bne.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b21      	cmp	r3, #33	; 0x21
 8003d36:	d11d      	bne.n	8003d74 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fe36 	bl	80039e0 <HAL_I2C_MemTxCpltCallback>
}
 8003d74:	bf00      	nop
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b22      	cmp	r3, #34	; 0x22
 8003d8e:	f040 80a2 	bne.w	8003ed6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d921      	bls.n	8003de4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	f040 8082 	bne.w	8003ed6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003de2:	e078      	b.n	8003ed6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d074      	beq.n	8003ed6 <I2C_MasterReceive_RXNE+0x15a>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d002      	beq.n	8003df8 <I2C_MasterReceive_RXNE+0x7c>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d16e      	bne.n	8003ed6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f001 f81d 	bl	8004e38 <I2C_WaitOnSTOPRequestThroughIT>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d142      	bne.n	8003e8a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e12:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e22:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b40      	cmp	r3, #64	; 0x40
 8003e5c:	d10a      	bne.n	8003e74 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff fdc1 	bl	80039f4 <HAL_I2C_MemRxCpltCallback>
}
 8003e72:	e030      	b.n	8003ed6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2212      	movs	r2, #18
 8003e80:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff fd76 	bl	8003974 <HAL_I2C_MasterRxCpltCallback>
}
 8003e88:	e025      	b.n	8003ed6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e98:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fd99 	bl	8003a08 <HAL_I2C_ErrorCallback>
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d11b      	bne.n	8003f2e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f04:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f2c:	e0bd      	b.n	80040aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d129      	bne.n	8003f8c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f46:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d00a      	beq.n	8003f64 <I2C_MasterReceive_BTF+0x86>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d007      	beq.n	8003f64 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f8a:	e08e      	b.n	80040aa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d176      	bne.n	8004084 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d002      	beq.n	8003fa2 <I2C_MasterReceive_BTF+0xc4>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d108      	bne.n	8003fb4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e019      	b.n	8003fe8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d002      	beq.n	8003fc0 <I2C_MasterReceive_BTF+0xe2>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d108      	bne.n	8003fd2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	e00a      	b.n	8003fe8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d007      	beq.n	8003fe8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004042:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d10a      	bne.n	800406e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7ff fcc4 	bl	80039f4 <HAL_I2C_MemRxCpltCallback>
}
 800406c:	e01d      	b.n	80040aa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2212      	movs	r2, #18
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fc79 	bl	8003974 <HAL_I2C_MasterRxCpltCallback>
}
 8004082:	e012      	b.n	80040aa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040aa:	bf00      	nop
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d117      	bne.n	80040f6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040de:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040e0:	e067      	b.n	80041b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	611a      	str	r2, [r3, #16]
}
 80040f4:	e05d      	b.n	80041b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fe:	d133      	bne.n	8004168 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b21      	cmp	r3, #33	; 0x21
 800410a:	d109      	bne.n	8004120 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e008      	b.n	8004132 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <I2C_Master_SB+0x92>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d108      	bne.n	8004156 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d032      	beq.n	80041b2 <I2C_Master_SB+0x100>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02d      	beq.n	80041b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004164:	605a      	str	r2, [r3, #4]
}
 8004166:	e024      	b.n	80041b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10e      	bne.n	800418e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	b29b      	uxth	r3, r3
 8004176:	11db      	asrs	r3, r3, #7
 8004178:	b2db      	uxtb	r3, r3
 800417a:	f003 0306 	and.w	r3, r3, #6
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f063 030f 	orn	r3, r3, #15
 8004184:	b2da      	uxtb	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	611a      	str	r2, [r3, #16]
}
 800418c:	e011      	b.n	80041b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004192:	2b01      	cmp	r3, #1
 8004194:	d10d      	bne.n	80041b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	b29b      	uxth	r3, r3
 800419c:	11db      	asrs	r3, r3, #7
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f003 0306 	and.w	r3, r3, #6
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f063 030e 	orn	r3, r3, #14
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d004      	beq.n	80041e4 <I2C_Master_ADD10+0x26>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00c      	beq.n	8004206 <I2C_Master_ADD10+0x48>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004204:	605a      	str	r2, [r3, #4]
  }
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b091      	sub	sp, #68	; 0x44
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004220:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b22      	cmp	r3, #34	; 0x22
 800423a:	f040 8169 	bne.w	8004510 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <I2C_Master_ADDR+0x54>
 8004246:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d10b      	bne.n	8004266 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424e:	2300      	movs	r3, #0
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	e160      	b.n	8004528 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	2b00      	cmp	r3, #0
 800426c:	d11d      	bne.n	80042aa <I2C_Master_ADDR+0x98>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004276:	d118      	bne.n	80042aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004278:	2300      	movs	r3, #0
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50
 80042a8:	e13e      	b.n	8004528 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d113      	bne.n	80042dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b4:	2300      	movs	r3, #0
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e115      	b.n	8004508 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	f040 808a 	bne.w	80043fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ee:	d137      	bne.n	8004360 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430e:	d113      	bne.n	8004338 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004320:	2300      	movs	r3, #0
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	e0e7      	b.n	8004508 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004338:	2300      	movs	r3, #0
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	623b      	str	r3, [r7, #32]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e0d3      	b.n	8004508 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004362:	2b08      	cmp	r3, #8
 8004364:	d02e      	beq.n	80043c4 <I2C_Master_ADDR+0x1b2>
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2b20      	cmp	r3, #32
 800436a:	d02b      	beq.n	80043c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436e:	2b12      	cmp	r3, #18
 8004370:	d102      	bne.n	8004378 <I2C_Master_ADDR+0x166>
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	2b01      	cmp	r3, #1
 8004376:	d125      	bne.n	80043c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437a:	2b04      	cmp	r3, #4
 800437c:	d00e      	beq.n	800439c <I2C_Master_ADDR+0x18a>
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	2b02      	cmp	r3, #2
 8004382:	d00b      	beq.n	800439c <I2C_Master_ADDR+0x18a>
 8004384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004386:	2b10      	cmp	r3, #16
 8004388:	d008      	beq.n	800439c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e007      	b.n	80043ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	e0a1      	b.n	8004508 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e085      	b.n	8004508 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d14d      	bne.n	80044a2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2b04      	cmp	r3, #4
 800440a:	d016      	beq.n	800443a <I2C_Master_ADDR+0x228>
 800440c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440e:	2b02      	cmp	r3, #2
 8004410:	d013      	beq.n	800443a <I2C_Master_ADDR+0x228>
 8004412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004414:	2b10      	cmp	r3, #16
 8004416:	d010      	beq.n	800443a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004426:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e007      	b.n	800444a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004448:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004458:	d117      	bne.n	800448a <I2C_Master_ADDR+0x278>
 800445a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004460:	d00b      	beq.n	800447a <I2C_Master_ADDR+0x268>
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	2b01      	cmp	r3, #1
 8004466:	d008      	beq.n	800447a <I2C_Master_ADDR+0x268>
 8004468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446a:	2b08      	cmp	r3, #8
 800446c:	d005      	beq.n	800447a <I2C_Master_ADDR+0x268>
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	2b10      	cmp	r3, #16
 8004472:	d002      	beq.n	800447a <I2C_Master_ADDR+0x268>
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	2b20      	cmp	r3, #32
 8004478:	d107      	bne.n	800448a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004488:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	e032      	b.n	8004508 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c0:	d117      	bne.n	80044f2 <I2C_Master_ADDR+0x2e0>
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044c8:	d00b      	beq.n	80044e2 <I2C_Master_ADDR+0x2d0>
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d008      	beq.n	80044e2 <I2C_Master_ADDR+0x2d0>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d005      	beq.n	80044e2 <I2C_Master_ADDR+0x2d0>
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d002      	beq.n	80044e2 <I2C_Master_ADDR+0x2d0>
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d107      	bne.n	80044f2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044f0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800450e:	e00b      	b.n	8004528 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
}
 8004526:	e7ff      	b.n	8004528 <I2C_Master_ADDR+0x316>
 8004528:	bf00      	nop
 800452a:	3744      	adds	r7, #68	; 0x44
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02b      	beq.n	80045a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d114      	bne.n	80045a6 <I2C_SlaveTransmit_TXE+0x72>
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	2b29      	cmp	r3, #41	; 0x29
 8004580:	d111      	bne.n	80045a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004590:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2221      	movs	r2, #33	; 0x21
 8004596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2228      	movs	r2, #40	; 0x28
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff f9f1 	bl	8003988 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d011      	beq.n	80045e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d02c      	beq.n	8004664 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d114      	bne.n	8004664 <I2C_SlaveReceive_RXNE+0x74>
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	2b2a      	cmp	r3, #42	; 0x2a
 800463e:	d111      	bne.n	8004664 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2222      	movs	r2, #34	; 0x22
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2228      	movs	r2, #40	; 0x28
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff f99c 	bl	800399c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d012      	beq.n	80046a4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046ca:	2b28      	cmp	r3, #40	; 0x28
 80046cc:	d127      	bne.n	800471e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046dc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	09db      	lsrs	r3, r3, #7
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	81bb      	strh	r3, [r7, #12]
 8004700:	e002      	b.n	8004708 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004710:	89ba      	ldrh	r2, [r7, #12]
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff f94a 	bl	80039b0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800471c:	e00e      	b.n	800473c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004762:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a0:	d172      	bne.n	8004888 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b22      	cmp	r3, #34	; 0x22
 80047a6:	d002      	beq.n	80047ae <I2C_Slave_STOPF+0x6a>
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b2a      	cmp	r3, #42	; 0x2a
 80047ac:	d135      	bne.n	800481a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f043 0204 	orr.w	r2, r3, #4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe faaa 	bl	8002d40 <HAL_DMA_GetState>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d049      	beq.n	8004886 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	4a69      	ldr	r2, [pc, #420]	; (800499c <I2C_Slave_STOPF+0x258>)
 80047f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe f8f2 	bl	80029e8 <HAL_DMA_Abort_IT>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d03d      	beq.n	8004886 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004814:	4610      	mov	r0, r2
 8004816:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004818:	e035      	b.n	8004886 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fa74 	bl	8002d40 <HAL_DMA_GetState>
 8004858:	4603      	mov	r3, r0
 800485a:	2b01      	cmp	r3, #1
 800485c:	d014      	beq.n	8004888 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004862:	4a4e      	ldr	r2, [pc, #312]	; (800499c <I2C_Slave_STOPF+0x258>)
 8004864:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe f8bc 	bl	80029e8 <HAL_DMA_Abort_IT>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004880:	4610      	mov	r0, r2
 8004882:	4798      	blx	r3
 8004884:	e000      	b.n	8004888 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004886:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d03e      	beq.n	8004910 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d112      	bne.n	80048c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d112      	bne.n	80048fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f8b3 	bl	8004a84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800491e:	e039      	b.n	8004994 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b2a      	cmp	r3, #42	; 0x2a
 8004924:	d109      	bne.n	800493a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2228      	movs	r2, #40	; 0x28
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff f831 	bl	800399c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b28      	cmp	r3, #40	; 0x28
 8004944:	d111      	bne.n	800496a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a15      	ldr	r2, [pc, #84]	; (80049a0 <I2C_Slave_STOPF+0x25c>)
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff f832 	bl	80039cc <HAL_I2C_ListenCpltCallback>
}
 8004968:	e014      	b.n	8004994 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	2b22      	cmp	r3, #34	; 0x22
 8004970:	d002      	beq.n	8004978 <I2C_Slave_STOPF+0x234>
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	2b22      	cmp	r3, #34	; 0x22
 8004976:	d10d      	bne.n	8004994 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff f804 	bl	800399c <HAL_I2C_SlaveRxCpltCallback>
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	08004ce9 	.word	0x08004ce9
 80049a0:	ffff0000 	.word	0xffff0000

080049a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d002      	beq.n	80049c6 <I2C_Slave_AF+0x22>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d129      	bne.n	8004a1a <I2C_Slave_AF+0x76>
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b28      	cmp	r3, #40	; 0x28
 80049ca:	d126      	bne.n	8004a1a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	; (8004a80 <I2C_Slave_AF+0xdc>)
 80049d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fe ffda 	bl	80039cc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a18:	e02e      	b.n	8004a78 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b21      	cmp	r3, #33	; 0x21
 8004a1e:	d126      	bne.n	8004a6e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <I2C_Slave_AF+0xdc>)
 8004a24:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2221      	movs	r2, #33	; 0x21
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a4a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a54:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a64:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fe ff8e 	bl	8003988 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a6c:	e004      	b.n	8004a78 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a76:	615a      	str	r2, [r3, #20]
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	ffff0000 	.word	0xffff0000

08004a84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a9c:	7bbb      	ldrb	r3, [r7, #14]
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d002      	beq.n	8004aa8 <I2C_ITError+0x24>
 8004aa2:	7bbb      	ldrb	r3, [r7, #14]
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d10a      	bne.n	8004abe <I2C_ITError+0x3a>
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b22      	cmp	r3, #34	; 0x22
 8004aac:	d107      	bne.n	8004abe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004abc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ac4:	2b28      	cmp	r3, #40	; 0x28
 8004ac6:	d107      	bne.n	8004ad8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2228      	movs	r2, #40	; 0x28
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ad6:	e015      	b.n	8004b04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d00a      	beq.n	8004afe <I2C_ITError+0x7a>
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b60      	cmp	r3, #96	; 0x60
 8004aec:	d007      	beq.n	8004afe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b12:	d162      	bne.n	8004bda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d020      	beq.n	8004b74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	4a6a      	ldr	r2, [pc, #424]	; (8004ce0 <I2C_ITError+0x25c>)
 8004b38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fd ff52 	bl	80029e8 <HAL_DMA_Abort_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 8089 	beq.w	8004c5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0201 	bic.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4798      	blx	r3
 8004b72:	e074      	b.n	8004c5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	4a59      	ldr	r2, [pc, #356]	; (8004ce0 <I2C_ITError+0x25c>)
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fd ff31 	bl	80029e8 <HAL_DMA_Abort_IT>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d068      	beq.n	8004c5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b40      	cmp	r3, #64	; 0x40
 8004b98:	d10b      	bne.n	8004bb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4798      	blx	r3
 8004bd8:	e041      	b.n	8004c5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b60      	cmp	r3, #96	; 0x60
 8004be4:	d125      	bne.n	8004c32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d10b      	bne.n	8004c1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691a      	ldr	r2, [r3, #16]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fe fef6 	bl	8003a1c <HAL_I2C_AbortCpltCallback>
 8004c30:	e015      	b.n	8004c5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d10b      	bne.n	8004c58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fe fed5 	bl	8003a08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10e      	bne.n	8004c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d113      	bne.n	8004cd8 <I2C_ITError+0x254>
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b28      	cmp	r3, #40	; 0x28
 8004cb4:	d110      	bne.n	8004cd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <I2C_ITError+0x260>)
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fe fe7a 	bl	80039cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08004ce9 	.word	0x08004ce9
 8004ce4:	ffff0000 	.word	0xffff0000

08004ce8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <I2C_DMAAbort+0x148>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	08db      	lsrs	r3, r3, #3
 8004d08:	4a4a      	ldr	r2, [pc, #296]	; (8004e34 <I2C_DMAAbort+0x14c>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0a1a      	lsrs	r2, r3, #8
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00da      	lsls	r2, r3, #3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d2e:	e00a      	b.n	8004d46 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d44:	d0ea      	beq.n	8004d1c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	2200      	movs	r2, #0
 8004d54:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d62:	2200      	movs	r2, #0
 8004d64:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d74:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	2200      	movs	r2, #0
 8004d8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b60      	cmp	r3, #96	; 0x60
 8004db6:	d10e      	bne.n	8004dd6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dce:	6978      	ldr	r0, [r7, #20]
 8004dd0:	f7fe fe24 	bl	8003a1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dd4:	e027      	b.n	8004e26 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dd6:	7cfb      	ldrb	r3, [r7, #19]
 8004dd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ddc:	2b28      	cmp	r3, #40	; 0x28
 8004dde:	d117      	bne.n	8004e10 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2228      	movs	r2, #40	; 0x28
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e0e:	e007      	b.n	8004e20 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e20:	6978      	ldr	r0, [r7, #20]
 8004e22:	f7fe fdf1 	bl	8003a08 <HAL_I2C_ErrorCallback>
}
 8004e26:	bf00      	nop
 8004e28:	3718      	adds	r7, #24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000010 	.word	0x20000010
 8004e34:	14f8b589 	.word	0x14f8b589

08004e38 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	08db      	lsrs	r3, r3, #3
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	0a1a      	lsrs	r2, r3, #8
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f043 0220 	orr.w	r2, r3, #32
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e008      	b.n	8004e88 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e84:	d0e9      	beq.n	8004e5a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	20000010 	.word	0x20000010
 8004e98:	14f8b589 	.word	0x14f8b589

08004e9c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004eac:	d103      	bne.n	8004eb6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004eb4:	e007      	b.n	8004ec6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ebe:	d102      	bne.n	8004ec6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2208      	movs	r2, #8
 8004ec4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0cc      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b68      	ldr	r3, [pc, #416]	; (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d90c      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b65      	ldr	r3, [pc, #404]	; (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b63      	ldr	r3, [pc, #396]	; (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0b8      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f28:	4b59      	ldr	r3, [pc, #356]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4a58      	ldr	r2, [pc, #352]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f40:	4b53      	ldr	r3, [pc, #332]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a52      	ldr	r2, [pc, #328]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b50      	ldr	r3, [pc, #320]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	494d      	ldr	r1, [pc, #308]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d044      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	4b47      	ldr	r3, [pc, #284]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d119      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d003      	beq.n	8004f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	4b3f      	ldr	r3, [pc, #252]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e06f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e067      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb2:	4b37      	ldr	r3, [pc, #220]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 0203 	bic.w	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4934      	ldr	r1, [pc, #208]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc4:	f7fd fa7c 	bl	80024c0 <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fcc:	f7fd fa78 	bl	80024c0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e04f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 020c 	and.w	r2, r3, #12
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1eb      	bne.n	8004fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b25      	ldr	r3, [pc, #148]	; (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d20c      	bcs.n	800501c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b22      	ldr	r3, [pc, #136]	; (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e032      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4916      	ldr	r1, [pc, #88]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	490e      	ldr	r1, [pc, #56]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800505a:	f000 f855 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 800505e:	4602      	mov	r2, r0
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	490a      	ldr	r1, [pc, #40]	; (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	5ccb      	ldrb	r3, [r1, r3]
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	4a09      	ldr	r2, [pc, #36]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd f9dc 	bl	8002438 <HAL_InitTick>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023c00 	.word	0x40023c00
 8005090:	40023800 	.word	0x40023800
 8005094:	080076a4 	.word	0x080076a4
 8005098:	20000010 	.word	0x20000010
 800509c:	20000018 	.word	0x20000018

080050a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a6:	681b      	ldr	r3, [r3, #0]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000010 	.word	0x20000010

080050b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050bc:	f7ff fff0 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	0a9b      	lsrs	r3, r3, #10
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4903      	ldr	r1, [pc, #12]	; (80050dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40023800 	.word	0x40023800
 80050dc:	080076b4 	.word	0x080076b4

080050e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050e4:	f7ff ffdc 	bl	80050a0 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0b5b      	lsrs	r3, r3, #13
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4903      	ldr	r1, [pc, #12]	; (8005104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	080076b4 	.word	0x080076b4

08005108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800510c:	b088      	sub	sp, #32
 800510e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005124:	4bce      	ldr	r3, [pc, #824]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 030c 	and.w	r3, r3, #12
 800512c:	2b0c      	cmp	r3, #12
 800512e:	f200 818d 	bhi.w	800544c <HAL_RCC_GetSysClockFreq+0x344>
 8005132:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <HAL_RCC_GetSysClockFreq+0x30>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	0800516d 	.word	0x0800516d
 800513c:	0800544d 	.word	0x0800544d
 8005140:	0800544d 	.word	0x0800544d
 8005144:	0800544d 	.word	0x0800544d
 8005148:	08005173 	.word	0x08005173
 800514c:	0800544d 	.word	0x0800544d
 8005150:	0800544d 	.word	0x0800544d
 8005154:	0800544d 	.word	0x0800544d
 8005158:	08005179 	.word	0x08005179
 800515c:	0800544d 	.word	0x0800544d
 8005160:	0800544d 	.word	0x0800544d
 8005164:	0800544d 	.word	0x0800544d
 8005168:	080052ed 	.word	0x080052ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800516c:	4bbd      	ldr	r3, [pc, #756]	; (8005464 <HAL_RCC_GetSysClockFreq+0x35c>)
 800516e:	61bb      	str	r3, [r7, #24]
       break;
 8005170:	e16f      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005172:	4bbd      	ldr	r3, [pc, #756]	; (8005468 <HAL_RCC_GetSysClockFreq+0x360>)
 8005174:	61bb      	str	r3, [r7, #24]
      break;
 8005176:	e16c      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005178:	4bb9      	ldr	r3, [pc, #740]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005180:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005182:	4bb7      	ldr	r3, [pc, #732]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d053      	beq.n	8005236 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800518e:	4bb4      	ldr	r3, [pc, #720]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	099b      	lsrs	r3, r3, #6
 8005194:	461a      	mov	r2, r3
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800519e:	f04f 0100 	mov.w	r1, #0
 80051a2:	ea02 0400 	and.w	r4, r2, r0
 80051a6:	603c      	str	r4, [r7, #0]
 80051a8:	400b      	ands	r3, r1
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051b0:	4620      	mov	r0, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	014b      	lsls	r3, r1, #5
 80051be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051c2:	0142      	lsls	r2, r0, #5
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	4623      	mov	r3, r4
 80051ca:	1ac0      	subs	r0, r0, r3
 80051cc:	462b      	mov	r3, r5
 80051ce:	eb61 0103 	sbc.w	r1, r1, r3
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	018b      	lsls	r3, r1, #6
 80051dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051e0:	0182      	lsls	r2, r0, #6
 80051e2:	1a12      	subs	r2, r2, r0
 80051e4:	eb63 0301 	sbc.w	r3, r3, r1
 80051e8:	f04f 0000 	mov.w	r0, #0
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	00d9      	lsls	r1, r3, #3
 80051f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051f6:	00d0      	lsls	r0, r2, #3
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4621      	mov	r1, r4
 80051fe:	1852      	adds	r2, r2, r1
 8005200:	4629      	mov	r1, r5
 8005202:	eb43 0101 	adc.w	r1, r3, r1
 8005206:	460b      	mov	r3, r1
 8005208:	f04f 0000 	mov.w	r0, #0
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	0259      	lsls	r1, r3, #9
 8005212:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005216:	0250      	lsls	r0, r2, #9
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f7fb fafa 	bl	8000820 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e04c      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005236:	4b8a      	ldr	r3, [pc, #552]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	099b      	lsrs	r3, r3, #6
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	ea02 0a00 	and.w	sl, r2, r0
 800524e:	ea03 0b01 	and.w	fp, r3, r1
 8005252:	4650      	mov	r0, sl
 8005254:	4659      	mov	r1, fp
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	014b      	lsls	r3, r1, #5
 8005260:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005264:	0142      	lsls	r2, r0, #5
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	ebb0 000a 	subs.w	r0, r0, sl
 800526e:	eb61 010b 	sbc.w	r1, r1, fp
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	018b      	lsls	r3, r1, #6
 800527c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005280:	0182      	lsls	r2, r0, #6
 8005282:	1a12      	subs	r2, r2, r0
 8005284:	eb63 0301 	sbc.w	r3, r3, r1
 8005288:	f04f 0000 	mov.w	r0, #0
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	00d9      	lsls	r1, r3, #3
 8005292:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005296:	00d0      	lsls	r0, r2, #3
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	eb12 020a 	adds.w	r2, r2, sl
 80052a0:	eb43 030b 	adc.w	r3, r3, fp
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	0299      	lsls	r1, r3, #10
 80052ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052b2:	0290      	lsls	r0, r2, #10
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	461a      	mov	r2, r3
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	f7fb faac 	bl	8000820 <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4613      	mov	r3, r2
 80052ce:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052d0:	4b63      	ldr	r3, [pc, #396]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	3301      	adds	r3, #1
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	61bb      	str	r3, [r7, #24]
      break;
 80052ea:	e0b2      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052ec:	4b5c      	ldr	r3, [pc, #368]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052f6:	4b5a      	ldr	r3, [pc, #360]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d04d      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005302:	4b57      	ldr	r3, [pc, #348]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	099b      	lsrs	r3, r3, #6
 8005308:	461a      	mov	r2, r3
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	ea02 0800 	and.w	r8, r2, r0
 800531a:	ea03 0901 	and.w	r9, r3, r1
 800531e:	4640      	mov	r0, r8
 8005320:	4649      	mov	r1, r9
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	014b      	lsls	r3, r1, #5
 800532c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005330:	0142      	lsls	r2, r0, #5
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	ebb0 0008 	subs.w	r0, r0, r8
 800533a:	eb61 0109 	sbc.w	r1, r1, r9
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	018b      	lsls	r3, r1, #6
 8005348:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800534c:	0182      	lsls	r2, r0, #6
 800534e:	1a12      	subs	r2, r2, r0
 8005350:	eb63 0301 	sbc.w	r3, r3, r1
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	00d9      	lsls	r1, r3, #3
 800535e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005362:	00d0      	lsls	r0, r2, #3
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	eb12 0208 	adds.w	r2, r2, r8
 800536c:	eb43 0309 	adc.w	r3, r3, r9
 8005370:	f04f 0000 	mov.w	r0, #0
 8005374:	f04f 0100 	mov.w	r1, #0
 8005378:	0259      	lsls	r1, r3, #9
 800537a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800537e:	0250      	lsls	r0, r2, #9
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	461a      	mov	r2, r3
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	f7fb fa46 	bl	8000820 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e04a      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b30      	ldr	r3, [pc, #192]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	461a      	mov	r2, r3
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	ea02 0400 	and.w	r4, r2, r0
 80053b6:	ea03 0501 	and.w	r5, r3, r1
 80053ba:	4620      	mov	r0, r4
 80053bc:	4629      	mov	r1, r5
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	014b      	lsls	r3, r1, #5
 80053c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053cc:	0142      	lsls	r2, r0, #5
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	1b00      	subs	r0, r0, r4
 80053d4:	eb61 0105 	sbc.w	r1, r1, r5
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	018b      	lsls	r3, r1, #6
 80053e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053e6:	0182      	lsls	r2, r0, #6
 80053e8:	1a12      	subs	r2, r2, r0
 80053ea:	eb63 0301 	sbc.w	r3, r3, r1
 80053ee:	f04f 0000 	mov.w	r0, #0
 80053f2:	f04f 0100 	mov.w	r1, #0
 80053f6:	00d9      	lsls	r1, r3, #3
 80053f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053fc:	00d0      	lsls	r0, r2, #3
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	1912      	adds	r2, r2, r4
 8005404:	eb45 0303 	adc.w	r3, r5, r3
 8005408:	f04f 0000 	mov.w	r0, #0
 800540c:	f04f 0100 	mov.w	r1, #0
 8005410:	0299      	lsls	r1, r3, #10
 8005412:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005416:	0290      	lsls	r0, r2, #10
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4610      	mov	r0, r2
 800541e:	4619      	mov	r1, r3
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	461a      	mov	r2, r3
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	f7fb f9fa 	bl	8000820 <__aeabi_uldivmod>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	4613      	mov	r3, r2
 8005432:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_RCC_GetSysClockFreq+0x358>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	0f1b      	lsrs	r3, r3, #28
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	61bb      	str	r3, [r7, #24]
      break;
 800544a:	e002      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b05      	ldr	r3, [pc, #20]	; (8005464 <HAL_RCC_GetSysClockFreq+0x35c>)
 800544e:	61bb      	str	r3, [r7, #24]
      break;
 8005450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005452:	69bb      	ldr	r3, [r7, #24]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3720      	adds	r7, #32
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	00f42400 	.word	0x00f42400
 8005468:	007a1200 	.word	0x007a1200

0800546c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e28d      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	f000 8083 	beq.w	8005592 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800548c:	4b94      	ldr	r3, [pc, #592]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 030c 	and.w	r3, r3, #12
 8005494:	2b04      	cmp	r3, #4
 8005496:	d019      	beq.n	80054cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005498:	4b91      	ldr	r3, [pc, #580]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054a4:	4b8e      	ldr	r3, [pc, #568]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b0:	d00c      	beq.n	80054cc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b2:	4b8b      	ldr	r3, [pc, #556]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	d112      	bne.n	80054e4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054be:	4b88      	ldr	r3, [pc, #544]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ca:	d10b      	bne.n	80054e4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054cc:	4b84      	ldr	r3, [pc, #528]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d05b      	beq.n	8005590 <HAL_RCC_OscConfig+0x124>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d157      	bne.n	8005590 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e25a      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ec:	d106      	bne.n	80054fc <HAL_RCC_OscConfig+0x90>
 80054ee:	4b7c      	ldr	r3, [pc, #496]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a7b      	ldr	r2, [pc, #492]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e01d      	b.n	8005538 <HAL_RCC_OscConfig+0xcc>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005504:	d10c      	bne.n	8005520 <HAL_RCC_OscConfig+0xb4>
 8005506:	4b76      	ldr	r3, [pc, #472]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a75      	ldr	r2, [pc, #468]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 800550c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	4b73      	ldr	r3, [pc, #460]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a72      	ldr	r2, [pc, #456]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e00b      	b.n	8005538 <HAL_RCC_OscConfig+0xcc>
 8005520:	4b6f      	ldr	r3, [pc, #444]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a6e      	ldr	r2, [pc, #440]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552a:	6013      	str	r3, [r2, #0]
 800552c:	4b6c      	ldr	r3, [pc, #432]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d013      	beq.n	8005568 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc ffbe 	bl	80024c0 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005548:	f7fc ffba 	bl	80024c0 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	; 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e21f      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555a:	4b61      	ldr	r3, [pc, #388]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0xdc>
 8005566:	e014      	b.n	8005592 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fc ffaa 	bl	80024c0 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005570:	f7fc ffa6 	bl	80024c0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e20b      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005582:	4b57      	ldr	r3, [pc, #348]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x104>
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d06f      	beq.n	800567e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800559e:	4b50      	ldr	r3, [pc, #320]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d017      	beq.n	80055da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055aa:	4b4d      	ldr	r3, [pc, #308]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d105      	bne.n	80055c2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055b6:	4b4a      	ldr	r3, [pc, #296]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055c2:	4b47      	ldr	r3, [pc, #284]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	d11c      	bne.n	8005608 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ce:	4b44      	ldr	r3, [pc, #272]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d116      	bne.n	8005608 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055da:	4b41      	ldr	r3, [pc, #260]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_RCC_OscConfig+0x186>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d001      	beq.n	80055f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e1d3      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f2:	4b3b      	ldr	r3, [pc, #236]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4937      	ldr	r1, [pc, #220]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005606:	e03a      	b.n	800567e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d020      	beq.n	8005652 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005610:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_RCC_OscConfig+0x278>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005616:	f7fc ff53 	bl	80024c0 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800561e:	f7fc ff4f 	bl	80024c0 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e1b4      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563c:	4b28      	ldr	r3, [pc, #160]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4925      	ldr	r1, [pc, #148]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]
 8005650:	e015      	b.n	800567e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005652:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <HAL_RCC_OscConfig+0x278>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005658:	f7fc ff32 	bl	80024c0 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005660:	f7fc ff2e 	bl	80024c0 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e193      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005672:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f0      	bne.n	8005660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b00      	cmp	r3, #0
 8005688:	d036      	beq.n	80056f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d016      	beq.n	80056c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <HAL_RCC_OscConfig+0x27c>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005698:	f7fc ff12 	bl	80024c0 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056a0:	f7fc ff0e 	bl	80024c0 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e173      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056b2:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <HAL_RCC_OscConfig+0x274>)
 80056b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0f0      	beq.n	80056a0 <HAL_RCC_OscConfig+0x234>
 80056be:	e01b      	b.n	80056f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_RCC_OscConfig+0x27c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c6:	f7fc fefb 	bl	80024c0 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056cc:	e00e      	b.n	80056ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ce:	f7fc fef7 	bl	80024c0 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d907      	bls.n	80056ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e15c      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	42470000 	.word	0x42470000
 80056e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ec:	4b8a      	ldr	r3, [pc, #552]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80056ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ea      	bne.n	80056ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8097 	beq.w	8005834 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005706:	2300      	movs	r3, #0
 8005708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800570a:	4b83      	ldr	r3, [pc, #524]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10f      	bne.n	8005736 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	4b7f      	ldr	r3, [pc, #508]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	4a7e      	ldr	r2, [pc, #504]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005724:	6413      	str	r3, [r2, #64]	; 0x40
 8005726:	4b7c      	ldr	r3, [pc, #496]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005732:	2301      	movs	r3, #1
 8005734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005736:	4b79      	ldr	r3, [pc, #484]	; (800591c <HAL_RCC_OscConfig+0x4b0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d118      	bne.n	8005774 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005742:	4b76      	ldr	r3, [pc, #472]	; (800591c <HAL_RCC_OscConfig+0x4b0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a75      	ldr	r2, [pc, #468]	; (800591c <HAL_RCC_OscConfig+0x4b0>)
 8005748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800574e:	f7fc feb7 	bl	80024c0 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005756:	f7fc feb3 	bl	80024c0 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e118      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005768:	4b6c      	ldr	r3, [pc, #432]	; (800591c <HAL_RCC_OscConfig+0x4b0>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d106      	bne.n	800578a <HAL_RCC_OscConfig+0x31e>
 800577c:	4b66      	ldr	r3, [pc, #408]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005780:	4a65      	ldr	r2, [pc, #404]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	6713      	str	r3, [r2, #112]	; 0x70
 8005788:	e01c      	b.n	80057c4 <HAL_RCC_OscConfig+0x358>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b05      	cmp	r3, #5
 8005790:	d10c      	bne.n	80057ac <HAL_RCC_OscConfig+0x340>
 8005792:	4b61      	ldr	r3, [pc, #388]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005796:	4a60      	ldr	r2, [pc, #384]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005798:	f043 0304 	orr.w	r3, r3, #4
 800579c:	6713      	str	r3, [r2, #112]	; 0x70
 800579e:	4b5e      	ldr	r3, [pc, #376]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	4a5d      	ldr	r2, [pc, #372]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	6713      	str	r3, [r2, #112]	; 0x70
 80057aa:	e00b      	b.n	80057c4 <HAL_RCC_OscConfig+0x358>
 80057ac:	4b5a      	ldr	r3, [pc, #360]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	4a59      	ldr	r2, [pc, #356]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80057b2:	f023 0301 	bic.w	r3, r3, #1
 80057b6:	6713      	str	r3, [r2, #112]	; 0x70
 80057b8:	4b57      	ldr	r3, [pc, #348]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	4a56      	ldr	r2, [pc, #344]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80057be:	f023 0304 	bic.w	r3, r3, #4
 80057c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d015      	beq.n	80057f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057cc:	f7fc fe78 	bl	80024c0 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057d4:	f7fc fe74 	bl	80024c0 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0d7      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ea:	4b4b      	ldr	r3, [pc, #300]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0ee      	beq.n	80057d4 <HAL_RCC_OscConfig+0x368>
 80057f6:	e014      	b.n	8005822 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f8:	f7fc fe62 	bl	80024c0 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005800:	f7fc fe5e 	bl	80024c0 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e0c1      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005816:	4b40      	ldr	r3, [pc, #256]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1ee      	bne.n	8005800 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005822:	7dfb      	ldrb	r3, [r7, #23]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d105      	bne.n	8005834 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005828:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	4a3a      	ldr	r2, [pc, #232]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 800582e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80ad 	beq.w	8005998 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800583e:	4b36      	ldr	r3, [pc, #216]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b08      	cmp	r3, #8
 8005848:	d060      	beq.n	800590c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d145      	bne.n	80058de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005852:	4b33      	ldr	r3, [pc, #204]	; (8005920 <HAL_RCC_OscConfig+0x4b4>)
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005858:	f7fc fe32 	bl	80024c0 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005860:	f7fc fe2e 	bl	80024c0 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e093      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f0      	bne.n	8005860 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69da      	ldr	r2, [r3, #28]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	3b01      	subs	r3, #1
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	071b      	lsls	r3, r3, #28
 80058aa:	491b      	ldr	r1, [pc, #108]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <HAL_RCC_OscConfig+0x4b4>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fc fe03 	bl	80024c0 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058be:	f7fc fdff 	bl	80024c0 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e064      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d0:	4b11      	ldr	r3, [pc, #68]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x452>
 80058dc:	e05c      	b.n	8005998 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <HAL_RCC_OscConfig+0x4b4>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fc fdec 	bl	80024c0 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ec:	f7fc fde8 	bl	80024c0 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e04d      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <HAL_RCC_OscConfig+0x4ac>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1f0      	bne.n	80058ec <HAL_RCC_OscConfig+0x480>
 800590a:	e045      	b.n	8005998 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d107      	bne.n	8005924 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e040      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
 8005918:	40023800 	.word	0x40023800
 800591c:	40007000 	.word	0x40007000
 8005920:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005924:	4b1f      	ldr	r3, [pc, #124]	; (80059a4 <HAL_RCC_OscConfig+0x538>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d030      	beq.n	8005994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d129      	bne.n	8005994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594a:	429a      	cmp	r2, r3
 800594c:	d122      	bne.n	8005994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005954:	4013      	ands	r3, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800595a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800595c:	4293      	cmp	r3, r2
 800595e:	d119      	bne.n	8005994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	3b01      	subs	r3, #1
 800596e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005970:	429a      	cmp	r2, r3
 8005972:	d10f      	bne.n	8005994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005980:	429a      	cmp	r2, r3
 8005982:	d107      	bne.n	8005994 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005990:	429a      	cmp	r2, r3
 8005992:	d001      	beq.n	8005998 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40023800 	.word	0x40023800

080059a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e041      	b.n	8005a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7fb ffda 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f000 fad8 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e041      	b.n	8005adc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f839 	bl	8005ae4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3304      	adds	r3, #4
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 fa89 	bl	8005f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d109      	bne.n	8005b1c <HAL_TIM_PWM_Start+0x24>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	bf14      	ite	ne
 8005b14:	2301      	movne	r3, #1
 8005b16:	2300      	moveq	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	e022      	b.n	8005b62 <HAL_TIM_PWM_Start+0x6a>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d109      	bne.n	8005b36 <HAL_TIM_PWM_Start+0x3e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	bf14      	ite	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	2300      	moveq	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	e015      	b.n	8005b62 <HAL_TIM_PWM_Start+0x6a>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d109      	bne.n	8005b50 <HAL_TIM_PWM_Start+0x58>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	bf14      	ite	ne
 8005b48:	2301      	movne	r3, #1
 8005b4a:	2300      	moveq	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e008      	b.n	8005b62 <HAL_TIM_PWM_Start+0x6a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d001      	beq.n	8005b6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e07c      	b.n	8005c64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_PWM_Start+0x82>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b78:	e013      	b.n	8005ba2 <HAL_TIM_PWM_Start+0xaa>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0x92>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b88:	e00b      	b.n	8005ba2 <HAL_TIM_PWM_Start+0xaa>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start+0xa2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b98:	e003      	b.n	8005ba2 <HAL_TIM_PWM_Start+0xaa>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fce0 	bl	8006570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2d      	ldr	r2, [pc, #180]	; (8005c6c <HAL_TIM_PWM_Start+0x174>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <HAL_TIM_PWM_Start+0xcc>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	; (8005c70 <HAL_TIM_PWM_Start+0x178>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0xd0>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <HAL_TIM_PWM_Start+0xd2>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <HAL_TIM_PWM_Start+0x174>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d022      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x136>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf0:	d01d      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x136>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1f      	ldr	r2, [pc, #124]	; (8005c74 <HAL_TIM_PWM_Start+0x17c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d018      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x136>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <HAL_TIM_PWM_Start+0x180>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d013      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x136>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <HAL_TIM_PWM_Start+0x184>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00e      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x136>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <HAL_TIM_PWM_Start+0x178>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x136>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <HAL_TIM_PWM_Start+0x188>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x136>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a16      	ldr	r2, [pc, #88]	; (8005c84 <HAL_TIM_PWM_Start+0x18c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b06      	cmp	r3, #6
 8005c3e:	d010      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	e007      	b.n	8005c62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40010400 	.word	0x40010400
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40001800 	.word	0x40001800

08005c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0ae      	b.n	8005e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b0c      	cmp	r3, #12
 8005cb2:	f200 809f 	bhi.w	8005df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005df5 	.word	0x08005df5
 8005cc4:	08005df5 	.word	0x08005df5
 8005cc8:	08005df5 	.word	0x08005df5
 8005ccc:	08005d31 	.word	0x08005d31
 8005cd0:	08005df5 	.word	0x08005df5
 8005cd4:	08005df5 	.word	0x08005df5
 8005cd8:	08005df5 	.word	0x08005df5
 8005cdc:	08005d73 	.word	0x08005d73
 8005ce0:	08005df5 	.word	0x08005df5
 8005ce4:	08005df5 	.word	0x08005df5
 8005ce8:	08005df5 	.word	0x08005df5
 8005cec:	08005db3 	.word	0x08005db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68b9      	ldr	r1, [r7, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 f9f0 	bl	80060dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0208 	orr.w	r2, r2, #8
 8005d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0204 	bic.w	r2, r2, #4
 8005d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6999      	ldr	r1, [r3, #24]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	619a      	str	r2, [r3, #24]
      break;
 8005d2e:	e064      	b.n	8005dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fa40 	bl	80061bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6999      	ldr	r1, [r3, #24]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	021a      	lsls	r2, r3, #8
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	619a      	str	r2, [r3, #24]
      break;
 8005d70:	e043      	b.n	8005dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fa95 	bl	80062a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0208 	orr.w	r2, r2, #8
 8005d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f022 0204 	bic.w	r2, r2, #4
 8005d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69d9      	ldr	r1, [r3, #28]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	61da      	str	r2, [r3, #28]
      break;
 8005db0:	e023      	b.n	8005dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fae9 	bl	8006390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69d9      	ldr	r1, [r3, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	021a      	lsls	r2, r3, #8
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	61da      	str	r2, [r3, #28]
      break;
 8005df2:	e002      	b.n	8005dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	75fb      	strb	r3, [r7, #23]
      break;
 8005df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIM_ConfigClockSource+0x1c>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e0b4      	b.n	8005f92 <HAL_TIM_ConfigClockSource+0x186>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e60:	d03e      	beq.n	8005ee0 <HAL_TIM_ConfigClockSource+0xd4>
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	f200 8087 	bhi.w	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6e:	f000 8086 	beq.w	8005f7e <HAL_TIM_ConfigClockSource+0x172>
 8005e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e76:	d87f      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e78:	2b70      	cmp	r3, #112	; 0x70
 8005e7a:	d01a      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005e7c:	2b70      	cmp	r3, #112	; 0x70
 8005e7e:	d87b      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e80:	2b60      	cmp	r3, #96	; 0x60
 8005e82:	d050      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0x11a>
 8005e84:	2b60      	cmp	r3, #96	; 0x60
 8005e86:	d877      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e88:	2b50      	cmp	r3, #80	; 0x50
 8005e8a:	d03c      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0xfa>
 8005e8c:	2b50      	cmp	r3, #80	; 0x50
 8005e8e:	d873      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d058      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0x13a>
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d86f      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b30      	cmp	r3, #48	; 0x30
 8005e9a:	d064      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005e9c:	2b30      	cmp	r3, #48	; 0x30
 8005e9e:	d86b      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d060      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d867      	bhi.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d05c      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d05a      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x15a>
 8005eb0:	e062      	b.n	8005f78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6899      	ldr	r1, [r3, #8]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f000 fb35 	bl	8006530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ed4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	609a      	str	r2, [r3, #8]
      break;
 8005ede:	e04f      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	6899      	ldr	r1, [r3, #8]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f000 fb1e 	bl	8006530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f02:	609a      	str	r2, [r3, #8]
      break;
 8005f04:	e03c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6859      	ldr	r1, [r3, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	461a      	mov	r2, r3
 8005f14:	f000 fa92 	bl	800643c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2150      	movs	r1, #80	; 0x50
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 faeb 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005f24:	e02c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6859      	ldr	r1, [r3, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f000 fab1 	bl	800649a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2160      	movs	r1, #96	; 0x60
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fadb 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005f44:	e01c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6859      	ldr	r1, [r3, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f000 fa72 	bl	800643c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2140      	movs	r1, #64	; 0x40
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 facb 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005f64:	e00c      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f000 fac2 	bl	80064fa <TIM_ITRx_SetConfig>
      break;
 8005f76:	e003      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f7c:	e000      	b.n	8005f80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a40      	ldr	r2, [pc, #256]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d00f      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3d      	ldr	r2, [pc, #244]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00b      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3c      	ldr	r2, [pc, #240]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d007      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3b      	ldr	r2, [pc, #236]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d003      	beq.n	8005fdc <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3a      	ldr	r2, [pc, #232]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2f      	ldr	r2, [pc, #188]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffc:	d027      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <TIM_Base_SetConfig+0x118>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d023      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <TIM_Base_SetConfig+0x11c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <TIM_Base_SetConfig+0x120>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a29      	ldr	r2, [pc, #164]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d017      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a28      	ldr	r2, [pc, #160]	; (80060c4 <TIM_Base_SetConfig+0x128>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <TIM_Base_SetConfig+0x12c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00f      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a26      	ldr	r2, [pc, #152]	; (80060cc <TIM_Base_SetConfig+0x130>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00b      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <TIM_Base_SetConfig+0x134>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <TIM_Base_SetConfig+0x138>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a23      	ldr	r2, [pc, #140]	; (80060d8 <TIM_Base_SetConfig+0x13c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d108      	bne.n	8006060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a0a      	ldr	r2, [pc, #40]	; (80060b0 <TIM_Base_SetConfig+0x114>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_Base_SetConfig+0xf8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <TIM_Base_SetConfig+0x124>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d103      	bne.n	800609c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	691a      	ldr	r2, [r3, #16]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	615a      	str	r2, [r3, #20]
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40010000 	.word	0x40010000
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40010400 	.word	0x40010400
 80060c4:	40014000 	.word	0x40014000
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40014800 	.word	0x40014800
 80060d0:	40001800 	.word	0x40001800
 80060d4:	40001c00 	.word	0x40001c00
 80060d8:	40002000 	.word	0x40002000

080060dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f023 0201 	bic.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f023 0302 	bic.w	r3, r3, #2
 8006124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a20      	ldr	r2, [pc, #128]	; (80061b4 <TIM_OC1_SetConfig+0xd8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC1_SetConfig+0x64>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a1f      	ldr	r2, [pc, #124]	; (80061b8 <TIM_OC1_SetConfig+0xdc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10c      	bne.n	800615a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0308 	bic.w	r3, r3, #8
 8006146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0304 	bic.w	r3, r3, #4
 8006158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a15      	ldr	r2, [pc, #84]	; (80061b4 <TIM_OC1_SetConfig+0xd8>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d003      	beq.n	800616a <TIM_OC1_SetConfig+0x8e>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <TIM_OC1_SetConfig+0xdc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d111      	bne.n	800618e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	bf00      	nop
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400

080061bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f023 0210 	bic.w	r2, r3, #16
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0320 	bic.w	r3, r3, #32
 8006206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a22      	ldr	r2, [pc, #136]	; (80062a0 <TIM_OC2_SetConfig+0xe4>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC2_SetConfig+0x68>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a21      	ldr	r2, [pc, #132]	; (80062a4 <TIM_OC2_SetConfig+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10d      	bne.n	8006240 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a17      	ldr	r2, [pc, #92]	; (80062a0 <TIM_OC2_SetConfig+0xe4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC2_SetConfig+0x94>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a16      	ldr	r2, [pc, #88]	; (80062a4 <TIM_OC2_SetConfig+0xe8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d113      	bne.n	8006278 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800625e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	4313      	orrs	r3, r2
 800626a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400

080062a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a21      	ldr	r2, [pc, #132]	; (8006388 <TIM_OC3_SetConfig+0xe0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC3_SetConfig+0x66>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a20      	ldr	r2, [pc, #128]	; (800638c <TIM_OC3_SetConfig+0xe4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10d      	bne.n	800632a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a16      	ldr	r2, [pc, #88]	; (8006388 <TIM_OC3_SetConfig+0xe0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_OC3_SetConfig+0x92>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a15      	ldr	r2, [pc, #84]	; (800638c <TIM_OC3_SetConfig+0xe4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d113      	bne.n	8006362 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	621a      	str	r2, [r3, #32]
}
 800637c:	bf00      	nop
 800637e:	371c      	adds	r7, #28
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	40010000 	.word	0x40010000
 800638c:	40010400 	.word	0x40010400

08006390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	031b      	lsls	r3, r3, #12
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a12      	ldr	r2, [pc, #72]	; (8006434 <TIM_OC4_SetConfig+0xa4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d003      	beq.n	80063f8 <TIM_OC4_SetConfig+0x68>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a11      	ldr	r2, [pc, #68]	; (8006438 <TIM_OC4_SetConfig+0xa8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d109      	bne.n	800640c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	019b      	lsls	r3, r3, #6
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400

0800643c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	f023 0201 	bic.w	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 030a 	bic.w	r3, r3, #10
 8006478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4313      	orrs	r3, r2
 8006480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	621a      	str	r2, [r3, #32]
}
 800648e:	bf00      	nop
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649a:	b480      	push	{r7}
 800649c:	b087      	sub	sp, #28
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0210 	bic.w	r2, r3, #16
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	031b      	lsls	r3, r3, #12
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4313      	orrs	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	f043 0307 	orr.w	r3, r3, #7
 800651c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800654a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	431a      	orrs	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4313      	orrs	r3, r2
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 031f 	and.w	r3, r3, #31
 8006582:	2201      	movs	r2, #1
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	43db      	mvns	r3, r3
 8006592:	401a      	ands	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	fa01 f303 	lsl.w	r3, r1, r3
 80065a8:	431a      	orrs	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
}
 80065ae:	bf00      	nop
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e05a      	b.n	800668a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a21      	ldr	r2, [pc, #132]	; (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d022      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006620:	d01d      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a1d      	ldr	r2, [pc, #116]	; (800669c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d018      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d013      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00e      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d009      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a17      	ldr	r2, [pc, #92]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d004      	beq.n	800665e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d10c      	bne.n	8006678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	4313      	orrs	r3, r2
 800666e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800
 80066a4:	40000c00 	.word	0x40000c00
 80066a8:	40010400 	.word	0x40010400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40001800 	.word	0x40001800

080066b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e03f      	b.n	8006746 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fb f9d0 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2224      	movs	r2, #36	; 0x24
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fdc7 	bl	800728c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800670c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695a      	ldr	r2, [r3, #20]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800671c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800672c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08c      	sub	sp, #48	; 0x30
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b20      	cmp	r3, #32
 8006768:	d165      	bne.n	8006836 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_UART_Transmit_DMA+0x26>
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e05e      	b.n	8006838 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006780:	2b01      	cmp	r3, #1
 8006782:	d101      	bne.n	8006788 <HAL_UART_Transmit_DMA+0x38>
 8006784:	2302      	movs	r3, #2
 8006786:	e057      	b.n	8006838 <HAL_UART_Transmit_DMA+0xe8>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	88fa      	ldrh	r2, [r7, #6]
 800679a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2221      	movs	r2, #33	; 0x21
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067b4:	4a22      	ldr	r2, [pc, #136]	; (8006840 <HAL_UART_Transmit_DMA+0xf0>)
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067bc:	4a21      	ldr	r2, [pc, #132]	; (8006844 <HAL_UART_Transmit_DMA+0xf4>)
 80067be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	4a20      	ldr	r2, [pc, #128]	; (8006848 <HAL_UART_Transmit_DMA+0xf8>)
 80067c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067cc:	2200      	movs	r2, #0
 80067ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80067d0:	f107 0308 	add.w	r3, r7, #8
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	6819      	ldr	r1, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3304      	adds	r3, #4
 80067e4:	461a      	mov	r2, r3
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	f7fc f836 	bl	8002858 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3314      	adds	r3, #20
 8006804:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	e853 3f00 	ldrex	r3, [r3]
 800680c:	617b      	str	r3, [r7, #20]
   return(result);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800681e:	627a      	str	r2, [r7, #36]	; 0x24
 8006820:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006822:	6a39      	ldr	r1, [r7, #32]
 8006824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	61fb      	str	r3, [r7, #28]
   return(result);
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e5      	bne.n	80067fe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006836:	2302      	movs	r3, #2
  }
}
 8006838:	4618      	mov	r0, r3
 800683a:	3730      	adds	r7, #48	; 0x30
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	08006dbd 	.word	0x08006dbd
 8006844:	08006e57 	.word	0x08006e57
 8006848:	08006e73 	.word	0x08006e73

0800684c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b0ba      	sub	sp, #232	; 0xe8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006872:	2300      	movs	r3, #0
 8006874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006878:	2300      	movs	r3, #0
 800687a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800688a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10f      	bne.n	80068b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_UART_IRQHandler+0x66>
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fc32 	bl	8007114 <UART_Receive_IT>
      return;
 80068b0:	e256      	b.n	8006d60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80de 	beq.w	8006a78 <HAL_UART_IRQHandler+0x22c>
 80068bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 80d1 	beq.w	8006a78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <HAL_UART_IRQHandler+0xae>
 80068e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	f043 0201 	orr.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_UART_IRQHandler+0xd2>
 8006906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d005      	beq.n	800691e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f043 0202 	orr.w	r2, r3, #2
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <HAL_UART_IRQHandler+0xf6>
 800692a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f043 0204 	orr.w	r2, r3, #4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d011      	beq.n	8006972 <HAL_UART_IRQHandler+0x126>
 800694e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d105      	bne.n	8006966 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800695a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0208 	orr.w	r2, r3, #8
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 81ed 	beq.w	8006d56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800697c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_UART_IRQHandler+0x14e>
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fbbd 	bl	8007114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	bf0c      	ite	eq
 80069a8:	2301      	moveq	r3, #1
 80069aa:	2300      	movne	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <HAL_UART_IRQHandler+0x17a>
 80069be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d04f      	beq.n	8006a66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 fac5 	bl	8006f56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d6:	2b40      	cmp	r3, #64	; 0x40
 80069d8:	d141      	bne.n	8006a5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3314      	adds	r3, #20
 80069e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3314      	adds	r3, #20
 8006a02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1d9      	bne.n	80069da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d013      	beq.n	8006a56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	4a7d      	ldr	r2, [pc, #500]	; (8006c28 <HAL_UART_IRQHandler+0x3dc>)
 8006a34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fb ffd4 	bl	80029e8 <HAL_DMA_Abort_IT>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d016      	beq.n	8006a74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a50:	4610      	mov	r0, r2
 8006a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	e00e      	b.n	8006a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f99a 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	e00a      	b.n	8006a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f996 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	e006      	b.n	8006a74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f992 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a72:	e170      	b.n	8006d56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a74:	bf00      	nop
    return;
 8006a76:	e16e      	b.n	8006d56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f040 814a 	bne.w	8006d16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a86:	f003 0310 	and.w	r3, r3, #16
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8143 	beq.w	8006d16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 813c 	beq.w	8006d16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	f040 80b4 	bne.w	8006c2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ad0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 8140 	beq.w	8006d5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	f080 8139 	bcs.w	8006d5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006aee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afa:	f000 8088 	beq.w	8006c0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	330c      	adds	r3, #12
 8006b26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1d9      	bne.n	8006afe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3314      	adds	r3, #20
 8006b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	3314      	adds	r3, #20
 8006b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e1      	bne.n	8006b4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3314      	adds	r3, #20
 8006b8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3314      	adds	r3, #20
 8006ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e3      	bne.n	8006b86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bde:	f023 0310 	bic.w	r3, r3, #16
 8006be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006bf0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bf2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e3      	bne.n	8006bcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fb fe7d 	bl	8002908 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8c0 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c24:	e099      	b.n	8006d5a <HAL_UART_IRQHandler+0x50e>
 8006c26:	bf00      	nop
 8006c28:	0800701d 	.word	0x0800701d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 808b 	beq.w	8006d5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8086 	beq.w	8006d5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c76:	647a      	str	r2, [r7, #68]	; 0x44
 8006c78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c7e:	e841 2300 	strex	r3, r2, [r1]
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1e3      	bne.n	8006c52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3314      	adds	r3, #20
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	623b      	str	r3, [r7, #32]
   return(result);
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cae:	633a      	str	r2, [r7, #48]	; 0x30
 8006cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e3      	bne.n	8006c8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	330c      	adds	r3, #12
 8006cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0310 	bic.w	r3, r3, #16
 8006ce6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006cf4:	61fa      	str	r2, [r7, #28]
 8006cf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	617b      	str	r3, [r7, #20]
   return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e3      	bne.n	8006cd0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f848 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d14:	e023      	b.n	8006d5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <HAL_UART_IRQHandler+0x4ea>
 8006d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f988 	bl	8007044 <UART_Transmit_IT>
    return;
 8006d34:	e014      	b.n	8006d60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <HAL_UART_IRQHandler+0x514>
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f9c8 	bl	80070e4 <UART_EndTransmit_IT>
    return;
 8006d54:	e004      	b.n	8006d60 <HAL_UART_IRQHandler+0x514>
    return;
 8006d56:	bf00      	nop
 8006d58:	e002      	b.n	8006d60 <HAL_UART_IRQHandler+0x514>
      return;
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <HAL_UART_IRQHandler+0x514>
      return;
 8006d5e:	bf00      	nop
  }
}
 8006d60:	37e8      	adds	r7, #232	; 0xe8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop

08006d68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006d70:	bf00      	nop
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b090      	sub	sp, #64	; 0x40
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d137      	bne.n	8006e48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dda:	2200      	movs	r2, #0
 8006ddc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3314      	adds	r3, #20
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	623b      	str	r3, [r7, #32]
   return(result);
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006df4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3314      	adds	r3, #20
 8006dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e06:	e841 2300 	strex	r3, r2, [r1]
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1e5      	bne.n	8006dde <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	e853 3f00 	ldrex	r3, [r3]
 8006e20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
 8006e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e32:	61fa      	str	r2, [r7, #28]
 8006e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	69b9      	ldr	r1, [r7, #24]
 8006e38:	69fa      	ldr	r2, [r7, #28]
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e5      	bne.n	8006e12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e46:	e002      	b.n	8006e4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006e48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e4a:	f7fa fc9f 	bl	800178c <HAL_UART_TxCpltCallback>
}
 8006e4e:	bf00      	nop
 8006e50:	3740      	adds	r7, #64	; 0x40
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff ff7f 	bl	8006d68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8e:	2b80      	cmp	r3, #128	; 0x80
 8006e90:	bf0c      	ite	eq
 8006e92:	2301      	moveq	r3, #1
 8006e94:	2300      	movne	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b21      	cmp	r3, #33	; 0x21
 8006ea4:	d108      	bne.n	8006eb8 <UART_DMAError+0x46>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006eb2:	68b8      	ldr	r0, [r7, #8]
 8006eb4:	f000 f827 	bl	8006f06 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	bf0c      	ite	eq
 8006ec6:	2301      	moveq	r3, #1
 8006ec8:	2300      	movne	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b22      	cmp	r3, #34	; 0x22
 8006ed8:	d108      	bne.n	8006eec <UART_DMAError+0x7a>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f000 f835 	bl	8006f56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	f043 0210 	orr.w	r2, r3, #16
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	f7ff ff49 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b089      	sub	sp, #36	; 0x24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	330c      	adds	r3, #12
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	61ba      	str	r2, [r7, #24]
 8006f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	e841 2300 	strex	r3, r2, [r1]
 8006f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1e5      	bne.n	8006f0e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006f4a:	bf00      	nop
 8006f4c:	3724      	adds	r7, #36	; 0x24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b095      	sub	sp, #84	; 0x54
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	330c      	adds	r3, #12
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	330c      	adds	r3, #12
 8006f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f7e:	643a      	str	r2, [r7, #64]	; 0x40
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e5      	bne.n	8006f5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3314      	adds	r3, #20
 8006f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e5      	bne.n	8006f92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d119      	bne.n	8007002 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f023 0310 	bic.w	r3, r3, #16
 8006fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	330c      	adds	r3, #12
 8006fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fee:	61ba      	str	r2, [r7, #24]
 8006ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e5      	bne.n	8006fce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007010:	bf00      	nop
 8007012:	3754      	adds	r7, #84	; 0x54
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7ff feaa 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b21      	cmp	r3, #33	; 0x21
 8007056:	d13e      	bne.n	80070d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007060:	d114      	bne.n	800708c <UART_Transmit_IT+0x48>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d110      	bne.n	800708c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800707e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	1c9a      	adds	r2, r3, #2
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	621a      	str	r2, [r3, #32]
 800708a:	e008      	b.n	800709e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	1c59      	adds	r1, r3, #1
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	6211      	str	r1, [r2, #32]
 8007096:	781a      	ldrb	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	4619      	mov	r1, r3
 80070ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10f      	bne.n	80070d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
  }
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fa fb41 	bl	800178c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08c      	sub	sp, #48	; 0x30
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b22      	cmp	r3, #34	; 0x22
 8007126:	f040 80ab 	bne.w	8007280 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007132:	d117      	bne.n	8007164 <UART_Receive_IT+0x50>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d113      	bne.n	8007164 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800713c:	2300      	movs	r3, #0
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	b29a      	uxth	r2, r3
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	1c9a      	adds	r2, r3, #2
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	629a      	str	r2, [r3, #40]	; 0x28
 8007162:	e026      	b.n	80071b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007176:	d007      	beq.n	8007188 <UART_Receive_IT+0x74>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <UART_Receive_IT+0x82>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d106      	bne.n	8007196 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	e008      	b.n	80071a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4619      	mov	r1, r3
 80071c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d15a      	bne.n	800727c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0220 	bic.w	r2, r2, #32
 80071d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	695a      	ldr	r2, [r3, #20]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	2b01      	cmp	r3, #1
 8007204:	d135      	bne.n	8007272 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	e853 3f00 	ldrex	r3, [r3]
 800721a:	613b      	str	r3, [r7, #16]
   return(result);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f023 0310 	bic.w	r3, r3, #16
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	623a      	str	r2, [r7, #32]
 800722e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007230:	69f9      	ldr	r1, [r7, #28]
 8007232:	6a3a      	ldr	r2, [r7, #32]
 8007234:	e841 2300 	strex	r3, r2, [r1]
 8007238:	61bb      	str	r3, [r7, #24]
   return(result);
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1e5      	bne.n	800720c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b10      	cmp	r3, #16
 800724c:	d10a      	bne.n	8007264 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fd9a 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
 8007270:	e002      	b.n	8007278 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff fd82 	bl	8006d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	e002      	b.n	8007282 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	e000      	b.n	8007282 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007280:	2302      	movs	r3, #2
  }
}
 8007282:	4618      	mov	r0, r3
 8007284:	3730      	adds	r7, #48	; 0x30
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	b09f      	sub	sp, #124	; 0x7c
 8007292:	af00      	add	r7, sp, #0
 8007294:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a2:	68d9      	ldr	r1, [r3, #12]
 80072a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	ea40 0301 	orr.w	r3, r0, r1
 80072ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	431a      	orrs	r2, r3
 80072b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	431a      	orrs	r2, r3
 80072be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072d0:	f021 010c 	bic.w	r1, r1, #12
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072da:	430b      	orrs	r3, r1
 80072dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ea:	6999      	ldr	r1, [r3, #24]
 80072ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	ea40 0301 	orr.w	r3, r0, r1
 80072f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4bc5      	ldr	r3, [pc, #788]	; (8007610 <UART_SetConfig+0x384>)
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d004      	beq.n	800730a <UART_SetConfig+0x7e>
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4bc3      	ldr	r3, [pc, #780]	; (8007614 <UART_SetConfig+0x388>)
 8007306:	429a      	cmp	r2, r3
 8007308:	d103      	bne.n	8007312 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800730a:	f7fd fee9 	bl	80050e0 <HAL_RCC_GetPCLK2Freq>
 800730e:	6778      	str	r0, [r7, #116]	; 0x74
 8007310:	e002      	b.n	8007318 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007312:	f7fd fed1 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8007316:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	69db      	ldr	r3, [r3, #28]
 800731c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007320:	f040 80b6 	bne.w	8007490 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007326:	461c      	mov	r4, r3
 8007328:	f04f 0500 	mov.w	r5, #0
 800732c:	4622      	mov	r2, r4
 800732e:	462b      	mov	r3, r5
 8007330:	1891      	adds	r1, r2, r2
 8007332:	6439      	str	r1, [r7, #64]	; 0x40
 8007334:	415b      	adcs	r3, r3
 8007336:	647b      	str	r3, [r7, #68]	; 0x44
 8007338:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800733c:	1912      	adds	r2, r2, r4
 800733e:	eb45 0303 	adc.w	r3, r5, r3
 8007342:	f04f 0000 	mov.w	r0, #0
 8007346:	f04f 0100 	mov.w	r1, #0
 800734a:	00d9      	lsls	r1, r3, #3
 800734c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007350:	00d0      	lsls	r0, r2, #3
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	1911      	adds	r1, r2, r4
 8007358:	6639      	str	r1, [r7, #96]	; 0x60
 800735a:	416b      	adcs	r3, r5
 800735c:	667b      	str	r3, [r7, #100]	; 0x64
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	461a      	mov	r2, r3
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	1891      	adds	r1, r2, r2
 800736a:	63b9      	str	r1, [r7, #56]	; 0x38
 800736c:	415b      	adcs	r3, r3
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007374:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007378:	f7f9 fa52 	bl	8000820 <__aeabi_uldivmod>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4ba5      	ldr	r3, [pc, #660]	; (8007618 <UART_SetConfig+0x38c>)
 8007382:	fba3 2302 	umull	r2, r3, r3, r2
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	011e      	lsls	r6, r3, #4
 800738a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800738c:	461c      	mov	r4, r3
 800738e:	f04f 0500 	mov.w	r5, #0
 8007392:	4622      	mov	r2, r4
 8007394:	462b      	mov	r3, r5
 8007396:	1891      	adds	r1, r2, r2
 8007398:	6339      	str	r1, [r7, #48]	; 0x30
 800739a:	415b      	adcs	r3, r3
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
 800739e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80073a2:	1912      	adds	r2, r2, r4
 80073a4:	eb45 0303 	adc.w	r3, r5, r3
 80073a8:	f04f 0000 	mov.w	r0, #0
 80073ac:	f04f 0100 	mov.w	r1, #0
 80073b0:	00d9      	lsls	r1, r3, #3
 80073b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073b6:	00d0      	lsls	r0, r2, #3
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	1911      	adds	r1, r2, r4
 80073be:	65b9      	str	r1, [r7, #88]	; 0x58
 80073c0:	416b      	adcs	r3, r5
 80073c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	461a      	mov	r2, r3
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	1891      	adds	r1, r2, r2
 80073d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80073d2:	415b      	adcs	r3, r3
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073de:	f7f9 fa1f 	bl	8000820 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4b8c      	ldr	r3, [pc, #560]	; (8007618 <UART_SetConfig+0x38c>)
 80073e8:	fba3 1302 	umull	r1, r3, r3, r2
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	2164      	movs	r1, #100	; 0x64
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	3332      	adds	r3, #50	; 0x32
 80073fa:	4a87      	ldr	r2, [pc, #540]	; (8007618 <UART_SetConfig+0x38c>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007408:	441e      	add	r6, r3
 800740a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800740c:	4618      	mov	r0, r3
 800740e:	f04f 0100 	mov.w	r1, #0
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	1894      	adds	r4, r2, r2
 8007418:	623c      	str	r4, [r7, #32]
 800741a:	415b      	adcs	r3, r3
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
 800741e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007422:	1812      	adds	r2, r2, r0
 8007424:	eb41 0303 	adc.w	r3, r1, r3
 8007428:	f04f 0400 	mov.w	r4, #0
 800742c:	f04f 0500 	mov.w	r5, #0
 8007430:	00dd      	lsls	r5, r3, #3
 8007432:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007436:	00d4      	lsls	r4, r2, #3
 8007438:	4622      	mov	r2, r4
 800743a:	462b      	mov	r3, r5
 800743c:	1814      	adds	r4, r2, r0
 800743e:	653c      	str	r4, [r7, #80]	; 0x50
 8007440:	414b      	adcs	r3, r1
 8007442:	657b      	str	r3, [r7, #84]	; 0x54
 8007444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	461a      	mov	r2, r3
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	1891      	adds	r1, r2, r2
 8007450:	61b9      	str	r1, [r7, #24]
 8007452:	415b      	adcs	r3, r3
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800745a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800745e:	f7f9 f9df 	bl	8000820 <__aeabi_uldivmod>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4b6c      	ldr	r3, [pc, #432]	; (8007618 <UART_SetConfig+0x38c>)
 8007468:	fba3 1302 	umull	r1, r3, r3, r2
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	2164      	movs	r1, #100	; 0x64
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	3332      	adds	r3, #50	; 0x32
 800747a:	4a67      	ldr	r2, [pc, #412]	; (8007618 <UART_SetConfig+0x38c>)
 800747c:	fba2 2303 	umull	r2, r3, r2, r3
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	f003 0207 	and.w	r2, r3, #7
 8007486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4432      	add	r2, r6
 800748c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800748e:	e0b9      	b.n	8007604 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007490:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007492:	461c      	mov	r4, r3
 8007494:	f04f 0500 	mov.w	r5, #0
 8007498:	4622      	mov	r2, r4
 800749a:	462b      	mov	r3, r5
 800749c:	1891      	adds	r1, r2, r2
 800749e:	6139      	str	r1, [r7, #16]
 80074a0:	415b      	adcs	r3, r3
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80074a8:	1912      	adds	r2, r2, r4
 80074aa:	eb45 0303 	adc.w	r3, r5, r3
 80074ae:	f04f 0000 	mov.w	r0, #0
 80074b2:	f04f 0100 	mov.w	r1, #0
 80074b6:	00d9      	lsls	r1, r3, #3
 80074b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074bc:	00d0      	lsls	r0, r2, #3
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	eb12 0804 	adds.w	r8, r2, r4
 80074c6:	eb43 0905 	adc.w	r9, r3, r5
 80074ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f04f 0100 	mov.w	r1, #0
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	008b      	lsls	r3, r1, #2
 80074de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074e2:	0082      	lsls	r2, r0, #2
 80074e4:	4640      	mov	r0, r8
 80074e6:	4649      	mov	r1, r9
 80074e8:	f7f9 f99a 	bl	8000820 <__aeabi_uldivmod>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4b49      	ldr	r3, [pc, #292]	; (8007618 <UART_SetConfig+0x38c>)
 80074f2:	fba3 2302 	umull	r2, r3, r3, r2
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	011e      	lsls	r6, r3, #4
 80074fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074fc:	4618      	mov	r0, r3
 80074fe:	f04f 0100 	mov.w	r1, #0
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	1894      	adds	r4, r2, r2
 8007508:	60bc      	str	r4, [r7, #8]
 800750a:	415b      	adcs	r3, r3
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007512:	1812      	adds	r2, r2, r0
 8007514:	eb41 0303 	adc.w	r3, r1, r3
 8007518:	f04f 0400 	mov.w	r4, #0
 800751c:	f04f 0500 	mov.w	r5, #0
 8007520:	00dd      	lsls	r5, r3, #3
 8007522:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007526:	00d4      	lsls	r4, r2, #3
 8007528:	4622      	mov	r2, r4
 800752a:	462b      	mov	r3, r5
 800752c:	1814      	adds	r4, r2, r0
 800752e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007530:	414b      	adcs	r3, r1
 8007532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	4618      	mov	r0, r3
 800753a:	f04f 0100 	mov.w	r1, #0
 800753e:	f04f 0200 	mov.w	r2, #0
 8007542:	f04f 0300 	mov.w	r3, #0
 8007546:	008b      	lsls	r3, r1, #2
 8007548:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800754c:	0082      	lsls	r2, r0, #2
 800754e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007552:	f7f9 f965 	bl	8000820 <__aeabi_uldivmod>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4b2f      	ldr	r3, [pc, #188]	; (8007618 <UART_SetConfig+0x38c>)
 800755c:	fba3 1302 	umull	r1, r3, r3, r2
 8007560:	095b      	lsrs	r3, r3, #5
 8007562:	2164      	movs	r1, #100	; 0x64
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	3332      	adds	r3, #50	; 0x32
 800756e:	4a2a      	ldr	r2, [pc, #168]	; (8007618 <UART_SetConfig+0x38c>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800757a:	441e      	add	r6, r3
 800757c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757e:	4618      	mov	r0, r3
 8007580:	f04f 0100 	mov.w	r1, #0
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	1894      	adds	r4, r2, r2
 800758a:	603c      	str	r4, [r7, #0]
 800758c:	415b      	adcs	r3, r3
 800758e:	607b      	str	r3, [r7, #4]
 8007590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007594:	1812      	adds	r2, r2, r0
 8007596:	eb41 0303 	adc.w	r3, r1, r3
 800759a:	f04f 0400 	mov.w	r4, #0
 800759e:	f04f 0500 	mov.w	r5, #0
 80075a2:	00dd      	lsls	r5, r3, #3
 80075a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075a8:	00d4      	lsls	r4, r2, #3
 80075aa:	4622      	mov	r2, r4
 80075ac:	462b      	mov	r3, r5
 80075ae:	eb12 0a00 	adds.w	sl, r2, r0
 80075b2:	eb43 0b01 	adc.w	fp, r3, r1
 80075b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f04f 0100 	mov.w	r1, #0
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	008b      	lsls	r3, r1, #2
 80075ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075ce:	0082      	lsls	r2, r0, #2
 80075d0:	4650      	mov	r0, sl
 80075d2:	4659      	mov	r1, fp
 80075d4:	f7f9 f924 	bl	8000820 <__aeabi_uldivmod>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <UART_SetConfig+0x38c>)
 80075de:	fba3 1302 	umull	r1, r3, r3, r2
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	2164      	movs	r1, #100	; 0x64
 80075e6:	fb01 f303 	mul.w	r3, r1, r3
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	3332      	adds	r3, #50	; 0x32
 80075f0:	4a09      	ldr	r2, [pc, #36]	; (8007618 <UART_SetConfig+0x38c>)
 80075f2:	fba2 2303 	umull	r2, r3, r2, r3
 80075f6:	095b      	lsrs	r3, r3, #5
 80075f8:	f003 020f 	and.w	r2, r3, #15
 80075fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4432      	add	r2, r6
 8007602:	609a      	str	r2, [r3, #8]
}
 8007604:	bf00      	nop
 8007606:	377c      	adds	r7, #124	; 0x7c
 8007608:	46bd      	mov	sp, r7
 800760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760e:	bf00      	nop
 8007610:	40011000 	.word	0x40011000
 8007614:	40011400 	.word	0x40011400
 8007618:	51eb851f 	.word	0x51eb851f

0800761c <__libc_init_array>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	4d0d      	ldr	r5, [pc, #52]	; (8007654 <__libc_init_array+0x38>)
 8007620:	4c0d      	ldr	r4, [pc, #52]	; (8007658 <__libc_init_array+0x3c>)
 8007622:	1b64      	subs	r4, r4, r5
 8007624:	10a4      	asrs	r4, r4, #2
 8007626:	2600      	movs	r6, #0
 8007628:	42a6      	cmp	r6, r4
 800762a:	d109      	bne.n	8007640 <__libc_init_array+0x24>
 800762c:	4d0b      	ldr	r5, [pc, #44]	; (800765c <__libc_init_array+0x40>)
 800762e:	4c0c      	ldr	r4, [pc, #48]	; (8007660 <__libc_init_array+0x44>)
 8007630:	f000 f820 	bl	8007674 <_init>
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	2600      	movs	r6, #0
 800763a:	42a6      	cmp	r6, r4
 800763c:	d105      	bne.n	800764a <__libc_init_array+0x2e>
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	f855 3b04 	ldr.w	r3, [r5], #4
 8007644:	4798      	blx	r3
 8007646:	3601      	adds	r6, #1
 8007648:	e7ee      	b.n	8007628 <__libc_init_array+0xc>
 800764a:	f855 3b04 	ldr.w	r3, [r5], #4
 800764e:	4798      	blx	r3
 8007650:	3601      	adds	r6, #1
 8007652:	e7f2      	b.n	800763a <__libc_init_array+0x1e>
 8007654:	080076cc 	.word	0x080076cc
 8007658:	080076cc 	.word	0x080076cc
 800765c:	080076cc 	.word	0x080076cc
 8007660:	080076d0 	.word	0x080076d0

08007664 <memset>:
 8007664:	4402      	add	r2, r0
 8007666:	4603      	mov	r3, r0
 8007668:	4293      	cmp	r3, r2
 800766a:	d100      	bne.n	800766e <memset+0xa>
 800766c:	4770      	bx	lr
 800766e:	f803 1b01 	strb.w	r1, [r3], #1
 8007672:	e7f9      	b.n	8007668 <memset+0x4>

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
