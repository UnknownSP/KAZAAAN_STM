
SMASTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf8  08006bf8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006bf8  08006bf8  00016bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c00  08006c00  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c00  08006c00  00016c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000010  08006c18  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  08006c18  000208b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013916  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002474  00000000  00000000  00033956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00035dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb0  00000000  00000000  00036e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022073  00000000  00000000  00037de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014400  00000000  00000000  00059e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a6b  00000000  00000000  0006e253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140cbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  00140d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006bbc 	.word	0x08006bbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08006bbc 	.word	0x08006bbc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 fa1c 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f872 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa8c 	bl	8000a24 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 fa24 	bl	8000958 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f9ce 	bl	80008b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f9f6 	bl	8000904 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000518:	f000 f8d6 	bl	80006c8 <MX_I2C1_Init>
  MX_TIM3_Init();
 800051c:	f000 f930 	bl	8000780 <MX_TIM3_Init>
  MX_I2C3_Init();
 8000520:	f000 f900 	bl	8000724 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000524:	2100      	movs	r1, #0
 8000526:	482c      	ldr	r0, [pc, #176]	; (80005d8 <main+0xdc>)
 8000528:	f004 fd8a 	bl	8005040 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800052c:	2104      	movs	r1, #4
 800052e:	482a      	ldr	r0, [pc, #168]	; (80005d8 <main+0xdc>)
 8000530:	f004 fd86 	bl	8005040 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000534:	210c      	movs	r1, #12
 8000536:	4828      	ldr	r0, [pc, #160]	; (80005d8 <main+0xdc>)
 8000538:	f004 fd82 	bl	8005040 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_9) == 1){
 800053c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000540:	4826      	ldr	r0, [pc, #152]	; (80005dc <main+0xe0>)
 8000542:	f002 f923 	bl	800278c <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	d004      	beq.n	8000556 <main+0x5a>
		  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
	  }else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_9) == 0){
 800054c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000550:	4822      	ldr	r0, [pc, #136]	; (80005dc <main+0xe0>)
 8000552:	f002 f91b 	bl	800278c <HAL_GPIO_ReadPin>
		  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
	  }
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 0){
 8000556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055a:	4820      	ldr	r0, [pc, #128]	; (80005dc <main+0xe0>)
 800055c:	f002 f916 	bl	800278c <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d11b      	bne.n	800059e <main+0xa2>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 50);
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <main+0xdc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2232      	movs	r2, #50	; 0x32
 800056c:	641a      	str	r2, [r3, #64]	; 0x40
		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	481a      	ldr	r0, [pc, #104]	; (80005dc <main+0xe0>)
 8000574:	f002 f922 	bl	80027bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2140      	movs	r1, #64	; 0x40
 800057c:	4817      	ldr	r0, [pc, #92]	; (80005dc <main+0xe0>)
 800057e:	f002 f91d 	bl	80027bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2120      	movs	r1, #32
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <main+0xe4>)
 8000588:	f002 f918 	bl	80027bc <HAL_GPIO_WritePin>
		  D_Mess_printf("%d\n", G_System_counter);
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <main+0xe8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	4815      	ldr	r0, [pc, #84]	; (80005e8 <main+0xec>)
 8000594:	f000 ffba 	bl	800150c <D_Mess_printf>
		  D_Mess_flush();
 8000598:	f000 ffd8 	bl	800154c <D_Mess_flush>
 800059c:	e7ce      	b.n	800053c <main+0x40>
	  }else if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13) == 1){
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <main+0xe0>)
 80005a4:	f002 f8f2 	bl	800278c <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1c6      	bne.n	800053c <main+0x40>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 2500);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <main+0xdc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80005b6:	641a      	str	r2, [r3, #64]	; 0x40
		  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <main+0xe0>)
 80005be:	f002 f8fd 	bl	80027bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <main+0xe0>)
 80005c8:	f002 f8f8 	bl	80027bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2120      	movs	r1, #32
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <main+0xe4>)
 80005d2:	f002 f8f3 	bl	80027bc <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_9) == 1){
 80005d6:	e7b1      	b.n	800053c <main+0x40>
 80005d8:	20000658 	.word	0x20000658
 80005dc:	40020800 	.word	0x40020800
 80005e0:	40020000 	.word	0x40020000
 80005e4:	2000002c 	.word	0x2000002c
 80005e8:	08006bd4 	.word	0x08006bd4

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f006 fad6 	bl	8006bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <SystemClock_Config+0xd4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <SystemClock_Config+0xd4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xd4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <SystemClock_Config+0xd8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <SystemClock_Config+0xd8>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <SystemClock_Config+0xd8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065c:	2300      	movs	r3, #0
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000660:	2310      	movs	r3, #16
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4618      	mov	r0, r3
 800067c:	f004 f99a 	bl	80049b4 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000686:	f000 fabb 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 feb8 	bl	800441c <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006b2:	f000 faa5 	bl	8000c00 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2220      	movs	r2, #32
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f002 f873 	bl	80027f0 <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 fa76 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000604 	.word	0x20000604
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C3_Init+0x50>)
 800072a:	4a13      	ldr	r2, [pc, #76]	; (8000778 <MX_I2C3_Init+0x54>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C3_Init+0x50>)
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_I2C3_Init+0x58>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C3_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_I2C3_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_I2C3_Init+0x50>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_I2C3_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_I2C3_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_I2C3_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_I2C3_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_I2C3_Init+0x50>)
 8000762:	f002 f845 	bl	80027f0 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 fa48 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200004f0 	.word	0x200004f0
 8000778:	40005c00 	.word	0x40005c00
 800077c:	000186a0 	.word	0x000186a0

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b0:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007b2:	4a3e      	ldr	r2, [pc, #248]	; (80008ac <MX_TIM3_Init+0x12c>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007b8:	2253      	movs	r2, #83	; 0x53
 80007ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007c4:	f241 3287 	movw	r2, #4999	; 0x1387
 80007c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d6:	4834      	ldr	r0, [pc, #208]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007d8:	f004 fb8a 	bl	8004ef0 <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007e2:	f000 fa0d 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f0:	4619      	mov	r1, r3
 80007f2:	482d      	ldr	r0, [pc, #180]	; (80008a8 <MX_TIM3_Init+0x128>)
 80007f4:	f004 fdae 	bl	8005354 <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007fe:	f000 f9ff 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000802:	4829      	ldr	r0, [pc, #164]	; (80008a8 <MX_TIM3_Init+0x128>)
 8000804:	f004 fbc3 	bl	8004f8e <HAL_TIM_PWM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800080e:	f000 f9f7 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	4619      	mov	r1, r3
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_TIM3_Init+0x128>)
 8000822:	f005 f96f 	bl	8005b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800082c:	f000 f9e8 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	; 0x60
 8000832:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4818      	ldr	r0, [pc, #96]	; (80008a8 <MX_TIM3_Init+0x128>)
 8000848:	f004 fcc2 	bl	80051d0 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000852:	f000 f9d5 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2204      	movs	r2, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MX_TIM3_Init+0x128>)
 800085e:	f004 fcb7 	bl	80051d0 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000868:	f000 f9ca 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2208      	movs	r2, #8
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_TIM3_Init+0x128>)
 8000874:	f004 fcac 	bl	80051d0 <HAL_TIM_PWM_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800087e:	f000 f9bf 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	220c      	movs	r2, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM3_Init+0x128>)
 800088a:	f004 fca1 	bl	80051d0 <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000894:	f000 f9b4 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM3_Init+0x128>)
 800089a:	f000 fb8d 	bl	8000fb8 <HAL_TIM_MspPostInit>

}
 800089e:	bf00      	nop
 80008a0:	3738      	adds	r7, #56	; 0x38
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000658 	.word	0x20000658
 80008ac:	40000400 	.word	0x40000400

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART1_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e8:	f005 f988 	bl	8005bfc <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f985 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200007c0 	.word	0x200007c0
 8000900:	40011000 	.word	0x40011000

08000904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART2_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART2_UART_Init+0x4c>)
 800093c:	f005 f95e 	bl	8005bfc <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f95b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000864 	.word	0x20000864
 8000954:	40004400 	.word	0x40004400

08000958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_DMA_Init+0xc8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <MX_DMA_Init+0xc8>)
 8000968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_DMA_Init+0xc8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_DMA_Init+0xc8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <MX_DMA_Init+0xc8>)
 8000984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_DMA_Init+0xc8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	200b      	movs	r0, #11
 800099c:	f001 f91b 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009a0:	200b      	movs	r0, #11
 80009a2:	f001 f934 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	200c      	movs	r0, #12
 80009ac:	f001 f913 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009b0:	200c      	movs	r0, #12
 80009b2:	f001 f92c 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	200f      	movs	r0, #15
 80009bc:	f001 f90b 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009c0:	200f      	movs	r0, #15
 80009c2:	f001 f924 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2010      	movs	r0, #16
 80009cc:	f001 f903 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009d0:	2010      	movs	r0, #16
 80009d2:	f001 f91c 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2011      	movs	r0, #17
 80009dc:	f001 f8fb 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009e0:	2011      	movs	r0, #17
 80009e2:	f001 f914 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	202f      	movs	r0, #47	; 0x2f
 80009ec:	f001 f8f3 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80009f0:	202f      	movs	r0, #47	; 0x2f
 80009f2:	f001 f90c 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	203a      	movs	r0, #58	; 0x3a
 80009fc:	f001 f8eb 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a00:	203a      	movs	r0, #58	; 0x3a
 8000a02:	f001 f904 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	2046      	movs	r0, #70	; 0x46
 8000a0c:	f001 f8e3 	bl	8001bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a10:	2046      	movs	r0, #70	; 0x46
 8000a12:	f001 f8fc 	bl	8001c0e <HAL_NVIC_EnableIRQ>

}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b62      	ldr	r3, [pc, #392]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a61      	ldr	r2, [pc, #388]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b5f      	ldr	r3, [pc, #380]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b5b      	ldr	r3, [pc, #364]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b4d      	ldr	r3, [pc, #308]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a4c      	ldr	r2, [pc, #304]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b46      	ldr	r3, [pc, #280]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a45      	ldr	r2, [pc, #276]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <MX_GPIO_Init+0x1a4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4840      	ldr	r0, [pc, #256]	; (8000bcc <MX_GPIO_Init+0x1a8>)
 8000acc:	f001 fe76 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2190      	movs	r1, #144	; 0x90
 8000ad4:	483e      	ldr	r0, [pc, #248]	; (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000ad6:	f001 fe71 	bl	80027bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8000ada:	2200      	movs	r2, #0
 8000adc:	f242 4170 	movw	r1, #9328	; 0x2470
 8000ae0:	483c      	ldr	r0, [pc, #240]	; (8000bd4 <MX_GPIO_Init+0x1b0>)
 8000ae2:	f001 fe6b 	bl	80027bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4834      	ldr	r0, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000afe:	f001 fcb1 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC5 PC6 PC8 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b02:	f641 536f 	movw	r3, #7535	; 0x1d6f
 8000b06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	482e      	ldr	r0, [pc, #184]	; (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000b18:	f001 fca4 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11
 8000b1c:	f649 0313 	movw	r3, #38931	; 0x9813
 8000b20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4826      	ldr	r0, [pc, #152]	; (8000bcc <MX_GPIO_Init+0x1a8>)
 8000b32:	f001 fc97 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b36:	2320      	movs	r3, #32
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481f      	ldr	r0, [pc, #124]	; (8000bcc <MX_GPIO_Init+0x1a8>)
 8000b4e:	f001 fc89 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000b52:	2390      	movs	r3, #144	; 0x90
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4819      	ldr	r0, [pc, #100]	; (8000bd0 <MX_GPIO_Init+0x1ac>)
 8000b6a:	f001 fc7b 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB14 PB15
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000b6e:	f24d 0384 	movw	r3, #53380	; 0xd084
 8000b72:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4619      	mov	r1, r3
 8000b82:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <MX_GPIO_Init+0x1b0>)
 8000b84:	f001 fc6e 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_5
 8000b88:	f242 4370 	movw	r3, #9328	; 0x2470
 8000b8c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_GPIO_Init+0x1b0>)
 8000ba2:	f001 fc5f 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_GPIO_Init+0x1b4>)
 8000bba:	f001 fc53 	bl	8002464 <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020400 	.word	0x40020400
 8000bd8:	40020c00 	.word	0x40020c00

08000bdc <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_UART_TxCpltCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8000bee:	f000 fcdf 	bl	80015b0 <D_Mess_TransitionCompletedCallBack>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40004400 	.word	0x40004400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c4a:	2007      	movs	r0, #7
 8000c4c:	f000 ffb8 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a4e      	ldr	r2, [pc, #312]	; (8000db4 <HAL_I2C_MspInit+0x158>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	f040 80a8 	bne.w	8000dd0 <HAL_I2C_MspInit+0x174>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <HAL_I2C_MspInit+0x15c>)
 8000c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c88:	4a4b      	ldr	r2, [pc, #300]	; (8000db8 <HAL_I2C_MspInit+0x15c>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c90:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <HAL_I2C_MspInit+0x15c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca2:	2312      	movs	r3, #18
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4840      	ldr	r0, [pc, #256]	; (8000dbc <HAL_I2C_MspInit+0x160>)
 8000cba:	f001 fbd3 	bl	8002464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <HAL_I2C_MspInit+0x15c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a3c      	ldr	r2, [pc, #240]	; (8000db8 <HAL_I2C_MspInit+0x15c>)
 8000cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <HAL_I2C_MspInit+0x15c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000cda:	4b39      	ldr	r3, [pc, #228]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000cdc:	4a39      	ldr	r2, [pc, #228]	; (8000dc4 <HAL_I2C_MspInit+0x168>)
 8000cde:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ce0:	4b37      	ldr	r3, [pc, #220]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cfa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000d1a:	4829      	ldr	r0, [pc, #164]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000d1c:	f000 ff92 	bl	8001c44 <HAL_DMA_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000d26:	f7ff ff6b 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
 8000d30:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <HAL_I2C_MspInit+0x164>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8000d36:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d38:	4a24      	ldr	r2, [pc, #144]	; (8000dcc <HAL_I2C_MspInit+0x170>)
 8000d3a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d44:	4b20      	ldr	r3, [pc, #128]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d46:	2240      	movs	r2, #64	; 0x40
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d78:	f000 ff64 	bl	8001c44 <HAL_DMA_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000d82:	f7ff ff3d 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_I2C_MspInit+0x16c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	201f      	movs	r0, #31
 8000d98:	f000 ff1d 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d9c:	201f      	movs	r0, #31
 8000d9e:	f000 ff36 	bl	8001c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2020      	movs	r0, #32
 8000da8:	f000 ff15 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000dac:	2020      	movs	r0, #32
 8000dae:	f000 ff2e 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000db2:	e0cb      	b.n	8000f4c <HAL_I2C_MspInit+0x2f0>
 8000db4:	40005400 	.word	0x40005400
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	20000804 	.word	0x20000804
 8000dc4:	40026010 	.word	0x40026010
 8000dc8:	200005a4 	.word	0x200005a4
 8000dcc:	400260b8 	.word	0x400260b8
  else if(hi2c->Instance==I2C3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a5f      	ldr	r2, [pc, #380]	; (8000f54 <HAL_I2C_MspInit+0x2f8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	f040 80b8 	bne.w	8000f4c <HAL_I2C_MspInit+0x2f0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a5c      	ldr	r2, [pc, #368]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b56      	ldr	r3, [pc, #344]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e00:	4a55      	ldr	r2, [pc, #340]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	; 0x30
 8000e08:	4b53      	ldr	r3, [pc, #332]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1a:	2312      	movs	r3, #18
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e26:	2304      	movs	r3, #4
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	484a      	ldr	r0, [pc, #296]	; (8000f5c <HAL_I2C_MspInit+0x300>)
 8000e32:	f001 fb17 	bl	8002464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4843      	ldr	r0, [pc, #268]	; (8000f60 <HAL_I2C_MspInit+0x304>)
 8000e54:	f001 fb06 	bl	8002464 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a3d      	ldr	r2, [pc, #244]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000e62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <HAL_I2C_MspInit+0x2fc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8000e74:	4b3b      	ldr	r3, [pc, #236]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000e76:	4a3c      	ldr	r2, [pc, #240]	; (8000f68 <HAL_I2C_MspInit+0x30c>)
 8000e78:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000e7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e80:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e94:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e96:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9c:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000ea2:	4b30      	ldr	r3, [pc, #192]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eae:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8000eb4:	482b      	ldr	r0, [pc, #172]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000eb6:	f000 fec5 	bl	8001c44 <HAL_DMA_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_I2C_MspInit+0x268>
      Error_Handler();
 8000ec0:	f7ff fe9e 	bl	8000c00 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8000eca:	4a26      	ldr	r2, [pc, #152]	; (8000f64 <HAL_I2C_MspInit+0x308>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000ed2:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <HAL_I2C_MspInit+0x314>)
 8000ed4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000ed8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000edc:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee4:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef0:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8000f10:	4816      	ldr	r0, [pc, #88]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000f12:	f000 fe97 	bl	8001c44 <HAL_DMA_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_I2C_MspInit+0x2c4>
      Error_Handler();
 8000f1c:	f7ff fe70 	bl	8000c00 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_I2C_MspInit+0x310>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2048      	movs	r0, #72	; 0x48
 8000f32:	f000 fe50 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8000f36:	2048      	movs	r0, #72	; 0x48
 8000f38:	f000 fe69 	bl	8001c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2049      	movs	r0, #73	; 0x49
 8000f42:	f000 fe48 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8000f46:	2049      	movs	r0, #73	; 0x49
 8000f48:	f000 fe61 	bl	8001c0e <HAL_NVIC_EnableIRQ>
}
 8000f4c:	bf00      	nop
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005c00 	.word	0x40005c00
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020800 	.word	0x40020800
 8000f60:	40020000 	.word	0x40020000
 8000f64:	20000544 	.word	0x20000544
 8000f68:	40026028 	.word	0x40026028
 8000f6c:	20000430 	.word	0x20000430
 8000f70:	40026070 	.word	0x40026070

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10d      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_TIM_Base_MspInit+0x40>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <HAL_TIM_Base_MspInit+0x40>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_TIM_Base_MspInit+0x40>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a21      	ldr	r2, [pc, #132]	; (800105c <HAL_TIM_MspPostInit+0xa4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d13b      	bne.n	8001052 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <HAL_TIM_MspPostInit+0xa8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <HAL_TIM_MspPostInit+0xa8>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_TIM_MspPostInit+0xa8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_TIM_MspPostInit+0xa8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <HAL_TIM_MspPostInit+0xa8>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b16      	ldr	r3, [pc, #88]	; (8001060 <HAL_TIM_MspPostInit+0xa8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001012:	23c0      	movs	r3, #192	; 0xc0
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001022:	2302      	movs	r3, #2
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <HAL_TIM_MspPostInit+0xac>)
 800102e:	f001 fa19 	bl	8002464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001032:	2303      	movs	r3, #3
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001042:	2302      	movs	r3, #2
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <HAL_TIM_MspPostInit+0xb0>)
 800104e:	f001 fa09 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40000400 	.word	0x40000400
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a97      	ldr	r2, [pc, #604]	; (80012e8 <HAL_UART_MspInit+0x27c>)
 800108a:	4293      	cmp	r3, r2
 800108c:	f040 8092 	bne.w	80011b4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
 8001094:	4b95      	ldr	r3, [pc, #596]	; (80012ec <HAL_UART_MspInit+0x280>)
 8001096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001098:	4a94      	ldr	r2, [pc, #592]	; (80012ec <HAL_UART_MspInit+0x280>)
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	6453      	str	r3, [r2, #68]	; 0x44
 80010a0:	4b92      	ldr	r3, [pc, #584]	; (80012ec <HAL_UART_MspInit+0x280>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	4b8e      	ldr	r3, [pc, #568]	; (80012ec <HAL_UART_MspInit+0x280>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a8d      	ldr	r2, [pc, #564]	; (80012ec <HAL_UART_MspInit+0x280>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
 80010bc:	4b8b      	ldr	r3, [pc, #556]	; (80012ec <HAL_UART_MspInit+0x280>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010da:	2307      	movs	r3, #7
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4882      	ldr	r0, [pc, #520]	; (80012f0 <HAL_UART_MspInit+0x284>)
 80010e6:	f001 f9bd 	bl	8002464 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80010ea:	4b82      	ldr	r3, [pc, #520]	; (80012f4 <HAL_UART_MspInit+0x288>)
 80010ec:	4a82      	ldr	r2, [pc, #520]	; (80012f8 <HAL_UART_MspInit+0x28c>)
 80010ee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80010f0:	4b80      	ldr	r3, [pc, #512]	; (80012f4 <HAL_UART_MspInit+0x288>)
 80010f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f8:	4b7e      	ldr	r3, [pc, #504]	; (80012f4 <HAL_UART_MspInit+0x288>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fe:	4b7d      	ldr	r3, [pc, #500]	; (80012f4 <HAL_UART_MspInit+0x288>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001104:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <HAL_UART_MspInit+0x288>)
 8001106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800110c:	4b79      	ldr	r3, [pc, #484]	; (80012f4 <HAL_UART_MspInit+0x288>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001112:	4b78      	ldr	r3, [pc, #480]	; (80012f4 <HAL_UART_MspInit+0x288>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001118:	4b76      	ldr	r3, [pc, #472]	; (80012f4 <HAL_UART_MspInit+0x288>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800111e:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <HAL_UART_MspInit+0x288>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001124:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <HAL_UART_MspInit+0x288>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800112a:	4872      	ldr	r0, [pc, #456]	; (80012f4 <HAL_UART_MspInit+0x288>)
 800112c:	f000 fd8a 	bl	8001c44 <HAL_DMA_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001136:	f7ff fd63 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a6d      	ldr	r2, [pc, #436]	; (80012f4 <HAL_UART_MspInit+0x288>)
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
 8001140:	4a6c      	ldr	r2, [pc, #432]	; (80012f4 <HAL_UART_MspInit+0x288>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001146:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_UART_MspInit+0x290>)
 8001148:	4a6d      	ldr	r2, [pc, #436]	; (8001300 <HAL_UART_MspInit+0x294>)
 800114a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800114c:	4b6b      	ldr	r3, [pc, #428]	; (80012fc <HAL_UART_MspInit+0x290>)
 800114e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001152:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001154:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_UART_MspInit+0x290>)
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800115a:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_UART_MspInit+0x290>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001160:	4b66      	ldr	r3, [pc, #408]	; (80012fc <HAL_UART_MspInit+0x290>)
 8001162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001166:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001168:	4b64      	ldr	r3, [pc, #400]	; (80012fc <HAL_UART_MspInit+0x290>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800116e:	4b63      	ldr	r3, [pc, #396]	; (80012fc <HAL_UART_MspInit+0x290>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001174:	4b61      	ldr	r3, [pc, #388]	; (80012fc <HAL_UART_MspInit+0x290>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800117a:	4b60      	ldr	r3, [pc, #384]	; (80012fc <HAL_UART_MspInit+0x290>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001180:	4b5e      	ldr	r3, [pc, #376]	; (80012fc <HAL_UART_MspInit+0x290>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001186:	485d      	ldr	r0, [pc, #372]	; (80012fc <HAL_UART_MspInit+0x290>)
 8001188:	f000 fd5c 	bl	8001c44 <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001192:	f7ff fd35 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_UART_MspInit+0x290>)
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
 800119c:	4a57      	ldr	r2, [pc, #348]	; (80012fc <HAL_UART_MspInit+0x290>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2025      	movs	r0, #37	; 0x25
 80011a8:	f000 fd15 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ac:	2025      	movs	r0, #37	; 0x25
 80011ae:	f000 fd2e 	bl	8001c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b2:	e095      	b.n	80012e0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_UART_MspInit+0x298>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f040 8090 	bne.w	80012e0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	4b49      	ldr	r3, [pc, #292]	; (80012ec <HAL_UART_MspInit+0x280>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a48      	ldr	r2, [pc, #288]	; (80012ec <HAL_UART_MspInit+0x280>)
 80011ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
 80011d0:	4b46      	ldr	r3, [pc, #280]	; (80012ec <HAL_UART_MspInit+0x280>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b42      	ldr	r3, [pc, #264]	; (80012ec <HAL_UART_MspInit+0x280>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a41      	ldr	r2, [pc, #260]	; (80012ec <HAL_UART_MspInit+0x280>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_UART_MspInit+0x280>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011f8:	230c      	movs	r3, #12
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001208:	2307      	movs	r3, #7
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	4837      	ldr	r0, [pc, #220]	; (80012f0 <HAL_UART_MspInit+0x284>)
 8001214:	f001 f926 	bl	8002464 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001218:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <HAL_UART_MspInit+0x29c>)
 800121a:	4a3c      	ldr	r2, [pc, #240]	; (800130c <HAL_UART_MspInit+0x2a0>)
 800121c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800121e:	4b3a      	ldr	r3, [pc, #232]	; (8001308 <HAL_UART_MspInit+0x29c>)
 8001220:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001224:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_UART_MspInit+0x29c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_UART_MspInit+0x29c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_UART_MspInit+0x29c>)
 8001234:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001238:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <HAL_UART_MspInit+0x29c>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001240:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_UART_MspInit+0x29c>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_UART_MspInit+0x29c>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_UART_MspInit+0x29c>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_UART_MspInit+0x29c>)
 8001254:	2200      	movs	r2, #0
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001258:	482b      	ldr	r0, [pc, #172]	; (8001308 <HAL_UART_MspInit+0x29c>)
 800125a:	f000 fcf3 	bl	8001c44 <HAL_DMA_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8001264:	f7ff fccc 	bl	8000c00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a27      	ldr	r2, [pc, #156]	; (8001308 <HAL_UART_MspInit+0x29c>)
 800126c:	639a      	str	r2, [r3, #56]	; 0x38
 800126e:	4a26      	ldr	r2, [pc, #152]	; (8001308 <HAL_UART_MspInit+0x29c>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 8001276:	4a27      	ldr	r2, [pc, #156]	; (8001314 <HAL_UART_MspInit+0x2a8>)
 8001278:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 800127c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001280:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 8001284:	2240      	movs	r2, #64	; 0x40
 8001286:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 8001290:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001294:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012b4:	4816      	ldr	r0, [pc, #88]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 80012b6:	f000 fcc5 	bl	8001c44 <HAL_DMA_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80012c0:	f7ff fc9e 	bl	8000c00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_UART_MspInit+0x2a4>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2026      	movs	r0, #38	; 0x26
 80012d6:	f000 fc7e 	bl	8001bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012da:	2026      	movs	r0, #38	; 0x26
 80012dc:	f000 fc97 	bl	8001c0e <HAL_NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3730      	adds	r7, #48	; 0x30
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	20000700 	.word	0x20000700
 80012f8:	40026440 	.word	0x40026440
 80012fc:	200006a0 	.word	0x200006a0
 8001300:	400264b8 	.word	0x400264b8
 8001304:	40004400 	.word	0x40004400
 8001308:	20000490 	.word	0x20000490
 800130c:	40026088 	.word	0x40026088
 8001310:	20000760 	.word	0x20000760
 8001314:	400260a0 	.word	0x400260a0

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 fb3c 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <SysTick_Handler+0x18>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	4a02      	ldr	r2, [pc, #8]	; (8001378 <SysTick_Handler+0x18>)
 8001370:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000002c 	.word	0x2000002c

0800137c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA1_Stream0_IRQHandler+0x10>)
 8001382:	f000 fdf7 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000804 	.word	0x20000804

08001390 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <DMA1_Stream1_IRQHandler+0x10>)
 8001396:	f000 fded 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000544 	.word	0x20000544

080013a4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA1_Stream4_IRQHandler+0x10>)
 80013aa:	f000 fde3 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000430 	.word	0x20000430

080013b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <DMA1_Stream5_IRQHandler+0x10>)
 80013be:	f000 fdd9 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000490 	.word	0x20000490

080013cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Stream6_IRQHandler+0x10>)
 80013d2:	f000 fdcf 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000760 	.word	0x20000760

080013e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <I2C1_EV_IRQHandler+0x10>)
 80013e6:	f001 fb47 	bl	8002a78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000604 	.word	0x20000604

080013f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <I2C1_ER_IRQHandler+0x10>)
 80013fa:	f001 fcae 	bl	8002d5a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000604 	.word	0x20000604

08001408 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <USART1_IRQHandler+0x10>)
 800140e:	f004 fcc1 	bl	8005d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200007c0 	.word	0x200007c0

0800141c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <USART2_IRQHandler+0x10>)
 8001422:	f004 fcb7 	bl	8005d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000864 	.word	0x20000864

08001430 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA1_Stream7_IRQHandler+0x10>)
 8001436:	f000 fd9d 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200005a4 	.word	0x200005a4

08001444 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA2_Stream2_IRQHandler+0x10>)
 800144a:	f000 fd93 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000700 	.word	0x20000700

08001458 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA2_Stream7_IRQHandler+0x10>)
 800145e:	f000 fd89 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200006a0 	.word	0x200006a0

0800146c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <I2C3_EV_IRQHandler+0x10>)
 8001472:	f001 fb01 	bl	8002a78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200004f0 	.word	0x200004f0

08001480 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <I2C3_ER_IRQHandler+0x10>)
 8001486:	f001 fc68 	bl	8002d5a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200004f0 	.word	0x200004f0

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014be:	490e      	ldr	r1, [pc, #56]	; (80014f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014d4:	4c0b      	ldr	r4, [pc, #44]	; (8001504 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014e2:	f7ff ffd7 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f005 fb3d 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff f807 	bl	80004fc <main>
  bx  lr    
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014fc:	08006c08 	.word	0x08006c08
  ldr r2, =_sbss
 8001500:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001504:	200008b8 	.word	0x200008b8

08001508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC_IRQHandler>
	...

0800150c <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 800150c:	b40f      	push	{r0, r1, r2, r3}
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	6938      	ldr	r0, [r7, #16]
 800151e:	f000 f891 	bl	8001644 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <D_Mess_printf+0x38>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <D_Mess_printf+0x3c>)
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800152e:	dd01      	ble.n	8001534 <D_Mess_printf+0x28>
	  D_Mess_flush();
 8001530:	f000 f80c 	bl	800154c <D_Mess_flush>
  }
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800153e:	b004      	add	sp, #16
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200008b0 	.word	0x200008b0
 8001548:	20000030 	.word	0x20000030

0800154c <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <D_Mess_flush+0x54>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f083 0301 	eor.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <D_Mess_flush+0x1c>
		outptr = buff;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <D_Mess_flush+0x58>)
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <D_Mess_flush+0x5c>)
 8001564:	601a      	str	r2, [r3, #0]
		return;
 8001566:	e01a      	b.n	800159e <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <D_Mess_flush+0x58>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <D_Mess_flush+0x58>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	490b      	ldr	r1, [pc, #44]	; (80015a4 <D_Mess_flush+0x58>)
 8001578:	600a      	str	r2, [r1, #0]
 800157a:	220a      	movs	r2, #10
 800157c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <D_Mess_flush+0x58>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <D_Mess_flush+0x5c>)
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4907      	ldr	r1, [pc, #28]	; (80015a8 <D_Mess_flush+0x5c>)
 800158c:	4807      	ldr	r0, [pc, #28]	; (80015ac <D_Mess_flush+0x60>)
 800158e:	f004 fb83 	bl	8005c98 <HAL_UART_Transmit_DMA>
		had_completed = false;
 8001592:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <D_Mess_flush+0x54>)
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <D_Mess_flush+0x58>)
 800159a:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <D_Mess_flush+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
}
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000004 	.word	0x20000004
 80015a4:	200008b0 	.word	0x200008b0
 80015a8:	20000030 	.word	0x20000030
 80015ac:	20000864 	.word	0x20000864

080015b0 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  had_completed = true;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <D_Mess_TransitionCompletedCallBack+0x14>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000004 	.word	0x20000004

080015c8 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b0a      	cmp	r3, #10
 80015d6:	d102      	bne.n	80015de <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 80015d8:	200d      	movs	r0, #13
 80015da:	f7ff fff5 	bl	80015c8 <xputc>
  }
  if( outptr ){
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <xputc+0x48>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <xputc+0x48>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1c5a      	adds	r2, r3, #1
 80015ec:	4908      	ldr	r1, [pc, #32]	; (8001610 <xputc+0x48>)
 80015ee:	600a      	str	r2, [r1, #0]
 80015f0:	79fa      	ldrb	r2, [r7, #7]
 80015f2:	701a      	strb	r2, [r3, #0]
    return;
 80015f4:	e008      	b.n	8001608 <xputc+0x40>
  }

  if( xfunc_out ){
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <xputc+0x4c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <xputc+0x40>
    xfunc_out((unsigned char)c);
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <xputc+0x4c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	79fa      	ldrb	r2, [r7, #7]
 8001604:	4610      	mov	r0, r2
 8001606:	4798      	blx	r3
  }
}
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200008b0 	.word	0x200008b0
 8001614:	200008ac 	.word	0x200008ac

08001618 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  while( *str ){
 8001620:	e006      	b.n	8001630 <xputs+0x18>
    xputc(*str++);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ffcc 	bl	80015c8 <xputc>
  while( *str ){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f4      	bne.n	8001622 <xputs+0xa>
  }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	; 0x38
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 8001658:	7ffb      	ldrb	r3, [r7, #31]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8167 	beq.w	800192e <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	2b25      	cmp	r3, #37	; 0x25
 8001664:	d004      	beq.n	8001670 <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffad 	bl	80015c8 <xputc>
 800166e:	e15d      	b.n	800192c <xvprintf+0x2e8>
    }
    f = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	2b30      	cmp	r3, #48	; 0x30
 8001682:	d107      	bne.n	8001694 <xvprintf+0x50>
      f = 1; c = *fmt++;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	77fb      	strb	r3, [r7, #31]
 8001692:	e009      	b.n	80016a8 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 8001694:	7ffb      	ldrb	r3, [r7, #31]
 8001696:	2b2d      	cmp	r3, #45	; 0x2d
 8001698:	d106      	bne.n	80016a8 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 800169a:	2302      	movs	r3, #2
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ac:	e00e      	b.n	80016cc <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 80016ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	461a      	mov	r2, r3
 80016ba:	7ffb      	ldrb	r3, [r7, #31]
 80016bc:	4413      	add	r3, r2
 80016be:	3b30      	subs	r3, #48	; 0x30
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	77fb      	strb	r3, [r7, #31]
 80016cc:	7ffb      	ldrb	r3, [r7, #31]
 80016ce:	2b2f      	cmp	r3, #47	; 0x2f
 80016d0:	d902      	bls.n	80016d8 <xvprintf+0x94>
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	2b39      	cmp	r3, #57	; 0x39
 80016d6:	d9ea      	bls.n	80016ae <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 80016d8:	7ffb      	ldrb	r3, [r7, #31]
 80016da:	2b6c      	cmp	r3, #108	; 0x6c
 80016dc:	d002      	beq.n	80016e4 <xvprintf+0xa0>
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	2b4c      	cmp	r3, #76	; 0x4c
 80016e2:	d108      	bne.n	80016f6 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 80016f6:	7ffb      	ldrb	r3, [r7, #31]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 811a 	beq.w	8001932 <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 8001702:	7fbb      	ldrb	r3, [r7, #30]
 8001704:	2b60      	cmp	r3, #96	; 0x60
 8001706:	d902      	bls.n	800170e <xvprintf+0xca>
      d -= 0x20;
 8001708:	7fbb      	ldrb	r3, [r7, #30]
 800170a:	3b20      	subs	r3, #32
 800170c:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 800170e:	7fbb      	ldrb	r3, [r7, #30]
 8001710:	3b42      	subs	r3, #66	; 0x42
 8001712:	2b16      	cmp	r3, #22
 8001714:	d873      	bhi.n	80017fe <xvprintf+0x1ba>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <xvprintf+0xd8>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	080017e7 	.word	0x080017e7
 8001720:	080017d5 	.word	0x080017d5
 8001724:	080017f3 	.word	0x080017f3
 8001728:	080017ff 	.word	0x080017ff
 800172c:	080017ff 	.word	0x080017ff
 8001730:	080017ff 	.word	0x080017ff
 8001734:	080017ff 	.word	0x080017ff
 8001738:	080017ff 	.word	0x080017ff
 800173c:	080017ff 	.word	0x080017ff
 8001740:	080017ff 	.word	0x080017ff
 8001744:	080017ff 	.word	0x080017ff
 8001748:	080017ff 	.word	0x080017ff
 800174c:	080017ff 	.word	0x080017ff
 8001750:	080017ed 	.word	0x080017ed
 8001754:	080017ff 	.word	0x080017ff
 8001758:	080017ff 	.word	0x080017ff
 800175c:	080017ff 	.word	0x080017ff
 8001760:	08001779 	.word	0x08001779
 8001764:	080017ff 	.word	0x080017ff
 8001768:	080017f3 	.word	0x080017f3
 800176c:	080017ff 	.word	0x080017ff
 8001770:	080017ff 	.word	0x080017ff
 8001774:	080017f9 	.word	0x080017f9
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	1d1a      	adds	r2, r3, #4
 800177c:	603a      	str	r2, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001786:	e002      	b.n	800178e <xvprintf+0x14a>
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	3301      	adds	r3, #1
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f6      	bne.n	8001788 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 800179a:	e002      	b.n	80017a2 <xvprintf+0x15e>
        xputc(' ');
 800179c:	2020      	movs	r0, #32
 800179e:	f7ff ff13 	bl	80015c8 <xputc>
      while( !( f & 2 ) && j++ < w ){
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <xvprintf+0x174>
 80017ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f1      	bhi.n	800179c <xvprintf+0x158>
      }
      xputs(p);
 80017b8:	69b8      	ldr	r0, [r7, #24]
 80017ba:	f7ff ff2d 	bl	8001618 <xputs>
      while( j++ < w ){
 80017be:	e002      	b.n	80017c6 <xvprintf+0x182>
        xputc(' ');
 80017c0:	2020      	movs	r0, #32
 80017c2:	f7ff ff01 	bl	80015c8 <xputc>
      while( j++ < w ){
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d8f6      	bhi.n	80017c0 <xvprintf+0x17c>
      }
      continue;
 80017d2:	e0ab      	b.n	800192c <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	1d1a      	adds	r2, r3, #4
 80017d8:	603a      	str	r2, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fef2 	bl	80015c8 <xputc>
 80017e4:	e0a2      	b.n	800192c <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 80017e6:	2302      	movs	r3, #2
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
 80017ea:	e00d      	b.n	8001808 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 80017ec:	2308      	movs	r3, #8
 80017ee:	637b      	str	r3, [r7, #52]	; 0x34
 80017f0:	e00a      	b.n	8001808 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 80017f2:	230a      	movs	r3, #10
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
 80017f6:	e007      	b.n	8001808 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 80017f8:	2310      	movs	r3, #16
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
 80017fc:	e004      	b.n	8001808 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 80017fe:	7ffb      	ldrb	r3, [r7, #31]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fee1 	bl	80015c8 <xputc>
 8001806:	e091      	b.n	800192c <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d004      	beq.n	800181c <xvprintf+0x1d8>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	1d1a      	adds	r2, r3, #4
 8001816:	603a      	str	r2, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e00b      	b.n	8001834 <xvprintf+0x1f0>
 800181c:	7fbb      	ldrb	r3, [r7, #30]
 800181e:	2b44      	cmp	r3, #68	; 0x44
 8001820:	d104      	bne.n	800182c <xvprintf+0x1e8>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	1d1a      	adds	r2, r3, #4
 8001826:	603a      	str	r2, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	e003      	b.n	8001834 <xvprintf+0x1f0>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	1d1a      	adds	r2, r3, #4
 8001830:	603a      	str	r2, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8001836:	7fbb      	ldrb	r3, [r7, #30]
 8001838:	2b44      	cmp	r3, #68	; 0x44
 800183a:	d109      	bne.n	8001850 <xvprintf+0x20c>
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2b00      	cmp	r3, #0
 8001840:	da06      	bge.n	8001850 <xvprintf+0x20c>
      v = 0 - v;
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	425b      	negs	r3, r3
 8001846:	623b      	str	r3, [r7, #32]
      f |= 8;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	f043 0308 	orr.w	r3, r3, #8
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001858:	fbb3 f2f2 	udiv	r2, r3, r2
 800185c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800185e:	fb01 f202 	mul.w	r2, r1, r2
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	77bb      	strb	r3, [r7, #30]
 8001866:	6a3a      	ldr	r2, [r7, #32]
 8001868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 8001870:	7fbb      	ldrb	r3, [r7, #30]
 8001872:	2b09      	cmp	r3, #9
 8001874:	d908      	bls.n	8001888 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	2b78      	cmp	r3, #120	; 0x78
 800187a:	d101      	bne.n	8001880 <xvprintf+0x23c>
 800187c:	2227      	movs	r2, #39	; 0x27
 800187e:	e000      	b.n	8001882 <xvprintf+0x23e>
 8001880:	2207      	movs	r2, #7
 8001882:	7fbb      	ldrb	r3, [r7, #30]
 8001884:	4413      	add	r3, r2
 8001886:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8001888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	633a      	str	r2, [r7, #48]	; 0x30
 800188e:	7fba      	ldrb	r2, [r7, #30]
 8001890:	3230      	adds	r2, #48	; 0x30
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001898:	440b      	add	r3, r1
 800189a:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <xvprintf+0x266>
 80018a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d9d4      	bls.n	8001854 <xvprintf+0x210>
    if( f & 8 ){
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <xvprintf+0x282>
      s[i++] = '-';
 80018b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	633a      	str	r2, [r7, #48]	; 0x30
 80018ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80018be:	4413      	add	r3, r2
 80018c0:	222d      	movs	r2, #45	; 0x2d
 80018c2:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 80018c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <xvprintf+0x294>
 80018d4:	2330      	movs	r3, #48	; 0x30
 80018d6:	e000      	b.n	80018da <xvprintf+0x296>
 80018d8:	2320      	movs	r3, #32
 80018da:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 80018dc:	e003      	b.n	80018e6 <xvprintf+0x2a2>
      xputc(d);
 80018de:	7fbb      	ldrb	r3, [r7, #30]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fe71 	bl	80015c8 <xputc>
    while( !( f & 2 ) && j++ < w ){
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <xvprintf+0x2b8>
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f0      	bhi.n	80018de <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 80018fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fe:	3b01      	subs	r3, #1
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
 8001902:	f107 0208 	add.w	r2, r7, #8
 8001906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001908:	4413      	add	r3, r2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fe5b 	bl	80015c8 <xputc>
 8001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f1      	bne.n	80018fc <xvprintf+0x2b8>
    while( j++ < w ){
 8001918:	e002      	b.n	8001920 <xvprintf+0x2dc>
      xputc(' ');
 800191a:	2020      	movs	r0, #32
 800191c:	f7ff fe54 	bl	80015c8 <xputc>
    while( j++ < w ){
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001928:	429a      	cmp	r2, r3
 800192a:	d8f6      	bhi.n	800191a <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 800192c:	e68f      	b.n	800164e <xvprintf+0xa>
      break;                                            /* End of format? */
 800192e:	bf00      	nop
 8001930:	e000      	b.n	8001934 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8001932:	bf00      	nop
    }
  }
} /* xvprintf */
 8001934:	bf00      	nop
 8001936:	3738      	adds	r7, #56	; 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f92b 	bl	8001bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff f94c 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f943 	bl	8001c2a <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019bc:	f000 f90b 	bl	8001bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	; (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2000000c 	.word	0x2000000c
 8001a04:	200008b4 	.word	0x200008b4

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200008b4 	.word	0x200008b4

08001a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <__NVIC_SetPriorityGrouping+0x44>)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	60d3      	str	r3, [r2, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <__NVIC_GetPriorityGrouping+0x18>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	0a1b      	lsrs	r3, r3, #8
 8001a72:	f003 0307 	and.w	r3, r3, #7
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	db0b      	blt.n	8001aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4907      	ldr	r1, [pc, #28]	; (8001abc <__NVIC_EnableIRQ+0x38>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b8c:	d301      	bcc.n	8001b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00f      	b.n	8001bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <SysTick_Config+0x40>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9a:	210f      	movs	r1, #15
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba0:	f7ff ff8e 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SysTick_Config+0x40>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SysTick_Config+0x40>)
 8001bac:	2207      	movs	r2, #7
 8001bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff29 	bl	8001a20 <__NVIC_SetPriorityGrouping>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
 8001be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be8:	f7ff ff3e 	bl	8001a68 <__NVIC_GetPriorityGrouping>
 8001bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6978      	ldr	r0, [r7, #20]
 8001bf4:	f7ff ff8e 	bl	8001b14 <NVIC_EncodePriority>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfe:	4611      	mov	r1, r2
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff5d 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff31 	bl	8001a84 <__NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffa2 	bl	8001b7c <SysTick_Config>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff feda 	bl	8001a08 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e099      	b.n	8001d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c80:	e00f      	b.n	8001ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c82:	f7ff fec1 	bl	8001a08 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d908      	bls.n	8001ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e078      	b.n	8001d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1e8      	bne.n	8001c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4b38      	ldr	r3, [pc, #224]	; (8001d9c <HAL_DMA_Init+0x158>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d107      	bne.n	8001d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	4313      	orrs	r3, r2
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f023 0307 	bic.w	r3, r3, #7
 8001d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d117      	bne.n	8001d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00e      	beq.n	8001d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fb0f 	bl	800236c <DMA_CheckFifoParam>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d62:	2301      	movs	r3, #1
 8001d64:	e016      	b.n	8001d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fac6 	bl	8002300 <DMA_CalcBaseAndBitshift>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	223f      	movs	r2, #63	; 0x3f
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f010803f 	.word	0xf010803f

08001da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_DMA_Start_IT+0x26>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e040      	b.n	8001e48 <HAL_DMA_Start_IT+0xa8>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d12f      	bne.n	8001e3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa58 	bl	80022a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0216 	orr.w	r2, r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0208 	orr.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e005      	b.n	8001e46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7ff fdd3 	bl	8001a08 <HAL_GetTick>
 8001e62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d008      	beq.n	8001e82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e052      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0216 	bic.w	r2, r2, #22
 8001e90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d103      	bne.n	8001eb2 <HAL_DMA_Abort+0x62>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0208 	bic.w	r2, r2, #8
 8001ec0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	e013      	b.n	8001efc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed4:	f7ff fd98 	bl	8001a08 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d90c      	bls.n	8001efc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2203      	movs	r2, #3
 8001eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e015      	b.n	8001f28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1e4      	bne.n	8001ed4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	223f      	movs	r2, #63	; 0x3f
 8001f10:	409a      	lsls	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d004      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00c      	b.n	8001f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2205      	movs	r2, #5
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0201 	bic.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f80:	4b92      	ldr	r3, [pc, #584]	; (80021cc <HAL_DMA_IRQHandler+0x258>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a92      	ldr	r2, [pc, #584]	; (80021d0 <HAL_DMA_IRQHandler+0x25c>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2208      	movs	r2, #8
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2204      	movs	r2, #4
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2204      	movs	r2, #4
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f043 0204 	orr.w	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2210      	movs	r2, #16
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d043      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2210      	movs	r2, #16
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e01f      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e016      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0208 	bic.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2220      	movs	r2, #32
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 808e 	beq.w	8002212 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8086 	beq.w	8002212 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2220      	movs	r2, #32
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d136      	bne.n	800218c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0216 	bic.w	r2, r2, #22
 800212c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800213c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_DMA_IRQHandler+0x1da>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0208 	bic.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	223f      	movs	r2, #63	; 0x3f
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07d      	beq.n	800227e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
        }
        return;
 800218a:	e078      	b.n	800227e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d108      	bne.n	80021ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d030      	beq.n	8002212 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e02b      	b.n	8002212 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e022      	b.n	8002212 <HAL_DMA_IRQHandler+0x29e>
 80021cc:	20000000 	.word	0x20000000
 80021d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0210 	bic.w	r2, r2, #16
 80021f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	2b00      	cmp	r3, #0
 8002218:	d032      	beq.n	8002280 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d022      	beq.n	800226c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3301      	adds	r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	429a      	cmp	r2, r3
 8002248:	d307      	bcc.n	800225a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f2      	bne.n	800223e <HAL_DMA_IRQHandler+0x2ca>
 8002258:	e000      	b.n	800225c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800225a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e000      	b.n	8002280 <HAL_DMA_IRQHandler+0x30c>
        return;
 800227e:	bf00      	nop
    }
  }
}
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002296:	b2db      	uxtb	r3, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d108      	bne.n	80022e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022e2:	e007      	b.n	80022f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3b10      	subs	r3, #16
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <DMA_CalcBaseAndBitshift+0x64>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <DMA_CalcBaseAndBitshift+0x68>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d909      	bls.n	8002342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
 8002340:	e007      	b.n	8002352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	aaaaaaab 	.word	0xaaaaaaab
 8002368:	08006bf0 	.word	0x08006bf0

0800236c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11f      	bne.n	80023c6 <DMA_CheckFifoParam+0x5a>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d856      	bhi.n	800243a <DMA_CheckFifoParam+0xce>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <DMA_CheckFifoParam+0x28>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023b7 	.word	0x080023b7
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	0800243b 	.word	0x0800243b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d046      	beq.n	800243e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e043      	b.n	800243e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023be:	d140      	bne.n	8002442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c4:	e03d      	b.n	8002442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	d121      	bne.n	8002414 <DMA_CheckFifoParam+0xa8>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d837      	bhi.n	8002446 <DMA_CheckFifoParam+0xda>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <DMA_CheckFifoParam+0x70>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	080023ed 	.word	0x080023ed
 80023e0:	080023f3 	.word	0x080023f3
 80023e4:	080023ed 	.word	0x080023ed
 80023e8:	08002405 	.word	0x08002405
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e030      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d025      	beq.n	800244a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002402:	e022      	b.n	800244a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002412:	e01c      	b.n	800244e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d903      	bls.n	8002422 <DMA_CheckFifoParam+0xb6>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d003      	beq.n	8002428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002420:	e018      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      break;
 8002426:	e015      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e00b      	b.n	8002452 <DMA_CheckFifoParam+0xe6>
      break;
 800243a:	bf00      	nop
 800243c:	e00a      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e008      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e006      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e004      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;   
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
    }
  } 
  
  return status; 
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e165      	b.n	800274c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8154 	bne.w	8002746 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80ae 	beq.w	8002746 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <HAL_GPIO_Init+0x300>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <HAL_GPIO_Init+0x300>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_GPIO_Init+0x300>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4f      	ldr	r2, [pc, #316]	; (800276c <HAL_GPIO_Init+0x308>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x21a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4e      	ldr	r2, [pc, #312]	; (8002770 <HAL_GPIO_Init+0x30c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x216>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4d      	ldr	r2, [pc, #308]	; (8002774 <HAL_GPIO_Init+0x310>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x212>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4c      	ldr	r2, [pc, #304]	; (8002778 <HAL_GPIO_Init+0x314>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x20e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4b      	ldr	r2, [pc, #300]	; (800277c <HAL_GPIO_Init+0x318>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x20a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <HAL_GPIO_Init+0x31c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x206>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a49      	ldr	r2, [pc, #292]	; (8002784 <HAL_GPIO_Init+0x320>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x202>
 8002662:	2306      	movs	r3, #6
 8002664:	e00c      	b.n	8002680 <HAL_GPIO_Init+0x21c>
 8002666:	2307      	movs	r3, #7
 8002668:	e00a      	b.n	8002680 <HAL_GPIO_Init+0x21c>
 800266a:	2305      	movs	r3, #5
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x21c>
 800266e:	2304      	movs	r3, #4
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x21c>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x21c>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x21c>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x21c>
 800267e:	2300      	movs	r3, #0
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002690:	4935      	ldr	r1, [pc, #212]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_GPIO_Init+0x324>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c2:	4a31      	ldr	r2, [pc, #196]	; (8002788 <HAL_GPIO_Init+0x324>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026c8:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_GPIO_Init+0x324>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ec:	4a26      	ldr	r2, [pc, #152]	; (8002788 <HAL_GPIO_Init+0x324>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026f2:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_GPIO_Init+0x324>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002716:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_GPIO_Init+0x324>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <HAL_GPIO_Init+0x324>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002740:	4a11      	ldr	r2, [pc, #68]	; (8002788 <HAL_GPIO_Init+0x324>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	f67f ae96 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40013800 	.word	0x40013800
 800276c:	40020000 	.word	0x40020000
 8002770:	40020400 	.word	0x40020400
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021000 	.word	0x40021000
 8002780:	40021400 	.word	0x40021400
 8002784:	40021800 	.word	0x40021800
 8002788:	40013c00 	.word	0x40013c00

0800278c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e001      	b.n	80027ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	807b      	strh	r3, [r7, #2]
 80027c8:	4613      	mov	r3, r2
 80027ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027cc:	787b      	ldrb	r3, [r7, #1]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027d8:	e003      	b.n	80027e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	041a      	lsls	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	619a      	str	r2, [r3, #24]
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
	...

080027f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e12b      	b.n	8002a5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fa20 	bl	8000c5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	; 0x24
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002842:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002852:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002854:	f001 fed4 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8002858:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a81      	ldr	r2, [pc, #516]	; (8002a64 <HAL_I2C_Init+0x274>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d807      	bhi.n	8002874 <HAL_I2C_Init+0x84>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a80      	ldr	r2, [pc, #512]	; (8002a68 <HAL_I2C_Init+0x278>)
 8002868:	4293      	cmp	r3, r2
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	e006      	b.n	8002882 <HAL_I2C_Init+0x92>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a7d      	ldr	r2, [pc, #500]	; (8002a6c <HAL_I2C_Init+0x27c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	bf94      	ite	ls
 800287c:	2301      	movls	r3, #1
 800287e:	2300      	movhi	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0e7      	b.n	8002a5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4a78      	ldr	r2, [pc, #480]	; (8002a70 <HAL_I2C_Init+0x280>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a6a      	ldr	r2, [pc, #424]	; (8002a64 <HAL_I2C_Init+0x274>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d802      	bhi.n	80028c4 <HAL_I2C_Init+0xd4>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3301      	adds	r3, #1
 80028c2:	e009      	b.n	80028d8 <HAL_I2C_Init+0xe8>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	4a69      	ldr	r2, [pc, #420]	; (8002a74 <HAL_I2C_Init+0x284>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	3301      	adds	r3, #1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	430b      	orrs	r3, r1
 80028de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	495c      	ldr	r1, [pc, #368]	; (8002a64 <HAL_I2C_Init+0x274>)
 80028f4:	428b      	cmp	r3, r1
 80028f6:	d819      	bhi.n	800292c <HAL_I2C_Init+0x13c>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e59      	subs	r1, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fbb1 f3f3 	udiv	r3, r1, r3
 8002906:	1c59      	adds	r1, r3, #1
 8002908:	f640 73fc 	movw	r3, #4092	; 0xffc
 800290c:	400b      	ands	r3, r1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_I2C_Init+0x138>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e59      	subs	r1, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	e051      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 8002928:	2304      	movs	r3, #4
 800292a:	e04f      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d111      	bne.n	8002958 <HAL_I2C_Init+0x168>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e58      	subs	r0, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e012      	b.n	800297e <HAL_I2C_Init+0x18e>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	0099      	lsls	r1, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	fbb0 f3f3 	udiv	r3, r0, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_Init+0x196>
 8002982:	2301      	movs	r3, #1
 8002984:	e022      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10e      	bne.n	80029ac <HAL_I2C_Init+0x1bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1e58      	subs	r0, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	440b      	add	r3, r1
 800299c:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029aa:	e00f      	b.n	80029cc <HAL_I2C_Init+0x1dc>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	0099      	lsls	r1, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	6809      	ldr	r1, [r1, #0]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69da      	ldr	r2, [r3, #28]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6911      	ldr	r1, [r2, #16]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68d2      	ldr	r2, [r2, #12]
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	000186a0 	.word	0x000186a0
 8002a68:	001e847f 	.word	0x001e847f
 8002a6c:	003d08ff 	.word	0x003d08ff
 8002a70:	431bde83 	.word	0x431bde83
 8002a74:	10624dd3 	.word	0x10624dd3

08002a78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d003      	beq.n	8002ab0 <HAL_I2C_EV_IRQHandler+0x38>
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	f040 80c1 	bne.w	8002c32 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_I2C_EV_IRQHandler+0x6e>
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ad0:	d003      	beq.n	8002ada <HAL_I2C_EV_IRQHandler+0x62>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_EV_IRQHandler+0x66>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x68>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f000 8132 	beq.w	8002d4a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00c      	beq.n	8002b0a <HAL_I2C_EV_IRQHandler+0x92>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f001 fc71 	bl	80043e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fd79 	bl	80035fa <I2C_Master_SB>
 8002b08:	e092      	b.n	8002c30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	08db      	lsrs	r3, r3, #3
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0xb2>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	0a5b      	lsrs	r3, r3, #9
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fdef 	bl	8003706 <I2C_Master_ADD10>
 8002b28:	e082      	b.n	8002c30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_I2C_EV_IRQHandler+0xd2>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	0a5b      	lsrs	r3, r3, #9
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fe09 	bl	800375a <I2C_Master_ADDR>
 8002b48:	e072      	b.n	8002c30 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03b      	beq.n	8002bce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b64:	f000 80f3 	beq.w	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	09db      	lsrs	r3, r3, #7
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00f      	beq.n	8002b94 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	0a9b      	lsrs	r3, r3, #10
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_I2C_EV_IRQHandler+0x11c>
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f9f3 	bl	8002f78 <I2C_MasterTransmit_TXE>
 8002b92:	e04d      	b.n	8002c30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80d6 	beq.w	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	0a5b      	lsrs	r3, r3, #9
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80cf 	beq.w	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	2b21      	cmp	r3, #33	; 0x21
 8002bb4:	d103      	bne.n	8002bbe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa7a 	bl	80030b0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bbc:	e0c7      	b.n	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	f040 80c4 	bne.w	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fae8 	bl	800319c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bcc:	e0bf      	b.n	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bdc:	f000 80b7 	beq.w	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	099b      	lsrs	r3, r3, #6
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00f      	beq.n	8002c0c <HAL_I2C_EV_IRQHandler+0x194>
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	0a9b      	lsrs	r3, r3, #10
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <HAL_I2C_EV_IRQHandler+0x194>
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fb5d 	bl	80032c4 <I2C_MasterReceive_RXNE>
 8002c0a:	e011      	b.n	8002c30 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 809a 	beq.w	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	0a5b      	lsrs	r3, r3, #9
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8093 	beq.w	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fbfc 	bl	8003426 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c2e:	e08e      	b.n	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c30:	e08d      	b.n	8002d4e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d004      	beq.n	8002c44 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	e007      	b.n	8002c54 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0x20e>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	0a5b      	lsrs	r3, r3, #9
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c7c:	69b9      	ldr	r1, [r7, #24]
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 ffba 	bl	8003bf8 <I2C_Slave_ADDR>
 8002c84:	e066      	b.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x22e>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	0a5b      	lsrs	r3, r3, #9
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fff4 	bl	8003c8c <I2C_Slave_STOPF>
 8002ca4:	e056      	b.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002ca6:	7bbb      	ldrb	r3, [r7, #14]
 8002ca8:	2b21      	cmp	r3, #33	; 0x21
 8002caa:	d002      	beq.n	8002cb2 <HAL_I2C_EV_IRQHandler+0x23a>
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	2b29      	cmp	r3, #41	; 0x29
 8002cb0:	d125      	bne.n	8002cfe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	09db      	lsrs	r3, r3, #7
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00f      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0x266>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	0a9b      	lsrs	r3, r3, #10
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <HAL_I2C_EV_IRQHandler+0x266>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	089b      	lsrs	r3, r3, #2
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fed0 	bl	8003a7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cdc:	e039      	b.n	8002d52 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d033      	beq.n	8002d52 <HAL_I2C_EV_IRQHandler+0x2da>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	0a5b      	lsrs	r3, r3, #9
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02d      	beq.n	8002d52 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fefd 	bl	8003af6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cfc:	e029      	b.n	8002d52 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00f      	beq.n	8002d2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	0a9b      	lsrs	r3, r3, #10
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 ff08 	bl	8003b38 <I2C_SlaveReceive_RXNE>
 8002d28:	e014      	b.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	0a5b      	lsrs	r3, r3, #9
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 ff36 	bl	8003bb4 <I2C_SlaveReceive_BTF>
 8002d48:	e004      	b.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d52:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b08a      	sub	sp, #40	; 0x28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d7c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00e      	beq.n	8002da8 <HAL_I2C_ER_IRQHandler+0x4e>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002da6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <HAL_I2C_ER_IRQHandler+0x78>
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002dd0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	0a9b      	lsrs	r3, r3, #10
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03f      	beq.n	8002e5e <HAL_I2C_ER_IRQHandler+0x104>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d039      	beq.n	8002e5e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002dea:	7efb      	ldrb	r3, [r7, #27]
 8002dec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002e04:	7ebb      	ldrb	r3, [r7, #26]
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d112      	bne.n	8002e30 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	2b21      	cmp	r3, #33	; 0x21
 8002e14:	d008      	beq.n	8002e28 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b29      	cmp	r3, #41	; 0x29
 8002e1a:	d005      	beq.n	8002e28 <HAL_I2C_ER_IRQHandler+0xce>
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	2b28      	cmp	r3, #40	; 0x28
 8002e20:	d106      	bne.n	8002e30 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b21      	cmp	r3, #33	; 0x21
 8002e26:	d103      	bne.n	8002e30 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f001 f85f 	bl	8003eec <I2C_Slave_AF>
 8002e2e:	e016      	b.n	8002e5e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e38:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e42:	7efb      	ldrb	r3, [r7, #27]
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d002      	beq.n	8002e4e <HAL_I2C_ER_IRQHandler+0xf4>
 8002e48:	7efb      	ldrb	r3, [r7, #27]
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d107      	bne.n	8002e5e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	0adb      	lsrs	r3, r3, #11
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00e      	beq.n	8002e88 <HAL_I2C_ER_IRQHandler+0x12e>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002e86:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f001 f896 	bl	8003fcc <I2C_ITError>
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
 8002f04:	4613      	mov	r3, r2
 8002f06:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d150      	bne.n	8003040 <I2C_MasterTransmit_TXE+0xc8>
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b21      	cmp	r3, #33	; 0x21
 8002fa2:	d14d      	bne.n	8003040 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d01d      	beq.n	8002fe6 <I2C_MasterTransmit_TXE+0x6e>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d01a      	beq.n	8002fe6 <I2C_MasterTransmit_TXE+0x6e>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fb6:	d016      	beq.n	8002fe6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fc6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2211      	movs	r2, #17
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff62 	bl	8002ea8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fe4:	e060      	b.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ff4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff7d 	bl	8002f28 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800302e:	e03b      	b.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff35 	bl	8002ea8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800303e:	e033      	b.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b21      	cmp	r3, #33	; 0x21
 8003044:	d005      	beq.n	8003052 <I2C_MasterTransmit_TXE+0xda>
 8003046:	7bbb      	ldrb	r3, [r7, #14]
 8003048:	2b40      	cmp	r3, #64	; 0x40
 800304a:	d12d      	bne.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b22      	cmp	r3, #34	; 0x22
 8003050:	d12a      	bne.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d108      	bne.n	800306e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800306c:	e01c      	b.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d103      	bne.n	8003082 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f88e 	bl	800319c <I2C_MemoryTransmit_TXE_BTF>
}
 8003080:	e012      	b.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030a6:	e7ff      	b.n	80030a8 <I2C_MasterTransmit_TXE+0x130>
 80030a8:	bf00      	nop
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b21      	cmp	r3, #33	; 0x21
 80030c8:	d164      	bne.n	8003194 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	781a      	ldrb	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80030f8:	e04c      	b.n	8003194 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d01d      	beq.n	800313c <I2C_MasterTransmit_BTF+0x8c>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b20      	cmp	r3, #32
 8003104:	d01a      	beq.n	800313c <I2C_MasterTransmit_BTF+0x8c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800310c:	d016      	beq.n	800313c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800311c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2211      	movs	r2, #17
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff feb7 	bl	8002ea8 <HAL_I2C_MasterTxCpltCallback>
}
 800313a:	e02b      	b.n	8003194 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800314a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d107      	bne.n	8003186 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fed2 	bl	8002f28 <HAL_I2C_MemTxCpltCallback>
}
 8003184:	e006      	b.n	8003194 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fe8a 	bl	8002ea8 <HAL_I2C_MasterTxCpltCallback>
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11d      	bne.n	80031f0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d10b      	bne.n	80031d4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	1c9a      	adds	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80031d2:	e073      	b.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d8:	b29b      	uxth	r3, r3
 80031da:	121b      	asrs	r3, r3, #8
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031ee:	e065      	b.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d10b      	bne.n	8003210 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800320e:	e055      	b.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	2b02      	cmp	r3, #2
 8003216:	d151      	bne.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b22      	cmp	r3, #34	; 0x22
 800321c:	d10d      	bne.n	800323a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003238:	e040      	b.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d015      	beq.n	8003270 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b21      	cmp	r3, #33	; 0x21
 8003248:	d112      	bne.n	8003270 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	3b01      	subs	r3, #1
 8003268:	b29a      	uxth	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800326e:	e025      	b.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d120      	bne.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b21      	cmp	r3, #33	; 0x21
 800327e:	d11d      	bne.n	80032bc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800328e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800329e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff fe36 	bl	8002f28 <HAL_I2C_MemTxCpltCallback>
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b22      	cmp	r3, #34	; 0x22
 80032d6:	f040 80a2 	bne.w	800341e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d921      	bls.n	800332c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29b      	uxth	r3, r3
 8003314:	2b03      	cmp	r3, #3
 8003316:	f040 8082 	bne.w	800341e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003328:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800332a:	e078      	b.n	800341e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b02      	cmp	r3, #2
 8003332:	d074      	beq.n	800341e <I2C_MasterReceive_RXNE+0x15a>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d002      	beq.n	8003340 <I2C_MasterReceive_RXNE+0x7c>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d16e      	bne.n	800341e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f001 f81d 	bl	8004380 <I2C_WaitOnSTOPRequestThroughIT>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d142      	bne.n	80033d2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800336a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2220      	movs	r2, #32
 8003396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d10a      	bne.n	80033bc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff fdc1 	bl	8002f3c <HAL_I2C_MemRxCpltCallback>
}
 80033ba:	e030      	b.n	800341e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2212      	movs	r2, #18
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fd76 	bl	8002ebc <HAL_I2C_MasterRxCpltCallback>
}
 80033d0:	e025      	b.n	800341e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff fd99 	bl	8002f50 <HAL_I2C_ErrorCallback>
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b04      	cmp	r3, #4
 800343c:	d11b      	bne.n	8003476 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003474:	e0bd      	b.n	80035f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b03      	cmp	r3, #3
 800347e:	d129      	bne.n	80034d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d00a      	beq.n	80034ac <I2C_MasterReceive_BTF+0x86>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d007      	beq.n	80034ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034d2:	e08e      	b.n	80035f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d176      	bne.n	80035cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <I2C_MasterReceive_BTF+0xc4>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b10      	cmp	r3, #16
 80034e8:	d108      	bne.n	80034fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e019      	b.n	8003530 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d002      	beq.n	8003508 <I2C_MasterReceive_BTF+0xe2>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d108      	bne.n	800351a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e00a      	b.n	8003530 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d007      	beq.n	8003530 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800358a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d10a      	bne.n	80035b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fcc4 	bl	8002f3c <HAL_I2C_MemRxCpltCallback>
}
 80035b4:	e01d      	b.n	80035f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2212      	movs	r2, #18
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff fc79 	bl	8002ebc <HAL_I2C_MasterRxCpltCallback>
}
 80035ca:	e012      	b.n	80035f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	1c5a      	adds	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d117      	bne.n	800363e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003626:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003628:	e067      	b.n	80036fa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	b2da      	uxtb	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]
}
 800363c:	e05d      	b.n	80036fa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003646:	d133      	bne.n	80036b0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b21      	cmp	r3, #33	; 0x21
 8003652:	d109      	bne.n	8003668 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	b2db      	uxtb	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	e008      	b.n	800367a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <I2C_Master_SB+0x92>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d108      	bne.n	800369e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	2b00      	cmp	r3, #0
 8003692:	d032      	beq.n	80036fa <I2C_Master_SB+0x100>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02d      	beq.n	80036fa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ac:	605a      	str	r2, [r3, #4]
}
 80036ae:	e024      	b.n	80036fa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10e      	bne.n	80036d6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	b29b      	uxth	r3, r3
 80036be:	11db      	asrs	r3, r3, #7
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 0306 	and.w	r3, r3, #6
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f063 030f 	orn	r3, r3, #15
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]
}
 80036d4:	e011      	b.n	80036fa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10d      	bne.n	80036fa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	11db      	asrs	r3, r3, #7
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f003 0306 	and.w	r3, r3, #6
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f063 030e 	orn	r3, r3, #14
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	b2da      	uxtb	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <I2C_Master_ADD10+0x26>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d108      	bne.n	800373e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00c      	beq.n	800374e <I2C_Master_ADD10+0x48>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d007      	beq.n	800374e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374c:	605a      	str	r2, [r3, #4]
  }
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800375a:	b480      	push	{r7}
 800375c:	b091      	sub	sp, #68	; 0x44
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b22      	cmp	r3, #34	; 0x22
 8003782:	f040 8169 	bne.w	8003a58 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <I2C_Master_ADDR+0x54>
 800378e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003792:	2b40      	cmp	r3, #64	; 0x40
 8003794:	d10b      	bne.n	80037ae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003796:	2300      	movs	r3, #0
 8003798:	633b      	str	r3, [r7, #48]	; 0x30
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	633b      	str	r3, [r7, #48]	; 0x30
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	633b      	str	r3, [r7, #48]	; 0x30
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	e160      	b.n	8003a70 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <I2C_Master_ADDR+0x98>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037be:	d118      	bne.n	80037f2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c0:	2300      	movs	r3, #0
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	651a      	str	r2, [r3, #80]	; 0x50
 80037f0:	e13e      	b.n	8003a70 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d113      	bne.n	8003824 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e115      	b.n	8003a50 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	f040 808a 	bne.w	8003944 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003832:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003836:	d137      	bne.n	80038a8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003846:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003856:	d113      	bne.n	8003880 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003868:	2300      	movs	r3, #0
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	e0e7      	b.n	8003a50 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003880:	2300      	movs	r3, #0
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e0d3      	b.n	8003a50 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d02e      	beq.n	800390c <I2C_Master_ADDR+0x1b2>
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d02b      	beq.n	800390c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	2b12      	cmp	r3, #18
 80038b8:	d102      	bne.n	80038c0 <I2C_Master_ADDR+0x166>
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d125      	bne.n	800390c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d00e      	beq.n	80038e4 <I2C_Master_ADDR+0x18a>
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d00b      	beq.n	80038e4 <I2C_Master_ADDR+0x18a>
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d008      	beq.n	80038e4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e007      	b.n	80038f4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038f2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f4:	2300      	movs	r3, #0
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	e0a1      	b.n	8003a50 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391c:	2300      	movs	r3, #0
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	61bb      	str	r3, [r7, #24]
 8003930:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e085      	b.n	8003a50 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d14d      	bne.n	80039ea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800394e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003950:	2b04      	cmp	r3, #4
 8003952:	d016      	beq.n	8003982 <I2C_Master_ADDR+0x228>
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b02      	cmp	r3, #2
 8003958:	d013      	beq.n	8003982 <I2C_Master_ADDR+0x228>
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	2b10      	cmp	r3, #16
 800395e:	d010      	beq.n	8003982 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e007      	b.n	8003992 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003990:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a0:	d117      	bne.n	80039d2 <I2C_Master_ADDR+0x278>
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039a8:	d00b      	beq.n	80039c2 <I2C_Master_ADDR+0x268>
 80039aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d008      	beq.n	80039c2 <I2C_Master_ADDR+0x268>
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d005      	beq.n	80039c2 <I2C_Master_ADDR+0x268>
 80039b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d002      	beq.n	80039c2 <I2C_Master_ADDR+0x268>
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d107      	bne.n	80039d2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	e032      	b.n	8003a50 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a08:	d117      	bne.n	8003a3a <I2C_Master_ADDR+0x2e0>
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a10:	d00b      	beq.n	8003a2a <I2C_Master_ADDR+0x2d0>
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d008      	beq.n	8003a2a <I2C_Master_ADDR+0x2d0>
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d005      	beq.n	8003a2a <I2C_Master_ADDR+0x2d0>
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d002      	beq.n	8003a2a <I2C_Master_ADDR+0x2d0>
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d107      	bne.n	8003a3a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a56:	e00b      	b.n	8003a70 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
}
 8003a6e:	e7ff      	b.n	8003a70 <I2C_Master_ADDR+0x316>
 8003a70:	bf00      	nop
 8003a72:	3744      	adds	r7, #68	; 0x44
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d02b      	beq.n	8003aee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d114      	bne.n	8003aee <I2C_SlaveTransmit_TXE+0x72>
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b29      	cmp	r3, #41	; 0x29
 8003ac8:	d111      	bne.n	8003aee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2221      	movs	r2, #33	; 0x21
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2228      	movs	r2, #40	; 0x28
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff f9f1 	bl	8002ed0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d011      	beq.n	8003b2c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02c      	beq.n	8003bac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d114      	bne.n	8003bac <I2C_SlaveReceive_RXNE+0x74>
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b2a      	cmp	r3, #42	; 0x2a
 8003b86:	d111      	bne.n	8003bac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2222      	movs	r2, #34	; 0x22
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2228      	movs	r2, #40	; 0x28
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7ff f99c 	bl	8002ee4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d012      	beq.n	8003bec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c12:	2b28      	cmp	r3, #40	; 0x28
 8003c14:	d127      	bne.n	8003c66 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c24:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	09db      	lsrs	r3, r3, #7
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d103      	bne.n	8003c4a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	81bb      	strh	r3, [r7, #12]
 8003c48:	e002      	b.n	8003c50 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c58:	89ba      	ldrh	r2, [r7, #12]
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff f94a 	bl	8002ef8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c64:	e00e      	b.n	8003c84 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003caa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d172      	bne.n	8003dd0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b22      	cmp	r3, #34	; 0x22
 8003cee:	d002      	beq.n	8003cf6 <I2C_Slave_STOPF+0x6a>
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf4:	d135      	bne.n	8003d62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f043 0204 	orr.w	r2, r3, #4
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe faaa 	bl	8002288 <HAL_DMA_GetState>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d049      	beq.n	8003dce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	4a69      	ldr	r2, [pc, #420]	; (8003ee4 <I2C_Slave_STOPF+0x258>)
 8003d40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe f8f2 	bl	8001f30 <HAL_DMA_Abort_IT>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03d      	beq.n	8003dce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d60:	e035      	b.n	8003dce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f043 0204 	orr.w	r2, r3, #4
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fa74 	bl	8002288 <HAL_DMA_GetState>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d014      	beq.n	8003dd0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	4a4e      	ldr	r2, [pc, #312]	; (8003ee4 <I2C_Slave_STOPF+0x258>)
 8003dac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe f8bc 	bl	8001f30 <HAL_DMA_Abort_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dc8:	4610      	mov	r0, r2
 8003dca:	4798      	blx	r3
 8003dcc:	e000      	b.n	8003dd0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d03e      	beq.n	8003e58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d112      	bne.n	8003e0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d112      	bne.n	8003e42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0204 	orr.w	r2, r3, #4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8b3 	bl	8003fcc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003e66:	e039      	b.n	8003edc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e6c:	d109      	bne.n	8003e82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2228      	movs	r2, #40	; 0x28
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff f831 	bl	8002ee4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b28      	cmp	r3, #40	; 0x28
 8003e8c:	d111      	bne.n	8003eb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <I2C_Slave_STOPF+0x25c>)
 8003e92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff f832 	bl	8002f14 <HAL_I2C_ListenCpltCallback>
}
 8003eb0:	e014      	b.n	8003edc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b22      	cmp	r3, #34	; 0x22
 8003eb8:	d002      	beq.n	8003ec0 <I2C_Slave_STOPF+0x234>
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b22      	cmp	r3, #34	; 0x22
 8003ebe:	d10d      	bne.n	8003edc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff f804 	bl	8002ee4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	08004231 	.word	0x08004231
 8003ee8:	ffff0000 	.word	0xffff0000

08003eec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d002      	beq.n	8003f0e <I2C_Slave_AF+0x22>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d129      	bne.n	8003f62 <I2C_Slave_AF+0x76>
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b28      	cmp	r3, #40	; 0x28
 8003f12:	d126      	bne.n	8003f62 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <I2C_Slave_AF+0xdc>)
 8003f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f28:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f32:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fe ffda 	bl	8002f14 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003f60:	e02e      	b.n	8003fc0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b21      	cmp	r3, #33	; 0x21
 8003f66:	d126      	bne.n	8003fb6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	; (8003fc8 <I2C_Slave_AF+0xdc>)
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2221      	movs	r2, #33	; 0x21
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f92:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f9c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fe ff8e 	bl	8002ed0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003fb4:	e004      	b.n	8003fc0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fbe:	615a      	str	r2, [r3, #20]
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	ffff0000 	.word	0xffff0000

08003fcc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fe2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fe4:	7bbb      	ldrb	r3, [r7, #14]
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d002      	beq.n	8003ff0 <I2C_ITError+0x24>
 8003fea:	7bbb      	ldrb	r3, [r7, #14]
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d10a      	bne.n	8004006 <I2C_ITError+0x3a>
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b22      	cmp	r3, #34	; 0x22
 8003ff4:	d107      	bne.n	8004006 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004004:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800400c:	2b28      	cmp	r3, #40	; 0x28
 800400e:	d107      	bne.n	8004020 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2228      	movs	r2, #40	; 0x28
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800401e:	e015      	b.n	800404c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d00a      	beq.n	8004046 <I2C_ITError+0x7a>
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b60      	cmp	r3, #96	; 0x60
 8004034:	d007      	beq.n	8004046 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405a:	d162      	bne.n	8004122 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800406a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b01      	cmp	r3, #1
 8004078:	d020      	beq.n	80040bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	4a6a      	ldr	r2, [pc, #424]	; (8004228 <I2C_ITError+0x25c>)
 8004080:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd ff52 	bl	8001f30 <HAL_DMA_Abort_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8089 	beq.w	80041a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040b6:	4610      	mov	r0, r2
 80040b8:	4798      	blx	r3
 80040ba:	e074      	b.n	80041a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	4a59      	ldr	r2, [pc, #356]	; (8004228 <I2C_ITError+0x25c>)
 80040c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd ff31 	bl	8001f30 <HAL_DMA_Abort_IT>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d068      	beq.n	80041a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d10b      	bne.n	80040fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800411c:	4610      	mov	r0, r2
 800411e:	4798      	blx	r3
 8004120:	e041      	b.n	80041a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b60      	cmp	r3, #96	; 0x60
 800412c:	d125      	bne.n	800417a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d10b      	bne.n	8004162 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fe fef6 	bl	8002f64 <HAL_I2C_AbortCpltCallback>
 8004178:	e015      	b.n	80041a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d10b      	bne.n	80041a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fe fed5 	bl	8002f50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d109      	bne.n	80041d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d104      	bne.n	80041d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d113      	bne.n	8004220 <I2C_ITError+0x254>
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b28      	cmp	r3, #40	; 0x28
 80041fc:	d110      	bne.n	8004220 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a0a      	ldr	r2, [pc, #40]	; (800422c <I2C_ITError+0x260>)
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fe fe7a 	bl	8002f14 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	08004231 	.word	0x08004231
 800422c:	ffff0000 	.word	0xffff0000

08004230 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004240:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <I2C_DMAAbort+0x148>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	08db      	lsrs	r3, r3, #3
 8004250:	4a4a      	ldr	r2, [pc, #296]	; (800437c <I2C_DMAAbort+0x14c>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0a1a      	lsrs	r2, r3, #8
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	00da      	lsls	r2, r3, #3
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f043 0220 	orr.w	r2, r3, #32
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004276:	e00a      	b.n	800428e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3b01      	subs	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d0ea      	beq.n	8004264 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	2200      	movs	r2, #0
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	2200      	movs	r2, #0
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2200      	movs	r2, #0
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d0:	2200      	movs	r2, #0
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e0:	2200      	movs	r2, #0
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0201 	bic.w	r2, r2, #1
 80042f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b60      	cmp	r3, #96	; 0x60
 80042fe:	d10e      	bne.n	800431e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004316:	6978      	ldr	r0, [r7, #20]
 8004318:	f7fe fe24 	bl	8002f64 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800431c:	e027      	b.n	800436e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004324:	2b28      	cmp	r3, #40	; 0x28
 8004326:	d117      	bne.n	8004358 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004346:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2228      	movs	r2, #40	; 0x28
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004356:	e007      	b.n	8004368 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	f7fe fdf1 	bl	8002f50 <HAL_I2C_ErrorCallback>
}
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000000 	.word	0x20000000
 800437c:	14f8b589 	.word	0x14f8b589

08004380 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	0a1a      	lsrs	r2, r3, #8
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e008      	b.n	80043d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043cc:	d0e9      	beq.n	80043a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20000000 	.word	0x20000000
 80043e0:	14f8b589 	.word	0x14f8b589

080043e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043f4:	d103      	bne.n	80043fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80043fc:	e007      	b.n	800440e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004406:	d102      	bne.n	800440e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2208      	movs	r2, #8
 800440c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0cc      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d90c      	bls.n	8004458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b65      	ldr	r3, [pc, #404]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b63      	ldr	r3, [pc, #396]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b8      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004470:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004488:	4b53      	ldr	r3, [pc, #332]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a52      	ldr	r2, [pc, #328]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	494d      	ldr	r1, [pc, #308]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d044      	beq.n	800453c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d119      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e07f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044da:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e06f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e067      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fa:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f023 0203 	bic.w	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4934      	ldr	r1, [pc, #208]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800450c:	f7fd fa7c 	bl	8001a08 <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004512:	e00a      	b.n	800452a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7fd fa78 	bl	8001a08 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e04f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 020c 	and.w	r2, r3, #12
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	429a      	cmp	r2, r3
 800453a:	d1eb      	bne.n	8004514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d20c      	bcs.n	8004564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e032      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4916      	ldr	r1, [pc, #88]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	490e      	ldr	r1, [pc, #56]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a2:	f000 f855 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	490a      	ldr	r1, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x1c0>)
 80045b4:	5ccb      	ldrb	r3, [r1, r3]
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1c8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd f9dc 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023c00 	.word	0x40023c00
 80045d8:	40023800 	.word	0x40023800
 80045dc:	08006bd8 	.word	0x08006bd8
 80045e0:	20000000 	.word	0x20000000
 80045e4:	20000008 	.word	0x20000008

080045e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000000 	.word	0x20000000

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004604:	f7ff fff0 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0a9b      	lsrs	r3, r3, #10
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	08006be8 	.word	0x08006be8

08004628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800462c:	f7ff ffdc 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0b5b      	lsrs	r3, r3, #13
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	; (800464c <HAL_RCC_GetPCLK2Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	08006be8 	.word	0x08006be8

08004650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b088      	sub	sp, #32
 8004656:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800466c:	4bce      	ldr	r3, [pc, #824]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b0c      	cmp	r3, #12
 8004676:	f200 818d 	bhi.w	8004994 <HAL_RCC_GetSysClockFreq+0x344>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <HAL_RCC_GetSysClockFreq+0x30>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046b5 	.word	0x080046b5
 8004684:	08004995 	.word	0x08004995
 8004688:	08004995 	.word	0x08004995
 800468c:	08004995 	.word	0x08004995
 8004690:	080046bb 	.word	0x080046bb
 8004694:	08004995 	.word	0x08004995
 8004698:	08004995 	.word	0x08004995
 800469c:	08004995 	.word	0x08004995
 80046a0:	080046c1 	.word	0x080046c1
 80046a4:	08004995 	.word	0x08004995
 80046a8:	08004995 	.word	0x08004995
 80046ac:	08004995 	.word	0x08004995
 80046b0:	08004835 	.word	0x08004835
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4bbd      	ldr	r3, [pc, #756]	; (80049ac <HAL_RCC_GetSysClockFreq+0x35c>)
 80046b6:	61bb      	str	r3, [r7, #24]
       break;
 80046b8:	e16f      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ba:	4bbd      	ldr	r3, [pc, #756]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x360>)
 80046bc:	61bb      	str	r3, [r7, #24]
      break;
 80046be:	e16c      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046c0:	4bb9      	ldr	r3, [pc, #740]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ca:	4bb7      	ldr	r3, [pc, #732]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d053      	beq.n	800477e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d6:	4bb4      	ldr	r3, [pc, #720]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	099b      	lsrs	r3, r3, #6
 80046dc:	461a      	mov	r2, r3
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	ea02 0400 	and.w	r4, r2, r0
 80046ee:	603c      	str	r4, [r7, #0]
 80046f0:	400b      	ands	r3, r1
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046f8:	4620      	mov	r0, r4
 80046fa:	4629      	mov	r1, r5
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	014b      	lsls	r3, r1, #5
 8004706:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800470a:	0142      	lsls	r2, r0, #5
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	4623      	mov	r3, r4
 8004712:	1ac0      	subs	r0, r0, r3
 8004714:	462b      	mov	r3, r5
 8004716:	eb61 0103 	sbc.w	r1, r1, r3
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	018b      	lsls	r3, r1, #6
 8004724:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004728:	0182      	lsls	r2, r0, #6
 800472a:	1a12      	subs	r2, r2, r0
 800472c:	eb63 0301 	sbc.w	r3, r3, r1
 8004730:	f04f 0000 	mov.w	r0, #0
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	00d9      	lsls	r1, r3, #3
 800473a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800473e:	00d0      	lsls	r0, r2, #3
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4621      	mov	r1, r4
 8004746:	1852      	adds	r2, r2, r1
 8004748:	4629      	mov	r1, r5
 800474a:	eb43 0101 	adc.w	r1, r3, r1
 800474e:	460b      	mov	r3, r1
 8004750:	f04f 0000 	mov.w	r0, #0
 8004754:	f04f 0100 	mov.w	r1, #0
 8004758:	0259      	lsls	r1, r3, #9
 800475a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800475e:	0250      	lsls	r0, r2, #9
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4610      	mov	r0, r2
 8004766:	4619      	mov	r1, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	461a      	mov	r2, r3
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	f7fb fd48 	bl	8000204 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e04c      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b8a      	ldr	r3, [pc, #552]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	461a      	mov	r2, r3
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800478e:	f04f 0100 	mov.w	r1, #0
 8004792:	ea02 0a00 	and.w	sl, r2, r0
 8004796:	ea03 0b01 	and.w	fp, r3, r1
 800479a:	4650      	mov	r0, sl
 800479c:	4659      	mov	r1, fp
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	014b      	lsls	r3, r1, #5
 80047a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047ac:	0142      	lsls	r2, r0, #5
 80047ae:	4610      	mov	r0, r2
 80047b0:	4619      	mov	r1, r3
 80047b2:	ebb0 000a 	subs.w	r0, r0, sl
 80047b6:	eb61 010b 	sbc.w	r1, r1, fp
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	018b      	lsls	r3, r1, #6
 80047c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047c8:	0182      	lsls	r2, r0, #6
 80047ca:	1a12      	subs	r2, r2, r0
 80047cc:	eb63 0301 	sbc.w	r3, r3, r1
 80047d0:	f04f 0000 	mov.w	r0, #0
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	00d9      	lsls	r1, r3, #3
 80047da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047de:	00d0      	lsls	r0, r2, #3
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	eb12 020a 	adds.w	r2, r2, sl
 80047e8:	eb43 030b 	adc.w	r3, r3, fp
 80047ec:	f04f 0000 	mov.w	r0, #0
 80047f0:	f04f 0100 	mov.w	r1, #0
 80047f4:	0299      	lsls	r1, r3, #10
 80047f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047fa:	0290      	lsls	r0, r2, #10
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4610      	mov	r0, r2
 8004802:	4619      	mov	r1, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	461a      	mov	r2, r3
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	f7fb fcfa 	bl	8000204 <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4613      	mov	r3, r2
 8004816:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004818:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	3301      	adds	r3, #1
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	61bb      	str	r3, [r7, #24]
      break;
 8004832:	e0b2      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004834:	4b5c      	ldr	r3, [pc, #368]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800483e:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d04d      	beq.n	80048e6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484a:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	099b      	lsrs	r3, r3, #6
 8004850:	461a      	mov	r2, r3
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	ea02 0800 	and.w	r8, r2, r0
 8004862:	ea03 0901 	and.w	r9, r3, r1
 8004866:	4640      	mov	r0, r8
 8004868:	4649      	mov	r1, r9
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	014b      	lsls	r3, r1, #5
 8004874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004878:	0142      	lsls	r2, r0, #5
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	ebb0 0008 	subs.w	r0, r0, r8
 8004882:	eb61 0109 	sbc.w	r1, r1, r9
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	018b      	lsls	r3, r1, #6
 8004890:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004894:	0182      	lsls	r2, r0, #6
 8004896:	1a12      	subs	r2, r2, r0
 8004898:	eb63 0301 	sbc.w	r3, r3, r1
 800489c:	f04f 0000 	mov.w	r0, #0
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	00d9      	lsls	r1, r3, #3
 80048a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048aa:	00d0      	lsls	r0, r2, #3
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	eb12 0208 	adds.w	r2, r2, r8
 80048b4:	eb43 0309 	adc.w	r3, r3, r9
 80048b8:	f04f 0000 	mov.w	r0, #0
 80048bc:	f04f 0100 	mov.w	r1, #0
 80048c0:	0259      	lsls	r1, r3, #9
 80048c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048c6:	0250      	lsls	r0, r2, #9
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	f7fb fc94 	bl	8000204 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e04a      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e6:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	099b      	lsrs	r3, r3, #6
 80048ec:	461a      	mov	r2, r3
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	ea02 0400 	and.w	r4, r2, r0
 80048fe:	ea03 0501 	and.w	r5, r3, r1
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	014b      	lsls	r3, r1, #5
 8004910:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004914:	0142      	lsls	r2, r0, #5
 8004916:	4610      	mov	r0, r2
 8004918:	4619      	mov	r1, r3
 800491a:	1b00      	subs	r0, r0, r4
 800491c:	eb61 0105 	sbc.w	r1, r1, r5
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	018b      	lsls	r3, r1, #6
 800492a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800492e:	0182      	lsls	r2, r0, #6
 8004930:	1a12      	subs	r2, r2, r0
 8004932:	eb63 0301 	sbc.w	r3, r3, r1
 8004936:	f04f 0000 	mov.w	r0, #0
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	00d9      	lsls	r1, r3, #3
 8004940:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004944:	00d0      	lsls	r0, r2, #3
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	1912      	adds	r2, r2, r4
 800494c:	eb45 0303 	adc.w	r3, r5, r3
 8004950:	f04f 0000 	mov.w	r0, #0
 8004954:	f04f 0100 	mov.w	r1, #0
 8004958:	0299      	lsls	r1, r3, #10
 800495a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800495e:	0290      	lsls	r0, r2, #10
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	461a      	mov	r2, r3
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	f7fb fc48 	bl	8000204 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4613      	mov	r3, r2
 800497a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x358>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	0f1b      	lsrs	r3, r3, #28
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	61bb      	str	r3, [r7, #24]
      break;
 8004992:	e002      	b.n	800499a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_RCC_GetSysClockFreq+0x35c>)
 8004996:	61bb      	str	r3, [r7, #24]
      break;
 8004998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499a:	69bb      	ldr	r3, [r7, #24]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	007a1200 	.word	0x007a1200

080049b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e28d      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8083 	beq.w	8004ada <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049d4:	4b94      	ldr	r3, [pc, #592]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d019      	beq.n	8004a14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049e0:	4b91      	ldr	r3, [pc, #580]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049ec:	4b8e      	ldr	r3, [pc, #568]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f8:	d00c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fa:	4b8b      	ldr	r3, [pc, #556]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a02:	2b0c      	cmp	r3, #12
 8004a04:	d112      	bne.n	8004a2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a06:	4b88      	ldr	r3, [pc, #544]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	4b84      	ldr	r3, [pc, #528]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05b      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x124>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d157      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e25a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d106      	bne.n	8004a44 <HAL_RCC_OscConfig+0x90>
 8004a36:	4b7c      	ldr	r3, [pc, #496]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7b      	ldr	r2, [pc, #492]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e01d      	b.n	8004a80 <HAL_RCC_OscConfig+0xcc>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0xb4>
 8004a4e:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a75      	ldr	r2, [pc, #468]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b73      	ldr	r3, [pc, #460]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a72      	ldr	r2, [pc, #456]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e00b      	b.n	8004a80 <HAL_RCC_OscConfig+0xcc>
 8004a68:	4b6f      	ldr	r3, [pc, #444]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a6e      	ldr	r2, [pc, #440]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a6b      	ldr	r2, [pc, #428]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fc ffbe 	bl	8001a08 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fc ffba 	bl	8001a08 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e21f      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0xdc>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fc ffaa 	bl	8001a08 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fc ffa6 	bl	8001a08 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e20b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	4b57      	ldr	r3, [pc, #348]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x104>
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d06f      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ae6:	4b50      	ldr	r3, [pc, #320]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d017      	beq.n	8004b22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004af2:	4b4d      	ldr	r3, [pc, #308]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d11c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b16:	4b44      	ldr	r3, [pc, #272]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b22:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_RCC_OscConfig+0x186>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e1d3      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3a:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4937      	ldr	r1, [pc, #220]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	e03a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <HAL_RCC_OscConfig+0x278>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fc ff53 	bl	8001a08 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fc ff4f 	bl	8001a08 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1b4      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b28      	ldr	r3, [pc, #160]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4925      	ldr	r1, [pc, #148]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HAL_RCC_OscConfig+0x278>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fc ff32 	bl	8001a08 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fc ff2e 	bl	8001a08 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e193      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d036      	beq.n	8004c40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fc ff12 	bl	8001a08 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be8:	f7fc ff0e 	bl	8001a08 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e173      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x234>
 8004c06:	e01b      	b.n	8004c40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7fc fefb 	bl	8001a08 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	e00e      	b.n	8004c34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fc fef7 	bl	8001a08 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d907      	bls.n	8004c34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e15c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	42470000 	.word	0x42470000
 8004c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ea      	bne.n	8004c16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8097 	beq.w	8004d7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b83      	ldr	r3, [pc, #524]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	4b7f      	ldr	r3, [pc, #508]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	4a7e      	ldr	r2, [pc, #504]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6e:	4b7c      	ldr	r3, [pc, #496]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b79      	ldr	r3, [pc, #484]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d118      	bne.n	8004cbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8a:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a75      	ldr	r2, [pc, #468]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c96:	f7fc feb7 	bl	8001a08 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fc feb3 	bl	8001a08 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e118      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	4b6c      	ldr	r3, [pc, #432]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x31e>
 8004cc4:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a65      	ldr	r2, [pc, #404]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd0:	e01c      	b.n	8004d0c <HAL_RCC_OscConfig+0x358>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x340>
 8004cda:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a60      	ldr	r2, [pc, #384]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce6:	4b5e      	ldr	r3, [pc, #376]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	4a5d      	ldr	r2, [pc, #372]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0x358>
 8004cf4:	4b5a      	ldr	r3, [pc, #360]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	4a59      	ldr	r2, [pc, #356]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004d00:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	f023 0304 	bic.w	r3, r3, #4
 8004d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fc fe78 	bl	8001a08 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fc fe74 	bl	8001a08 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0d7      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	4b4b      	ldr	r3, [pc, #300]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ee      	beq.n	8004d1c <HAL_RCC_OscConfig+0x368>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fc fe62 	bl	8001a08 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fc fe5e 	bl	8001a08 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0c1      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ee      	bne.n	8004d48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d70:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80ad 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d060      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d145      	bne.n	8004e26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9a:	4b33      	ldr	r3, [pc, #204]	; (8004e68 <HAL_RCC_OscConfig+0x4b4>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fc fe32 	bl	8001a08 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fc fe2e 	bl	8001a08 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e093      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	019b      	lsls	r3, r3, #6
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	071b      	lsls	r3, r3, #28
 8004df2:	491b      	ldr	r1, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df8:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <HAL_RCC_OscConfig+0x4b4>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fc fe03 	bl	8001a08 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fc fdff 	bl	8001a08 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e064      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x452>
 8004e24:	e05c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <HAL_RCC_OscConfig+0x4b4>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc fdec 	bl	8001a08 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fc fde8 	bl	8001a08 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e04d      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x480>
 8004e52:	e045      	b.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e040      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40007000 	.word	0x40007000
 8004e68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e6c:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_RCC_OscConfig+0x538>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d030      	beq.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d129      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d122      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ea2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d119      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d10f      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e041      	b.n	8004f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc f82c 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f000 fad8 	bl	80054e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e041      	b.n	8005024 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f839 	bl	800502c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 fa89 	bl	80054e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <HAL_TIM_PWM_Start+0x24>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e022      	b.n	80050aa <HAL_TIM_PWM_Start+0x6a>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b04      	cmp	r3, #4
 8005068:	d109      	bne.n	800507e <HAL_TIM_PWM_Start+0x3e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b01      	cmp	r3, #1
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	e015      	b.n	80050aa <HAL_TIM_PWM_Start+0x6a>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d109      	bne.n	8005098 <HAL_TIM_PWM_Start+0x58>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	bf14      	ite	ne
 8005090:	2301      	movne	r3, #1
 8005092:	2300      	moveq	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	e008      	b.n	80050aa <HAL_TIM_PWM_Start+0x6a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	bf14      	ite	ne
 80050a4:	2301      	movne	r3, #1
 80050a6:	2300      	moveq	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e07c      	b.n	80051ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x82>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c0:	e013      	b.n	80050ea <HAL_TIM_PWM_Start+0xaa>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_PWM_Start+0x92>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d0:	e00b      	b.n	80050ea <HAL_TIM_PWM_Start+0xaa>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_PWM_Start+0xa2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e0:	e003      	b.n	80050ea <HAL_TIM_PWM_Start+0xaa>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2201      	movs	r2, #1
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fce0 	bl	8005ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2d      	ldr	r2, [pc, #180]	; (80051b4 <HAL_TIM_PWM_Start+0x174>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d004      	beq.n	800510c <HAL_TIM_PWM_Start+0xcc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a2c      	ldr	r2, [pc, #176]	; (80051b8 <HAL_TIM_PWM_Start+0x178>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d101      	bne.n	8005110 <HAL_TIM_PWM_Start+0xd0>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_TIM_PWM_Start+0xd2>
 8005110:	2300      	movs	r3, #0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <HAL_TIM_PWM_Start+0x174>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d022      	beq.n	8005176 <HAL_TIM_PWM_Start+0x136>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005138:	d01d      	beq.n	8005176 <HAL_TIM_PWM_Start+0x136>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1f      	ldr	r2, [pc, #124]	; (80051bc <HAL_TIM_PWM_Start+0x17c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_TIM_PWM_Start+0x136>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <HAL_TIM_PWM_Start+0x180>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_TIM_PWM_Start+0x136>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_TIM_PWM_Start+0x184>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_TIM_PWM_Start+0x136>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a16      	ldr	r2, [pc, #88]	; (80051b8 <HAL_TIM_PWM_Start+0x178>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_TIM_PWM_Start+0x136>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <HAL_TIM_PWM_Start+0x188>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIM_PWM_Start+0x136>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a16      	ldr	r2, [pc, #88]	; (80051cc <HAL_TIM_PWM_Start+0x18c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d111      	bne.n	800519a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d010      	beq.n	80051aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	e007      	b.n	80051aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40010400 	.word	0x40010400
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40001800 	.word	0x40001800

080051d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e0ae      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	f200 809f 	bhi.w	800533c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005239 	.word	0x08005239
 8005208:	0800533d 	.word	0x0800533d
 800520c:	0800533d 	.word	0x0800533d
 8005210:	0800533d 	.word	0x0800533d
 8005214:	08005279 	.word	0x08005279
 8005218:	0800533d 	.word	0x0800533d
 800521c:	0800533d 	.word	0x0800533d
 8005220:	0800533d 	.word	0x0800533d
 8005224:	080052bb 	.word	0x080052bb
 8005228:	0800533d 	.word	0x0800533d
 800522c:	0800533d 	.word	0x0800533d
 8005230:	0800533d 	.word	0x0800533d
 8005234:	080052fb 	.word	0x080052fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f9f0 	bl	8005624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0208 	orr.w	r2, r2, #8
 8005252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0204 	bic.w	r2, r2, #4
 8005262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6999      	ldr	r1, [r3, #24]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	619a      	str	r2, [r3, #24]
      break;
 8005276:	e064      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fa40 	bl	8005704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6999      	ldr	r1, [r3, #24]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	619a      	str	r2, [r3, #24]
      break;
 80052b8:	e043      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fa95 	bl	80057f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0208 	orr.w	r2, r2, #8
 80052d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0204 	bic.w	r2, r2, #4
 80052e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69d9      	ldr	r1, [r3, #28]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	61da      	str	r2, [r3, #28]
      break;
 80052f8:	e023      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fae9 	bl	80058d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69d9      	ldr	r1, [r3, #28]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	021a      	lsls	r2, r3, #8
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	61da      	str	r2, [r3, #28]
      break;
 800533a:	e002      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
      break;
 8005340:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIM_ConfigClockSource+0x1c>
 800536c:	2302      	movs	r3, #2
 800536e:	e0b4      	b.n	80054da <HAL_TIM_ConfigClockSource+0x186>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800538e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d03e      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0xd4>
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ae:	f200 8087 	bhi.w	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	f000 8086 	beq.w	80054c6 <HAL_TIM_ConfigClockSource+0x172>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d87f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c0:	2b70      	cmp	r3, #112	; 0x70
 80053c2:	d01a      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xa6>
 80053c4:	2b70      	cmp	r3, #112	; 0x70
 80053c6:	d87b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053c8:	2b60      	cmp	r3, #96	; 0x60
 80053ca:	d050      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x11a>
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d877      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d0:	2b50      	cmp	r3, #80	; 0x50
 80053d2:	d03c      	beq.n	800544e <HAL_TIM_ConfigClockSource+0xfa>
 80053d4:	2b50      	cmp	r3, #80	; 0x50
 80053d6:	d873      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d058      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x13a>
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d86f      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e0:	2b30      	cmp	r3, #48	; 0x30
 80053e2:	d064      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15a>
 80053e4:	2b30      	cmp	r3, #48	; 0x30
 80053e6:	d86b      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d060      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15a>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d867      	bhi.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05c      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15a>
 80053f4:	2b10      	cmp	r3, #16
 80053f6:	d05a      	beq.n	80054ae <HAL_TIM_ConfigClockSource+0x15a>
 80053f8:	e062      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6899      	ldr	r1, [r3, #8]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f000 fb35 	bl	8005a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800541c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	609a      	str	r2, [r3, #8]
      break;
 8005426:	e04f      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6899      	ldr	r1, [r3, #8]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f000 fb1e 	bl	8005a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544a:	609a      	str	r2, [r3, #8]
      break;
 800544c:	e03c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	461a      	mov	r2, r3
 800545c:	f000 fa92 	bl	8005984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2150      	movs	r1, #80	; 0x50
 8005466:	4618      	mov	r0, r3
 8005468:	f000 faeb 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 800546c:	e02c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	461a      	mov	r2, r3
 800547c:	f000 fab1 	bl	80059e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2160      	movs	r1, #96	; 0x60
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fadb 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 800548c:	e01c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	461a      	mov	r2, r3
 800549c:	f000 fa72 	bl	8005984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2140      	movs	r1, #64	; 0x40
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 facb 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 80054ac:	e00c      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 fac2 	bl	8005a42 <TIM_ITRx_SetConfig>
      break;
 80054be:	e003      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      break;
 80054c4:	e000      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a40      	ldr	r2, [pc, #256]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d013      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d00f      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a3d      	ldr	r2, [pc, #244]	; (80055fc <TIM_Base_SetConfig+0x118>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00b      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a3c      	ldr	r2, [pc, #240]	; (8005600 <TIM_Base_SetConfig+0x11c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d007      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a3b      	ldr	r2, [pc, #236]	; (8005604 <TIM_Base_SetConfig+0x120>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d003      	beq.n	8005524 <TIM_Base_SetConfig+0x40>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a3a      	ldr	r2, [pc, #232]	; (8005608 <TIM_Base_SetConfig+0x124>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005544:	d027      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <TIM_Base_SetConfig+0x118>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d023      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <TIM_Base_SetConfig+0x11c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <TIM_Base_SetConfig+0x120>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d01b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a29      	ldr	r2, [pc, #164]	; (8005608 <TIM_Base_SetConfig+0x124>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d017      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <TIM_Base_SetConfig+0x128>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d013      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a27      	ldr	r2, [pc, #156]	; (8005610 <TIM_Base_SetConfig+0x12c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00f      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a26      	ldr	r2, [pc, #152]	; (8005614 <TIM_Base_SetConfig+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00b      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a25      	ldr	r2, [pc, #148]	; (8005618 <TIM_Base_SetConfig+0x134>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d007      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a24      	ldr	r2, [pc, #144]	; (800561c <TIM_Base_SetConfig+0x138>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <TIM_Base_SetConfig+0x13c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d108      	bne.n	80055a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800559c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a0a      	ldr	r2, [pc, #40]	; (80055f8 <TIM_Base_SetConfig+0x114>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0xf8>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <TIM_Base_SetConfig+0x124>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40010400 	.word	0x40010400
 800560c:	40014000 	.word	0x40014000
 8005610:	40014400 	.word	0x40014400
 8005614:	40014800 	.word	0x40014800
 8005618:	40001800 	.word	0x40001800
 800561c:	40001c00 	.word	0x40001c00
 8005620:	40002000 	.word	0x40002000

08005624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f023 0201 	bic.w	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0302 	bic.w	r3, r3, #2
 800566c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a20      	ldr	r2, [pc, #128]	; (80056fc <TIM_OC1_SetConfig+0xd8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_OC1_SetConfig+0x64>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <TIM_OC1_SetConfig+0xdc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d10c      	bne.n	80056a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f023 0308 	bic.w	r3, r3, #8
 800568e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f023 0304 	bic.w	r3, r3, #4
 80056a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <TIM_OC1_SetConfig+0xd8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC1_SetConfig+0x8e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a14      	ldr	r2, [pc, #80]	; (8005700 <TIM_OC1_SetConfig+0xdc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d111      	bne.n	80056d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	621a      	str	r2, [r3, #32]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40010000 	.word	0x40010000
 8005700:	40010400 	.word	0x40010400

08005704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0210 	bic.w	r2, r3, #16
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_OC2_SetConfig+0xe4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_OC2_SetConfig+0x68>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_OC2_SetConfig+0xe8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d10d      	bne.n	8005788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a17      	ldr	r2, [pc, #92]	; (80057e8 <TIM_OC2_SetConfig+0xe4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC2_SetConfig+0x94>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a16      	ldr	r2, [pc, #88]	; (80057ec <TIM_OC2_SetConfig+0xe8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d113      	bne.n	80057c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40010000 	.word	0x40010000
 80057ec:	40010400 	.word	0x40010400

080057f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0303 	bic.w	r3, r3, #3
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a21      	ldr	r2, [pc, #132]	; (80058d0 <TIM_OC3_SetConfig+0xe0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC3_SetConfig+0x66>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a20      	ldr	r2, [pc, #128]	; (80058d4 <TIM_OC3_SetConfig+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10d      	bne.n	8005872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a16      	ldr	r2, [pc, #88]	; (80058d0 <TIM_OC3_SetConfig+0xe0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_OC3_SetConfig+0x92>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a15      	ldr	r2, [pc, #84]	; (80058d4 <TIM_OC3_SetConfig+0xe4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d113      	bne.n	80058aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	621a      	str	r2, [r3, #32]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40010400 	.word	0x40010400

080058d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	021b      	lsls	r3, r3, #8
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	031b      	lsls	r3, r3, #12
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a12      	ldr	r2, [pc, #72]	; (800597c <TIM_OC4_SetConfig+0xa4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC4_SetConfig+0x68>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a11      	ldr	r2, [pc, #68]	; (8005980 <TIM_OC4_SetConfig+0xa8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d109      	bne.n	8005954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	019b      	lsls	r3, r3, #6
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40010400 	.word	0x40010400

08005984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f023 030a 	bic.w	r3, r3, #10
 80059c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	621a      	str	r2, [r3, #32]
}
 80059d6:	bf00      	nop
 80059d8:	371c      	adds	r7, #28
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b087      	sub	sp, #28
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0210 	bic.w	r2, r3, #16
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	031b      	lsls	r3, r3, #12
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f043 0307 	orr.w	r3, r3, #7
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	021a      	lsls	r2, r3, #8
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	609a      	str	r2, [r3, #8]
}
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2201      	movs	r2, #1
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1a      	ldr	r2, [r3, #32]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	43db      	mvns	r3, r3
 8005ada:	401a      	ands	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 031f 	and.w	r3, r3, #31
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	431a      	orrs	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e05a      	b.n	8005bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a21      	ldr	r2, [pc, #132]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d022      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b68:	d01d      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00e      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a18      	ldr	r2, [pc, #96]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40000400 	.word	0x40000400
 8005be8:	40000800 	.word	0x40000800
 8005bec:	40000c00 	.word	0x40000c00
 8005bf0:	40010400 	.word	0x40010400
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40001800 	.word	0x40001800

08005bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e03f      	b.n	8005c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb fa22 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fdc7 	bl	80067d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08c      	sub	sp, #48	; 0x30
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d165      	bne.n	8005d7e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_UART_Transmit_DMA+0x26>
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e05e      	b.n	8005d80 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_UART_Transmit_DMA+0x38>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e057      	b.n	8005d80 <HAL_UART_Transmit_DMA+0xe8>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	88fa      	ldrh	r2, [r7, #6]
 8005ce2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2221      	movs	r2, #33	; 0x21
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfc:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <HAL_UART_Transmit_DMA+0xf0>)
 8005cfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	4a21      	ldr	r2, [pc, #132]	; (8005d8c <HAL_UART_Transmit_DMA+0xf4>)
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <HAL_UART_Transmit_DMA+0xf8>)
 8005d0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	2200      	movs	r2, #0
 8005d16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	6819      	ldr	r1, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	f7fc f836 	bl	8001da0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d3c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3314      	adds	r3, #20
 8005d4c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	617b      	str	r3, [r7, #20]
   return(result);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3314      	adds	r3, #20
 8005d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d66:	627a      	str	r2, [r7, #36]	; 0x24
 8005d68:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6a39      	ldr	r1, [r7, #32]
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e000      	b.n	8005d80 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
  }
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3730      	adds	r7, #48	; 0x30
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	08006305 	.word	0x08006305
 8005d8c:	0800639f 	.word	0x0800639f
 8005d90:	080063bb 	.word	0x080063bb

08005d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b0ba      	sub	sp, #232	; 0xe8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d009      	beq.n	8005dfa <HAL_UART_IRQHandler+0x66>
 8005de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fc32 	bl	800665c <UART_Receive_IT>
      return;
 8005df8:	e256      	b.n	80062a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80de 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x22c>
 8005e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80d1 	beq.w	8005fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_UART_IRQHandler+0xae>
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f043 0201 	orr.w	r2, r3, #1
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00b      	beq.n	8005e66 <HAL_UART_IRQHandler+0xd2>
 8005e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f043 0202 	orr.w	r2, r3, #2
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <HAL_UART_IRQHandler+0xf6>
 8005e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d011      	beq.n	8005eba <HAL_UART_IRQHandler+0x126>
 8005e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d105      	bne.n	8005eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	f043 0208 	orr.w	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 81ed 	beq.w	800629e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x14e>
 8005ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fbbd 	bl	800665c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	bf0c      	ite	eq
 8005ef0:	2301      	moveq	r3, #1
 8005ef2:	2300      	movne	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <HAL_UART_IRQHandler+0x17a>
 8005f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d04f      	beq.n	8005fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fac5 	bl	800649e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	d141      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3314      	adds	r3, #20
 8005f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f5e:	e841 2300 	strex	r3, r2, [r1]
 8005f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1d9      	bne.n	8005f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d013      	beq.n	8005f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	4a7d      	ldr	r2, [pc, #500]	; (8006170 <HAL_UART_IRQHandler+0x3dc>)
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fb ffd4 	bl	8001f30 <HAL_DMA_Abort_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d016      	beq.n	8005fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f9c:	e00e      	b.n	8005fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f99a 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa4:	e00a      	b.n	8005fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f996 	bl	80062d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fac:	e006      	b.n	8005fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f992 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fba:	e170      	b.n	800629e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	bf00      	nop
    return;
 8005fbe:	e16e      	b.n	800629e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	f040 814a 	bne.w	800625e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0310 	and.w	r3, r3, #16
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 8143 	beq.w	800625e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 813c 	beq.w	800625e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]
 8005ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	f040 80b4 	bne.w	8006174 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8140 	beq.w	80062a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800602a:	429a      	cmp	r2, r3
 800602c:	f080 8139 	bcs.w	80062a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006036:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006042:	f000 8088 	beq.w	8006156 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800605c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800607e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800608a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1d9      	bne.n	8006046 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3314      	adds	r3, #20
 8006098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3314      	adds	r3, #20
 80060b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e1      	bne.n	8006092 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3314      	adds	r3, #20
 80060d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80060de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3314      	adds	r3, #20
 80060ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e3      	bne.n	80060ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	330c      	adds	r3, #12
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006126:	f023 0310 	bic.w	r3, r3, #16
 800612a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	330c      	adds	r3, #12
 8006134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006138:	65ba      	str	r2, [r7, #88]	; 0x58
 800613a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800613e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006140:	e841 2300 	strex	r3, r2, [r1]
 8006144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1e3      	bne.n	8006114 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	4618      	mov	r0, r3
 8006152:	f7fb fe7d 	bl	8001e50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800615e:	b29b      	uxth	r3, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	b29b      	uxth	r3, r3
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8c0 	bl	80062ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800616c:	e099      	b.n	80062a2 <HAL_UART_IRQHandler+0x50e>
 800616e:	bf00      	nop
 8006170:	08006565 	.word	0x08006565
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800617c:	b29b      	uxth	r3, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 808b 	beq.w	80062a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8086 	beq.w	80062a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	330c      	adds	r3, #12
 80061a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061be:	647a      	str	r2, [r7, #68]	; 0x44
 80061c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80061cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1e3      	bne.n	800619a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3314      	adds	r3, #20
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	623b      	str	r3, [r7, #32]
   return(result);
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f023 0301 	bic.w	r3, r3, #1
 80061e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3314      	adds	r3, #20
 80061f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061f6:	633a      	str	r2, [r7, #48]	; 0x30
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e3      	bne.n	80061d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60fb      	str	r3, [r7, #12]
   return(result);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800623c:	61fa      	str	r2, [r7, #28]
 800623e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69b9      	ldr	r1, [r7, #24]
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	617b      	str	r3, [r7, #20]
   return(result);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e3      	bne.n	8006218 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f848 	bl	80062ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800625c:	e023      	b.n	80062a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <HAL_UART_IRQHandler+0x4ea>
 800626a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f988 	bl	800658c <UART_Transmit_IT>
    return;
 800627c:	e014      	b.n	80062a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00e      	beq.n	80062a8 <HAL_UART_IRQHandler+0x514>
 800628a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d008      	beq.n	80062a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f9c8 	bl	800662c <UART_EndTransmit_IT>
    return;
 800629c:	e004      	b.n	80062a8 <HAL_UART_IRQHandler+0x514>
    return;
 800629e:	bf00      	nop
 80062a0:	e002      	b.n	80062a8 <HAL_UART_IRQHandler+0x514>
      return;
 80062a2:	bf00      	nop
 80062a4:	e000      	b.n	80062a8 <HAL_UART_IRQHandler+0x514>
      return;
 80062a6:	bf00      	nop
  }
}
 80062a8:	37e8      	adds	r7, #232	; 0xe8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop

080062b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b090      	sub	sp, #64	; 0x40
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d137      	bne.n	8006390 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006322:	2200      	movs	r2, #0
 8006324:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3314      	adds	r3, #20
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	623b      	str	r3, [r7, #32]
   return(result);
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633c:	63bb      	str	r3, [r7, #56]	; 0x38
 800633e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3314      	adds	r3, #20
 8006344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006346:	633a      	str	r2, [r7, #48]	; 0x30
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e5      	bne.n	8006326 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800635a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	60fb      	str	r3, [r7, #12]
   return(result);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	330c      	adds	r3, #12
 8006378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800637a:	61fa      	str	r2, [r7, #28]
 800637c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	69b9      	ldr	r1, [r7, #24]
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	617b      	str	r3, [r7, #20]
   return(result);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e5      	bne.n	800635a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800638e:	e002      	b.n	8006396 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006390:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006392:	f7fa fc23 	bl	8000bdc <HAL_UART_TxCpltCallback>
}
 8006396:	bf00      	nop
 8006398:	3740      	adds	r7, #64	; 0x40
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff ff7f 	bl	80062b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d6:	2b80      	cmp	r3, #128	; 0x80
 80063d8:	bf0c      	ite	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	2300      	movne	r3, #0
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b21      	cmp	r3, #33	; 0x21
 80063ec:	d108      	bne.n	8006400 <UART_DMAError+0x46>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063fa:	68b8      	ldr	r0, [r7, #8]
 80063fc:	f000 f827 	bl	800644e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640a:	2b40      	cmp	r3, #64	; 0x40
 800640c:	bf0c      	ite	eq
 800640e:	2301      	moveq	r3, #1
 8006410:	2300      	movne	r3, #0
 8006412:	b2db      	uxtb	r3, r3
 8006414:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b22      	cmp	r3, #34	; 0x22
 8006420:	d108      	bne.n	8006434 <UART_DMAError+0x7a>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d005      	beq.n	8006434 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800642e:	68b8      	ldr	r0, [r7, #8]
 8006430:	f000 f835 	bl	800649e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	f043 0210 	orr.w	r2, r3, #16
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006440:	68b8      	ldr	r0, [r7, #8]
 8006442:	f7ff ff49 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006446:	bf00      	nop
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800644e:	b480      	push	{r7}
 8006450:	b089      	sub	sp, #36	; 0x24
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	60bb      	str	r3, [r7, #8]
   return(result);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800646c:	61fb      	str	r3, [r7, #28]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	330c      	adds	r3, #12
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	61ba      	str	r2, [r7, #24]
 8006478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647a:	6979      	ldr	r1, [r7, #20]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	e841 2300 	strex	r3, r2, [r1]
 8006482:	613b      	str	r3, [r7, #16]
   return(result);
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1e5      	bne.n	8006456 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006492:	bf00      	nop
 8006494:	3724      	adds	r7, #36	; 0x24
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800649e:	b480      	push	{r7}
 80064a0:	b095      	sub	sp, #84	; 0x54
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	330c      	adds	r3, #12
 80064ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064c6:	643a      	str	r2, [r7, #64]	; 0x40
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e5      	bne.n	80064a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3314      	adds	r3, #20
 80064e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f023 0301 	bic.w	r3, r3, #1
 80064f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3314      	adds	r3, #20
 80064f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	2b01      	cmp	r3, #1
 8006514:	d119      	bne.n	800654a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	330c      	adds	r3, #12
 800651c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	60bb      	str	r3, [r7, #8]
   return(result);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f023 0310 	bic.w	r3, r3, #16
 800652c:	647b      	str	r3, [r7, #68]	; 0x44
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006536:	61ba      	str	r2, [r7, #24]
 8006538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	6979      	ldr	r1, [r7, #20]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	613b      	str	r3, [r7, #16]
   return(result);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e5      	bne.n	8006516 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2220      	movs	r2, #32
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006558:	bf00      	nop
 800655a:	3754      	adds	r7, #84	; 0x54
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff feaa 	bl	80062d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006584:	bf00      	nop
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b21      	cmp	r3, #33	; 0x21
 800659e:	d13e      	bne.n	800661e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	d114      	bne.n	80065d4 <UART_Transmit_IT+0x48>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d110      	bne.n	80065d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	1c9a      	adds	r2, r3, #2
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]
 80065d2:	e008      	b.n	80065e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	1c59      	adds	r1, r3, #1
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	6211      	str	r1, [r2, #32]
 80065de:	781a      	ldrb	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4619      	mov	r1, r3
 80065f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10f      	bne.n	800661a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3714      	adds	r7, #20
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006642:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fa fac5 	bl	8000bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08c      	sub	sp, #48	; 0x30
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b22      	cmp	r3, #34	; 0x22
 800666e:	f040 80ab 	bne.w	80067c8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	d117      	bne.n	80066ac <UART_Receive_IT+0x50>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d113      	bne.n	80066ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	b29b      	uxth	r3, r3
 8006696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669a:	b29a      	uxth	r2, r3
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	1c9a      	adds	r2, r3, #2
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	629a      	str	r2, [r3, #40]	; 0x28
 80066aa:	e026      	b.n	80066fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066be:	d007      	beq.n	80066d0 <UART_Receive_IT+0x74>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <UART_Receive_IT+0x82>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	e008      	b.n	80066f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29b      	uxth	r3, r3
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4619      	mov	r1, r3
 8006708:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800670a:	2b00      	cmp	r3, #0
 800670c:	d15a      	bne.n	80067c4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0220 	bic.w	r2, r2, #32
 800671c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800672c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695a      	ldr	r2, [r3, #20]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0201 	bic.w	r2, r2, #1
 800673c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	2b01      	cmp	r3, #1
 800674c:	d135      	bne.n	80067ba <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	330c      	adds	r3, #12
 800675a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	e853 3f00 	ldrex	r3, [r3]
 8006762:	613b      	str	r3, [r7, #16]
   return(result);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f023 0310 	bic.w	r3, r3, #16
 800676a:	627b      	str	r3, [r7, #36]	; 0x24
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	330c      	adds	r3, #12
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	623a      	str	r2, [r7, #32]
 8006776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	69f9      	ldr	r1, [r7, #28]
 800677a:	6a3a      	ldr	r2, [r7, #32]
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	61bb      	str	r3, [r7, #24]
   return(result);
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e5      	bne.n	8006754 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b10      	cmp	r3, #16
 8006794:	d10a      	bne.n	80067ac <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067b0:	4619      	mov	r1, r3
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7ff fd9a 	bl	80062ec <HAL_UARTEx_RxEventCallback>
 80067b8:	e002      	b.n	80067c0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fd82 	bl	80062c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e002      	b.n	80067ca <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e000      	b.n	80067ca <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3730      	adds	r7, #48	; 0x30
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	b09f      	sub	sp, #124	; 0x7c
 80067da:	af00      	add	r7, sp, #0
 80067dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ea:	68d9      	ldr	r1, [r3, #12]
 80067ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	ea40 0301 	orr.w	r3, r0, r1
 80067f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	431a      	orrs	r2, r3
 8006800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	431a      	orrs	r2, r3
 8006806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	4313      	orrs	r3, r2
 800680c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800680e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006818:	f021 010c 	bic.w	r1, r1, #12
 800681c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006822:	430b      	orrs	r3, r1
 8006824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006832:	6999      	ldr	r1, [r3, #24]
 8006834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	ea40 0301 	orr.w	r3, r0, r1
 800683c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800683e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	4bc5      	ldr	r3, [pc, #788]	; (8006b58 <UART_SetConfig+0x384>)
 8006844:	429a      	cmp	r2, r3
 8006846:	d004      	beq.n	8006852 <UART_SetConfig+0x7e>
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4bc3      	ldr	r3, [pc, #780]	; (8006b5c <UART_SetConfig+0x388>)
 800684e:	429a      	cmp	r2, r3
 8006850:	d103      	bne.n	800685a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006852:	f7fd fee9 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 8006856:	6778      	str	r0, [r7, #116]	; 0x74
 8006858:	e002      	b.n	8006860 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800685a:	f7fd fed1 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 800685e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006868:	f040 80b6 	bne.w	80069d8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800686c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686e:	461c      	mov	r4, r3
 8006870:	f04f 0500 	mov.w	r5, #0
 8006874:	4622      	mov	r2, r4
 8006876:	462b      	mov	r3, r5
 8006878:	1891      	adds	r1, r2, r2
 800687a:	6439      	str	r1, [r7, #64]	; 0x40
 800687c:	415b      	adcs	r3, r3
 800687e:	647b      	str	r3, [r7, #68]	; 0x44
 8006880:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006884:	1912      	adds	r2, r2, r4
 8006886:	eb45 0303 	adc.w	r3, r5, r3
 800688a:	f04f 0000 	mov.w	r0, #0
 800688e:	f04f 0100 	mov.w	r1, #0
 8006892:	00d9      	lsls	r1, r3, #3
 8006894:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006898:	00d0      	lsls	r0, r2, #3
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	1911      	adds	r1, r2, r4
 80068a0:	6639      	str	r1, [r7, #96]	; 0x60
 80068a2:	416b      	adcs	r3, r5
 80068a4:	667b      	str	r3, [r7, #100]	; 0x64
 80068a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	461a      	mov	r2, r3
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	1891      	adds	r1, r2, r2
 80068b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80068b4:	415b      	adcs	r3, r3
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068bc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80068c0:	f7f9 fca0 	bl	8000204 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4ba5      	ldr	r3, [pc, #660]	; (8006b60 <UART_SetConfig+0x38c>)
 80068ca:	fba3 2302 	umull	r2, r3, r3, r2
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	011e      	lsls	r6, r3, #4
 80068d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d4:	461c      	mov	r4, r3
 80068d6:	f04f 0500 	mov.w	r5, #0
 80068da:	4622      	mov	r2, r4
 80068dc:	462b      	mov	r3, r5
 80068de:	1891      	adds	r1, r2, r2
 80068e0:	6339      	str	r1, [r7, #48]	; 0x30
 80068e2:	415b      	adcs	r3, r3
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
 80068e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068ea:	1912      	adds	r2, r2, r4
 80068ec:	eb45 0303 	adc.w	r3, r5, r3
 80068f0:	f04f 0000 	mov.w	r0, #0
 80068f4:	f04f 0100 	mov.w	r1, #0
 80068f8:	00d9      	lsls	r1, r3, #3
 80068fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068fe:	00d0      	lsls	r0, r2, #3
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	1911      	adds	r1, r2, r4
 8006906:	65b9      	str	r1, [r7, #88]	; 0x58
 8006908:	416b      	adcs	r3, r5
 800690a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800690c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	461a      	mov	r2, r3
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	1891      	adds	r1, r2, r2
 8006918:	62b9      	str	r1, [r7, #40]	; 0x28
 800691a:	415b      	adcs	r3, r3
 800691c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006922:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006926:	f7f9 fc6d 	bl	8000204 <__aeabi_uldivmod>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4b8c      	ldr	r3, [pc, #560]	; (8006b60 <UART_SetConfig+0x38c>)
 8006930:	fba3 1302 	umull	r1, r3, r3, r2
 8006934:	095b      	lsrs	r3, r3, #5
 8006936:	2164      	movs	r1, #100	; 0x64
 8006938:	fb01 f303 	mul.w	r3, r1, r3
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	3332      	adds	r3, #50	; 0x32
 8006942:	4a87      	ldr	r2, [pc, #540]	; (8006b60 <UART_SetConfig+0x38c>)
 8006944:	fba2 2303 	umull	r2, r3, r2, r3
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006950:	441e      	add	r6, r3
 8006952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006954:	4618      	mov	r0, r3
 8006956:	f04f 0100 	mov.w	r1, #0
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	1894      	adds	r4, r2, r2
 8006960:	623c      	str	r4, [r7, #32]
 8006962:	415b      	adcs	r3, r3
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800696a:	1812      	adds	r2, r2, r0
 800696c:	eb41 0303 	adc.w	r3, r1, r3
 8006970:	f04f 0400 	mov.w	r4, #0
 8006974:	f04f 0500 	mov.w	r5, #0
 8006978:	00dd      	lsls	r5, r3, #3
 800697a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800697e:	00d4      	lsls	r4, r2, #3
 8006980:	4622      	mov	r2, r4
 8006982:	462b      	mov	r3, r5
 8006984:	1814      	adds	r4, r2, r0
 8006986:	653c      	str	r4, [r7, #80]	; 0x50
 8006988:	414b      	adcs	r3, r1
 800698a:	657b      	str	r3, [r7, #84]	; 0x54
 800698c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	461a      	mov	r2, r3
 8006992:	f04f 0300 	mov.w	r3, #0
 8006996:	1891      	adds	r1, r2, r2
 8006998:	61b9      	str	r1, [r7, #24]
 800699a:	415b      	adcs	r3, r3
 800699c:	61fb      	str	r3, [r7, #28]
 800699e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069a2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80069a6:	f7f9 fc2d 	bl	8000204 <__aeabi_uldivmod>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4b6c      	ldr	r3, [pc, #432]	; (8006b60 <UART_SetConfig+0x38c>)
 80069b0:	fba3 1302 	umull	r1, r3, r3, r2
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	2164      	movs	r1, #100	; 0x64
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	3332      	adds	r3, #50	; 0x32
 80069c2:	4a67      	ldr	r2, [pc, #412]	; (8006b60 <UART_SetConfig+0x38c>)
 80069c4:	fba2 2303 	umull	r2, r3, r2, r3
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	f003 0207 	and.w	r2, r3, #7
 80069ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4432      	add	r2, r6
 80069d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069d6:	e0b9      	b.n	8006b4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069da:	461c      	mov	r4, r3
 80069dc:	f04f 0500 	mov.w	r5, #0
 80069e0:	4622      	mov	r2, r4
 80069e2:	462b      	mov	r3, r5
 80069e4:	1891      	adds	r1, r2, r2
 80069e6:	6139      	str	r1, [r7, #16]
 80069e8:	415b      	adcs	r3, r3
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069f0:	1912      	adds	r2, r2, r4
 80069f2:	eb45 0303 	adc.w	r3, r5, r3
 80069f6:	f04f 0000 	mov.w	r0, #0
 80069fa:	f04f 0100 	mov.w	r1, #0
 80069fe:	00d9      	lsls	r1, r3, #3
 8006a00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a04:	00d0      	lsls	r0, r2, #3
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	eb12 0804 	adds.w	r8, r2, r4
 8006a0e:	eb43 0905 	adc.w	r9, r3, r5
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f04f 0100 	mov.w	r1, #0
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	008b      	lsls	r3, r1, #2
 8006a26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a2a:	0082      	lsls	r2, r0, #2
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	4649      	mov	r1, r9
 8006a30:	f7f9 fbe8 	bl	8000204 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4b49      	ldr	r3, [pc, #292]	; (8006b60 <UART_SetConfig+0x38c>)
 8006a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	011e      	lsls	r6, r3, #4
 8006a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a44:	4618      	mov	r0, r3
 8006a46:	f04f 0100 	mov.w	r1, #0
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	1894      	adds	r4, r2, r2
 8006a50:	60bc      	str	r4, [r7, #8]
 8006a52:	415b      	adcs	r3, r3
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a5a:	1812      	adds	r2, r2, r0
 8006a5c:	eb41 0303 	adc.w	r3, r1, r3
 8006a60:	f04f 0400 	mov.w	r4, #0
 8006a64:	f04f 0500 	mov.w	r5, #0
 8006a68:	00dd      	lsls	r5, r3, #3
 8006a6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a6e:	00d4      	lsls	r4, r2, #3
 8006a70:	4622      	mov	r2, r4
 8006a72:	462b      	mov	r3, r5
 8006a74:	1814      	adds	r4, r2, r0
 8006a76:	64bc      	str	r4, [r7, #72]	; 0x48
 8006a78:	414b      	adcs	r3, r1
 8006a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f04f 0100 	mov.w	r1, #0
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	008b      	lsls	r3, r1, #2
 8006a90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a94:	0082      	lsls	r2, r0, #2
 8006a96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a9a:	f7f9 fbb3 	bl	8000204 <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4b2f      	ldr	r3, [pc, #188]	; (8006b60 <UART_SetConfig+0x38c>)
 8006aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	2164      	movs	r1, #100	; 0x64
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	3332      	adds	r3, #50	; 0x32
 8006ab6:	4a2a      	ldr	r2, [pc, #168]	; (8006b60 <UART_SetConfig+0x38c>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac2:	441e      	add	r6, r3
 8006ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f04f 0100 	mov.w	r1, #0
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	1894      	adds	r4, r2, r2
 8006ad2:	603c      	str	r4, [r7, #0]
 8006ad4:	415b      	adcs	r3, r3
 8006ad6:	607b      	str	r3, [r7, #4]
 8006ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006adc:	1812      	adds	r2, r2, r0
 8006ade:	eb41 0303 	adc.w	r3, r1, r3
 8006ae2:	f04f 0400 	mov.w	r4, #0
 8006ae6:	f04f 0500 	mov.w	r5, #0
 8006aea:	00dd      	lsls	r5, r3, #3
 8006aec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006af0:	00d4      	lsls	r4, r2, #3
 8006af2:	4622      	mov	r2, r4
 8006af4:	462b      	mov	r3, r5
 8006af6:	eb12 0a00 	adds.w	sl, r2, r0
 8006afa:	eb43 0b01 	adc.w	fp, r3, r1
 8006afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f04f 0100 	mov.w	r1, #0
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	008b      	lsls	r3, r1, #2
 8006b12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b16:	0082      	lsls	r2, r0, #2
 8006b18:	4650      	mov	r0, sl
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	f7f9 fb72 	bl	8000204 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <UART_SetConfig+0x38c>)
 8006b26:	fba3 1302 	umull	r1, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2164      	movs	r1, #100	; 0x64
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	3332      	adds	r3, #50	; 0x32
 8006b38:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <UART_SetConfig+0x38c>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	f003 020f 	and.w	r2, r3, #15
 8006b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4432      	add	r2, r6
 8006b4a:	609a      	str	r2, [r3, #8]
}
 8006b4c:	bf00      	nop
 8006b4e:	377c      	adds	r7, #124	; 0x7c
 8006b50:	46bd      	mov	sp, r7
 8006b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b56:	bf00      	nop
 8006b58:	40011000 	.word	0x40011000
 8006b5c:	40011400 	.word	0x40011400
 8006b60:	51eb851f 	.word	0x51eb851f

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4d0d      	ldr	r5, [pc, #52]	; (8006b9c <__libc_init_array+0x38>)
 8006b68:	4c0d      	ldr	r4, [pc, #52]	; (8006ba0 <__libc_init_array+0x3c>)
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	2600      	movs	r6, #0
 8006b70:	42a6      	cmp	r6, r4
 8006b72:	d109      	bne.n	8006b88 <__libc_init_array+0x24>
 8006b74:	4d0b      	ldr	r5, [pc, #44]	; (8006ba4 <__libc_init_array+0x40>)
 8006b76:	4c0c      	ldr	r4, [pc, #48]	; (8006ba8 <__libc_init_array+0x44>)
 8006b78:	f000 f820 	bl	8006bbc <_init>
 8006b7c:	1b64      	subs	r4, r4, r5
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	2600      	movs	r6, #0
 8006b82:	42a6      	cmp	r6, r4
 8006b84:	d105      	bne.n	8006b92 <__libc_init_array+0x2e>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8c:	4798      	blx	r3
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7ee      	b.n	8006b70 <__libc_init_array+0xc>
 8006b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b96:	4798      	blx	r3
 8006b98:	3601      	adds	r6, #1
 8006b9a:	e7f2      	b.n	8006b82 <__libc_init_array+0x1e>
 8006b9c:	08006c00 	.word	0x08006c00
 8006ba0:	08006c00 	.word	0x08006c00
 8006ba4:	08006c00 	.word	0x08006c00
 8006ba8:	08006c04 	.word	0x08006c04

08006bac <memset>:
 8006bac:	4402      	add	r2, r0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d100      	bne.n	8006bb6 <memset+0xa>
 8006bb4:	4770      	bx	lr
 8006bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bba:	e7f9      	b.n	8006bb0 <memset+0x4>

08006bbc <_init>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	bf00      	nop
 8006bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc2:	bc08      	pop	{r3}
 8006bc4:	469e      	mov	lr, r3
 8006bc6:	4770      	bx	lr

08006bc8 <_fini>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	bf00      	nop
 8006bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bce:	bc08      	pop	{r3}
 8006bd0:	469e      	mov	lr, r3
 8006bd2:	4770      	bx	lr
