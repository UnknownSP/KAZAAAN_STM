
SMASTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f30  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009130  08009130  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08009130  08009130  00019130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009138  08009138  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009138  08009138  00019138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800913c  0800913c  0001913c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08009140  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f28  2000003c  0800917c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f64  0800917c  00021f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019bd7  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfe  00000000  00000000  00039c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0003ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ae4  00000000  00000000  0003ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017871  00000000  00000000  000626dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3cd5  00000000  00000000  00079f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014dc22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a24  00000000  00000000  0014dc78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000003c 	.word	0x2000003c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080090e0 	.word	0x080090e0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000040 	.word	0x20000040
 8000204:	080090e0 	.word	0x080090e0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b96e 	b.w	8000ce8 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8083 	bne.w	8000b3a <__udivmoddi4+0x116>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d947      	bls.n	8000aca <__udivmoddi4+0xa6>
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	b142      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	f1c2 0020 	rsb	r0, r2, #32
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbbc f6f8 	udiv	r6, ip, r8
 8000a5c:	fa1f fe87 	uxth.w	lr, r7
 8000a60:	fb08 c116 	mls	r1, r8, r6, ip
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f10e 	mul.w	r1, r6, lr
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a76:	f080 8119 	bcs.w	8000cac <__udivmoddi4+0x288>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8116 	bls.w	8000cac <__udivmoddi4+0x288>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	443b      	add	r3, r7
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	45a6      	cmp	lr, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa2:	f080 8105 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000aa6:	45a6      	cmp	lr, r4
 8000aa8:	f240 8102 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000aac:	3802      	subs	r0, #2
 8000aae:	443c      	add	r4, r7
 8000ab0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab4:	eba4 040e 	sub.w	r4, r4, lr
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xaa>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d150      	bne.n	8000b78 <__udivmoddi4+0x154>
 8000ad6:	1bcb      	subs	r3, r1, r7
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af0:	fb08 f30c 	mul.w	r3, r8, ip
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0xe2>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	f200 80e9 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x10c>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x10a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80d9 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e7bf      	b.n	8000aba <__udivmoddi4+0x96>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x12e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <__udivmoddi4+0x282>
 8000b44:	2600      	movs	r6, #0
 8000b46:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f683 	clz	r6, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d14a      	bne.n	8000bf0 <__udivmoddi4+0x1cc>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0x140>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80b8 	bhi.w	8000cd4 <__udivmoddi4+0x2b0>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0103 	sbc.w	r1, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0a8      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b80:	4097      	lsls	r7, r2
 8000b82:	fa01 f002 	lsl.w	r0, r1, r2
 8000b86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8a:	40d9      	lsrs	r1, r3
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0c03      	lsrs	r3, r0, #16
 8000b90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f108 	mul.w	r1, r6, r8
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	fa04 f402 	lsl.w	r4, r4, r2
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x19c>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bb2:	f080 808d 	bcs.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 808a 	bls.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b281      	uxth	r1, r0
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb00 f308 	mul.w	r3, r0, r8
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x1c4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bde:	d273      	bcs.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d971      	bls.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be4:	3802      	subs	r0, #2
 8000be6:	4439      	add	r1, r7
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bee:	e778      	b.n	8000ae2 <__udivmoddi4+0xbe>
 8000bf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c02:	fa01 f306 	lsl.w	r3, r1, r6
 8000c06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0c3b      	lsrs	r3, r7, #16
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fa1f f884 	uxth.w	r8, r4
 8000c1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c22:	fb09 fa08 	mul.w	sl, r9, r8
 8000c26:	458a      	cmp	sl, r1
 8000c28:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x220>
 8000c32:	1861      	adds	r1, r4, r1
 8000c34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c38:	d248      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	d946      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4421      	add	r1, r4
 8000c44:	eba1 010a 	sub.w	r1, r1, sl
 8000c48:	b2bf      	uxth	r7, r7
 8000c4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c56:	fb00 f808 	mul.w	r8, r0, r8
 8000c5a:	45b8      	cmp	r8, r7
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x24a>
 8000c5e:	19e7      	adds	r7, r4, r7
 8000c60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c64:	d22e      	bcs.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c66:	45b8      	cmp	r8, r7
 8000c68:	d92c      	bls.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4427      	add	r7, r4
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	eba7 0708 	sub.w	r7, r7, r8
 8000c76:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7a:	454f      	cmp	r7, r9
 8000c7c:	46c6      	mov	lr, r8
 8000c7e:	4649      	mov	r1, r9
 8000c80:	d31a      	bcc.n	8000cb8 <__udivmoddi4+0x294>
 8000c82:	d017      	beq.n	8000cb4 <__udivmoddi4+0x290>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x27a>
 8000c86:	ebb3 020e 	subs.w	r2, r3, lr
 8000c8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	ea4c 0202 	orr.w	r2, ip, r2
 8000c98:	40f7      	lsrs	r7, r6
 8000c9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e70b      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fd      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb4:	4543      	cmp	r3, r8
 8000cb6:	d2e5      	bcs.n	8000c84 <__udivmoddi4+0x260>
 8000cb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0x260>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e7d2      	b.n	8000c6e <__udivmoddi4+0x24a>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	e78d      	b.n	8000be8 <__udivmoddi4+0x1c4>
 8000ccc:	4681      	mov	r9, r0
 8000cce:	e7b9      	b.n	8000c44 <__udivmoddi4+0x220>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	e775      	b.n	8000bc0 <__udivmoddi4+0x19c>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e74a      	b.n	8000b6e <__udivmoddi4+0x14a>
 8000cd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cdc:	4439      	add	r1, r7
 8000cde:	e713      	b.n	8000b08 <__udivmoddi4+0xe4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	e724      	b.n	8000b30 <__udivmoddi4+0x10c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <appInit>:
static bool _is_SMASTA_Game = false;
static SMASTA_Mode smasta_mode = 5;
static int croon_direction = 0;
static uint32_t caseTime = 0;

int appInit(void){
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
	return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	0000      	movs	r0, r0
	...

08000d00 <appTask>:

int appTask(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
	static bool _userbutton_ena = false;
	static int ball_detect_num = 0;
	static int croon_target = 0;
	static int target_diff = 0;

	DeltaTime = G_System_counter - Recent_System_counter;
 8000d06:	4b64      	ldr	r3, [pc, #400]	; (8000e98 <appTask+0x198>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b64      	ldr	r3, [pc, #400]	; (8000e9c <appTask+0x19c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4a63      	ldr	r2, [pc, #396]	; (8000ea0 <appTask+0x1a0>)
 8000d12:	6013      	str	r3, [r2, #0]

	Encoder_Process();
 8000d14:	f000 fe12 	bl	800193c <Encoder_Process>

	if(IO_READ_USERBUTTON()){
 8000d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1c:	4861      	ldr	r0, [pc, #388]	; (8000ea4 <appTask+0x1a4>)
 8000d1e:	f002 f896 	bl	8002e4e <D_GPIO_Read>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d018      	beq.n	8000d60 <appTask+0x60>
		//IO_SET_USERLED();
		//IO_SET_STAYKICKER();
		//IO_SET_KICKER();
		//D_PWM_Set(3,1,5000);
		if(_userbutton_ena){
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <appTask+0x1a8>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d010      	beq.n	8000d58 <appTask+0x58>
			if(_is_SMASTA_Game){
 8000d36:	4b5d      	ldr	r3, [pc, #372]	; (8000eac <appTask+0x1ac>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d006      	beq.n	8000d4c <appTask+0x4c>
				_is_SMASTA_Game = false;
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <appTask+0x1ac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
				smasta_mode = 5;
 8000d44:	4b5a      	ldr	r3, [pc, #360]	; (8000eb0 <appTask+0x1b0>)
 8000d46:	2205      	movs	r2, #5
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e002      	b.n	8000d52 <appTask+0x52>
			}else{
				_is_SMASTA_Game = true;
 8000d4c:	4b57      	ldr	r3, [pc, #348]	; (8000eac <appTask+0x1ac>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
			}
			croon_direction = 0;
 8000d52:	4b58      	ldr	r3, [pc, #352]	; (8000eb4 <appTask+0x1b4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		}
		_userbutton_ena = false;
 8000d58:	4b53      	ldr	r3, [pc, #332]	; (8000ea8 <appTask+0x1a8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e002      	b.n	8000d66 <appTask+0x66>
	}else{
		_userbutton_ena = true;
 8000d60:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <appTask+0x1a8>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
		//IO_RESET_STAYKICKER();
		//IO_RESET_KICKER();
		//D_PWM_Set(3,1,0);
	}

	if(_is_SMASTA_Game){
 8000d66:	4b51      	ldr	r3, [pc, #324]	; (8000eac <appTask+0x1ac>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 808e 	beq.w	8000e8c <appTask+0x18c>
		caseTime += DeltaTime;
 8000d70:	4b51      	ldr	r3, [pc, #324]	; (8000eb8 <appTask+0x1b8>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <appTask+0x1a0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a4f      	ldr	r2, [pc, #316]	; (8000eb8 <appTask+0x1b8>)
 8000d7c:	6013      	str	r3, [r2, #0]
		switch (smasta_mode)
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <appTask+0x1b0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b07      	cmp	r3, #7
 8000d84:	d04b      	beq.n	8000e1e <appTask+0x11e>
 8000d86:	2b07      	cmp	r3, #7
 8000d88:	f300 8082 	bgt.w	8000e90 <appTask+0x190>
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d002      	beq.n	8000d96 <appTask+0x96>
 8000d90:	2b06      	cmp	r3, #6
 8000d92:	d015      	beq.n	8000dc0 <appTask+0xc0>
				Croon_Rotate(CROON_INIT_MIN_SPEED + ((CROON_INIT_SPEED-CROON_INIT_MIN_SPEED)*target_diff)/25,croon_direction);
			}
			break;
		
		default:
			break;
 8000d94:	e07c      	b.n	8000e90 <appTask+0x190>
			Croon_Rotate(CROON_INIT_SPEED,croon_direction);
 8000d96:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <appTask+0x1b4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000da0:	f000 fd8a 	bl	80018b8 <Croon_Rotate>
			if(Encoder_ResetCount >= 2){
 8000da4:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <appTask+0x1bc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d973      	bls.n	8000e94 <appTask+0x194>
				smasta_mode += 1;
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <appTask+0x1b0>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <appTask+0x1b0>)
 8000db6:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8000db8:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <appTask+0x1b8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
			break;
 8000dbe:	e069      	b.n	8000e94 <appTask+0x194>
			ball_detect_num = Ball_Detect(croon_direction);
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <appTask+0x1b4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fd27 	bl	8001818 <Ball_Detect>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a3c      	ldr	r2, [pc, #240]	; (8000ec0 <appTask+0x1c0>)
 8000dce:	6013      	str	r3, [r2, #0]
			if(ball_detect_num != 0){
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <appTask+0x1c0>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d07d      	beq.n	8000ed4 <appTask+0x1d4>
				croon_target = Encoder_RangeAdjust((5-(ball_detect_num%5)) * 20 + (-4) + 50 + 2);
 8000dd8:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <appTask+0x1c0>)
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	4b39      	ldr	r3, [pc, #228]	; (8000ec4 <appTask+0x1c4>)
 8000dde:	fb83 2301 	smull	r2, r3, r3, r1
 8000de2:	105a      	asrs	r2, r3, #1
 8000de4:	17cb      	asrs	r3, r1, #31
 8000de6:	1ad2      	subs	r2, r2, r3
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	1aca      	subs	r2, r1, r3
 8000df0:	f1c2 0205 	rsb	r2, r2, #5
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	3330      	adds	r3, #48	; 0x30
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fcf3 	bl	80017ea <Encoder_RangeAdjust>
 8000e04:	4603      	mov	r3, r0
 8000e06:	4a30      	ldr	r2, [pc, #192]	; (8000ec8 <appTask+0x1c8>)
 8000e08:	6013      	str	r3, [r2, #0]
				smasta_mode += 1;
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <appTask+0x1b0>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <appTask+0x1b0>)
 8000e14:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <appTask+0x1b8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
			break;
 8000e1c:	e05a      	b.n	8000ed4 <appTask+0x1d4>
			target_diff = Encoder_Diff(Encoder_Count, croon_target);
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <appTask+0x1cc>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <appTask+0x1c8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4610      	mov	r0, r2
 8000e2c:	f000 fcc8 	bl	80017c0 <Encoder_Diff>
 8000e30:	4603      	mov	r3, r0
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <appTask+0x1d0>)
 8000e34:	6013      	str	r3, [r2, #0]
			if(target_diff >= 25){
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <appTask+0x1d0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b18      	cmp	r3, #24
 8000e3c:	dd07      	ble.n	8000e4e <appTask+0x14e>
				Croon_Rotate(CROON_INIT_SPEED,croon_direction);
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <appTask+0x1b4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4619      	mov	r1, r3
 8000e44:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000e48:	f000 fd36 	bl	80018b8 <Croon_Rotate>
			break;
 8000e4c:	e043      	b.n	8000ed6 <appTask+0x1d6>
			}else if(target_diff == 0){
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <appTask+0x1d0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10d      	bne.n	8000e72 <appTask+0x172>
				Croon_Rotate(0,0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f000 fd2d 	bl	80018b8 <Croon_Rotate>
				smasta_mode += 1;
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <appTask+0x1b0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <appTask+0x1b0>)
 8000e68:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <appTask+0x1b8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
			break;
 8000e70:	e031      	b.n	8000ed6 <appTask+0x1d6>
				Croon_Rotate(CROON_INIT_MIN_SPEED + ((CROON_INIT_SPEED-CROON_INIT_MIN_SPEED)*target_diff)/25,croon_direction);
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <appTask+0x1d0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2216      	movs	r2, #22
 8000e78:	fb02 f303 	mul.w	r3, r2, r3
 8000e7c:	3396      	adds	r3, #150	; 0x96
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <appTask+0x1b4>)
 8000e80:	6812      	ldr	r2, [r2, #0]
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fd17 	bl	80018b8 <Croon_Rotate>
			break;
 8000e8a:	e024      	b.n	8000ed6 <appTask+0x1d6>
		}
	}
 8000e8c:	bf00      	nop
 8000e8e:	e022      	b.n	8000ed6 <appTask+0x1d6>
			break;
 8000e90:	bf00      	nop
 8000e92:	e020      	b.n	8000ed6 <appTask+0x1d6>
			break;
 8000e94:	bf00      	nop
 8000e96:	e01e      	b.n	8000ed6 <appTask+0x1d6>
 8000e98:	200001e0 	.word	0x200001e0
 8000e9c:	20000190 	.word	0x20000190
 8000ea0:	20000194 	.word	0x20000194
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	200001bc 	.word	0x200001bc
 8000eac:	200001b0 	.word	0x200001b0
 8000eb0:	20000028 	.word	0x20000028
 8000eb4:	200001b4 	.word	0x200001b4
 8000eb8:	200001b8 	.word	0x200001b8
 8000ebc:	2000005c 	.word	0x2000005c
 8000ec0:	200001c0 	.word	0x200001c0
 8000ec4:	66666667 	.word	0x66666667
 8000ec8:	200001c4 	.word	0x200001c4
 8000ecc:	20000058 	.word	0x20000058
 8000ed0:	200001c8 	.word	0x200001c8
			break;
 8000ed4:	bf00      	nop


	if(IO_READ_BUMP_1_HIT()==1 && !_bump1_is_on && !_bump1_wait_off){
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	48a7      	ldr	r0, [pc, #668]	; (8001178 <appTask+0x478>)
 8000eda:	f001 ffb8 	bl	8002e4e <D_GPIO_Read>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f083 0301 	eor.w	r3, r3, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d015      	beq.n	8000f16 <appTask+0x216>
 8000eea:	4ba4      	ldr	r3, [pc, #656]	; (800117c <appTask+0x47c>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f083 0301 	eor.w	r3, r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00e      	beq.n	8000f16 <appTask+0x216>
 8000ef8:	4ba1      	ldr	r3, [pc, #644]	; (8001180 <appTask+0x480>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	f083 0301 	eor.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <appTask+0x216>
		_bump1_is_on = true;
 8000f06:	4b9d      	ldr	r3, [pc, #628]	; (800117c <appTask+0x47c>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
		IO_SET_BUMP_1();
 8000f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f10:	489c      	ldr	r0, [pc, #624]	; (8001184 <appTask+0x484>)
 8000f12:	f001 ff7c 	bl	8002e0e <D_GPIO_Set>
	}
	if(_bump1_is_on && IO_READ_BUMP_1_SOL()==1 && !_bump1_wait_off){
 8000f16:	4b99      	ldr	r3, [pc, #612]	; (800117c <appTask+0x47c>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01b      	beq.n	8000f56 <appTask+0x256>
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4898      	ldr	r0, [pc, #608]	; (8001184 <appTask+0x484>)
 8000f22:	f001 ff94 	bl	8002e4e <D_GPIO_Read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f083 0301 	eor.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d011      	beq.n	8000f56 <appTask+0x256>
 8000f32:	4b93      	ldr	r3, [pc, #588]	; (8001180 <appTask+0x480>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	f083 0301 	eor.w	r3, r3, #1
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00a      	beq.n	8000f56 <appTask+0x256>
		_bump1_is_on = false;
 8000f40:	4b8e      	ldr	r3, [pc, #568]	; (800117c <appTask+0x47c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
		_bump1_wait_off = true;
 8000f46:	4b8e      	ldr	r3, [pc, #568]	; (8001180 <appTask+0x480>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	701a      	strb	r2, [r3, #0]
		IO_RESET_BUMP_1();
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	488c      	ldr	r0, [pc, #560]	; (8001184 <appTask+0x484>)
 8000f52:	f001 ff6c 	bl	8002e2e <D_GPIO_Reset>
	}
	if(_bump1_wait_off && IO_READ_BUMP_1_SOL()==0 && IO_READ_BUMP_1_HIT()==0){
 8000f56:	4b8a      	ldr	r3, [pc, #552]	; (8001180 <appTask+0x480>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d010      	beq.n	8000f80 <appTask+0x280>
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4888      	ldr	r0, [pc, #544]	; (8001184 <appTask+0x484>)
 8000f62:	f001 ff74 	bl	8002e4e <D_GPIO_Read>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d009      	beq.n	8000f80 <appTask+0x280>
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	4882      	ldr	r0, [pc, #520]	; (8001178 <appTask+0x478>)
 8000f70:	f001 ff6d 	bl	8002e4e <D_GPIO_Read>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <appTask+0x280>
		_bump1_wait_off = false;
 8000f7a:	4b81      	ldr	r3, [pc, #516]	; (8001180 <appTask+0x480>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
	}
	if(IO_READ_BUMP_2_HIT()==1 && !_bump2_is_on && !_bump2_wait_off){
 8000f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f84:	4880      	ldr	r0, [pc, #512]	; (8001188 <appTask+0x488>)
 8000f86:	f001 ff62 	bl	8002e4e <D_GPIO_Read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f083 0301 	eor.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d014      	beq.n	8000fc0 <appTask+0x2c0>
 8000f96:	4b7d      	ldr	r3, [pc, #500]	; (800118c <appTask+0x48c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00d      	beq.n	8000fc0 <appTask+0x2c0>
 8000fa4:	4b7a      	ldr	r3, [pc, #488]	; (8001190 <appTask+0x490>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	f083 0301 	eor.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <appTask+0x2c0>
		_bump2_is_on = true;
 8000fb2:	4b76      	ldr	r3, [pc, #472]	; (800118c <appTask+0x48c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
		IO_SET_BUMP_2();
 8000fb8:	2120      	movs	r1, #32
 8000fba:	4872      	ldr	r0, [pc, #456]	; (8001184 <appTask+0x484>)
 8000fbc:	f001 ff27 	bl	8002e0e <D_GPIO_Set>
	}
	if(_bump2_is_on && IO_READ_BUMP_2_SOL()==1 && !_bump2_wait_off){
 8000fc0:	4b72      	ldr	r3, [pc, #456]	; (800118c <appTask+0x48c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d01a      	beq.n	8000ffe <appTask+0x2fe>
 8000fc8:	2104      	movs	r1, #4
 8000fca:	4872      	ldr	r0, [pc, #456]	; (8001194 <appTask+0x494>)
 8000fcc:	f001 ff3f 	bl	8002e4e <D_GPIO_Read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f083 0301 	eor.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d010      	beq.n	8000ffe <appTask+0x2fe>
 8000fdc:	4b6c      	ldr	r3, [pc, #432]	; (8001190 <appTask+0x490>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d009      	beq.n	8000ffe <appTask+0x2fe>
		_bump2_is_on = false;
 8000fea:	4b68      	ldr	r3, [pc, #416]	; (800118c <appTask+0x48c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
		_bump2_wait_off = true;
 8000ff0:	4b67      	ldr	r3, [pc, #412]	; (8001190 <appTask+0x490>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
		IO_RESET_BUMP_2();
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4862      	ldr	r0, [pc, #392]	; (8001184 <appTask+0x484>)
 8000ffa:	f001 ff18 	bl	8002e2e <D_GPIO_Reset>
	}
	if(_bump2_wait_off && IO_READ_BUMP_2_SOL()==0 && IO_READ_BUMP_2_HIT()==0){
 8000ffe:	4b64      	ldr	r3, [pc, #400]	; (8001190 <appTask+0x490>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d011      	beq.n	800102a <appTask+0x32a>
 8001006:	2104      	movs	r1, #4
 8001008:	4862      	ldr	r0, [pc, #392]	; (8001194 <appTask+0x494>)
 800100a:	f001 ff20 	bl	8002e4e <D_GPIO_Read>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00a      	beq.n	800102a <appTask+0x32a>
 8001014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001018:	485b      	ldr	r0, [pc, #364]	; (8001188 <appTask+0x488>)
 800101a:	f001 ff18 	bl	8002e4e <D_GPIO_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <appTask+0x32a>
		_bump2_wait_off = false;
 8001024:	4b5a      	ldr	r3, [pc, #360]	; (8001190 <appTask+0x490>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	}

	RainbowTime += DeltaTime;
 800102a:	4b5b      	ldr	r3, [pc, #364]	; (8001198 <appTask+0x498>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b5b      	ldr	r3, [pc, #364]	; (800119c <appTask+0x49c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a58      	ldr	r2, [pc, #352]	; (8001198 <appTask+0x498>)
 8001036:	6013      	str	r3, [r2, #0]
	if(RainbowTime >= RAINBOW_FLOWTIME){
 8001038:	4b57      	ldr	r3, [pc, #348]	; (8001198 <appTask+0x498>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b63      	cmp	r3, #99	; 0x63
 800103e:	d90e      	bls.n	800105e <appTask+0x35e>
		RainbowCount++;
 8001040:	4b57      	ldr	r3, [pc, #348]	; (80011a0 <appTask+0x4a0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a56      	ldr	r2, [pc, #344]	; (80011a0 <appTask+0x4a0>)
 8001048:	6013      	str	r3, [r2, #0]
		RainbowTime = 0;
 800104a:	4b53      	ldr	r3, [pc, #332]	; (8001198 <appTask+0x498>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
		if(RainbowCount >= 50){
 8001050:	4b53      	ldr	r3, [pc, #332]	; (80011a0 <appTask+0x4a0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b31      	cmp	r3, #49	; 0x31
 8001056:	dd02      	ble.n	800105e <appTask+0x35e>
			RainbowCount = 0;
 8001058:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <appTask+0x4a0>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
		}
	}
	GradationTime += DeltaTime;
 800105e:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <appTask+0x4a4>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b4e      	ldr	r3, [pc, #312]	; (800119c <appTask+0x49c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a4e      	ldr	r2, [pc, #312]	; (80011a4 <appTask+0x4a4>)
 800106a:	6013      	str	r3, [r2, #0]
	if(GradationTime >= (GRADATION_CYCLETIME/(LED_NUM*10))){
 800106c:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <appTask+0x4a4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b0d      	cmp	r3, #13
 8001072:	d91e      	bls.n	80010b2 <appTask+0x3b2>
		//GradationFadeCount++;
		GradationCount++;
 8001074:	4b4c      	ldr	r3, [pc, #304]	; (80011a8 <appTask+0x4a8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	4a4b      	ldr	r2, [pc, #300]	; (80011a8 <appTask+0x4a8>)
 800107c:	6013      	str	r3, [r2, #0]
		GradationTime = 0;
 800107e:	4b49      	ldr	r3, [pc, #292]	; (80011a4 <appTask+0x4a4>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
		//if(GradationFadeCount >= 10){
		//	GradationFadeCount = 0;
		//}
		if(GradationCount > 250*2){
 8001084:	4b48      	ldr	r3, [pc, #288]	; (80011a8 <appTask+0x4a8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800108c:	dd02      	ble.n	8001094 <appTask+0x394>
			GradationCount = 0;
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <appTask+0x4a8>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
		}
		GradationFadeCount = GradationCount%10;
 8001094:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <appTask+0x4a8>)
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	4b44      	ldr	r3, [pc, #272]	; (80011ac <appTask+0x4ac>)
 800109a:	fb83 2301 	smull	r2, r3, r3, r1
 800109e:	109a      	asrs	r2, r3, #2
 80010a0:	17cb      	asrs	r3, r1, #31
 80010a2:	1ad2      	subs	r2, r2, r3
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	1aca      	subs	r2, r1, r3
 80010ae:	4b40      	ldr	r3, [pc, #256]	; (80011b0 <appTask+0x4b0>)
 80010b0:	601a      	str	r2, [r3, #0]
	//	GradationFadeTime = 0;
	//	if(GradationFadeCount >= LED_NUM){
	//		GradationFadeCount = 0;
	//	}
	//}
	BlinkTime += DeltaTime;
 80010b2:	4b40      	ldr	r3, [pc, #256]	; (80011b4 <appTask+0x4b4>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <appTask+0x49c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4413      	add	r3, r2
 80010bc:	4a3d      	ldr	r2, [pc, #244]	; (80011b4 <appTask+0x4b4>)
 80010be:	6013      	str	r3, [r2, #0]
	if(BlinkTime >= BLINK_FLOWTIME){
 80010c0:	4b3c      	ldr	r3, [pc, #240]	; (80011b4 <appTask+0x4b4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f240 52db 	movw	r2, #1499	; 0x5db
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d902      	bls.n	80010d2 <appTask+0x3d2>
		BlinkTime = 0;
 80010cc:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <appTask+0x4b4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
	}
	if(BlinkTime <= 100){
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <appTask+0x4b4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b64      	cmp	r3, #100	; 0x64
 80010d8:	d807      	bhi.n	80010ea <appTask+0x3ea>
		BlinkCoeff = 0.0;
 80010da:	4937      	ldr	r1, [pc, #220]	; (80011b8 <appTask+0x4b8>)
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	e9c1 2300 	strd	r2, r3, [r1]
 80010e8:	e022      	b.n	8001130 <appTask+0x430>
	}else if(BlinkTime <= 250){
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <appTask+0x4b4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2bfa      	cmp	r3, #250	; 0xfa
 80010f0:	d806      	bhi.n	8001100 <appTask+0x400>
		BlinkCoeff = 1.0;
 80010f2:	4931      	ldr	r1, [pc, #196]	; (80011b8 <appTask+0x4b8>)
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	4b30      	ldr	r3, [pc, #192]	; (80011bc <appTask+0x4bc>)
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]
 80010fe:	e017      	b.n	8001130 <appTask+0x430>
	}else if(BlinkTime <= 350){
 8001100:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <appTask+0x4b4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8001108:	d807      	bhi.n	800111a <appTask+0x41a>
		BlinkCoeff = 0.0;
 800110a:	492b      	ldr	r1, [pc, #172]	; (80011b8 <appTask+0x4b8>)
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
 8001118:	e00a      	b.n	8001130 <appTask+0x430>
	}else if(BlinkTime <= 450){
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <appTask+0x4b4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8001122:	d805      	bhi.n	8001130 <appTask+0x430>
		BlinkCoeff = 1.0;
 8001124:	4924      	ldr	r1, [pc, #144]	; (80011b8 <appTask+0x4b8>)
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <appTask+0x4bc>)
 800112c:	e9c1 2300 	strd	r2, r3, [r1]
	}

	ArraySwap_Rainbow(RainbowCount);
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <appTask+0x4a0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fc97 	bl	8001a68 <ArraySwap_Rainbow>
	for(int i=0; i<5; i++){
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800113e:	e26b      	b.n	8001618 <appTask+0x918>
    	int r=0;
 8001140:	2300      	movs	r3, #0
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    	int g=0;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    	int b=0;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
		double coeff = 1.0;
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <appTask+0x4bc>)
 8001152:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001158:	2b04      	cmp	r3, #4
 800115a:	d854      	bhi.n	8001206 <appTask+0x506>
 800115c:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <appTask+0x464>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	080011c1 	.word	0x080011c1
 8001168:	080011cf 	.word	0x080011cf
 800116c:	080011dd 	.word	0x080011dd
 8001170:	080011eb 	.word	0x080011eb
 8001174:	080011f9 	.word	0x080011f9
 8001178:	40020000 	.word	0x40020000
 800117c:	200001ac 	.word	0x200001ac
 8001180:	200001ae 	.word	0x200001ae
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	200001ad 	.word	0x200001ad
 8001190:	200001af 	.word	0x200001af
 8001194:	40020c00 	.word	0x40020c00
 8001198:	20000198 	.word	0x20000198
 800119c:	20000194 	.word	0x20000194
 80011a0:	200001a4 	.word	0x200001a4
 80011a4:	200001a0 	.word	0x200001a0
 80011a8:	20000018 	.word	0x20000018
 80011ac:	66666667 	.word	0x66666667
 80011b0:	200001a8 	.word	0x200001a8
 80011b4:	2000019c 	.word	0x2000019c
 80011b8:	20000020 	.word	0x20000020
 80011bc:	3ff00000 	.word	0x3ff00000
    	switch (i)
    	{
    	case 0:
    	  	r=1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
    	  	break;
 80011cc:	e01b      	b.n	8001206 <appTask+0x506>

    	case 1:
    	  	r=1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
    	  	break;
 80011da:	e014      	b.n	8001206 <appTask+0x506>

    	case 2:
    	  	r=0;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
    	  	break;
 80011e8:	e00d      	b.n	8001206 <appTask+0x506>

    	case 3:
    	  	r=1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	623b      	str	r3, [r7, #32]
    	  	break;
 80011f6:	e006      	b.n	8001206 <appTask+0x506>

    	case 4:
    	  	r=1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
    	  	break;
 8001204:	bf00      	nop
    	}

		if(i==0 || i==2){
 8001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <appTask+0x514>
 800120c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120e:	2b02      	cmp	r3, #2
 8001210:	f040 80a0 	bne.w	8001354 <appTask+0x654>
			for(int j=0; j<10; j++){
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	e097      	b.n	800134a <appTask+0x64a>
				if(j==0 || j==9){
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <appTask+0x526>
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b09      	cmp	r3, #9
 8001224:	d106      	bne.n	8001234 <appTask+0x534>
					coeff = 0.0;
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001232:	e004      	b.n	800123e <appTask+0x53e>
				}else{
					coeff = 1.0;
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4ba1      	ldr	r3, [pc, #644]	; (80014c0 <appTask+0x7c0>)
 800123a:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				int index = ((int)(Encoder_Count/2.0) + i*10+j) % 50;
 800123e:	4ba1      	ldr	r3, [pc, #644]	; (80014c4 <appTask+0x7c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f922 	bl	800048c <__aeabi_ui2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001250:	f7ff fac0 	bl	80007d4 <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fba2 	bl	80009a4 <__aeabi_d2iz>
 8001260:	4601      	mov	r1, r0
 8001262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	18ca      	adds	r2, r1, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	4413      	add	r3, r2
 8001272:	4a95      	ldr	r2, [pc, #596]	; (80014c8 <appTask+0x7c8>)
 8001274:	fb82 1203 	smull	r1, r2, r2, r3
 8001278:	1111      	asrs	r1, r2, #4
 800127a:	17da      	asrs	r2, r3, #31
 800127c:	1a8a      	subs	r2, r1, r2
 800127e:	2132      	movs	r1, #50	; 0x32
 8001280:	fb01 f202 	mul.w	r2, r1, r2
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	603b      	str	r3, [r7, #0]
				LED_Temp[j][0] = (int)((double)LED_Temp_Rainbow[index][0]*coeff);
 8001288:	4990      	ldr	r1, [pc, #576]	; (80014cc <appTask+0x7cc>)
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	440b      	add	r3, r1
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f8f8 	bl	800048c <__aeabi_ui2d>
 800129c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012a0:	f7ff f96e 	bl	8000580 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fb7a 	bl	80009a4 <__aeabi_d2iz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	4986      	ldr	r1, [pc, #536]	; (80014d0 <appTask+0x7d0>)
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	440b      	add	r3, r1
 80012c0:	4602      	mov	r2, r0
 80012c2:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)LED_Temp_Rainbow[index][1]*coeff);
 80012c4:	4981      	ldr	r1, [pc, #516]	; (80014cc <appTask+0x7cc>)
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	440b      	add	r3, r1
 80012d0:	3301      	adds	r3, #1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f8d9 	bl	800048c <__aeabi_ui2d>
 80012da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012de:	f7ff f94f 	bl	8000580 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fb5b 	bl	80009a4 <__aeabi_d2iz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b2d8      	uxtb	r0, r3
 80012f2:	4977      	ldr	r1, [pc, #476]	; (80014d0 <appTask+0x7d0>)
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	3301      	adds	r3, #1
 8001300:	4602      	mov	r2, r0
 8001302:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)LED_Temp_Rainbow[index][2]*coeff);
 8001304:	4971      	ldr	r1, [pc, #452]	; (80014cc <appTask+0x7cc>)
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	440b      	add	r3, r1
 8001310:	3302      	adds	r3, #2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8b9 	bl	800048c <__aeabi_ui2d>
 800131a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800131e:	f7ff f92f 	bl	8000580 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fb3b 	bl	80009a4 <__aeabi_d2iz>
 800132e:	4603      	mov	r3, r0
 8001330:	b2d8      	uxtb	r0, r3
 8001332:	4967      	ldr	r1, [pc, #412]	; (80014d0 <appTask+0x7d0>)
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	440b      	add	r3, r1
 800133e:	3302      	adds	r3, #2
 8001340:	4602      	mov	r2, r0
 8001342:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<10; j++){
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b09      	cmp	r3, #9
 800134e:	f77f af64 	ble.w	800121a <appTask+0x51a>
 8001352:	e12f      	b.n	80015b4 <appTask+0x8b4>
			}
		}else if(i==3 || i==4){
 8001354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001356:	2b03      	cmp	r3, #3
 8001358:	d003      	beq.n	8001362 <appTask+0x662>
 800135a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135c:	2b04      	cmp	r3, #4
 800135e:	f040 809a 	bne.w	8001496 <appTask+0x796>
			for(int j=0;j<10;j++){
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	e091      	b.n	800148c <appTask+0x78c>
				if(j==0 || j==9){
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <appTask+0x674>
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d106      	bne.n	8001382 <appTask+0x682>
					coeff = 0.0;
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001380:	e004      	b.n	800138c <appTask+0x68c>
				}else{
					coeff = 1.0;
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <appTask+0x7c0>)
 8001388:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				LED_Temp[j][0] = (int)((double)r*255.0*BlinkCoeff*coeff);
 800138c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800138e:	f7ff f88d 	bl	80004ac <__aeabi_i2d>
 8001392:	a349      	add	r3, pc, #292	; (adr r3, 80014b8 <appTask+0x7b8>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f8f2 	bl	8000580 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <appTask+0x7d4>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff f8e9 	bl	8000580 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ba:	f7ff f8e1 	bl	8000580 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff faed 	bl	80009a4 <__aeabi_d2iz>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b2d8      	uxtb	r0, r3
 80013ce:	4940      	ldr	r1, [pc, #256]	; (80014d0 <appTask+0x7d0>)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	440b      	add	r3, r1
 80013da:	4602      	mov	r2, r0
 80013dc:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)g*255.0*BlinkCoeff*coeff);
 80013de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013e0:	f7ff f864 	bl	80004ac <__aeabi_i2d>
 80013e4:	a334      	add	r3, pc, #208	; (adr r3, 80014b8 <appTask+0x7b8>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f8c9 	bl	8000580 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <appTask+0x7d4>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8c0 	bl	8000580 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140c:	f7ff f8b8 	bl	8000580 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fac4 	bl	80009a4 <__aeabi_d2iz>
 800141c:	4603      	mov	r3, r0
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	492b      	ldr	r1, [pc, #172]	; (80014d0 <appTask+0x7d0>)
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	440b      	add	r3, r1
 800142c:	3301      	adds	r3, #1
 800142e:	4602      	mov	r2, r0
 8001430:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)b*255.0*BlinkCoeff*coeff);
 8001432:	6a38      	ldr	r0, [r7, #32]
 8001434:	f7ff f83a 	bl	80004ac <__aeabi_i2d>
 8001438:	a31f      	add	r3, pc, #124	; (adr r3, 80014b8 <appTask+0x7b8>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f89f 	bl	8000580 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <appTask+0x7d4>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f896 	bl	8000580 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001460:	f7ff f88e 	bl	8000580 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fa9a 	bl	80009a4 <__aeabi_d2iz>
 8001470:	4603      	mov	r3, r0
 8001472:	b2d8      	uxtb	r0, r3
 8001474:	4916      	ldr	r1, [pc, #88]	; (80014d0 <appTask+0x7d0>)
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	440b      	add	r3, r1
 8001480:	3302      	adds	r3, #2
 8001482:	4602      	mov	r2, r0
 8001484:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<10;j++){
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	3301      	adds	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b09      	cmp	r3, #9
 8001490:	f77f af6a 	ble.w	8001368 <appTask+0x668>
 8001494:	e08e      	b.n	80015b4 <appTask+0x8b4>
			}
		}else{
			for(int j=0;j<10;j++){
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	e087      	b.n	80015ac <appTask+0x8ac>
				if(j==0 || j==9){
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <appTask+0x7a8>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d117      	bne.n	80014d8 <appTask+0x7d8>
					coeff = 0.0;
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80014b4:	e015      	b.n	80014e2 <appTask+0x7e2>
 80014b6:	bf00      	nop
 80014b8:	00000000 	.word	0x00000000
 80014bc:	406fe000 	.word	0x406fe000
 80014c0:	3ff00000 	.word	0x3ff00000
 80014c4:	20000058 	.word	0x20000058
 80014c8:	51eb851f 	.word	0x51eb851f
 80014cc:	200000f8 	.word	0x200000f8
 80014d0:	20000060 	.word	0x20000060
 80014d4:	20000020 	.word	0x20000020
				}else{
					coeff = 1.0;
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	4baa      	ldr	r3, [pc, #680]	; (8001788 <appTask+0xa88>)
 80014de:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				LED_Temp[j][0] = (int)((double)r*255.0*coeff);
 80014e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014e4:	f7fe ffe2 	bl	80004ac <__aeabi_i2d>
 80014e8:	a3a5      	add	r3, pc, #660	; (adr r3, 8001780 <appTask+0xa80>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7ff f847 	bl	8000580 <__aeabi_dmul>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014fe:	f7ff f83f 	bl	8000580 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fa4b 	bl	80009a4 <__aeabi_d2iz>
 800150e:	4603      	mov	r3, r0
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	499e      	ldr	r1, [pc, #632]	; (800178c <appTask+0xa8c>)
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	440b      	add	r3, r1
 800151e:	4602      	mov	r2, r0
 8001520:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)g*255.0*coeff);
 8001522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001524:	f7fe ffc2 	bl	80004ac <__aeabi_i2d>
 8001528:	a395      	add	r3, pc, #596	; (adr r3, 8001780 <appTask+0xa80>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7ff f827 	bl	8000580 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153e:	f7ff f81f 	bl	8000580 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fa2b 	bl	80009a4 <__aeabi_d2iz>
 800154e:	4603      	mov	r3, r0
 8001550:	b2d8      	uxtb	r0, r3
 8001552:	498e      	ldr	r1, [pc, #568]	; (800178c <appTask+0xa8c>)
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	440b      	add	r3, r1
 800155e:	3301      	adds	r3, #1
 8001560:	4602      	mov	r2, r0
 8001562:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)b*255.0*coeff);
 8001564:	6a38      	ldr	r0, [r7, #32]
 8001566:	f7fe ffa1 	bl	80004ac <__aeabi_i2d>
 800156a:	a385      	add	r3, pc, #532	; (adr r3, 8001780 <appTask+0xa80>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7ff f806 	bl	8000580 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001580:	f7fe fffe 	bl	8000580 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff fa0a 	bl	80009a4 <__aeabi_d2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	b2d8      	uxtb	r0, r3
 8001594:	497d      	ldr	r1, [pc, #500]	; (800178c <appTask+0xa8c>)
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	440b      	add	r3, r1
 80015a0:	3302      	adds	r3, #2
 80015a2:	4602      	mov	r2, r0
 80015a4:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<10;j++){
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	f77f af74 	ble.w	800149c <appTask+0x79c>
			}
		}
		if(i==ball_detect_num-1){
 80015b4:	4b76      	ldr	r3, [pc, #472]	; (8001790 <appTask+0xa90>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	429a      	cmp	r2, r3
 80015be:	d122      	bne.n	8001606 <appTask+0x906>
			for(int j=0;j<10;j++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	e01c      	b.n	8001600 <appTask+0x900>
				LED_Temp[j][0] = 0;
 80015c6:	4971      	ldr	r1, [pc, #452]	; (800178c <appTask+0xa8c>)
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = 0;
 80015d6:	496d      	ldr	r1, [pc, #436]	; (800178c <appTask+0xa8c>)
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	440b      	add	r3, r1
 80015e2:	3301      	adds	r3, #1
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = 0;
 80015e8:	4968      	ldr	r1, [pc, #416]	; (800178c <appTask+0xa8c>)
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	440b      	add	r3, r1
 80015f4:	3302      	adds	r3, #2
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<10;j++){
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b09      	cmp	r3, #9
 8001604:	dddf      	ble.n	80015c6 <appTask+0x8c6>
			}
		}
		D_LED_Set_Circle(LED_Temp, i+1);
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	3301      	adds	r3, #1
 800160a:	4619      	mov	r1, r3
 800160c:	485f      	ldr	r0, [pc, #380]	; (800178c <appTask+0xa8c>)
 800160e:	f001 fc33 	bl	8002e78 <D_LED_Set_Circle>
	for(int i=0; i<5; i++){
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	3301      	adds	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	2b04      	cmp	r3, #4
 800161c:	f77f ad90 	ble.w	8001140 <appTask+0x440>
	//LED_Temp[GradationCount/10][0] = (double)LED_Temp[GradationCount/10][0]*((double)(10-GradationFadeCount)/10.0);
	//LED_Temp[GradationCount/10][1] = (double)LED_Temp[GradationCount/10][1]*((double)(10-GradationFadeCount)/10.0);
	//LED_Temp[GradationCount/10][2] = (double)LED_Temp[GradationCount/10][2]*((double)(10-GradationFadeCount)/10.0);
	
	//D_LED_Set_All(LED_Temp);
	D_LED_Rotate(-(int)(Encoder_Count/2.0) + LED_OFFSET);
 8001620:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <appTask+0xa94>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff31 	bl	800048c <__aeabi_ui2d>
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001632:	f7ff f8cf 	bl	80007d4 <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff f9b1 	bl	80009a4 <__aeabi_d2iz>
 8001642:	4603      	mov	r3, r0
 8001644:	f1c3 0305 	rsb	r3, r3, #5
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fcf7 	bl	800303c <D_LED_Rotate>
    D_LED_Send();
 800164e:	f001 fc81 	bl	8002f54 <D_LED_Send>

	int16_t debug_bits = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_ENC_STEP() << 0);
 8001656:	2104      	movs	r1, #4
 8001658:	484f      	ldr	r0, [pc, #316]	; (8001798 <appTask+0xa98>)
 800165a:	f001 fbf8 	bl	8002e4e <D_GPIO_Read>
 800165e:	4603      	mov	r3, r0
 8001660:	b21a      	sxth	r2, r3
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4313      	orrs	r3, r2
 8001666:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_ENC_HOME() << 1);
 8001668:	2108      	movs	r1, #8
 800166a:	484b      	ldr	r0, [pc, #300]	; (8001798 <appTask+0xa98>)
 800166c:	f001 fbef 	bl	8002e4e <D_GPIO_Read>
 8001670:	4603      	mov	r3, r0
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	b21a      	sxth	r2, r3
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4313      	orrs	r3, r2
 800167a:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_BUMP_1_HIT() << 2);
 800167c:	2110      	movs	r1, #16
 800167e:	4847      	ldr	r0, [pc, #284]	; (800179c <appTask+0xa9c>)
 8001680:	f001 fbe5 	bl	8002e4e <D_GPIO_Read>
 8001684:	4603      	mov	r3, r0
 8001686:	f083 0301 	eor.w	r3, r3, #1
 800168a:	b2db      	uxtb	r3, r3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	b21a      	sxth	r2, r3
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4313      	orrs	r3, r2
 8001694:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_BUMP_1_SOL() << 3);
 8001696:	2101      	movs	r1, #1
 8001698:	4841      	ldr	r0, [pc, #260]	; (80017a0 <appTask+0xaa0>)
 800169a:	f001 fbd8 	bl	8002e4e <D_GPIO_Read>
 800169e:	4603      	mov	r3, r0
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_BUMP_2_HIT() << 4);
 80016b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b4:	4838      	ldr	r0, [pc, #224]	; (8001798 <appTask+0xa98>)
 80016b6:	f001 fbca 	bl	8002e4e <D_GPIO_Read>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_BUMP_2_SOL() << 5);
 80016cc:	2104      	movs	r1, #4
 80016ce:	4835      	ldr	r0, [pc, #212]	; (80017a4 <appTask+0xaa4>)
 80016d0:	f001 fbbd 	bl	8002e4e <D_GPIO_Read>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	015b      	lsls	r3, r3, #5
 80016de:	b21a      	sxth	r2, r3
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_BALL_DETECT() << 6);
 80016e6:	2101      	movs	r1, #1
 80016e8:	482b      	ldr	r0, [pc, #172]	; (8001798 <appTask+0xa98>)
 80016ea:	f001 fbb0 	bl	8002e4e <D_GPIO_Read>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f083 0301 	eor.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_KICKER_DOWN() << 7);
 8001700:	2102      	movs	r1, #2
 8001702:	4825      	ldr	r0, [pc, #148]	; (8001798 <appTask+0xa98>)
 8001704:	f001 fba3 	bl	8002e4e <D_GPIO_Read>
 8001708:	4603      	mov	r3, r0
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	01db      	lsls	r3, r3, #7
 8001712:	b21a      	sxth	r2, r3
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4313      	orrs	r3, r2
 8001718:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_STAYKICKER_DOWN() << 8);
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <appTask+0xaa0>)
 800171e:	f001 fb96 	bl	8002e4e <D_GPIO_Read>
 8001722:	4603      	mov	r3, r0
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4313      	orrs	r3, r2
 800172c:	80fb      	strh	r3, [r7, #6]
	D_Mess_printf("\033[1;1H");
 800172e:	481e      	ldr	r0, [pc, #120]	; (80017a8 <appTask+0xaa8>)
 8001730:	f001 fd1a 	bl	8003168 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",G_System_counter);
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <appTask+0xaac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	481d      	ldr	r0, [pc, #116]	; (80017b0 <appTask+0xab0>)
 800173c:	f001 fd14 	bl	8003168 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",Encoder_Count);
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <appTask+0xa94>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	481a      	ldr	r0, [pc, #104]	; (80017b0 <appTask+0xab0>)
 8001748:	f001 fd0e 	bl	8003168 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",ball_detect_num);
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <appTask+0xa90>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	4817      	ldr	r0, [pc, #92]	; (80017b0 <appTask+0xab0>)
 8001754:	f001 fd08 	bl	8003168 <D_Mess_printf>
	D_Mess_printf("%016b\n", debug_bits);
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175c:	4619      	mov	r1, r3
 800175e:	4815      	ldr	r0, [pc, #84]	; (80017b4 <appTask+0xab4>)
 8001760:	f001 fd02 	bl	8003168 <D_Mess_printf>


	Recent_System_counter = Recent_System_counter + DeltaTime;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <appTask+0xab8>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <appTask+0xabc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4413      	add	r3, r2
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <appTask+0xab8>)
 8001770:	6013      	str	r3, [r2, #0]
	return 0;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3730      	adds	r7, #48	; 0x30
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	f3af 8000 	nop.w
 8001780:	00000000 	.word	0x00000000
 8001784:	406fe000 	.word	0x406fe000
 8001788:	3ff00000 	.word	0x3ff00000
 800178c:	20000060 	.word	0x20000060
 8001790:	200001c0 	.word	0x200001c0
 8001794:	20000058 	.word	0x20000058
 8001798:	40020800 	.word	0x40020800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	080090f8 	.word	0x080090f8
 80017ac:	200001e0 	.word	0x200001e0
 80017b0:	08009100 	.word	0x08009100
 80017b4:	08009108 	.word	0x08009108
 80017b8:	20000190 	.word	0x20000190
 80017bc:	20000194 	.word	0x20000194

080017c0 <Encoder_Diff>:


static int Encoder_Diff(int nowCount, int targetCount){
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	if(nowCount > targetCount){
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dd02      	ble.n	80017d8 <Encoder_Diff+0x18>
		targetCount += 100;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	3364      	adds	r3, #100	; 0x64
 80017d6:	603b      	str	r3, [r7, #0]
	}
	return targetCount - nowCount;
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	1ad3      	subs	r3, r2, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <Encoder_RangeAdjust>:

static int Encoder_RangeAdjust(int count){
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
	if(count > 100){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	dd02      	ble.n	80017fe <Encoder_RangeAdjust+0x14>
		count -= 100;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3b64      	subs	r3, #100	; 0x64
 80017fc:	607b      	str	r3, [r7, #4]
	}
	if(count < 1){
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	dc02      	bgt.n	800180a <Encoder_RangeAdjust+0x20>
		count += 100;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3364      	adds	r3, #100	; 0x64
 8001808:	607b      	str	r3, [r7, #4]
	}
	return count;
 800180a:	687b      	ldr	r3, [r7, #4]
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <Ball_Detect>:

static int Ball_Detect(int direction){
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	int return_num = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
	if(IO_READ_BALL_DETECT()==1){
 8001824:	2101      	movs	r1, #1
 8001826:	4822      	ldr	r0, [pc, #136]	; (80018b0 <Ball_Detect+0x98>)
 8001828:	f001 fb11 	bl	8002e4e <D_GPIO_Read>
 800182c:	4603      	mov	r3, r0
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d035      	beq.n	80018a4 <Ball_Detect+0x8c>
		if(Encoder_Count >= (5+2) && Encoder_Count < (25+2)){			//middle 16	 reverse 66
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <Ball_Detect+0x9c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b06      	cmp	r3, #6
 800183e:	d906      	bls.n	800184e <Ball_Detect+0x36>
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <Ball_Detect+0x9c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b1a      	cmp	r3, #26
 8001846:	d802      	bhi.n	800184e <Ball_Detect+0x36>
			return_num = 4;
 8001848:	2304      	movs	r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e02a      	b.n	80018a4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (25+2) && Encoder_Count < (45+2)){	//middle 36  reverse 86
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <Ball_Detect+0x9c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b1a      	cmp	r3, #26
 8001854:	d906      	bls.n	8001864 <Ball_Detect+0x4c>
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <Ball_Detect+0x9c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b2e      	cmp	r3, #46	; 0x2e
 800185c:	d802      	bhi.n	8001864 <Ball_Detect+0x4c>
			return_num = 3;
 800185e:	2303      	movs	r3, #3
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e01f      	b.n	80018a4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (45+2) && Encoder_Count < (65+2)){	//middle 56  reverse 6
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <Ball_Detect+0x9c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b2e      	cmp	r3, #46	; 0x2e
 800186a:	d906      	bls.n	800187a <Ball_Detect+0x62>
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <Ball_Detect+0x9c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b42      	cmp	r3, #66	; 0x42
 8001872:	d802      	bhi.n	800187a <Ball_Detect+0x62>
			return_num = 2;
 8001874:	2302      	movs	r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e014      	b.n	80018a4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (65+2) && Encoder_Count < (85+2)){	//middle 76  reverse 26
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <Ball_Detect+0x9c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b42      	cmp	r3, #66	; 0x42
 8001880:	d906      	bls.n	8001890 <Ball_Detect+0x78>
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <Ball_Detect+0x9c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b56      	cmp	r3, #86	; 0x56
 8001888:	d802      	bhi.n	8001890 <Ball_Detect+0x78>
			return_num = 1;
 800188a:	2301      	movs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e009      	b.n	80018a4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (85+2) || Encoder_Count < (5+2)){		//middle 96  reverse 46
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <Ball_Detect+0x9c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b56      	cmp	r3, #86	; 0x56
 8001896:	d803      	bhi.n	80018a0 <Ball_Detect+0x88>
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <Ball_Detect+0x9c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b06      	cmp	r3, #6
 800189e:	d801      	bhi.n	80018a4 <Ball_Detect+0x8c>
			return_num = 5;
 80018a0:	2305      	movs	r3, #5
 80018a2:	60fb      	str	r3, [r7, #12]
		}
	}
	return return_num;
 80018a4:	68fb      	ldr	r3, [r7, #12]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40020800 	.word	0x40020800
 80018b4:	20000058 	.word	0x20000058

080018b8 <Croon_Rotate>:

static void Croon_Rotate(int speed, int direction){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
	if(speed > 1000) speed = 1000;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c8:	dd02      	ble.n	80018d0 <Croon_Rotate+0x18>
 80018ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ce:	607b      	str	r3, [r7, #4]
	if(speed < 0)	speed = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	da01      	bge.n	80018da <Croon_Rotate+0x22>
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
	int set_speed = speed * 5;
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
	if(speed == 0){
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10e      	bne.n	8001908 <Croon_Rotate+0x50>
		IO_SET_MOTOR_ENA();
 80018ea:	2110      	movs	r1, #16
 80018ec:	4812      	ldr	r0, [pc, #72]	; (8001938 <Croon_Rotate+0x80>)
 80018ee:	f001 fa8e 	bl	8002e0e <D_GPIO_Set>
		D_PWM_Set(CROON_MOTOR_F_TIM,CROON_MOTOR_F_CHANNEL,0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2101      	movs	r1, #1
 80018f6:	2003      	movs	r0, #3
 80018f8:	f001 fe76 	bl	80035e8 <D_PWM_Set>
		D_PWM_Set(CROON_MOTOR_R_TIM,CROON_MOTOR_R_CHANNEL,0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2102      	movs	r1, #2
 8001900:	2003      	movs	r0, #3
 8001902:	f001 fe71 	bl	80035e8 <D_PWM_Set>
		return;
 8001906:	e014      	b.n	8001932 <Croon_Rotate+0x7a>
	}
	IO_RESET_MOTOR_ENA();
 8001908:	2110      	movs	r1, #16
 800190a:	480b      	ldr	r0, [pc, #44]	; (8001938 <Croon_Rotate+0x80>)
 800190c:	f001 fa8f 	bl	8002e2e <D_GPIO_Reset>
	if(direction == 0){
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <Croon_Rotate+0x6a>
		D_PWM_Set(CROON_MOTOR_F_TIM,CROON_MOTOR_F_CHANNEL,set_speed);
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	2101      	movs	r1, #1
 800191a:	2003      	movs	r0, #3
 800191c:	f001 fe64 	bl	80035e8 <D_PWM_Set>
 8001920:	e007      	b.n	8001932 <Croon_Rotate+0x7a>
	}else if(direction == 1){
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d104      	bne.n	8001932 <Croon_Rotate+0x7a>
		D_PWM_Set(CROON_MOTOR_R_TIM,CROON_MOTOR_R_CHANNEL,set_speed);
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	2102      	movs	r1, #2
 800192c:	2003      	movs	r0, #3
 800192e:	f001 fe5b 	bl	80035e8 <D_PWM_Set>
	}
}
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40020800 	.word	0x40020800

0800193c <Encoder_Process>:

static int Encoder_Process(void){
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	static bool reset = false;
	int enc_state = (int)IO_READ_ENC_STEP();
 8001942:	2104      	movs	r1, #4
 8001944:	4840      	ldr	r0, [pc, #256]	; (8001a48 <Encoder_Process+0x10c>)
 8001946:	f001 fa82 	bl	8002e4e <D_GPIO_Read>
 800194a:	4603      	mov	r3, r0
 800194c:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_ENC_HOME();
 800194e:	2108      	movs	r1, #8
 8001950:	483d      	ldr	r0, [pc, #244]	; (8001a48 <Encoder_Process+0x10c>)
 8001952:	f001 fa7c 	bl	8002e4e <D_GPIO_Read>
 8001956:	4603      	mov	r3, r0
 8001958:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 800195a:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <Encoder_Process+0x110>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	429a      	cmp	r2, r3
 8001962:	d005      	beq.n	8001970 <Encoder_Process+0x34>
		enc_change_count++;
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <Encoder_Process+0x114>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a39      	ldr	r2, [pc, #228]	; (8001a50 <Encoder_Process+0x114>)
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e002      	b.n	8001976 <Encoder_Process+0x3a>
	}else{
		enc_change_count = 0;
 8001970:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <Encoder_Process+0x114>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <Encoder_Process+0x114>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	dd10      	ble.n	80019a0 <Encoder_Process+0x64>
		recent_enc_state = enc_state;
 800197e:	4a33      	ldr	r2, [pc, #204]	; (8001a4c <Encoder_Process+0x110>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8001984:	4b32      	ldr	r3, [pc, #200]	; (8001a50 <Encoder_Process+0x114>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
		if(enc_state == 0 || enc_state == 1){
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <Encoder_Process+0x5a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d104      	bne.n	80019a0 <Encoder_Process+0x64>
			Encoder_Count++;
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <Encoder_Process+0x118>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <Encoder_Process+0x118>)
 800199e:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <Encoder_Process+0x11c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d005      	beq.n	80019b6 <Encoder_Process+0x7a>
		home_change_count++;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <Encoder_Process+0x120>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <Encoder_Process+0x120>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e002      	b.n	80019bc <Encoder_Process+0x80>
	}else{
		home_change_count = 0;
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <Encoder_Process+0x120>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5 && !reset){
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <Encoder_Process+0x120>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	dd2d      	ble.n	8001a20 <Encoder_Process+0xe4>
 80019c4:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <Encoder_Process+0x124>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	f083 0301 	eor.w	r3, r3, #1
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d026      	beq.n	8001a20 <Encoder_Process+0xe4>
		reset = true;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <Encoder_Process+0x124>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
		recent_home_state = home_state;
 80019d8:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <Encoder_Process+0x11c>)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <Encoder_Process+0x120>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d11a      	bne.n	8001a20 <Encoder_Process+0xe4>
			if(recent_enc_state == 0){
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <Encoder_Process+0x110>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <Encoder_Process+0xbe>
				Encoder_Count = 1;
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <Encoder_Process+0x118>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e006      	b.n	8001a08 <Encoder_Process+0xcc>
			}else if(recent_enc_state == 1){
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <Encoder_Process+0x110>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d102      	bne.n	8001a08 <Encoder_Process+0xcc>
				Encoder_Count = 2;
 8001a02:	4b14      	ldr	r3, [pc, #80]	; (8001a54 <Encoder_Process+0x118>)
 8001a04:	2202      	movs	r2, #2
 8001a06:	601a      	str	r2, [r3, #0]
			}
			Encoder_ResetCount += 1;
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <Encoder_Process+0x128>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <Encoder_Process+0x128>)
 8001a10:	6013      	str	r3, [r2, #0]
			if(Encoder_ResetCount > 10){
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <Encoder_Process+0x128>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d902      	bls.n	8001a20 <Encoder_Process+0xe4>
				Encoder_ResetCount = 10;
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <Encoder_Process+0x128>)
 8001a1c:	220a      	movs	r2, #10
 8001a1e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(Encoder_Count > 10){
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <Encoder_Process+0x118>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b0a      	cmp	r3, #10
 8001a26:	d902      	bls.n	8001a2e <Encoder_Process+0xf2>
		reset = false;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <Encoder_Process+0x124>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
		//Encoder_Count = 0;
	}
	if(Encoder_Count > 100){
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <Encoder_Process+0x118>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d902      	bls.n	8001a3c <Encoder_Process+0x100>
		Encoder_Count = 1;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <Encoder_Process+0x118>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	200001cc 	.word	0x200001cc
 8001a50:	200001d0 	.word	0x200001d0
 8001a54:	20000058 	.word	0x20000058
 8001a58:	200001d4 	.word	0x200001d4
 8001a5c:	200001d8 	.word	0x200001d8
 8001a60:	200001dc 	.word	0x200001dc
 8001a64:	2000005c 	.word	0x2000005c

08001a68 <ArraySwap_Rainbow>:

static void ArraySwap_Rainbow(int num){
 8001a68:	b480      	push	{r7}
 8001a6a:	b0ad      	sub	sp, #180	; 0xb4
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
	uint8_t arr_temp[LED_NUM][3];
	for(int i=0; i<LED_NUM; i++){
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a76:	e05c      	b.n	8001b32 <ArraySwap_Rainbow+0xca>
		LED_Temp_Rainbow[i][0] = Rainbow[i%7][0];
 8001a78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001a7c:	4b86      	ldr	r3, [pc, #536]	; (8001c98 <ArraySwap_Rainbow+0x230>)
 8001a7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a82:	4413      	add	r3, r2
 8001a84:	1099      	asrs	r1, r3, #2
 8001a86:	17d3      	asrs	r3, r2, #31
 8001a88:	1ac9      	subs	r1, r1, r3
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	1a5b      	subs	r3, r3, r1
 8001a90:	1ad1      	subs	r1, r2, r3
 8001a92:	4a82      	ldr	r2, [pc, #520]	; (8001c9c <ArraySwap_Rainbow+0x234>)
 8001a94:	460b      	mov	r3, r1
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	440b      	add	r3, r1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	7818      	ldrb	r0, [r3, #0]
 8001a9e:	4980      	ldr	r1, [pc, #512]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001aa0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	4602      	mov	r2, r0
 8001aae:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = Rainbow[i%7][1];
 8001ab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001ab4:	4b78      	ldr	r3, [pc, #480]	; (8001c98 <ArraySwap_Rainbow+0x230>)
 8001ab6:	fb83 1302 	smull	r1, r3, r3, r2
 8001aba:	4413      	add	r3, r2
 8001abc:	1099      	asrs	r1, r3, #2
 8001abe:	17d3      	asrs	r3, r2, #31
 8001ac0:	1ac9      	subs	r1, r1, r3
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a5b      	subs	r3, r3, r1
 8001ac8:	1ad1      	subs	r1, r2, r3
 8001aca:	4a74      	ldr	r2, [pc, #464]	; (8001c9c <ArraySwap_Rainbow+0x234>)
 8001acc:	460b      	mov	r3, r1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	440b      	add	r3, r1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	4971      	ldr	r1, [pc, #452]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001ada:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4602      	mov	r2, r0
 8001aea:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = Rainbow[i%7][2];
 8001aec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001af0:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <ArraySwap_Rainbow+0x230>)
 8001af2:	fb83 1302 	smull	r1, r3, r3, r2
 8001af6:	4413      	add	r3, r2
 8001af8:	1099      	asrs	r1, r3, #2
 8001afa:	17d3      	asrs	r3, r2, #31
 8001afc:	1ac9      	subs	r1, r1, r3
 8001afe:	460b      	mov	r3, r1
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	1a5b      	subs	r3, r3, r1
 8001b04:	1ad1      	subs	r1, r2, r3
 8001b06:	4a65      	ldr	r2, [pc, #404]	; (8001c9c <ArraySwap_Rainbow+0x234>)
 8001b08:	460b      	mov	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	440b      	add	r3, r1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3302      	adds	r3, #2
 8001b12:	7818      	ldrb	r0, [r3, #0]
 8001b14:	4962      	ldr	r1, [pc, #392]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001b16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	3302      	adds	r3, #2
 8001b24:	4602      	mov	r2, r0
 8001b26:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<LED_NUM; i++){
 8001b28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b36:	2b31      	cmp	r3, #49	; 0x31
 8001b38:	dd9e      	ble.n	8001a78 <ArraySwap_Rainbow+0x10>
	}
	int indx;
	for(int i=0;i<LED_NUM; i++){
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001b40:	e057      	b.n	8001bf2 <ArraySwap_Rainbow+0x18a>
		indx = i + num;
 8001b42:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		if(indx >= LED_NUM){
 8001b4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b52:	2b31      	cmp	r3, #49	; 0x31
 8001b54:	dd04      	ble.n	8001b60 <ArraySwap_Rainbow+0xf8>
			indx -= LED_NUM;
 8001b56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b5a:	3b32      	subs	r3, #50	; 0x32
 8001b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		if(indx < 0){
 8001b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	da04      	bge.n	8001b72 <ArraySwap_Rainbow+0x10a>
			indx += LED_NUM;
 8001b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b6c:	3332      	adds	r3, #50	; 0x32
 8001b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		arr_temp[i][0] = LED_Temp_Rainbow[indx][0];
 8001b72:	494b      	ldr	r1, [pc, #300]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001b74:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	7819      	ldrb	r1, [r3, #0]
 8001b82:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001b90:	4413      	add	r3, r2
 8001b92:	3ba8      	subs	r3, #168	; 0xa8
 8001b94:	460a      	mov	r2, r1
 8001b96:	701a      	strb	r2, [r3, #0]
		arr_temp[i][1] = LED_Temp_Rainbow[indx][1];
 8001b98:	4941      	ldr	r1, [pc, #260]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001b9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	7819      	ldrb	r1, [r3, #0]
 8001baa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001bb8:	4413      	add	r3, r2
 8001bba:	3ba7      	subs	r3, #167	; 0xa7
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
		arr_temp[i][2] = LED_Temp_Rainbow[indx][2];
 8001bc0:	4937      	ldr	r1, [pc, #220]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	3302      	adds	r3, #2
 8001bd0:	7819      	ldrb	r1, [r3, #0]
 8001bd2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001be0:	4413      	add	r3, r2
 8001be2:	3ba6      	subs	r3, #166	; 0xa6
 8001be4:	460a      	mov	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 8001be8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bec:	3301      	adds	r3, #1
 8001bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bf6:	2b31      	cmp	r3, #49	; 0x31
 8001bf8:	dda3      	ble.n	8001b42 <ArraySwap_Rainbow+0xda>
	}
	for(int i=0;i<LED_NUM; i++){
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c00:	e03f      	b.n	8001c82 <ArraySwap_Rainbow+0x21a>
		LED_Temp_Rainbow[i][0] = arr_temp[i][0];
 8001c02:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001c10:	4413      	add	r3, r2
 8001c12:	3ba8      	subs	r3, #168	; 0xa8
 8001c14:	7818      	ldrb	r0, [r3, #0]
 8001c16:	4922      	ldr	r1, [pc, #136]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001c18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	440b      	add	r3, r1
 8001c24:	4602      	mov	r2, r0
 8001c26:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = arr_temp[i][1];
 8001c28:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001c36:	4413      	add	r3, r2
 8001c38:	3ba7      	subs	r3, #167	; 0xa7
 8001c3a:	7818      	ldrb	r0, [r3, #0]
 8001c3c:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001c3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = arr_temp[i][2];
 8001c50:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001c5e:	4413      	add	r3, r2
 8001c60:	3ba6      	subs	r3, #166	; 0xa6
 8001c62:	7818      	ldrb	r0, [r3, #0]
 8001c64:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <ArraySwap_Rainbow+0x238>)
 8001c66:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	3302      	adds	r3, #2
 8001c74:	4602      	mov	r2, r0
 8001c76:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 8001c78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c86:	2b31      	cmp	r3, #49	; 0x31
 8001c88:	ddbb      	ble.n	8001c02 <ArraySwap_Rainbow+0x19a>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	37b4      	adds	r7, #180	; 0xb4
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	92492493 	.word	0x92492493
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	200000f8 	.word	0x200000f8

08001ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ca8:	f001 fd0a 	bl	80036c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cac:	f000 f820 	bl	8001cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb0:	f000 fb38 	bl	8002324 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cb4:	f000 fad8 	bl	8002268 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001cb8:	f000 fa82 	bl	80021c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001cbc:	f000 faaa 	bl	8002214 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001cc0:	f000 f882 	bl	8001dc8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001cc4:	f000 f8ae 	bl	8001e24 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cc8:	f000 f94c 	bl	8001f64 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ccc:	f000 f9e0 	bl	8002090 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  
  D_PWM_Init();
 8001cd0:	f001 fc62 	bl	8003598 <D_PWM_Init>
  appInit();
 8001cd4:	f7ff f80a 	bl	8000cec <appInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 8001cd8:	f7ff f812 	bl	8000d00 <appTask>
    if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8001cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <main+0x48>)
 8001ce2:	f002 fc15 	bl	8004510 <HAL_GPIO_ReadPin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 8001ce6:	f001 fa5f 	bl	80031a8 <D_Mess_flush>
	  appTask();
 8001cea:	e7f5      	b.n	8001cd8 <main+0x34>
 8001cec:	40020800 	.word	0x40020800

08001cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b094      	sub	sp, #80	; 0x50
 8001cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	2234      	movs	r2, #52	; 0x34
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f007 f9e6 	bl	80090d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d04:	f107 0308 	add.w	r3, r7, #8
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d14:	2300      	movs	r3, #0
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <SystemClock_Config+0xd0>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d30:	2300      	movs	r3, #0
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <SystemClock_Config+0xd4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <SystemClock_Config+0xd4>)
 8001d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <SystemClock_Config+0xd4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d58:	2310      	movs	r3, #16
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d64:	2308      	movs	r3, #8
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001d68:	2350      	movs	r3, #80	; 0x50
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d70:	2302      	movs	r3, #2
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 fcdb 	bl	8006738 <HAL_RCC_OscConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d88:	f000 fbc2 	bl	8002510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d90:	2302      	movs	r3, #2
 8001d92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	2102      	movs	r1, #2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 f9f9 	bl	80061a0 <HAL_RCC_ClockConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001db4:	f000 fbac 	bl	8002510 <Error_Handler>
  }
}
 8001db8:	bf00      	nop
 8001dba:	3750      	adds	r7, #80	; 0x50
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000

08001dc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <MX_I2C1_Init+0x54>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <MX_I2C1_Init+0x58>)
 8001dd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001de0:	2220      	movs	r2, #32
 8001de2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_I2C1_Init+0x50>)
 8001e06:	f002 fbb5 	bl	8004574 <HAL_I2C_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e10:	f000 fb7e 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20001a90 	.word	0x20001a90
 8001e1c:	40005400 	.word	0x40005400
 8001e20:	000186a0 	.word	0x000186a0

08001e24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b096      	sub	sp, #88	; 0x58
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2220      	movs	r2, #32
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f007 f937 	bl	80090d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e64:	4a3e      	ldr	r2, [pc, #248]	; (8001f60 <MX_TIM1_Init+0x13c>)
 8001e66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8001e68:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e76:	2218      	movs	r2, #24
 8001e78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e86:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e8c:	4833      	ldr	r0, [pc, #204]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001e8e:	f004 fef1 	bl	8006c74 <HAL_TIM_Base_Init>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001e98:	f000 fb3a 	bl	8002510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ea2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	482c      	ldr	r0, [pc, #176]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001eaa:	f005 fbaf 	bl	800760c <HAL_TIM_ConfigClockSource>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001eb4:	f000 fb2c 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eb8:	4828      	ldr	r0, [pc, #160]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001eba:	f004 ff2a 	bl	8006d12 <HAL_TIM_PWM_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001ec4:	f000 fb24 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4821      	ldr	r0, [pc, #132]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001ed8:	f006 f854 	bl	8007f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001ee2:	f000 fb15 	bl	8002510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee6:	2360      	movs	r3, #96	; 0x60
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	2200      	movs	r2, #0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4814      	ldr	r0, [pc, #80]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001f0c:	f005 fabc 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001f16:	f000 fafb 	bl	8002510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4807      	ldr	r0, [pc, #28]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001f3e:	f006 f89d 	bl	800807c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001f48:	f000 fae2 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <MX_TIM1_Init+0x138>)
 8001f4e:	f000 fc49 	bl	80027e4 <HAL_TIM_MspPostInit>

}
 8001f52:	bf00      	nop
 8001f54:	3758      	adds	r7, #88	; 0x58
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20001c90 	.word	0x20001c90
 8001f60:	40010000 	.word	0x40010000

08001f64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08e      	sub	sp, #56	; 0x38
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	f107 0320 	add.w	r3, r7, #32
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f82:	1d3b      	adds	r3, r7, #4
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	615a      	str	r2, [r3, #20]
 8001f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <MX_TIM2_Init+0x128>)
 8001f96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <MX_TIM2_Init+0x128>)
 8001f9e:	224f      	movs	r2, #79	; 0x4f
 8001fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	; (800208c <MX_TIM2_Init+0x128>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001fa8:	4b38      	ldr	r3, [pc, #224]	; (800208c <MX_TIM2_Init+0x128>)
 8001faa:	f241 3287 	movw	r2, #4999	; 0x1387
 8001fae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <MX_TIM2_Init+0x128>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb6:	4b35      	ldr	r3, [pc, #212]	; (800208c <MX_TIM2_Init+0x128>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fbc:	4833      	ldr	r0, [pc, #204]	; (800208c <MX_TIM2_Init+0x128>)
 8001fbe:	f004 fe59 	bl	8006c74 <HAL_TIM_Base_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fc8:	f000 faa2 	bl	8002510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	482c      	ldr	r0, [pc, #176]	; (800208c <MX_TIM2_Init+0x128>)
 8001fda:	f005 fb17 	bl	800760c <HAL_TIM_ConfigClockSource>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fe4:	f000 fa94 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fe8:	4828      	ldr	r0, [pc, #160]	; (800208c <MX_TIM2_Init+0x128>)
 8001fea:	f004 fe92 	bl	8006d12 <HAL_TIM_PWM_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ff4:	f000 fa8c 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	4619      	mov	r1, r3
 8002006:	4821      	ldr	r0, [pc, #132]	; (800208c <MX_TIM2_Init+0x128>)
 8002008:	f005 ffbc 	bl	8007f84 <HAL_TIMEx_MasterConfigSynchronization>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002012:	f000 fa7d 	bl	8002510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002016:	2360      	movs	r3, #96	; 0x60
 8002018:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	4817      	ldr	r0, [pc, #92]	; (800208c <MX_TIM2_Init+0x128>)
 800202e:	f005 fa2b 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002038:	f000 fa6a 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2204      	movs	r2, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4812      	ldr	r0, [pc, #72]	; (800208c <MX_TIM2_Init+0x128>)
 8002044:	f005 fa20 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800204e:	f000 fa5f 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2208      	movs	r2, #8
 8002056:	4619      	mov	r1, r3
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <MX_TIM2_Init+0x128>)
 800205a:	f005 fa15 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002064:	f000 fa54 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	220c      	movs	r2, #12
 800206c:	4619      	mov	r1, r3
 800206e:	4807      	ldr	r0, [pc, #28]	; (800208c <MX_TIM2_Init+0x128>)
 8002070:	f005 fa0a 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800207a:	f000 fa49 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800207e:	4803      	ldr	r0, [pc, #12]	; (800208c <MX_TIM2_Init+0x128>)
 8002080:	f000 fbb0 	bl	80027e4 <HAL_TIM_MspPostInit>

}
 8002084:	bf00      	nop
 8002086:	3738      	adds	r7, #56	; 0x38
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20001d38 	.word	0x20001d38

08002090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08e      	sub	sp, #56	; 0x38
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	f107 0320 	add.w	r3, r7, #32
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]
 80020bc:	615a      	str	r2, [r3, #20]
 80020be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c0:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <MX_TIM3_Init+0x128>)
 80020c2:	4a3e      	ldr	r2, [pc, #248]	; (80021bc <MX_TIM3_Init+0x12c>)
 80020c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80020c6:	4b3c      	ldr	r3, [pc, #240]	; (80021b8 <MX_TIM3_Init+0x128>)
 80020c8:	224f      	movs	r2, #79	; 0x4f
 80020ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020cc:	4b3a      	ldr	r3, [pc, #232]	; (80021b8 <MX_TIM3_Init+0x128>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <MX_TIM3_Init+0x128>)
 80020d4:	f241 3287 	movw	r2, #4999	; 0x1387
 80020d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <MX_TIM3_Init+0x128>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <MX_TIM3_Init+0x128>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020e6:	4834      	ldr	r0, [pc, #208]	; (80021b8 <MX_TIM3_Init+0x128>)
 80020e8:	f004 fdc4 	bl	8006c74 <HAL_TIM_Base_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020f2:	f000 fa0d 	bl	8002510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002100:	4619      	mov	r1, r3
 8002102:	482d      	ldr	r0, [pc, #180]	; (80021b8 <MX_TIM3_Init+0x128>)
 8002104:	f005 fa82 	bl	800760c <HAL_TIM_ConfigClockSource>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800210e:	f000 f9ff 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002112:	4829      	ldr	r0, [pc, #164]	; (80021b8 <MX_TIM3_Init+0x128>)
 8002114:	f004 fdfd 	bl	8006d12 <HAL_TIM_PWM_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800211e:	f000 f9f7 	bl	8002510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800212a:	f107 0320 	add.w	r3, r7, #32
 800212e:	4619      	mov	r1, r3
 8002130:	4821      	ldr	r0, [pc, #132]	; (80021b8 <MX_TIM3_Init+0x128>)
 8002132:	f005 ff27 	bl	8007f84 <HAL_TIMEx_MasterConfigSynchronization>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800213c:	f000 f9e8 	bl	8002510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002140:	2360      	movs	r3, #96	; 0x60
 8002142:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	4619      	mov	r1, r3
 8002156:	4818      	ldr	r0, [pc, #96]	; (80021b8 <MX_TIM3_Init+0x128>)
 8002158:	f005 f996 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002162:	f000 f9d5 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2204      	movs	r2, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4812      	ldr	r0, [pc, #72]	; (80021b8 <MX_TIM3_Init+0x128>)
 800216e:	f005 f98b 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002178:	f000 f9ca 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2208      	movs	r2, #8
 8002180:	4619      	mov	r1, r3
 8002182:	480d      	ldr	r0, [pc, #52]	; (80021b8 <MX_TIM3_Init+0x128>)
 8002184:	f005 f980 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800218e:	f000 f9bf 	bl	8002510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	220c      	movs	r2, #12
 8002196:	4619      	mov	r1, r3
 8002198:	4807      	ldr	r0, [pc, #28]	; (80021b8 <MX_TIM3_Init+0x128>)
 800219a:	f005 f975 	bl	8007488 <HAL_TIM_PWM_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80021a4:	f000 f9b4 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021a8:	4803      	ldr	r0, [pc, #12]	; (80021b8 <MX_TIM3_Init+0x128>)
 80021aa:	f000 fb1b 	bl	80027e4 <HAL_TIM_MspPostInit>

}
 80021ae:	bf00      	nop
 80021b0:	3738      	adds	r7, #56	; 0x38
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20001ae4 	.word	0x20001ae4
 80021bc:	40000400 	.word	0x40000400

080021c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <MX_USART1_UART_Init+0x50>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_USART1_UART_Init+0x4c>)
 80021f8:	f005 ff92 	bl	8008120 <HAL_UART_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002202:	f000 f985 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20001c4c 	.word	0x20001c4c
 8002210:	40011000 	.word	0x40011000

08002214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <MX_USART2_UART_Init+0x50>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 8002220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222c:	4b0c      	ldr	r3, [pc, #48]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 800223a:	220c      	movs	r2, #12
 800223c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223e:	4b08      	ldr	r3, [pc, #32]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800224a:	4805      	ldr	r0, [pc, #20]	; (8002260 <MX_USART2_UART_Init+0x4c>)
 800224c:	f005 ff68 	bl	8008120 <HAL_UART_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002256:	f000 f95b 	bl	8002510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20001d80 	.word	0x20001d80
 8002264:	40004400 	.word	0x40004400

08002268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <MX_DMA_Init+0xb8>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <MX_DMA_Init+0xb8>)
 8002278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <MX_DMA_Init+0xb8>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <MX_DMA_Init+0xb8>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a23      	ldr	r2, [pc, #140]	; (8002320 <MX_DMA_Init+0xb8>)
 8002294:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MX_DMA_Init+0xb8>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	200b      	movs	r0, #11
 80022ac:	f001 fb55 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022b0:	200b      	movs	r0, #11
 80022b2:	f001 fb6e 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2010      	movs	r0, #16
 80022bc:	f001 fb4d 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022c0:	2010      	movs	r0, #16
 80022c2:	f001 fb66 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2011      	movs	r0, #17
 80022cc:	f001 fb45 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022d0:	2011      	movs	r0, #17
 80022d2:	f001 fb5e 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	202f      	movs	r0, #47	; 0x2f
 80022dc:	f001 fb3d 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80022e0:	202f      	movs	r0, #47	; 0x2f
 80022e2:	f001 fb56 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2039      	movs	r0, #57	; 0x39
 80022ec:	f001 fb35 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022f0:	2039      	movs	r0, #57	; 0x39
 80022f2:	f001 fb4e 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	203a      	movs	r0, #58	; 0x3a
 80022fc:	f001 fb2d 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002300:	203a      	movs	r0, #58	; 0x3a
 8002302:	f001 fb46 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2046      	movs	r0, #70	; 0x46
 800230c:	f001 fb25 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002310:	2046      	movs	r0, #70	; 0x46
 8002312:	f001 fb3e 	bl	8003992 <HAL_NVIC_EnableIRQ>

}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800

08002324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b5a      	ldr	r3, [pc, #360]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a59      	ldr	r2, [pc, #356]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b49      	ldr	r3, [pc, #292]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4b45      	ldr	r3, [pc, #276]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a44      	ldr	r2, [pc, #272]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <MX_GPIO_Init+0x1a0>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2120      	movs	r1, #32
 80023ca:	483f      	ldr	r0, [pc, #252]	; (80024c8 <MX_GPIO_Init+0x1a4>)
 80023cc:	f002 f8b8 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2110      	movs	r1, #16
 80023d4:	483d      	ldr	r0, [pc, #244]	; (80024cc <MX_GPIO_Init+0x1a8>)
 80023d6:	f002 f8b3 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f24e 0120 	movw	r1, #57376	; 0xe020
 80023e0:	483b      	ldr	r0, [pc, #236]	; (80024d0 <MX_GPIO_Init+0x1ac>)
 80023e2:	f002 f8ad 	bl	8004540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4833      	ldr	r0, [pc, #204]	; (80024cc <MX_GPIO_Init+0x1a8>)
 80023fe:	f001 fef3 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002402:	f640 030f 	movw	r3, #2063	; 0x80f
 8002406:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240c:	2301      	movs	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	482d      	ldr	r0, [pc, #180]	; (80024cc <MX_GPIO_Init+0x1a8>)
 8002418:	f001 fee6 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800241c:	2310      	movs	r3, #16
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002424:	2301      	movs	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4826      	ldr	r0, [pc, #152]	; (80024c8 <MX_GPIO_Init+0x1a4>)
 8002430:	f001 feda 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002434:	2320      	movs	r3, #32
 8002436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002438:	2301      	movs	r3, #1
 800243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	481f      	ldr	r0, [pc, #124]	; (80024c8 <MX_GPIO_Init+0x1a4>)
 800244c:	f001 fecc 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002450:	2310      	movs	r3, #16
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	2301      	movs	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2300      	movs	r3, #0
 800245e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4819      	ldr	r0, [pc, #100]	; (80024cc <MX_GPIO_Init+0x1a8>)
 8002468:	f001 febe 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800246c:	2381      	movs	r3, #129	; 0x81
 800246e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002474:	2301      	movs	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4814      	ldr	r0, [pc, #80]	; (80024d0 <MX_GPIO_Init+0x1ac>)
 8002480:	f001 feb2 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8002484:	f24e 0320 	movw	r3, #57376	; 0xe020
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	480c      	ldr	r0, [pc, #48]	; (80024d0 <MX_GPIO_Init+0x1ac>)
 800249e:	f001 fea3 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024a2:	2304      	movs	r3, #4
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4807      	ldr	r0, [pc, #28]	; (80024d4 <MX_GPIO_Init+0x1b0>)
 80024b6:	f001 fe97 	bl	80041e8 <HAL_GPIO_Init>

}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020c00 	.word	0x40020c00

080024d8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_UART_TxCpltCallback+0x20>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 80024ea:	f000 fe8f 	bl	800320c <D_Mess_TransitionCompletedCallBack>
  }
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40004400 	.word	0x40004400

080024fc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  //busy = false;
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
  //HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	//datasentflag=1;
  D_LED_Callback();
 8002504:	f000 fe20 	bl	8003148 <D_LED_Callback>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002514:	b672      	cpsid	i
}
 8002516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002518:	e7fe      	b.n	8002518 <Error_Handler+0x8>
	...

0800251c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_MspInit+0x4c>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <HAL_MspInit+0x4c>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_MspInit+0x4c>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_MspInit+0x4c>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_MspInit+0x4c>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_MspInit+0x4c>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800255a:	2007      	movs	r0, #7
 800255c:	f001 f9f2 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_I2C_MspInit+0x160>)
 800258a:	4293      	cmp	r3, r2
 800258c:	f040 8099 	bne.w	80026c2 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	4b4e      	ldr	r3, [pc, #312]	; (80026d0 <HAL_I2C_MspInit+0x164>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4a4d      	ldr	r2, [pc, #308]	; (80026d0 <HAL_I2C_MspInit+0x164>)
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	6313      	str	r3, [r2, #48]	; 0x30
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_I2C_MspInit+0x164>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b2:	2312      	movs	r3, #18
 80025b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ba:	2303      	movs	r3, #3
 80025bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025be:	2304      	movs	r3, #4
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c2:	f107 0314 	add.w	r3, r7, #20
 80025c6:	4619      	mov	r1, r3
 80025c8:	4842      	ldr	r0, [pc, #264]	; (80026d4 <HAL_I2C_MspInit+0x168>)
 80025ca:	f001 fe0d 	bl	80041e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <HAL_I2C_MspInit+0x164>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <HAL_I2C_MspInit+0x164>)
 80025d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_I2C_MspInit+0x164>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 80025ec:	4a3b      	ldr	r2, [pc, #236]	; (80026dc <HAL_I2C_MspInit+0x170>)
 80025ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80025f0:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 80025f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f8:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fe:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 8002600:	2200      	movs	r2, #0
 8002602:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002604:	4b34      	ldr	r3, [pc, #208]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 8002606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260c:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002618:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800261e:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002624:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800262a:	482b      	ldr	r0, [pc, #172]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 800262c:	f001 f9cc 	bl	80039c8 <HAL_DMA_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002636:	f7ff ff6b 	bl	8002510 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 800263e:	639a      	str	r2, [r3, #56]	; 0x38
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_I2C_MspInit+0x16c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_I2C_MspInit+0x178>)
 800264a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 800264e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002652:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002660:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 8002662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002666:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 800266a:	2200      	movs	r2, #0
 800266c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002680:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002686:	4816      	ldr	r0, [pc, #88]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 8002688:	f001 f99e 	bl	80039c8 <HAL_DMA_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002692:	f7ff ff3d 	bl	8002510 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 800269a:	635a      	str	r2, [r3, #52]	; 0x34
 800269c:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_I2C_MspInit+0x174>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	201f      	movs	r0, #31
 80026a8:	f001 f957 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026ac:	201f      	movs	r0, #31
 80026ae:	f001 f970 	bl	8003992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2020      	movs	r0, #32
 80026b8:	f001 f94f 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80026bc:	2020      	movs	r0, #32
 80026be:	f001 f968 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40005400 	.word	0x40005400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020400 	.word	0x40020400
 80026d8:	20001cd8 	.word	0x20001cd8
 80026dc:	40026010 	.word	0x40026010
 80026e0:	20001a30 	.word	0x20001a30
 80026e4:	400260b8 	.word	0x400260b8

080026e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a36      	ldr	r2, [pc, #216]	; (80027d0 <HAL_TIM_Base_MspInit+0xe8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d13e      	bne.n	8002778 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a34      	ldr	r2, [pc, #208]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002718:	4a30      	ldr	r2, [pc, #192]	; (80027dc <HAL_TIM_Base_MspInit+0xf4>)
 800271a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 800271e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002722:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002724:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002730:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002736:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 800273a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800273e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002746:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800275a:	481f      	ldr	r0, [pc, #124]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 800275c:	f001 f934 	bl	80039c8 <HAL_DMA_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002766:	f7ff fed3 	bl	8002510 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 800276e:	625a      	str	r2, [r3, #36]	; 0x24
 8002770:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <HAL_TIM_Base_MspInit+0xf0>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002776:	e026      	b.n	80027c6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
}
 800279e:	e012      	b.n	80027c6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <HAL_TIM_Base_MspInit+0xf8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10d      	bne.n	80027c6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_TIM_Base_MspInit+0xec>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	20001970 	.word	0x20001970
 80027dc:	40026428 	.word	0x40026428
 80027e0:	40000400 	.word	0x40000400

080027e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	; 0x38
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a64      	ldr	r2, [pc, #400]	; (8002994 <HAL_TIM_MspPostInit+0x1b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d11f      	bne.n	8002846 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a62      	ldr	r2, [pc, #392]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b60      	ldr	r3, [pc, #384]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002834:	2301      	movs	r3, #1
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	4619      	mov	r1, r3
 800283e:	4857      	ldr	r0, [pc, #348]	; (800299c <HAL_TIM_MspPostInit+0x1b8>)
 8002840:	f001 fcd2 	bl	80041e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002844:	e0a2      	b.n	800298c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d13d      	bne.n	80028cc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4a4f      	ldr	r2, [pc, #316]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6313      	str	r3, [r2, #48]	; 0x30
 8002860:	4b4d      	ldr	r3, [pc, #308]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
 8002870:	4b49      	ldr	r3, [pc, #292]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4a48      	ldr	r2, [pc, #288]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	6313      	str	r3, [r2, #48]	; 0x30
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002888:	2303      	movs	r3, #3
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002898:	2301      	movs	r3, #1
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a0:	4619      	mov	r1, r3
 80028a2:	483e      	ldr	r0, [pc, #248]	; (800299c <HAL_TIM_MspPostInit+0x1b8>)
 80028a4:	f001 fca0 	bl	80041e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80028a8:	f240 4304 	movw	r3, #1028	; 0x404
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028ba:	2301      	movs	r3, #1
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c2:	4619      	mov	r1, r3
 80028c4:	4836      	ldr	r0, [pc, #216]	; (80029a0 <HAL_TIM_MspPostInit+0x1bc>)
 80028c6:	f001 fc8f 	bl	80041e8 <HAL_GPIO_Init>
}
 80028ca:	e05f      	b.n	800298c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a34      	ldr	r2, [pc, #208]	; (80029a4 <HAL_TIM_MspPostInit+0x1c0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d15a      	bne.n	800298c <HAL_TIM_MspPostInit+0x1a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4a2e      	ldr	r2, [pc, #184]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6313      	str	r3, [r2, #48]	; 0x30
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b28      	ldr	r3, [pc, #160]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a27      	ldr	r2, [pc, #156]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_TIM_MspPostInit+0x1b4>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800292a:	23c0      	movs	r3, #192	; 0xc0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002936:	2300      	movs	r3, #0
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800293a:	2302      	movs	r3, #2
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002942:	4619      	mov	r1, r3
 8002944:	4815      	ldr	r0, [pc, #84]	; (800299c <HAL_TIM_MspPostInit+0x1b8>)
 8002946:	f001 fc4f 	bl	80041e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800294a:	2302      	movs	r3, #2
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800295a:	2302      	movs	r3, #2
 800295c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	480e      	ldr	r0, [pc, #56]	; (80029a0 <HAL_TIM_MspPostInit+0x1bc>)
 8002966:	f001 fc3f 	bl	80041e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800296a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800297c:	2302      	movs	r3, #2
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	4619      	mov	r1, r3
 8002986:	4808      	ldr	r0, [pc, #32]	; (80029a8 <HAL_TIM_MspPostInit+0x1c4>)
 8002988:	f001 fc2e 	bl	80041e8 <HAL_GPIO_Init>
}
 800298c:	bf00      	nop
 800298e:	3738      	adds	r7, #56	; 0x38
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40010000 	.word	0x40010000
 8002998:	40023800 	.word	0x40023800
 800299c:	40020000 	.word	0x40020000
 80029a0:	40020400 	.word	0x40020400
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40020800 	.word	0x40020800

080029ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	; 0x30
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a97      	ldr	r2, [pc, #604]	; (8002c28 <HAL_UART_MspInit+0x27c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f040 8092 	bne.w	8002af4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	4b95      	ldr	r3, [pc, #596]	; (8002c2c <HAL_UART_MspInit+0x280>)
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	4a94      	ldr	r2, [pc, #592]	; (8002c2c <HAL_UART_MspInit+0x280>)
 80029da:	f043 0310 	orr.w	r3, r3, #16
 80029de:	6453      	str	r3, [r2, #68]	; 0x44
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <HAL_UART_MspInit+0x280>)
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	4b8e      	ldr	r3, [pc, #568]	; (8002c2c <HAL_UART_MspInit+0x280>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a8d      	ldr	r2, [pc, #564]	; (8002c2c <HAL_UART_MspInit+0x280>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <HAL_UART_MspInit+0x280>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	4882      	ldr	r0, [pc, #520]	; (8002c30 <HAL_UART_MspInit+0x284>)
 8002a26:	f001 fbdf 	bl	80041e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002a2a:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a2c:	4a82      	ldr	r2, [pc, #520]	; (8002c38 <HAL_UART_MspInit+0x28c>)
 8002a2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002a30:	4b80      	ldr	r3, [pc, #512]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a38:	4b7e      	ldr	r3, [pc, #504]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3e:	4b7d      	ldr	r3, [pc, #500]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a44:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a4c:	4b79      	ldr	r3, [pc, #484]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a52:	4b78      	ldr	r3, [pc, #480]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002a58:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5e:	4b75      	ldr	r3, [pc, #468]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a64:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002a6a:	4872      	ldr	r0, [pc, #456]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a6c:	f000 ffac 	bl	80039c8 <HAL_DMA_Init>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002a76:	f7ff fd4b 	bl	8002510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a6d      	ldr	r2, [pc, #436]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002a80:	4a6c      	ldr	r2, [pc, #432]	; (8002c34 <HAL_UART_MspInit+0x288>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002a86:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002a88:	4a6d      	ldr	r2, [pc, #436]	; (8002c40 <HAL_UART_MspInit+0x294>)
 8002a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a8c:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a92:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a94:	4b69      	ldr	r3, [pc, #420]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a9a:	4b68      	ldr	r3, [pc, #416]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aa0:	4b66      	ldr	r3, [pc, #408]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa8:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aae:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ab4:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aba:	4b60      	ldr	r3, [pc, #384]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac0:	4b5e      	ldr	r3, [pc, #376]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ac6:	485d      	ldr	r0, [pc, #372]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002ac8:	f000 ff7e 	bl	80039c8 <HAL_DMA_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002ad2:	f7ff fd1d 	bl	8002510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a58      	ldr	r2, [pc, #352]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34
 8002adc:	4a57      	ldr	r2, [pc, #348]	; (8002c3c <HAL_UART_MspInit+0x290>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	2025      	movs	r0, #37	; 0x25
 8002ae8:	f000 ff37 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002aec:	2025      	movs	r0, #37	; 0x25
 8002aee:	f000 ff50 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002af2:	e095      	b.n	8002c20 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_UART_MspInit+0x298>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	f040 8090 	bne.w	8002c20 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4a48      	ldr	r2, [pc, #288]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b10:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a41      	ldr	r2, [pc, #260]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <HAL_UART_MspInit+0x280>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b38:	230c      	movs	r3, #12
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b44:	2303      	movs	r3, #3
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b48:	2307      	movs	r3, #7
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	4837      	ldr	r0, [pc, #220]	; (8002c30 <HAL_UART_MspInit+0x284>)
 8002b54:	f001 fb48 	bl	80041e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b5a:	4a3c      	ldr	r2, [pc, #240]	; (8002c4c <HAL_UART_MspInit+0x2a0>)
 8002b5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b64:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b72:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b78:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b7a:	4b33      	ldr	r3, [pc, #204]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b80:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b8c:	4b2e      	ldr	r3, [pc, #184]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b92:	4b2d      	ldr	r3, [pc, #180]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002b98:	482b      	ldr	r0, [pc, #172]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002b9a:	f000 ff15 	bl	80039c8 <HAL_DMA_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002ba4:	f7ff fcb4 	bl	8002510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
 8002bae:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_UART_MspInit+0x29c>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bb6:	4a27      	ldr	r2, [pc, #156]	; (8002c54 <HAL_UART_MspInit+0x2a8>)
 8002bb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bee:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002bf4:	4816      	ldr	r0, [pc, #88]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002bf6:	f000 fee7 	bl	80039c8 <HAL_DMA_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002c00:	f7ff fc86 	bl	8002510 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_UART_MspInit+0x2a4>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2100      	movs	r1, #0
 8002c14:	2026      	movs	r0, #38	; 0x26
 8002c16:	f000 fea0 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c1a:	2026      	movs	r0, #38	; 0x26
 8002c1c:	f000 feb9 	bl	8003992 <HAL_NVIC_EnableIRQ>
}
 8002c20:	bf00      	nop
 8002c22:	3730      	adds	r7, #48	; 0x30
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	20001b8c 	.word	0x20001b8c
 8002c38:	40026440 	.word	0x40026440
 8002c3c:	20001b2c 	.word	0x20001b2c
 8002c40:	400264b8 	.word	0x400264b8
 8002c44:	40004400 	.word	0x40004400
 8002c48:	200019d0 	.word	0x200019d0
 8002c4c:	40026088 	.word	0x40026088
 8002c50:	20001bec 	.word	0x20001bec
 8002c54:	400260a0 	.word	0x400260a0

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <NMI_Handler+0x4>

08002c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c62:	e7fe      	b.n	8002c62 <HardFault_Handler+0x4>

08002c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c68:	e7fe      	b.n	8002c68 <MemManage_Handler+0x4>

08002c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c6e:	e7fe      	b.n	8002c6e <BusFault_Handler+0x4>

08002c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <UsageFault_Handler+0x4>

08002c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca4:	f000 fd5e 	bl	8003764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <SysTick_Handler+0x18>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a02      	ldr	r2, [pc, #8]	; (8002cb8 <SysTick_Handler+0x18>)
 8002cb0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200001e0 	.word	0x200001e0

08002cbc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <DMA1_Stream0_IRQHandler+0x10>)
 8002cc2:	f001 f819 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20001cd8 	.word	0x20001cd8

08002cd0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <DMA1_Stream5_IRQHandler+0x10>)
 8002cd6:	f001 f80f 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200019d0 	.word	0x200019d0

08002ce4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <DMA1_Stream6_IRQHandler+0x10>)
 8002cea:	f001 f805 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001bec 	.word	0x20001bec

08002cf8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <I2C1_EV_IRQHandler+0x10>)
 8002cfe:	f001 fd7d 	bl	80047fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20001a90 	.word	0x20001a90

08002d0c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <I2C1_ER_IRQHandler+0x10>)
 8002d12:	f001 fee4 	bl	8004ade <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20001a90 	.word	0x20001a90

08002d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <USART1_IRQHandler+0x10>)
 8002d26:	f005 fac7 	bl	80082b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20001c4c 	.word	0x20001c4c

08002d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <USART2_IRQHandler+0x10>)
 8002d3a:	f005 fabd 	bl	80082b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20001d80 	.word	0x20001d80

08002d48 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002d4c:	4802      	ldr	r0, [pc, #8]	; (8002d58 <DMA1_Stream7_IRQHandler+0x10>)
 8002d4e:	f000 ffd3 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20001a30 	.word	0x20001a30

08002d5c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002d60:	4802      	ldr	r0, [pc, #8]	; (8002d6c <DMA2_Stream1_IRQHandler+0x10>)
 8002d62:	f000 ffc9 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20001970 	.word	0x20001970

08002d70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d74:	4802      	ldr	r0, [pc, #8]	; (8002d80 <DMA2_Stream2_IRQHandler+0x10>)
 8002d76:	f000 ffbf 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20001b8c 	.word	0x20001b8c

08002d84 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002d88:	4802      	ldr	r0, [pc, #8]	; (8002d94 <DMA2_Stream7_IRQHandler+0x10>)
 8002d8a:	f000 ffb5 	bl	8003cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20001b2c 	.word	0x20001b2c

08002d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <SystemInit+0x20>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <SystemInit+0x20>)
 8002da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dc0:	480d      	ldr	r0, [pc, #52]	; (8002df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dc2:	490e      	ldr	r1, [pc, #56]	; (8002dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc8:	e002      	b.n	8002dd0 <LoopCopyDataInit>

08002dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dce:	3304      	adds	r3, #4

08002dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd4:	d3f9      	bcc.n	8002dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd6:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dd8:	4c0b      	ldr	r4, [pc, #44]	; (8002e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ddc:	e001      	b.n	8002de2 <LoopFillZerobss>

08002dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de0:	3204      	adds	r2, #4

08002de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de4:	d3fb      	bcc.n	8002dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002de6:	f7ff ffd7 	bl	8002d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dea:	f006 f94d 	bl	8009088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dee:	f7fe ff59 	bl	8001ca4 <main>
  bx  lr    
 8002df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dfc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002e00:	08009140 	.word	0x08009140
  ldr r2, =_sbss
 8002e04:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002e08:	20001f64 	.word	0x20001f64

08002e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC_IRQHandler>

08002e0e <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4619      	mov	r1, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f001 fb8d 	bl	8004540 <HAL_GPIO_WritePin>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f001 fb7d 	bl	8004540 <HAL_GPIO_WritePin>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f001 fb56 	bl	8004510 <HAL_GPIO_ReadPin>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <D_LED_Set_Circle>:
		LED_Data[i][2] = LED[i][0];
		LED_Data[i][3] = LED[i][2];
	}
}

void D_LED_Set_Circle(uint8_t LED[][3], int num){
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	for(int i=0; i<10; i++){
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	e059      	b.n	8002f3c <D_LED_Set_Circle+0xc4>
		LED_Data[(num-1)*10 + i][0] = (num-1)*10 + i;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	b2d8      	uxtb	r0, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	b2d9      	uxtb	r1, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	1e5a      	subs	r2, r3, #1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	1842      	adds	r2, r0, r1
 8002eb0:	b2d1      	uxtb	r1, r2
 8002eb2:	4a27      	ldr	r2, [pc, #156]	; (8002f50 <D_LED_Set_Circle+0xd8>)
 8002eb4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[(num-1)*10 + i][1] = LED[i][1];
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	18d1      	adds	r1, r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	1e5a      	subs	r2, r3, #1
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	7849      	ldrb	r1, [r1, #1]
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <D_LED_Set_Circle+0xd8>)
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	460a      	mov	r2, r1
 8002ee0:	705a      	strb	r2, [r3, #1]
		LED_Data[(num-1)*10 + i][2] = LED[i][0];
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	18d1      	adds	r1, r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	1e5a      	subs	r2, r3, #1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4413      	add	r3, r2
 8002f00:	7809      	ldrb	r1, [r1, #0]
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <D_LED_Set_Circle+0xd8>)
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	460a      	mov	r2, r1
 8002f0a:	709a      	strb	r2, [r3, #2]
		LED_Data[(num-1)*10 + i][3] = LED[i][2];
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	18d1      	adds	r1, r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	1e5a      	subs	r2, r3, #1
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	461a      	mov	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	4413      	add	r3, r2
 8002f2a:	7889      	ldrb	r1, [r1, #2]
 8002f2c:	4a08      	ldr	r2, [pc, #32]	; (8002f50 <D_LED_Set_Circle+0xd8>)
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	460a      	mov	r2, r1
 8002f34:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<10; i++){
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b09      	cmp	r3, #9
 8002f40:	dda2      	ble.n	8002e88 <D_LED_Set_Circle+0x10>
	}
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	20001dc4 	.word	0x20001dc4

08002f54 <D_LED_Send>:

void D_LED_Send(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int j= 0; j<LED_NUM; j++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e036      	b.n	8002fd2 <D_LED_Send+0x7e>
	{
		color = ((LED_Data[j][1]<<16) | (LED_Data[j][2]<<8) | (LED_Data[j][3]));
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <D_LED_Send+0xd8>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	041a      	lsls	r2, r3, #16
 8002f70:	492e      	ldr	r1, [pc, #184]	; (800302c <D_LED_Send+0xd8>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	789b      	ldrb	r3, [r3, #2]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	492b      	ldr	r1, [pc, #172]	; (800302c <D_LED_Send+0xd8>)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	78db      	ldrb	r3, [r3, #3]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	607b      	str	r3, [r7, #4]
		for (int i=23; i>=0; i--)
 8002f8c:	2317      	movs	r3, #23
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e019      	b.n	8002fc6 <D_LED_Send+0x72>
		{
			if (color&(1<<i))
 8002f92:	2201      	movs	r2, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <D_LED_Send+0x5c>
			{
				pwmData[indx] = 15;  // 2/3 of 25
 8002fa4:	4a22      	ldr	r2, [pc, #136]	; (8003030 <D_LED_Send+0xdc>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	210f      	movs	r1, #15
 8002faa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002fae:	e004      	b.n	8002fba <D_LED_Send+0x66>
			}
			else pwmData[indx] = 7;  // 1/3 of 25
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <D_LED_Send+0xdc>)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2107      	movs	r1, #7
 8002fb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			indx++;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	dae2      	bge.n	8002f92 <D_LED_Send+0x3e>
	for (int j= 0; j<LED_NUM; j++)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b31      	cmp	r3, #49	; 0x31
 8002fd6:	ddc5      	ble.n	8002f64 <D_LED_Send+0x10>
		}
	}

	for (int i=0; i<50; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	e00a      	b.n	8002ff4 <D_LED_Send+0xa0>
	{
		pwmData[indx] = 0;
 8002fde:	4a14      	ldr	r2, [pc, #80]	; (8003030 <D_LED_Send+0xdc>)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b31      	cmp	r3, #49	; 0x31
 8002ff8:	ddf1      	ble.n	8002fde <D_LED_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx*2);
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	b29b      	uxth	r3, r3
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <D_LED_Send+0xdc>)
 8003004:	2100      	movs	r1, #0
 8003006:	480b      	ldr	r0, [pc, #44]	; (8003034 <D_LED_Send+0xe0>)
 8003008:	f003 ffa4 	bl	8006f54 <HAL_TIM_PWM_Start_DMA>
	while (!_dataSent){};
 800300c:	bf00      	nop
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <D_LED_Send+0xe4>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f7      	bne.n	800300e <D_LED_Send+0xba>
	_dataSent = false;
 800301e:	4b06      	ldr	r3, [pc, #24]	; (8003038 <D_LED_Send+0xe4>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20001dc4 	.word	0x20001dc4
 8003030:	200001e8 	.word	0x200001e8
 8003034:	20001c90 	.word	0x20001c90
 8003038:	200001e4 	.word	0x200001e4

0800303c <D_LED_Rotate>:

void D_LED_Rotate(int num){
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	int indx = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
	for(int i=0;i<LED_NUM; i++){
 8003048:	2300      	movs	r3, #0
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	e03b      	b.n	80030c6 <D_LED_Rotate+0x8a>
		indx = i + num;
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
		if(indx >= LED_NUM){
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2b31      	cmp	r3, #49	; 0x31
 800305a:	dd02      	ble.n	8003062 <D_LED_Rotate+0x26>
			indx -= 50;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	3b32      	subs	r3, #50	; 0x32
 8003060:	617b      	str	r3, [r7, #20]
		}
		if(indx < 0){
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	da02      	bge.n	800306e <D_LED_Rotate+0x32>
			indx += 50;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3332      	adds	r3, #50	; 0x32
 800306c:	617b      	str	r3, [r7, #20]
		}
		LED_Temp[i][0] = LED_Data[indx][0];
 800306e:	4a34      	ldr	r2, [pc, #208]	; (8003140 <D_LED_Rotate+0x104>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003076:	4a33      	ldr	r2, [pc, #204]	; (8003144 <D_LED_Rotate+0x108>)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Temp[i][1] = LED_Data[indx][1];
 800307e:	4a30      	ldr	r2, [pc, #192]	; (8003140 <D_LED_Rotate+0x104>)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	7859      	ldrb	r1, [r3, #1]
 8003088:	4a2e      	ldr	r2, [pc, #184]	; (8003144 <D_LED_Rotate+0x108>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	460a      	mov	r2, r1
 8003092:	705a      	strb	r2, [r3, #1]
		LED_Temp[i][2] = LED_Data[indx][2];
 8003094:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <D_LED_Rotate+0x104>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	7899      	ldrb	r1, [r3, #2]
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <D_LED_Rotate+0x108>)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	460a      	mov	r2, r1
 80030a8:	709a      	strb	r2, [r3, #2]
		LED_Temp[i][3] = LED_Data[indx][3];
 80030aa:	4a25      	ldr	r2, [pc, #148]	; (8003140 <D_LED_Rotate+0x104>)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	78d9      	ldrb	r1, [r3, #3]
 80030b4:	4a23      	ldr	r2, [pc, #140]	; (8003144 <D_LED_Rotate+0x108>)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	460a      	mov	r2, r1
 80030be:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3301      	adds	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b31      	cmp	r3, #49	; 0x31
 80030ca:	ddc0      	ble.n	800304e <D_LED_Rotate+0x12>
	}
	for(int i=0;i<LED_NUM; i++){
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e02b      	b.n	800312a <D_LED_Rotate+0xee>
		LED_Data[i][0] = LED_Temp[i][0];
 80030d2:	4a1c      	ldr	r2, [pc, #112]	; (8003144 <D_LED_Rotate+0x108>)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80030da:	4a19      	ldr	r2, [pc, #100]	; (8003140 <D_LED_Rotate+0x104>)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = LED_Temp[i][1];
 80030e2:	4a18      	ldr	r2, [pc, #96]	; (8003144 <D_LED_Rotate+0x108>)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	7859      	ldrb	r1, [r3, #1]
 80030ec:	4a14      	ldr	r2, [pc, #80]	; (8003140 <D_LED_Rotate+0x104>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	460a      	mov	r2, r1
 80030f6:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = LED_Temp[i][2];
 80030f8:	4a12      	ldr	r2, [pc, #72]	; (8003144 <D_LED_Rotate+0x108>)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	7899      	ldrb	r1, [r3, #2]
 8003102:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <D_LED_Rotate+0x104>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	460a      	mov	r2, r1
 800310c:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = LED_Temp[i][3];
 800310e:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <D_LED_Rotate+0x108>)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	78d9      	ldrb	r1, [r3, #3]
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <D_LED_Rotate+0x104>)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	460a      	mov	r2, r1
 8003122:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3301      	adds	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b31      	cmp	r3, #49	; 0x31
 800312e:	ddd0      	ble.n	80030d2 <D_LED_Rotate+0x96>
	}
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20001dc4 	.word	0x20001dc4
 8003144:	20001e8c 	.word	0x20001e8c

08003148 <D_LED_Callback>:

void D_LED_Callback(void){
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800314c:	2100      	movs	r1, #0
 800314e:	4804      	ldr	r0, [pc, #16]	; (8003160 <D_LED_Callback+0x18>)
 8003150:	f004 f8c8 	bl	80072e4 <HAL_TIM_PWM_Stop_DMA>
    _dataSent = true;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <D_LED_Callback+0x1c>)
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20001c90 	.word	0x20001c90
 8003164:	200001e4 	.word	0x200001e4

08003168 <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 8003168:	b40f      	push	{r0, r1, r2, r3}
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	6938      	ldr	r0, [r7, #16]
 800317a:	f000 f891 	bl	80032a0 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <D_Mess_printf+0x38>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <D_Mess_printf+0x3c>)
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800318a:	dd01      	ble.n	8003190 <D_Mess_printf+0x28>
	  D_Mess_flush();
 800318c:	f000 f80c 	bl	80031a8 <D_Mess_flush>
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800319a:	b004      	add	sp, #16
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20001f5c 	.word	0x20001f5c
 80031a4:	20001570 	.word	0x20001570

080031a8 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <D_Mess_flush+0x54>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <D_Mess_flush+0x1c>
		outptr = buff;
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <D_Mess_flush+0x58>)
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <D_Mess_flush+0x5c>)
 80031c0:	601a      	str	r2, [r3, #0]
		return;
 80031c2:	e01a      	b.n	80031fa <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <D_Mess_flush+0x58>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d013      	beq.n	80031f4 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <D_Mess_flush+0x58>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	490b      	ldr	r1, [pc, #44]	; (8003200 <D_Mess_flush+0x58>)
 80031d4:	600a      	str	r2, [r1, #0]
 80031d6:	220a      	movs	r2, #10
 80031d8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <D_Mess_flush+0x58>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <D_Mess_flush+0x5c>)
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	4907      	ldr	r1, [pc, #28]	; (8003204 <D_Mess_flush+0x5c>)
 80031e8:	4807      	ldr	r0, [pc, #28]	; (8003208 <D_Mess_flush+0x60>)
 80031ea:	f004 ffe7 	bl	80081bc <HAL_UART_Transmit_DMA>
		had_completed = false;
 80031ee:	4b03      	ldr	r3, [pc, #12]	; (80031fc <D_Mess_flush+0x54>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <D_Mess_flush+0x58>)
 80031f6:	4a03      	ldr	r2, [pc, #12]	; (8003204 <D_Mess_flush+0x5c>)
 80031f8:	601a      	str	r2, [r3, #0]
}
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000030 	.word	0x20000030
 8003200:	20001f5c 	.word	0x20001f5c
 8003204:	20001570 	.word	0x20001570
 8003208:	20001d80 	.word	0x20001d80

0800320c <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  had_completed = true;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <D_Mess_TransitionCompletedCallBack+0x14>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	20000030 	.word	0x20000030

08003224 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b0a      	cmp	r3, #10
 8003232:	d102      	bne.n	800323a <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8003234:	200d      	movs	r0, #13
 8003236:	f7ff fff5 	bl	8003224 <xputc>
  }
  if( outptr ){
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <xputc+0x48>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <xputc+0x48>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4908      	ldr	r1, [pc, #32]	; (800326c <xputc+0x48>)
 800324a:	600a      	str	r2, [r1, #0]
 800324c:	79fa      	ldrb	r2, [r7, #7]
 800324e:	701a      	strb	r2, [r3, #0]
    return;
 8003250:	e008      	b.n	8003264 <xputc+0x40>
  }

  if( xfunc_out ){
 8003252:	4b07      	ldr	r3, [pc, #28]	; (8003270 <xputc+0x4c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d004      	beq.n	8003264 <xputc+0x40>
    xfunc_out((unsigned char)c);
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <xputc+0x4c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	79fa      	ldrb	r2, [r7, #7]
 8003260:	4610      	mov	r0, r2
 8003262:	4798      	blx	r3
  }
}
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20001f5c 	.word	0x20001f5c
 8003270:	20001f58 	.word	0x20001f58

08003274 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  while( *str ){
 800327c:	e006      	b.n	800328c <xputs+0x18>
    xputc(*str++);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ffcc 	bl	8003224 <xputc>
  while( *str ){
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f4      	bne.n	800327e <xputs+0xa>
  }
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08e      	sub	sp, #56	; 0x38
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8167 	beq.w	800358a <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 80032bc:	7ffb      	ldrb	r3, [r7, #31]
 80032be:	2b25      	cmp	r3, #37	; 0x25
 80032c0:	d004      	beq.n	80032cc <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 80032c2:	7ffb      	ldrb	r3, [r7, #31]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ffad 	bl	8003224 <xputc>
 80032ca:	e15d      	b.n	8003588 <xvprintf+0x2e8>
    }
    f = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 80032da:	7ffb      	ldrb	r3, [r7, #31]
 80032dc:	2b30      	cmp	r3, #48	; 0x30
 80032de:	d107      	bne.n	80032f0 <xvprintf+0x50>
      f = 1; c = *fmt++;
 80032e0:	2301      	movs	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e009      	b.n	8003304 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 80032f0:	7ffb      	ldrb	r3, [r7, #31]
 80032f2:	2b2d      	cmp	r3, #45	; 0x2d
 80032f4:	d106      	bne.n	8003304 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 80032f6:	2302      	movs	r3, #2
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8003304:	2300      	movs	r3, #0
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
 8003308:	e00e      	b.n	8003328 <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 800330a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	461a      	mov	r2, r3
 8003316:	7ffb      	ldrb	r3, [r7, #31]
 8003318:	4413      	add	r3, r2
 800331a:	3b30      	subs	r3, #48	; 0x30
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	77fb      	strb	r3, [r7, #31]
 8003328:	7ffb      	ldrb	r3, [r7, #31]
 800332a:	2b2f      	cmp	r3, #47	; 0x2f
 800332c:	d902      	bls.n	8003334 <xvprintf+0x94>
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	2b39      	cmp	r3, #57	; 0x39
 8003332:	d9ea      	bls.n	800330a <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8003334:	7ffb      	ldrb	r3, [r7, #31]
 8003336:	2b6c      	cmp	r3, #108	; 0x6c
 8003338:	d002      	beq.n	8003340 <xvprintf+0xa0>
 800333a:	7ffb      	ldrb	r3, [r7, #31]
 800333c:	2b4c      	cmp	r3, #76	; 0x4c
 800333e:	d108      	bne.n	8003352 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 8003352:	7ffb      	ldrb	r3, [r7, #31]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 811a 	beq.w	800358e <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 800335a:	7ffb      	ldrb	r3, [r7, #31]
 800335c:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 800335e:	7fbb      	ldrb	r3, [r7, #30]
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d902      	bls.n	800336a <xvprintf+0xca>
      d -= 0x20;
 8003364:	7fbb      	ldrb	r3, [r7, #30]
 8003366:	3b20      	subs	r3, #32
 8003368:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 800336a:	7fbb      	ldrb	r3, [r7, #30]
 800336c:	3b42      	subs	r3, #66	; 0x42
 800336e:	2b16      	cmp	r3, #22
 8003370:	d873      	bhi.n	800345a <xvprintf+0x1ba>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <xvprintf+0xd8>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	08003443 	.word	0x08003443
 800337c:	08003431 	.word	0x08003431
 8003380:	0800344f 	.word	0x0800344f
 8003384:	0800345b 	.word	0x0800345b
 8003388:	0800345b 	.word	0x0800345b
 800338c:	0800345b 	.word	0x0800345b
 8003390:	0800345b 	.word	0x0800345b
 8003394:	0800345b 	.word	0x0800345b
 8003398:	0800345b 	.word	0x0800345b
 800339c:	0800345b 	.word	0x0800345b
 80033a0:	0800345b 	.word	0x0800345b
 80033a4:	0800345b 	.word	0x0800345b
 80033a8:	0800345b 	.word	0x0800345b
 80033ac:	08003449 	.word	0x08003449
 80033b0:	0800345b 	.word	0x0800345b
 80033b4:	0800345b 	.word	0x0800345b
 80033b8:	0800345b 	.word	0x0800345b
 80033bc:	080033d5 	.word	0x080033d5
 80033c0:	0800345b 	.word	0x0800345b
 80033c4:	0800344f 	.word	0x0800344f
 80033c8:	0800345b 	.word	0x0800345b
 80033cc:	0800345b 	.word	0x0800345b
 80033d0:	08003455 	.word	0x08003455
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	1d1a      	adds	r2, r3, #4
 80033d8:	603a      	str	r2, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 80033de:	2300      	movs	r3, #0
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e2:	e002      	b.n	80033ea <xvprintf+0x14a>
 80033e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e6:	3301      	adds	r3, #1
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f6      	bne.n	80033e4 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 80033f6:	e002      	b.n	80033fe <xvprintf+0x15e>
        xputc(' ');
 80033f8:	2020      	movs	r0, #32
 80033fa:	f7ff ff13 	bl	8003224 <xputc>
      while( !( f & 2 ) && j++ < w ){
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <xvprintf+0x174>
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800340e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003410:	429a      	cmp	r2, r3
 8003412:	d8f1      	bhi.n	80033f8 <xvprintf+0x158>
      }
      xputs(p);
 8003414:	69b8      	ldr	r0, [r7, #24]
 8003416:	f7ff ff2d 	bl	8003274 <xputs>
      while( j++ < w ){
 800341a:	e002      	b.n	8003422 <xvprintf+0x182>
        xputc(' ');
 800341c:	2020      	movs	r0, #32
 800341e:	f7ff ff01 	bl	8003224 <xputc>
      while( j++ < w ){
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342a:	429a      	cmp	r2, r3
 800342c:	d8f6      	bhi.n	800341c <xvprintf+0x17c>
      }
      continue;
 800342e:	e0ab      	b.n	8003588 <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	1d1a      	adds	r2, r3, #4
 8003434:	603a      	str	r2, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fef2 	bl	8003224 <xputc>
 8003440:	e0a2      	b.n	8003588 <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 8003442:	2302      	movs	r3, #2
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
 8003446:	e00d      	b.n	8003464 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 8003448:	2308      	movs	r3, #8
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
 800344c:	e00a      	b.n	8003464 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 800344e:	230a      	movs	r3, #10
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
 8003452:	e007      	b.n	8003464 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 8003454:	2310      	movs	r3, #16
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
 8003458:	e004      	b.n	8003464 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 800345a:	7ffb      	ldrb	r3, [r7, #31]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fee1 	bl	8003224 <xputc>
 8003462:	e091      	b.n	8003588 <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <xvprintf+0x1d8>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	1d1a      	adds	r2, r3, #4
 8003472:	603a      	str	r2, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e00b      	b.n	8003490 <xvprintf+0x1f0>
 8003478:	7fbb      	ldrb	r3, [r7, #30]
 800347a:	2b44      	cmp	r3, #68	; 0x44
 800347c:	d104      	bne.n	8003488 <xvprintf+0x1e8>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	1d1a      	adds	r2, r3, #4
 8003482:	603a      	str	r2, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	e003      	b.n	8003490 <xvprintf+0x1f0>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	603a      	str	r2, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8003492:	7fbb      	ldrb	r3, [r7, #30]
 8003494:	2b44      	cmp	r3, #68	; 0x44
 8003496:	d109      	bne.n	80034ac <xvprintf+0x20c>
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da06      	bge.n	80034ac <xvprintf+0x20c>
      v = 0 - v;
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	425b      	negs	r3, r3
 80034a2:	623b      	str	r3, [r7, #32]
      f |= 8;
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	f043 0308 	orr.w	r3, r3, #8
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80034b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034ba:	fb01 f202 	mul.w	r2, r1, r2
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	77bb      	strb	r3, [r7, #30]
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 80034cc:	7fbb      	ldrb	r3, [r7, #30]
 80034ce:	2b09      	cmp	r3, #9
 80034d0:	d908      	bls.n	80034e4 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 80034d2:	7ffb      	ldrb	r3, [r7, #31]
 80034d4:	2b78      	cmp	r3, #120	; 0x78
 80034d6:	d101      	bne.n	80034dc <xvprintf+0x23c>
 80034d8:	2227      	movs	r2, #39	; 0x27
 80034da:	e000      	b.n	80034de <xvprintf+0x23e>
 80034dc:	2207      	movs	r2, #7
 80034de:	7fbb      	ldrb	r3, [r7, #30]
 80034e0:	4413      	add	r3, r2
 80034e2:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	633a      	str	r2, [r7, #48]	; 0x30
 80034ea:	7fba      	ldrb	r2, [r7, #30]
 80034ec:	3230      	adds	r2, #48	; 0x30
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80034f4:	440b      	add	r3, r1
 80034f6:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <xvprintf+0x266>
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	2b0f      	cmp	r3, #15
 8003504:	d9d4      	bls.n	80034b0 <xvprintf+0x210>
    if( f & 8 ){
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <xvprintf+0x282>
      s[i++] = '-';
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	633a      	str	r2, [r7, #48]	; 0x30
 8003516:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800351a:	4413      	add	r3, r2
 800351c:	222d      	movs	r2, #45	; 0x2d
 800351e:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <xvprintf+0x294>
 8003530:	2330      	movs	r3, #48	; 0x30
 8003532:	e000      	b.n	8003536 <xvprintf+0x296>
 8003534:	2320      	movs	r3, #32
 8003536:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8003538:	e003      	b.n	8003542 <xvprintf+0x2a2>
      xputc(d);
 800353a:	7fbb      	ldrb	r3, [r7, #30]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fe71 	bl	8003224 <xputc>
    while( !( f & 2 ) && j++ < w ){
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <xvprintf+0x2b8>
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003554:	429a      	cmp	r2, r3
 8003556:	d8f0      	bhi.n	800353a <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	3b01      	subs	r3, #1
 800355c:	633b      	str	r3, [r7, #48]	; 0x30
 800355e:	f107 0208 	add.w	r2, r7, #8
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	4413      	add	r3, r2
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fe5b 	bl	8003224 <xputc>
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1f1      	bne.n	8003558 <xvprintf+0x2b8>
    while( j++ < w ){
 8003574:	e002      	b.n	800357c <xvprintf+0x2dc>
      xputc(' ');
 8003576:	2020      	movs	r0, #32
 8003578:	f7ff fe54 	bl	8003224 <xputc>
    while( j++ < w ){
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003584:	429a      	cmp	r2, r3
 8003586:	d8f6      	bhi.n	8003576 <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8003588:	e68f      	b.n	80032aa <xvprintf+0xa>
      break;                                            /* End of format? */
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 800358e:	bf00      	nop
    }
  }
} /* xvprintf */
 8003590:	bf00      	nop
 8003592:	3738      	adds	r7, #56	; 0x38
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800359c:	2100      	movs	r1, #0
 800359e:	4810      	ldr	r0, [pc, #64]	; (80035e0 <D_PWM_Init+0x48>)
 80035a0:	f003 fc10 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80035a4:	2104      	movs	r1, #4
 80035a6:	480e      	ldr	r0, [pc, #56]	; (80035e0 <D_PWM_Init+0x48>)
 80035a8:	f003 fc0c 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80035ac:	2108      	movs	r1, #8
 80035ae:	480c      	ldr	r0, [pc, #48]	; (80035e0 <D_PWM_Init+0x48>)
 80035b0:	f003 fc08 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80035b4:	210c      	movs	r1, #12
 80035b6:	480a      	ldr	r0, [pc, #40]	; (80035e0 <D_PWM_Init+0x48>)
 80035b8:	f003 fc04 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80035bc:	2100      	movs	r1, #0
 80035be:	4809      	ldr	r0, [pc, #36]	; (80035e4 <D_PWM_Init+0x4c>)
 80035c0:	f003 fc00 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80035c4:	2104      	movs	r1, #4
 80035c6:	4807      	ldr	r0, [pc, #28]	; (80035e4 <D_PWM_Init+0x4c>)
 80035c8:	f003 fbfc 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80035cc:	2108      	movs	r1, #8
 80035ce:	4805      	ldr	r0, [pc, #20]	; (80035e4 <D_PWM_Init+0x4c>)
 80035d0:	f003 fbf8 	bl	8006dc4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80035d4:	210c      	movs	r1, #12
 80035d6:	4803      	ldr	r0, [pc, #12]	; (80035e4 <D_PWM_Init+0x4c>)
 80035d8:	f003 fbf4 	bl	8006dc4 <HAL_TIM_PWM_Start>
}
 80035dc:	bf00      	nop
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20001d38 	.word	0x20001d38
 80035e4:	20001ae4 	.word	0x20001ae4

080035e8 <D_PWM_Set>:

void D_PWM_Set(int timer, int channel, int value){
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
	if(value > 5000) value = 5000;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	dd02      	ble.n	8003604 <D_PWM_Set+0x1c>
 80035fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003602:	607b      	str	r3, [r7, #4]
	if(value < 0)	value = 0;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	da01      	bge.n	800360e <D_PWM_Set+0x26>
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
	if(timer == 2){
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d123      	bne.n	800365c <D_PWM_Set+0x74>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3b01      	subs	r3, #1
 8003618:	2b03      	cmp	r3, #3
 800361a:	d846      	bhi.n	80036aa <D_PWM_Set+0xc2>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <D_PWM_Set+0x3c>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003635 	.word	0x08003635
 8003628:	0800363f 	.word	0x0800363f
 800362c:	08003649 	.word	0x08003649
 8003630:	08003653 	.word	0x08003653
		switch(channel){
		case 1:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <D_PWM_Set+0xd0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800363c:	e035      	b.n	80036aa <D_PWM_Set+0xc2>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, value);
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <D_PWM_Set+0xd0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003646:	e030      	b.n	80036aa <D_PWM_Set+0xc2>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, value);
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <D_PWM_Set+0xd0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003650:	e02b      	b.n	80036aa <D_PWM_Set+0xc2>
		case 4:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, value);
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <D_PWM_Set+0xd0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800365a:	e026      	b.n	80036aa <D_PWM_Set+0xc2>
		}
	}else if(timer == 3){
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d122      	bne.n	80036a8 <D_PWM_Set+0xc0>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3b01      	subs	r3, #1
 8003666:	2b03      	cmp	r3, #3
 8003668:	d81f      	bhi.n	80036aa <D_PWM_Set+0xc2>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <D_PWM_Set+0x88>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003681 	.word	0x08003681
 8003674:	0800368b 	.word	0x0800368b
 8003678:	08003695 	.word	0x08003695
 800367c:	0800369f 	.word	0x0800369f
		switch(channel){
		case 1:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8003680:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <D_PWM_Set+0xd4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8003688:	e00f      	b.n	80036aa <D_PWM_Set+0xc2>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <D_PWM_Set+0xd4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8003692:	e00a      	b.n	80036aa <D_PWM_Set+0xc2>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <D_PWM_Set+0xd4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800369c:	e005      	b.n	80036aa <D_PWM_Set+0xc2>
		case 4:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, value);
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <D_PWM_Set+0xd4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80036a6:	e000      	b.n	80036aa <D_PWM_Set+0xc2>
		}
	}
 80036a8:	bf00      	nop
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20001d38 	.word	0x20001d38
 80036bc:	20001ae4 	.word	0x20001ae4

080036c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <HAL_Init+0x40>)
 80036ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d0:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <HAL_Init+0x40>)
 80036d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_Init+0x40>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_Init+0x40>)
 80036e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f000 f92b 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ee:	2000      	movs	r0, #0
 80036f0:	f000 f808 	bl	8003704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f4:	f7fe ff12 	bl	800251c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023c00 	.word	0x40023c00

08003704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800370c:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_InitTick+0x54>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_InitTick+0x58>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4619      	mov	r1, r3
 8003716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371a:	fbb3 f3f1 	udiv	r3, r3, r1
 800371e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f943 	bl	80039ae <HAL_SYSTICK_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e00e      	b.n	8003750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b0f      	cmp	r3, #15
 8003736:	d80a      	bhi.n	800374e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003738:	2200      	movs	r2, #0
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003740:	f000 f90b 	bl	800395a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <HAL_InitTick+0x5c>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000002c 	.word	0x2000002c
 800375c:	20000038 	.word	0x20000038
 8003760:	20000034 	.word	0x20000034

08003764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_IncTick+0x20>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x24>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4413      	add	r3, r2
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_IncTick+0x24>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000038 	.word	0x20000038
 8003788:	20001f60 	.word	0x20001f60

0800378c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTick+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20001f60 	.word	0x20001f60

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff3e 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff8e 	bl	8003898 <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff31 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff feda 	bl	800378c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e099      	b.n	8003b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a04:	e00f      	b.n	8003a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a06:	f7ff fec1 	bl	800378c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d908      	bls.n	8003a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e078      	b.n	8003b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e8      	bne.n	8003a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <HAL_DMA_Init+0x158>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d107      	bne.n	8003a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0307 	bic.w	r3, r3, #7
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d117      	bne.n	8003aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00e      	beq.n	8003aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fb0f 	bl	80040f0 <DMA_CheckFifoParam>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e016      	b.n	8003b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fac6 	bl	8004084 <DMA_CalcBaseAndBitshift>
 8003af8:	4603      	mov	r3, r0
 8003afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	223f      	movs	r2, #63	; 0x3f
 8003b02:	409a      	lsls	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	f010803f 	.word	0xf010803f

08003b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_DMA_Start_IT+0x26>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e040      	b.n	8003bcc <HAL_DMA_Start_IT+0xa8>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d12f      	bne.n	8003bbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 fa58 	bl	8004028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7c:	223f      	movs	r2, #63	; 0x3f
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0216 	orr.w	r2, r2, #22
 8003b92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d007      	beq.n	8003bac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0208 	orr.w	r2, r2, #8
 8003baa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e005      	b.n	8003bca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003be2:	f7ff fdd3 	bl	800378c <HAL_GetTick>
 8003be6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d008      	beq.n	8003c06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e052      	b.n	8003cac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0216 	bic.w	r2, r2, #22
 8003c14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <HAL_DMA_Abort+0x62>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0208 	bic.w	r2, r2, #8
 8003c44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c56:	e013      	b.n	8003c80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c58:	f7ff fd98 	bl	800378c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d90c      	bls.n	8003c80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e015      	b.n	8003cac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e4      	bne.n	8003c58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	223f      	movs	r2, #63	; 0x3f
 8003c94:	409a      	lsls	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2280      	movs	r2, #128	; 0x80
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00c      	b.n	8003cec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2205      	movs	r2, #5
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d04:	4b92      	ldr	r3, [pc, #584]	; (8003f50 <HAL_DMA_IRQHandler+0x258>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a92      	ldr	r2, [pc, #584]	; (8003f54 <HAL_DMA_IRQHandler+0x25c>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0a9b      	lsrs	r3, r3, #10
 8003d10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d22:	2208      	movs	r2, #8
 8003d24:	409a      	lsls	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01a      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	2208      	movs	r2, #8
 8003d52:	409a      	lsls	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5c:	f043 0201 	orr.w	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d012      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d86:	2201      	movs	r2, #1
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	2204      	movs	r2, #4
 8003da0:	409a      	lsls	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d012      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00b      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d043      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d03c      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2210      	movs	r2, #16
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d024      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
 8003e26:	e01f      	b.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01b      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
 8003e38:	e016      	b.n	8003e68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0208 	bic.w	r2, r2, #8
 8003e56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 808e 	beq.w	8003f96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8086 	beq.w	8003f96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	2220      	movs	r2, #32
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d136      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0216 	bic.w	r2, r2, #22
 8003eb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0x1da>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	223f      	movs	r2, #63	; 0x3f
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d07d      	beq.n	8004002 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
        }
        return;
 8003f0e:	e078      	b.n	8004002 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01c      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d108      	bne.n	8003f3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d030      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
 8003f3c:	e02b      	b.n	8003f96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d027      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
 8003f4e:	e022      	b.n	8003f96 <HAL_DMA_IRQHandler+0x29e>
 8003f50:	2000002c 	.word	0x2000002c
 8003f54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10f      	bne.n	8003f86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0210 	bic.w	r2, r2, #16
 8003f74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d032      	beq.n	8004004 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d022      	beq.n	8003ff0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2205      	movs	r2, #5
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0201 	bic.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d307      	bcc.n	8003fde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1f2      	bne.n	8003fc2 <HAL_DMA_IRQHandler+0x2ca>
 8003fdc:	e000      	b.n	8003fe0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fde:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
 8004000:	e000      	b.n	8004004 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004002:	bf00      	nop
    }
  }
}
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop

0800400c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800401a:	b2db      	uxtb	r3, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d108      	bne.n	8004068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004066:	e007      	b.n	8004078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3b10      	subs	r3, #16
 8004094:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409e:	4a13      	ldr	r2, [pc, #76]	; (80040ec <DMA_CalcBaseAndBitshift+0x68>)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d909      	bls.n	80040c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	; 0x58
 80040c4:	e007      	b.n	80040d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	aaaaaaab 	.word	0xaaaaaaab
 80040ec:	08009128 	.word	0x08009128

080040f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11f      	bne.n	800414a <DMA_CheckFifoParam+0x5a>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d856      	bhi.n	80041be <DMA_CheckFifoParam+0xce>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <DMA_CheckFifoParam+0x28>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004129 	.word	0x08004129
 800411c:	0800413b 	.word	0x0800413b
 8004120:	08004129 	.word	0x08004129
 8004124:	080041bf 	.word	0x080041bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d046      	beq.n	80041c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004138:	e043      	b.n	80041c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004142:	d140      	bne.n	80041c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004148:	e03d      	b.n	80041c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	d121      	bne.n	8004198 <DMA_CheckFifoParam+0xa8>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d837      	bhi.n	80041ca <DMA_CheckFifoParam+0xda>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <DMA_CheckFifoParam+0x70>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	08004177 	.word	0x08004177
 8004168:	08004171 	.word	0x08004171
 800416c:	08004189 	.word	0x08004189
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e030      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d025      	beq.n	80041ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e022      	b.n	80041ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004190:	d11f      	bne.n	80041d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004196:	e01c      	b.n	80041d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d903      	bls.n	80041a6 <DMA_CheckFifoParam+0xb6>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d003      	beq.n	80041ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a4:	e018      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      break;
 80041aa:	e015      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e00b      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041be:	bf00      	nop
 80041c0:	e00a      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e008      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e006      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e004      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
    }
  } 
  
  return status; 
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e165      	b.n	80044d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004204:	2201      	movs	r2, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	f040 8154 	bne.w	80044ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d005      	beq.n	800423a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004236:	2b02      	cmp	r3, #2
 8004238:	d130      	bne.n	800429c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 0201 	and.w	r2, r3, #1
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d017      	beq.n	80042d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d123      	bne.n	800432c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	08da      	lsrs	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3208      	adds	r2, #8
 80042ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	220f      	movs	r2, #15
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	08da      	lsrs	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3208      	adds	r2, #8
 8004326:	69b9      	ldr	r1, [r7, #24]
 8004328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2203      	movs	r2, #3
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80ae 	beq.w	80044ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b5d      	ldr	r3, [pc, #372]	; (80044e8 <HAL_GPIO_Init+0x300>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	4a5c      	ldr	r2, [pc, #368]	; (80044e8 <HAL_GPIO_Init+0x300>)
 8004378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800437c:	6453      	str	r3, [r2, #68]	; 0x44
 800437e:	4b5a      	ldr	r3, [pc, #360]	; (80044e8 <HAL_GPIO_Init+0x300>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438a:	4a58      	ldr	r2, [pc, #352]	; (80044ec <HAL_GPIO_Init+0x304>)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a4f      	ldr	r2, [pc, #316]	; (80044f0 <HAL_GPIO_Init+0x308>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d025      	beq.n	8004402 <HAL_GPIO_Init+0x21a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a4e      	ldr	r2, [pc, #312]	; (80044f4 <HAL_GPIO_Init+0x30c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01f      	beq.n	80043fe <HAL_GPIO_Init+0x216>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a4d      	ldr	r2, [pc, #308]	; (80044f8 <HAL_GPIO_Init+0x310>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d019      	beq.n	80043fa <HAL_GPIO_Init+0x212>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a4c      	ldr	r2, [pc, #304]	; (80044fc <HAL_GPIO_Init+0x314>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <HAL_GPIO_Init+0x20e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <HAL_GPIO_Init+0x318>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00d      	beq.n	80043f2 <HAL_GPIO_Init+0x20a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a4a      	ldr	r2, [pc, #296]	; (8004504 <HAL_GPIO_Init+0x31c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <HAL_GPIO_Init+0x206>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a49      	ldr	r2, [pc, #292]	; (8004508 <HAL_GPIO_Init+0x320>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_GPIO_Init+0x202>
 80043e6:	2306      	movs	r3, #6
 80043e8:	e00c      	b.n	8004404 <HAL_GPIO_Init+0x21c>
 80043ea:	2307      	movs	r3, #7
 80043ec:	e00a      	b.n	8004404 <HAL_GPIO_Init+0x21c>
 80043ee:	2305      	movs	r3, #5
 80043f0:	e008      	b.n	8004404 <HAL_GPIO_Init+0x21c>
 80043f2:	2304      	movs	r3, #4
 80043f4:	e006      	b.n	8004404 <HAL_GPIO_Init+0x21c>
 80043f6:	2303      	movs	r3, #3
 80043f8:	e004      	b.n	8004404 <HAL_GPIO_Init+0x21c>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e002      	b.n	8004404 <HAL_GPIO_Init+0x21c>
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_GPIO_Init+0x21c>
 8004402:	2300      	movs	r3, #0
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	f002 0203 	and.w	r2, r2, #3
 800440a:	0092      	lsls	r2, r2, #2
 800440c:	4093      	lsls	r3, r2
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004414:	4935      	ldr	r1, [pc, #212]	; (80044ec <HAL_GPIO_Init+0x304>)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	089b      	lsrs	r3, r3, #2
 800441a:	3302      	adds	r3, #2
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004422:	4b3a      	ldr	r3, [pc, #232]	; (800450c <HAL_GPIO_Init+0x324>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004446:	4a31      	ldr	r2, [pc, #196]	; (800450c <HAL_GPIO_Init+0x324>)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800444c:	4b2f      	ldr	r3, [pc, #188]	; (800450c <HAL_GPIO_Init+0x324>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <HAL_GPIO_Init+0x324>)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004476:	4b25      	ldr	r3, [pc, #148]	; (800450c <HAL_GPIO_Init+0x324>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_GPIO_Init+0x324>)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044a0:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_GPIO_Init+0x324>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	43db      	mvns	r3, r3
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4013      	ands	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044c4:	4a11      	ldr	r2, [pc, #68]	; (800450c <HAL_GPIO_Init+0x324>)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	3301      	adds	r3, #1
 80044ce:	61fb      	str	r3, [r7, #28]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b0f      	cmp	r3, #15
 80044d4:	f67f ae96 	bls.w	8004204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3724      	adds	r7, #36	; 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40013800 	.word	0x40013800
 80044f0:	40020000 	.word	0x40020000
 80044f4:	40020400 	.word	0x40020400
 80044f8:	40020800 	.word	0x40020800
 80044fc:	40020c00 	.word	0x40020c00
 8004500:	40021000 	.word	0x40021000
 8004504:	40021400 	.word	0x40021400
 8004508:	40021800 	.word	0x40021800
 800450c:	40013c00 	.word	0x40013c00

08004510 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
 800452c:	e001      	b.n	8004532 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004532:	7bfb      	ldrb	r3, [r7, #15]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	460b      	mov	r3, r1
 800454a:	807b      	strh	r3, [r7, #2]
 800454c:	4613      	mov	r3, r2
 800454e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004550:	787b      	ldrb	r3, [r7, #1]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800455c:	e003      	b.n	8004566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800455e:	887b      	ldrh	r3, [r7, #2]
 8004560:	041a      	lsls	r2, r3, #16
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	619a      	str	r2, [r3, #24]
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e12b      	b.n	80047de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd ffe6 	bl	800256c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045d8:	f001 fed4 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 80045dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	4a81      	ldr	r2, [pc, #516]	; (80047e8 <HAL_I2C_Init+0x274>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d807      	bhi.n	80045f8 <HAL_I2C_Init+0x84>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a80      	ldr	r2, [pc, #512]	; (80047ec <HAL_I2C_Init+0x278>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	bf94      	ite	ls
 80045f0:	2301      	movls	r3, #1
 80045f2:	2300      	movhi	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e006      	b.n	8004606 <HAL_I2C_Init+0x92>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a7d      	ldr	r2, [pc, #500]	; (80047f0 <HAL_I2C_Init+0x27c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bf94      	ite	ls
 8004600:	2301      	movls	r3, #1
 8004602:	2300      	movhi	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0e7      	b.n	80047de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4a78      	ldr	r2, [pc, #480]	; (80047f4 <HAL_I2C_Init+0x280>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0c9b      	lsrs	r3, r3, #18
 8004618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a6a      	ldr	r2, [pc, #424]	; (80047e8 <HAL_I2C_Init+0x274>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d802      	bhi.n	8004648 <HAL_I2C_Init+0xd4>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3301      	adds	r3, #1
 8004646:	e009      	b.n	800465c <HAL_I2C_Init+0xe8>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	4a69      	ldr	r2, [pc, #420]	; (80047f8 <HAL_I2C_Init+0x284>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	3301      	adds	r3, #1
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	430b      	orrs	r3, r1
 8004662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800466e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	495c      	ldr	r1, [pc, #368]	; (80047e8 <HAL_I2C_Init+0x274>)
 8004678:	428b      	cmp	r3, r1
 800467a:	d819      	bhi.n	80046b0 <HAL_I2C_Init+0x13c>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1e59      	subs	r1, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	fbb1 f3f3 	udiv	r3, r1, r3
 800468a:	1c59      	adds	r1, r3, #1
 800468c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004690:	400b      	ands	r3, r1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_I2C_Init+0x138>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1e59      	subs	r1, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046aa:	e051      	b.n	8004750 <HAL_I2C_Init+0x1dc>
 80046ac:	2304      	movs	r3, #4
 80046ae:	e04f      	b.n	8004750 <HAL_I2C_Init+0x1dc>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d111      	bne.n	80046dc <HAL_I2C_Init+0x168>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1e58      	subs	r0, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6859      	ldr	r1, [r3, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	440b      	add	r3, r1
 80046c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e012      	b.n	8004702 <HAL_I2C_Init+0x18e>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1e58      	subs	r0, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	0099      	lsls	r1, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_I2C_Init+0x196>
 8004706:	2301      	movs	r3, #1
 8004708:	e022      	b.n	8004750 <HAL_I2C_Init+0x1dc>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10e      	bne.n	8004730 <HAL_I2C_Init+0x1bc>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1e58      	subs	r0, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	460b      	mov	r3, r1
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	440b      	add	r3, r1
 8004720:	fbb0 f3f3 	udiv	r3, r0, r3
 8004724:	3301      	adds	r3, #1
 8004726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	e00f      	b.n	8004750 <HAL_I2C_Init+0x1dc>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e58      	subs	r0, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	0099      	lsls	r1, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	fbb0 f3f3 	udiv	r3, r0, r3
 8004746:	3301      	adds	r3, #1
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	6809      	ldr	r1, [r1, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69da      	ldr	r2, [r3, #28]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800477e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6911      	ldr	r1, [r2, #16]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68d2      	ldr	r2, [r2, #12]
 800478a:	4311      	orrs	r1, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	430b      	orrs	r3, r1
 8004792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	000186a0 	.word	0x000186a0
 80047ec:	001e847f 	.word	0x001e847f
 80047f0:	003d08ff 	.word	0x003d08ff
 80047f4:	431bde83 	.word	0x431bde83
 80047f8:	10624dd3 	.word	0x10624dd3

080047fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800481c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	2b10      	cmp	r3, #16
 800482a:	d003      	beq.n	8004834 <HAL_I2C_EV_IRQHandler+0x38>
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	f040 80c1 	bne.w	80049b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x6e>
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004854:	d003      	beq.n	800485e <HAL_I2C_EV_IRQHandler+0x62>
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800485c:	d101      	bne.n	8004862 <HAL_I2C_EV_IRQHandler+0x66>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_I2C_EV_IRQHandler+0x68>
 8004862:	2300      	movs	r3, #0
 8004864:	2b01      	cmp	r3, #1
 8004866:	f000 8132 	beq.w	8004ace <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0x92>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	0a5b      	lsrs	r3, r3, #9
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d006      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f001 fc71 	bl	8006168 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fd79 	bl	800537e <I2C_Master_SB>
 800488c:	e092      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	08db      	lsrs	r3, r3, #3
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0xb2>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	0a5b      	lsrs	r3, r3, #9
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fdef 	bl	800548a <I2C_Master_ADD10>
 80048ac:	e082      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_I2C_EV_IRQHandler+0xd2>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0a5b      	lsrs	r3, r3, #9
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fe09 	bl	80054de <I2C_Master_ADDR>
 80048cc:	e072      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d03b      	beq.n	8004952 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e8:	f000 80f3 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	09db      	lsrs	r3, r3, #7
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00f      	beq.n	8004918 <HAL_I2C_EV_IRQHandler+0x11c>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	0a9b      	lsrs	r3, r3, #10
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <HAL_I2C_EV_IRQHandler+0x11c>
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	089b      	lsrs	r3, r3, #2
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f9f3 	bl	8004cfc <I2C_MasterTransmit_TXE>
 8004916:	e04d      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 80d6 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	0a5b      	lsrs	r3, r3, #9
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80cf 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004934:	7bbb      	ldrb	r3, [r7, #14]
 8004936:	2b21      	cmp	r3, #33	; 0x21
 8004938:	d103      	bne.n	8004942 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa7a 	bl	8004e34 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004940:	e0c7      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	f040 80c4 	bne.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fae8 	bl	8004f20 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004950:	e0bf      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004960:	f000 80b7 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00f      	beq.n	8004990 <HAL_I2C_EV_IRQHandler+0x194>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_I2C_EV_IRQHandler+0x194>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb5d 	bl	8005048 <I2C_MasterReceive_RXNE>
 800498e:	e011      	b.n	80049b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 809a 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	0a5b      	lsrs	r3, r3, #9
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8093 	beq.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fbfc 	bl	80051aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b2:	e08e      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049b4:	e08d      	b.n	8004ad2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d004      	beq.n	80049c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	e007      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d012      	beq.n	8004a0a <HAL_I2C_EV_IRQHandler+0x20e>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	0a5b      	lsrs	r3, r3, #9
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00c      	beq.n	8004a0a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 ffba 	bl	800597c <I2C_Slave_ADDR>
 8004a08:	e066      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <HAL_I2C_EV_IRQHandler+0x22e>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	0a5b      	lsrs	r3, r3, #9
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fff4 	bl	8005a10 <I2C_Slave_STOPF>
 8004a28:	e056      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	2b21      	cmp	r3, #33	; 0x21
 8004a2e:	d002      	beq.n	8004a36 <HAL_I2C_EV_IRQHandler+0x23a>
 8004a30:	7bbb      	ldrb	r3, [r7, #14]
 8004a32:	2b29      	cmp	r3, #41	; 0x29
 8004a34:	d125      	bne.n	8004a82 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00f      	beq.n	8004a62 <HAL_I2C_EV_IRQHandler+0x266>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	0a9b      	lsrs	r3, r3, #10
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_I2C_EV_IRQHandler+0x266>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fed0 	bl	8005800 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a60:	e039      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d033      	beq.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2da>
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	0a5b      	lsrs	r3, r3, #9
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02d      	beq.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fefd 	bl	800587a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a80:	e029      	b.n	8004ad6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00f      	beq.n	8004aae <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	0a9b      	lsrs	r3, r3, #10
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	089b      	lsrs	r3, r3, #2
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 ff08 	bl	80058bc <I2C_SlaveReceive_RXNE>
 8004aac:	e014      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00e      	beq.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	0a5b      	lsrs	r3, r3, #9
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 ff36 	bl	8005938 <I2C_SlaveReceive_BTF>
 8004acc:	e004      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004ace:	bf00      	nop
 8004ad0:	e002      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ad2:	bf00      	nop
 8004ad4:	e000      	b.n	8004ad8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ad6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b08a      	sub	sp, #40	; 0x28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b00:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	0a1b      	lsrs	r3, r3, #8
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00e      	beq.n	8004b2c <HAL_I2C_ER_IRQHandler+0x4e>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b2a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	0a5b      	lsrs	r3, r3, #9
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00e      	beq.n	8004b56 <HAL_I2C_ER_IRQHandler+0x78>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	f043 0302 	orr.w	r3, r3, #2
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004b54:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	0a9b      	lsrs	r3, r3, #10
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d03f      	beq.n	8004be2 <HAL_I2C_ER_IRQHandler+0x104>
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d039      	beq.n	8004be2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004b6e:	7efb      	ldrb	r3, [r7, #27]
 8004b70:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b80:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b88:	7ebb      	ldrb	r3, [r7, #26]
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d112      	bne.n	8004bb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10f      	bne.n	8004bb4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	2b21      	cmp	r3, #33	; 0x21
 8004b98:	d008      	beq.n	8004bac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	2b29      	cmp	r3, #41	; 0x29
 8004b9e:	d005      	beq.n	8004bac <HAL_I2C_ER_IRQHandler+0xce>
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	2b28      	cmp	r3, #40	; 0x28
 8004ba4:	d106      	bne.n	8004bb4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b21      	cmp	r3, #33	; 0x21
 8004baa:	d103      	bne.n	8004bb4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f001 f85f 	bl	8005c70 <I2C_Slave_AF>
 8004bb2:	e016      	b.n	8004be2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bbc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	f043 0304 	orr.w	r3, r3, #4
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004bc6:	7efb      	ldrb	r3, [r7, #27]
 8004bc8:	2b10      	cmp	r3, #16
 8004bca:	d002      	beq.n	8004bd2 <HAL_I2C_ER_IRQHandler+0xf4>
 8004bcc:	7efb      	ldrb	r3, [r7, #27]
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d107      	bne.n	8004be2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	0adb      	lsrs	r3, r3, #11
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <HAL_I2C_ER_IRQHandler+0x12e>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	0a1b      	lsrs	r3, r3, #8
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f043 0308 	orr.w	r3, r3, #8
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004c0a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 f896 	bl	8005d50 <I2C_ITError>
  }
}
 8004c24:	bf00      	nop
 8004c26:	3728      	adds	r7, #40	; 0x28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d150      	bne.n	8004dc4 <I2C_MasterTransmit_TXE+0xc8>
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b21      	cmp	r3, #33	; 0x21
 8004d26:	d14d      	bne.n	8004dc4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d01d      	beq.n	8004d6a <I2C_MasterTransmit_TXE+0x6e>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d01a      	beq.n	8004d6a <I2C_MasterTransmit_TXE+0x6e>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d3a:	d016      	beq.n	8004d6a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2211      	movs	r2, #17
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ff62 	bl	8004c2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d68:	e060      	b.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d78:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d88:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d107      	bne.n	8004db4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff7d 	bl	8004cac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004db2:	e03b      	b.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff35 	bl	8004c2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dc2:	e033      	b.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	2b21      	cmp	r3, #33	; 0x21
 8004dc8:	d005      	beq.n	8004dd6 <I2C_MasterTransmit_TXE+0xda>
 8004dca:	7bbb      	ldrb	r3, [r7, #14]
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d12d      	bne.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b22      	cmp	r3, #34	; 0x22
 8004dd4:	d12a      	bne.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004df0:	e01c      	b.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d103      	bne.n	8004e06 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f88e 	bl	8004f20 <I2C_MemoryTransmit_TXE_BTF>
}
 8004e04:	e012      	b.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	781a      	ldrb	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e2a:	e7ff      	b.n	8004e2c <I2C_MasterTransmit_TXE+0x130>
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b21      	cmp	r3, #33	; 0x21
 8004e4c:	d164      	bne.n	8004f18 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d012      	beq.n	8004e7e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	781a      	ldrb	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e7c:	e04c      	b.n	8004f18 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d01d      	beq.n	8004ec0 <I2C_MasterTransmit_BTF+0x8c>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d01a      	beq.n	8004ec0 <I2C_MasterTransmit_BTF+0x8c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e90:	d016      	beq.n	8004ec0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ea0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2211      	movs	r2, #17
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff feb7 	bl	8004c2c <HAL_I2C_MasterTxCpltCallback>
}
 8004ebe:	e02b      	b.n	8004f18 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ece:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b40      	cmp	r3, #64	; 0x40
 8004ef8:	d107      	bne.n	8004f0a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fed2 	bl	8004cac <HAL_I2C_MemTxCpltCallback>
}
 8004f08:	e006      	b.n	8004f18 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe8a 	bl	8004c2c <HAL_I2C_MasterTxCpltCallback>
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d11d      	bne.n	8004f74 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10b      	bne.n	8004f58 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004f56:	e073      	b.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	121b      	asrs	r3, r3, #8
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f72:	e065      	b.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d10b      	bne.n	8004f94 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f92:	e055      	b.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d151      	bne.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	2b22      	cmp	r3, #34	; 0x22
 8004fa0:	d10d      	bne.n	8004fbe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004fbc:	e040      	b.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b21      	cmp	r3, #33	; 0x21
 8004fcc:	d112      	bne.n	8004ff4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	781a      	ldrb	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ff2:	e025      	b.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d120      	bne.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	2b21      	cmp	r3, #33	; 0x21
 8005002:	d11d      	bne.n	8005040 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005012:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005022:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fe36 	bl	8004cac <HAL_I2C_MemTxCpltCallback>
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b22      	cmp	r3, #34	; 0x22
 800505a:	f040 80a2 	bne.w	80051a2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d921      	bls.n	80050b0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b03      	cmp	r3, #3
 800509a:	f040 8082 	bne.w	80051a2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ac:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80050ae:	e078      	b.n	80051a2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d074      	beq.n	80051a2 <I2C_MasterReceive_RXNE+0x15a>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d002      	beq.n	80050c4 <I2C_MasterReceive_RXNE+0x7c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d16e      	bne.n	80051a2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f001 f81d 	bl	8006104 <I2C_WaitOnSTOPRequestThroughIT>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d142      	bne.n	8005156 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050de:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b40      	cmp	r3, #64	; 0x40
 8005128:	d10a      	bne.n	8005140 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fdc1 	bl	8004cc0 <HAL_I2C_MemRxCpltCallback>
}
 800513e:	e030      	b.n	80051a2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2212      	movs	r2, #18
 800514c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff fd76 	bl	8004c40 <HAL_I2C_MasterRxCpltCallback>
}
 8005154:	e025      	b.n	80051a2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005164:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fd99 	bl	8004cd4 <HAL_I2C_ErrorCallback>
}
 80051a2:	bf00      	nop
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d11b      	bne.n	80051fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80051f8:	e0bd      	b.n	8005376 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b03      	cmp	r3, #3
 8005202:	d129      	bne.n	8005258 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005212:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b04      	cmp	r3, #4
 8005218:	d00a      	beq.n	8005230 <I2C_MasterReceive_BTF+0x86>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d007      	beq.n	8005230 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005256:	e08e      	b.n	8005376 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d176      	bne.n	8005350 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d002      	beq.n	800526e <I2C_MasterReceive_BTF+0xc4>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b10      	cmp	r3, #16
 800526c:	d108      	bne.n	8005280 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	e019      	b.n	80052b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d002      	beq.n	800528c <I2C_MasterReceive_BTF+0xe2>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d108      	bne.n	800529e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e00a      	b.n	80052b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d007      	beq.n	80052b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800530e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d10a      	bne.n	800533a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff fcc4 	bl	8004cc0 <HAL_I2C_MemRxCpltCallback>
}
 8005338:	e01d      	b.n	8005376 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2212      	movs	r2, #18
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fc79 	bl	8004c40 <HAL_I2C_MasterRxCpltCallback>
}
 800534e:	e012      	b.n	8005376 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d117      	bne.n	80053c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80053ac:	e067      	b.n	800547e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	611a      	str	r2, [r3, #16]
}
 80053c0:	e05d      	b.n	800547e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ca:	d133      	bne.n	8005434 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b21      	cmp	r3, #33	; 0x21
 80053d6:	d109      	bne.n	80053ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	461a      	mov	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053e8:	611a      	str	r2, [r3, #16]
 80053ea:	e008      	b.n	80053fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <I2C_Master_SB+0x92>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d032      	beq.n	800547e <I2C_Master_SB+0x100>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d02d      	beq.n	800547e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005430:	605a      	str	r2, [r3, #4]
}
 8005432:	e024      	b.n	800547e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10e      	bne.n	800545a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005440:	b29b      	uxth	r3, r3
 8005442:	11db      	asrs	r3, r3, #7
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0306 	and.w	r3, r3, #6
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f063 030f 	orn	r3, r3, #15
 8005450:	b2da      	uxtb	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]
}
 8005458:	e011      	b.n	800547e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800545e:	2b01      	cmp	r3, #1
 8005460:	d10d      	bne.n	800547e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	b29b      	uxth	r3, r3
 8005468:	11db      	asrs	r3, r3, #7
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 0306 	and.w	r3, r3, #6
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f063 030e 	orn	r3, r3, #14
 8005476:	b2da      	uxtb	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	611a      	str	r2, [r3, #16]
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	b2da      	uxtb	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <I2C_Master_ADD10+0x26>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <I2C_Master_ADD10+0x48>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d0:	605a      	str	r2, [r3, #4]
  }
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80054de:	b480      	push	{r7}
 80054e0:	b091      	sub	sp, #68	; 0x44
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b22      	cmp	r3, #34	; 0x22
 8005506:	f040 8169 	bne.w	80057dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10f      	bne.n	8005532 <I2C_Master_ADDR+0x54>
 8005512:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d10b      	bne.n	8005532 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551a:	2300      	movs	r3, #0
 800551c:	633b      	str	r3, [r7, #48]	; 0x30
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	633b      	str	r3, [r7, #48]	; 0x30
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	633b      	str	r3, [r7, #48]	; 0x30
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	e160      	b.n	80057f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11d      	bne.n	8005576 <I2C_Master_ADDR+0x98>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005542:	d118      	bne.n	8005576 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005544:	2300      	movs	r3, #0
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005568:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	651a      	str	r2, [r3, #80]	; 0x50
 8005574:	e13e      	b.n	80057f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d113      	bne.n	80055a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005580:	2300      	movs	r3, #0
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e115      	b.n	80057d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	f040 808a 	bne.w	80056c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055ba:	d137      	bne.n	800562c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055da:	d113      	bne.n	8005604 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ec:	2300      	movs	r3, #0
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	e0e7      	b.n	80057d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005604:	2300      	movs	r3, #0
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	623b      	str	r3, [r7, #32]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e0d3      	b.n	80057d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	2b08      	cmp	r3, #8
 8005630:	d02e      	beq.n	8005690 <I2C_Master_ADDR+0x1b2>
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	2b20      	cmp	r3, #32
 8005636:	d02b      	beq.n	8005690 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563a:	2b12      	cmp	r3, #18
 800563c:	d102      	bne.n	8005644 <I2C_Master_ADDR+0x166>
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	2b01      	cmp	r3, #1
 8005642:	d125      	bne.n	8005690 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005646:	2b04      	cmp	r3, #4
 8005648:	d00e      	beq.n	8005668 <I2C_Master_ADDR+0x18a>
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	2b02      	cmp	r3, #2
 800564e:	d00b      	beq.n	8005668 <I2C_Master_ADDR+0x18a>
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	2b10      	cmp	r3, #16
 8005654:	d008      	beq.n	8005668 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e007      	b.n	8005678 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005676:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	e0a1      	b.n	80057d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800569e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e085      	b.n	80057d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d14d      	bne.n	800576e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d016      	beq.n	8005706 <I2C_Master_ADDR+0x228>
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d013      	beq.n	8005706 <I2C_Master_ADDR+0x228>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d010      	beq.n	8005706 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e007      	b.n	8005716 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005714:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005724:	d117      	bne.n	8005756 <I2C_Master_ADDR+0x278>
 8005726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800572c:	d00b      	beq.n	8005746 <I2C_Master_ADDR+0x268>
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	2b01      	cmp	r3, #1
 8005732:	d008      	beq.n	8005746 <I2C_Master_ADDR+0x268>
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	2b08      	cmp	r3, #8
 8005738:	d005      	beq.n	8005746 <I2C_Master_ADDR+0x268>
 800573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573c:	2b10      	cmp	r3, #16
 800573e:	d002      	beq.n	8005746 <I2C_Master_ADDR+0x268>
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	2b20      	cmp	r3, #32
 8005744:	d107      	bne.n	8005756 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005754:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	e032      	b.n	80057d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800577c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578c:	d117      	bne.n	80057be <I2C_Master_ADDR+0x2e0>
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005794:	d00b      	beq.n	80057ae <I2C_Master_ADDR+0x2d0>
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	2b01      	cmp	r3, #1
 800579a:	d008      	beq.n	80057ae <I2C_Master_ADDR+0x2d0>
 800579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d005      	beq.n	80057ae <I2C_Master_ADDR+0x2d0>
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d002      	beq.n	80057ae <I2C_Master_ADDR+0x2d0>
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d107      	bne.n	80057be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80057da:	e00b      	b.n	80057f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
}
 80057f2:	e7ff      	b.n	80057f4 <I2C_Master_ADDR+0x316>
 80057f4:	bf00      	nop
 80057f6:	3744      	adds	r7, #68	; 0x44
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d02b      	beq.n	8005872 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d114      	bne.n	8005872 <I2C_SlaveTransmit_TXE+0x72>
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b29      	cmp	r3, #41	; 0x29
 800584c:	d111      	bne.n	8005872 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2221      	movs	r2, #33	; 0x21
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2228      	movs	r2, #40	; 0x28
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff f9f1 	bl	8004c54 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d011      	beq.n	80058b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	781a      	ldrb	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02c      	beq.n	8005930 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d114      	bne.n	8005930 <I2C_SlaveReceive_RXNE+0x74>
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b2a      	cmp	r3, #42	; 0x2a
 800590a:	d111      	bne.n	8005930 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2222      	movs	r2, #34	; 0x22
 8005920:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2228      	movs	r2, #40	; 0x28
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff f99c 	bl	8004c68 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005930:	bf00      	nop
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d012      	beq.n	8005970 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005996:	2b28      	cmp	r3, #40	; 0x28
 8005998:	d127      	bne.n	80059ea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	089b      	lsrs	r3, r3, #2
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80059b6:	2301      	movs	r3, #1
 80059b8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	09db      	lsrs	r3, r3, #7
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	81bb      	strh	r3, [r7, #12]
 80059cc:	e002      	b.n	80059d4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80059dc:	89ba      	ldrh	r2, [r7, #12]
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff f94a 	bl	8004c7c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80059e8:	e00e      	b.n	8005a08 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005a30:	2300      	movs	r3, #0
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6c:	d172      	bne.n	8005b54 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b22      	cmp	r3, #34	; 0x22
 8005a72:	d002      	beq.n	8005a7a <I2C_Slave_STOPF+0x6a>
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b2a      	cmp	r3, #42	; 0x2a
 8005a78:	d135      	bne.n	8005ae6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f043 0204 	orr.w	r2, r3, #4
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe faaa 	bl	800400c <HAL_DMA_GetState>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d049      	beq.n	8005b52 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	4a69      	ldr	r2, [pc, #420]	; (8005c68 <I2C_Slave_STOPF+0x258>)
 8005ac4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe f8f2 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d03d      	beq.n	8005b52 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ae4:	e035      	b.n	8005b52 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f043 0204 	orr.w	r2, r3, #4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe fa74 	bl	800400c <HAL_DMA_GetState>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d014      	beq.n	8005b54 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	4a4e      	ldr	r2, [pc, #312]	; (8005c68 <I2C_Slave_STOPF+0x258>)
 8005b30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe f8bc 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d008      	beq.n	8005b54 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	e000      	b.n	8005b54 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b52:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d03e      	beq.n	8005bdc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d112      	bne.n	8005b92 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b40      	cmp	r3, #64	; 0x40
 8005b9e:	d112      	bne.n	8005bc6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd4:	f043 0204 	orr.w	r2, r3, #4
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f8b3 	bl	8005d50 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005bea:	e039      	b.n	8005c60 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf0:	d109      	bne.n	8005c06 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2228      	movs	r2, #40	; 0x28
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff f831 	bl	8004c68 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b28      	cmp	r3, #40	; 0x28
 8005c10:	d111      	bne.n	8005c36 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a15      	ldr	r2, [pc, #84]	; (8005c6c <I2C_Slave_STOPF+0x25c>)
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff f832 	bl	8004c98 <HAL_I2C_ListenCpltCallback>
}
 8005c34:	e014      	b.n	8005c60 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	2b22      	cmp	r3, #34	; 0x22
 8005c3c:	d002      	beq.n	8005c44 <I2C_Slave_STOPF+0x234>
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b22      	cmp	r3, #34	; 0x22
 8005c42:	d10d      	bne.n	8005c60 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff f804 	bl	8004c68 <HAL_I2C_SlaveRxCpltCallback>
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	08005fb5 	.word	0x08005fb5
 8005c6c:	ffff0000 	.word	0xffff0000

08005c70 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d002      	beq.n	8005c92 <I2C_Slave_AF+0x22>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d129      	bne.n	8005ce6 <I2C_Slave_AF+0x76>
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b28      	cmp	r3, #40	; 0x28
 8005c96:	d126      	bne.n	8005ce6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a2c      	ldr	r2, [pc, #176]	; (8005d4c <I2C_Slave_AF+0xdc>)
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cb6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fe ffda 	bl	8004c98 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ce4:	e02e      	b.n	8005d44 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ce6:	7bfb      	ldrb	r3, [r7, #15]
 8005ce8:	2b21      	cmp	r3, #33	; 0x21
 8005cea:	d126      	bne.n	8005d3a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a17      	ldr	r2, [pc, #92]	; (8005d4c <I2C_Slave_AF+0xdc>)
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2221      	movs	r2, #33	; 0x21
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d16:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d20:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d30:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fe ff8e 	bl	8004c54 <HAL_I2C_SlaveTxCpltCallback>
}
 8005d38:	e004      	b.n	8005d44 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d42:	615a      	str	r2, [r3, #20]
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	ffff0000 	.word	0xffff0000

08005d50 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d002      	beq.n	8005d74 <I2C_ITError+0x24>
 8005d6e:	7bbb      	ldrb	r3, [r7, #14]
 8005d70:	2b40      	cmp	r3, #64	; 0x40
 8005d72:	d10a      	bne.n	8005d8a <I2C_ITError+0x3a>
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b22      	cmp	r3, #34	; 0x22
 8005d78:	d107      	bne.n	8005d8a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d88:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d90:	2b28      	cmp	r3, #40	; 0x28
 8005d92:	d107      	bne.n	8005da4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2228      	movs	r2, #40	; 0x28
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005da2:	e015      	b.n	8005dd0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db2:	d00a      	beq.n	8005dca <I2C_ITError+0x7a>
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b60      	cmp	r3, #96	; 0x60
 8005db8:	d007      	beq.n	8005dca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dde:	d162      	bne.n	8005ea6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d020      	beq.n	8005e40 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	4a6a      	ldr	r2, [pc, #424]	; (8005fac <I2C_ITError+0x25c>)
 8005e04:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fd ff52 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f000 8089 	beq.w	8005f2a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4798      	blx	r3
 8005e3e:	e074      	b.n	8005f2a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	4a59      	ldr	r2, [pc, #356]	; (8005fac <I2C_ITError+0x25c>)
 8005e46:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fd ff31 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d068      	beq.n	8005f2a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e62:	2b40      	cmp	r3, #64	; 0x40
 8005e64:	d10b      	bne.n	8005e7e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	1c5a      	adds	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0201 	bic.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
 8005ea4:	e041      	b.n	8005f2a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b60      	cmp	r3, #96	; 0x60
 8005eb0:	d125      	bne.n	8005efe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eca:	2b40      	cmp	r3, #64	; 0x40
 8005ecc:	d10b      	bne.n	8005ee6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fe fef6 	bl	8004ce8 <HAL_I2C_AbortCpltCallback>
 8005efc:	e015      	b.n	8005f2a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d10b      	bne.n	8005f24 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fe fed5 	bl	8004cd4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10e      	bne.n	8005f58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d109      	bne.n	8005f58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f66:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d113      	bne.n	8005fa4 <I2C_ITError+0x254>
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b28      	cmp	r3, #40	; 0x28
 8005f80:	d110      	bne.n	8005fa4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a0a      	ldr	r2, [pc, #40]	; (8005fb0 <I2C_ITError+0x260>)
 8005f86:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fe fe7a 	bl	8004c98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	08005fb5 	.word	0x08005fb5
 8005fb0:	ffff0000 	.word	0xffff0000

08005fb4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fcc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fce:	4b4b      	ldr	r3, [pc, #300]	; (80060fc <I2C_DMAAbort+0x148>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	08db      	lsrs	r3, r3, #3
 8005fd4:	4a4a      	ldr	r2, [pc, #296]	; (8006100 <I2C_DMAAbort+0x14c>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	0a1a      	lsrs	r2, r3, #8
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	00da      	lsls	r2, r3, #3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f043 0220 	orr.w	r2, r3, #32
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005ffa:	e00a      	b.n	8006012 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800600c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006010:	d0ea      	beq.n	8005fe8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	2200      	movs	r2, #0
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	2200      	movs	r2, #0
 8006030:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006040:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006054:	2200      	movs	r2, #0
 8006056:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	2200      	movs	r2, #0
 8006066:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b60      	cmp	r3, #96	; 0x60
 8006082:	d10e      	bne.n	80060a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2200      	movs	r2, #0
 8006098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800609a:	6978      	ldr	r0, [r7, #20]
 800609c:	f7fe fe24 	bl	8004ce8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060a0:	e027      	b.n	80060f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060a2:	7cfb      	ldrb	r3, [r7, #19]
 80060a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060a8:	2b28      	cmp	r3, #40	; 0x28
 80060aa:	d117      	bne.n	80060dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2228      	movs	r2, #40	; 0x28
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80060da:	e007      	b.n	80060ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80060ec:	6978      	ldr	r0, [r7, #20]
 80060ee:	f7fe fdf1 	bl	8004cd4 <HAL_I2C_ErrorCallback>
}
 80060f2:	bf00      	nop
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	2000002c 	.word	0x2000002c
 8006100:	14f8b589 	.word	0x14f8b589

08006104 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006110:	4b13      	ldr	r3, [pc, #76]	; (8006160 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	08db      	lsrs	r3, r3, #3
 8006116:	4a13      	ldr	r2, [pc, #76]	; (8006164 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	0a1a      	lsrs	r2, r3, #8
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b01      	subs	r3, #1
 800612a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d107      	bne.n	8006142 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f043 0220 	orr.w	r2, r3, #32
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e008      	b.n	8006154 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800614c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006150:	d0e9      	beq.n	8006126 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	2000002c 	.word	0x2000002c
 8006164:	14f8b589 	.word	0x14f8b589

08006168 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006178:	d103      	bne.n	8006182 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006180:	e007      	b.n	8006192 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800618a:	d102      	bne.n	8006192 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2208      	movs	r2, #8
 8006190:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0cc      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061b4:	4b68      	ldr	r3, [pc, #416]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d90c      	bls.n	80061dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c2:	4b65      	ldr	r3, [pc, #404]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	4b63      	ldr	r3, [pc, #396]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0b8      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d020      	beq.n	800622a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061f4:	4b59      	ldr	r3, [pc, #356]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a58      	ldr	r2, [pc, #352]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800620c:	4b53      	ldr	r3, [pc, #332]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a52      	ldr	r2, [pc, #328]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006218:	4b50      	ldr	r3, [pc, #320]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	494d      	ldr	r1, [pc, #308]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	4313      	orrs	r3, r2
 8006228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d044      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d107      	bne.n	800624e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623e:	4b47      	ldr	r3, [pc, #284]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d119      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e07f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d003      	beq.n	800625e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625a:	2b03      	cmp	r3, #3
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625e:	4b3f      	ldr	r3, [pc, #252]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e06f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626e:	4b3b      	ldr	r3, [pc, #236]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e067      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800627e:	4b37      	ldr	r3, [pc, #220]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 0203 	bic.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4934      	ldr	r1, [pc, #208]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	4313      	orrs	r3, r2
 800628e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006290:	f7fd fa7c 	bl	800378c <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	e00a      	b.n	80062ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006298:	f7fd fa78 	bl	800378c <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e04f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ae:	4b2b      	ldr	r3, [pc, #172]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 020c 	and.w	r2, r3, #12
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	429a      	cmp	r2, r3
 80062be:	d1eb      	bne.n	8006298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d20c      	bcs.n	80062e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ce:	4b22      	ldr	r3, [pc, #136]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b20      	ldr	r3, [pc, #128]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d001      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e032      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f4:	4b19      	ldr	r3, [pc, #100]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4916      	ldr	r1, [pc, #88]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	4313      	orrs	r3, r2
 8006304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006312:	4b12      	ldr	r3, [pc, #72]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	490e      	ldr	r1, [pc, #56]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006326:	f000 f855 	bl	80063d4 <HAL_RCC_GetSysClockFreq>
 800632a:	4602      	mov	r2, r0
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	490a      	ldr	r1, [pc, #40]	; (8006360 <HAL_RCC_ClockConfig+0x1c0>)
 8006338:	5ccb      	ldrb	r3, [r1, r3]
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	4a09      	ldr	r2, [pc, #36]	; (8006364 <HAL_RCC_ClockConfig+0x1c4>)
 8006340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <HAL_RCC_ClockConfig+0x1c8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7fd f9dc 	bl	8003704 <HAL_InitTick>

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40023c00 	.word	0x40023c00
 800635c:	40023800 	.word	0x40023800
 8006360:	08009110 	.word	0x08009110
 8006364:	2000002c 	.word	0x2000002c
 8006368:	20000034 	.word	0x20000034

0800636c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006370:	4b03      	ldr	r3, [pc, #12]	; (8006380 <HAL_RCC_GetHCLKFreq+0x14>)
 8006372:	681b      	ldr	r3, [r3, #0]
}
 8006374:	4618      	mov	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	2000002c 	.word	0x2000002c

08006384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006388:	f7ff fff0 	bl	800636c <HAL_RCC_GetHCLKFreq>
 800638c:	4602      	mov	r2, r0
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	0a9b      	lsrs	r3, r3, #10
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	4903      	ldr	r1, [pc, #12]	; (80063a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800639a:	5ccb      	ldrb	r3, [r1, r3]
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40023800 	.word	0x40023800
 80063a8:	08009120 	.word	0x08009120

080063ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063b0:	f7ff ffdc 	bl	800636c <HAL_RCC_GetHCLKFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	0b5b      	lsrs	r3, r3, #13
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	4903      	ldr	r1, [pc, #12]	; (80063d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40023800 	.word	0x40023800
 80063d0:	08009120 	.word	0x08009120

080063d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d8:	b088      	sub	sp, #32
 80063da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f0:	4bce      	ldr	r3, [pc, #824]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f003 030c 	and.w	r3, r3, #12
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	f200 818d 	bhi.w	8006718 <HAL_RCC_GetSysClockFreq+0x344>
 80063fe:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <HAL_RCC_GetSysClockFreq+0x30>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	08006439 	.word	0x08006439
 8006408:	08006719 	.word	0x08006719
 800640c:	08006719 	.word	0x08006719
 8006410:	08006719 	.word	0x08006719
 8006414:	0800643f 	.word	0x0800643f
 8006418:	08006719 	.word	0x08006719
 800641c:	08006719 	.word	0x08006719
 8006420:	08006719 	.word	0x08006719
 8006424:	08006445 	.word	0x08006445
 8006428:	08006719 	.word	0x08006719
 800642c:	08006719 	.word	0x08006719
 8006430:	08006719 	.word	0x08006719
 8006434:	080065b9 	.word	0x080065b9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006438:	4bbd      	ldr	r3, [pc, #756]	; (8006730 <HAL_RCC_GetSysClockFreq+0x35c>)
 800643a:	61bb      	str	r3, [r7, #24]
       break;
 800643c:	e16f      	b.n	800671e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800643e:	4bbd      	ldr	r3, [pc, #756]	; (8006734 <HAL_RCC_GetSysClockFreq+0x360>)
 8006440:	61bb      	str	r3, [r7, #24]
      break;
 8006442:	e16c      	b.n	800671e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006444:	4bb9      	ldr	r3, [pc, #740]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800644c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800644e:	4bb7      	ldr	r3, [pc, #732]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d053      	beq.n	8006502 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800645a:	4bb4      	ldr	r3, [pc, #720]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	099b      	lsrs	r3, r3, #6
 8006460:	461a      	mov	r2, r3
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	f240 10ff 	movw	r0, #511	; 0x1ff
 800646a:	f04f 0100 	mov.w	r1, #0
 800646e:	ea02 0400 	and.w	r4, r2, r0
 8006472:	603c      	str	r4, [r7, #0]
 8006474:	400b      	ands	r3, r1
 8006476:	607b      	str	r3, [r7, #4]
 8006478:	e9d7 4500 	ldrd	r4, r5, [r7]
 800647c:	4620      	mov	r0, r4
 800647e:	4629      	mov	r1, r5
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	014b      	lsls	r3, r1, #5
 800648a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800648e:	0142      	lsls	r2, r0, #5
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	4623      	mov	r3, r4
 8006496:	1ac0      	subs	r0, r0, r3
 8006498:	462b      	mov	r3, r5
 800649a:	eb61 0103 	sbc.w	r1, r1, r3
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	018b      	lsls	r3, r1, #6
 80064a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064ac:	0182      	lsls	r2, r0, #6
 80064ae:	1a12      	subs	r2, r2, r0
 80064b0:	eb63 0301 	sbc.w	r3, r3, r1
 80064b4:	f04f 0000 	mov.w	r0, #0
 80064b8:	f04f 0100 	mov.w	r1, #0
 80064bc:	00d9      	lsls	r1, r3, #3
 80064be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064c2:	00d0      	lsls	r0, r2, #3
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4621      	mov	r1, r4
 80064ca:	1852      	adds	r2, r2, r1
 80064cc:	4629      	mov	r1, r5
 80064ce:	eb43 0101 	adc.w	r1, r3, r1
 80064d2:	460b      	mov	r3, r1
 80064d4:	f04f 0000 	mov.w	r0, #0
 80064d8:	f04f 0100 	mov.w	r1, #0
 80064dc:	0259      	lsls	r1, r3, #9
 80064de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80064e2:	0250      	lsls	r0, r2, #9
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4610      	mov	r0, r2
 80064ea:	4619      	mov	r1, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	f7fa fa7e 	bl	80009f4 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4613      	mov	r3, r2
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	e04c      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006502:	4b8a      	ldr	r3, [pc, #552]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	099b      	lsrs	r3, r3, #6
 8006508:	461a      	mov	r2, r3
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	ea02 0a00 	and.w	sl, r2, r0
 800651a:	ea03 0b01 	and.w	fp, r3, r1
 800651e:	4650      	mov	r0, sl
 8006520:	4659      	mov	r1, fp
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	014b      	lsls	r3, r1, #5
 800652c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006530:	0142      	lsls	r2, r0, #5
 8006532:	4610      	mov	r0, r2
 8006534:	4619      	mov	r1, r3
 8006536:	ebb0 000a 	subs.w	r0, r0, sl
 800653a:	eb61 010b 	sbc.w	r1, r1, fp
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	018b      	lsls	r3, r1, #6
 8006548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800654c:	0182      	lsls	r2, r0, #6
 800654e:	1a12      	subs	r2, r2, r0
 8006550:	eb63 0301 	sbc.w	r3, r3, r1
 8006554:	f04f 0000 	mov.w	r0, #0
 8006558:	f04f 0100 	mov.w	r1, #0
 800655c:	00d9      	lsls	r1, r3, #3
 800655e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006562:	00d0      	lsls	r0, r2, #3
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	eb12 020a 	adds.w	r2, r2, sl
 800656c:	eb43 030b 	adc.w	r3, r3, fp
 8006570:	f04f 0000 	mov.w	r0, #0
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	0299      	lsls	r1, r3, #10
 800657a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800657e:	0290      	lsls	r0, r2, #10
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	461a      	mov	r2, r3
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	f7fa fa30 	bl	80009f4 <__aeabi_uldivmod>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4613      	mov	r3, r2
 800659a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800659c:	4b63      	ldr	r3, [pc, #396]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	3301      	adds	r3, #1
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	61bb      	str	r3, [r7, #24]
      break;
 80065b6:	e0b2      	b.n	800671e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065b8:	4b5c      	ldr	r3, [pc, #368]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065c2:	4b5a      	ldr	r3, [pc, #360]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d04d      	beq.n	800666a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ce:	4b57      	ldr	r3, [pc, #348]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	461a      	mov	r2, r3
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065de:	f04f 0100 	mov.w	r1, #0
 80065e2:	ea02 0800 	and.w	r8, r2, r0
 80065e6:	ea03 0901 	and.w	r9, r3, r1
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	014b      	lsls	r3, r1, #5
 80065f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065fc:	0142      	lsls	r2, r0, #5
 80065fe:	4610      	mov	r0, r2
 8006600:	4619      	mov	r1, r3
 8006602:	ebb0 0008 	subs.w	r0, r0, r8
 8006606:	eb61 0109 	sbc.w	r1, r1, r9
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	f04f 0300 	mov.w	r3, #0
 8006612:	018b      	lsls	r3, r1, #6
 8006614:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006618:	0182      	lsls	r2, r0, #6
 800661a:	1a12      	subs	r2, r2, r0
 800661c:	eb63 0301 	sbc.w	r3, r3, r1
 8006620:	f04f 0000 	mov.w	r0, #0
 8006624:	f04f 0100 	mov.w	r1, #0
 8006628:	00d9      	lsls	r1, r3, #3
 800662a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800662e:	00d0      	lsls	r0, r2, #3
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	eb12 0208 	adds.w	r2, r2, r8
 8006638:	eb43 0309 	adc.w	r3, r3, r9
 800663c:	f04f 0000 	mov.w	r0, #0
 8006640:	f04f 0100 	mov.w	r1, #0
 8006644:	0259      	lsls	r1, r3, #9
 8006646:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800664a:	0250      	lsls	r0, r2, #9
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	461a      	mov	r2, r3
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	f7fa f9ca 	bl	80009f4 <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4613      	mov	r3, r2
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	e04a      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666a:	4b30      	ldr	r3, [pc, #192]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	099b      	lsrs	r3, r3, #6
 8006670:	461a      	mov	r2, r3
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800667a:	f04f 0100 	mov.w	r1, #0
 800667e:	ea02 0400 	and.w	r4, r2, r0
 8006682:	ea03 0501 	and.w	r5, r3, r1
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	f04f 0200 	mov.w	r2, #0
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	014b      	lsls	r3, r1, #5
 8006694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006698:	0142      	lsls	r2, r0, #5
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	1b00      	subs	r0, r0, r4
 80066a0:	eb61 0105 	sbc.w	r1, r1, r5
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	018b      	lsls	r3, r1, #6
 80066ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80066b2:	0182      	lsls	r2, r0, #6
 80066b4:	1a12      	subs	r2, r2, r0
 80066b6:	eb63 0301 	sbc.w	r3, r3, r1
 80066ba:	f04f 0000 	mov.w	r0, #0
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	00d9      	lsls	r1, r3, #3
 80066c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066c8:	00d0      	lsls	r0, r2, #3
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	1912      	adds	r2, r2, r4
 80066d0:	eb45 0303 	adc.w	r3, r5, r3
 80066d4:	f04f 0000 	mov.w	r0, #0
 80066d8:	f04f 0100 	mov.w	r1, #0
 80066dc:	0299      	lsls	r1, r3, #10
 80066de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80066e2:	0290      	lsls	r0, r2, #10
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	461a      	mov	r2, r3
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	f7fa f97e 	bl	80009f4 <__aeabi_uldivmod>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	4613      	mov	r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <HAL_RCC_GetSysClockFreq+0x358>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	0f1b      	lsrs	r3, r3, #28
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	fbb2 f3f3 	udiv	r3, r2, r3
 8006714:	61bb      	str	r3, [r7, #24]
      break;
 8006716:	e002      	b.n	800671e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006718:	4b05      	ldr	r3, [pc, #20]	; (8006730 <HAL_RCC_GetSysClockFreq+0x35c>)
 800671a:	61bb      	str	r3, [r7, #24]
      break;
 800671c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800671e:	69bb      	ldr	r3, [r7, #24]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3720      	adds	r7, #32
 8006724:	46bd      	mov	sp, r7
 8006726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672a:	bf00      	nop
 800672c:	40023800 	.word	0x40023800
 8006730:	00f42400 	.word	0x00f42400
 8006734:	007a1200 	.word	0x007a1200

08006738 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e28d      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8083 	beq.w	800685e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006758:	4b94      	ldr	r3, [pc, #592]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 030c 	and.w	r3, r3, #12
 8006760:	2b04      	cmp	r3, #4
 8006762:	d019      	beq.n	8006798 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006764:	4b91      	ldr	r3, [pc, #580]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800676c:	2b08      	cmp	r3, #8
 800676e:	d106      	bne.n	800677e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006770:	4b8e      	ldr	r3, [pc, #568]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677c:	d00c      	beq.n	8006798 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800677e:	4b8b      	ldr	r3, [pc, #556]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006786:	2b0c      	cmp	r3, #12
 8006788:	d112      	bne.n	80067b0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800678a:	4b88      	ldr	r3, [pc, #544]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006796:	d10b      	bne.n	80067b0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	4b84      	ldr	r3, [pc, #528]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d05b      	beq.n	800685c <HAL_RCC_OscConfig+0x124>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d157      	bne.n	800685c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e25a      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b8:	d106      	bne.n	80067c8 <HAL_RCC_OscConfig+0x90>
 80067ba:	4b7c      	ldr	r3, [pc, #496]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a7b      	ldr	r2, [pc, #492]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e01d      	b.n	8006804 <HAL_RCC_OscConfig+0xcc>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d0:	d10c      	bne.n	80067ec <HAL_RCC_OscConfig+0xb4>
 80067d2:	4b76      	ldr	r3, [pc, #472]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a75      	ldr	r2, [pc, #468]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	4b73      	ldr	r3, [pc, #460]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a72      	ldr	r2, [pc, #456]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	e00b      	b.n	8006804 <HAL_RCC_OscConfig+0xcc>
 80067ec:	4b6f      	ldr	r3, [pc, #444]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a6e      	ldr	r2, [pc, #440]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	4b6c      	ldr	r3, [pc, #432]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a6b      	ldr	r2, [pc, #428]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80067fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d013      	beq.n	8006834 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fc ffbe 	bl	800378c <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006814:	f7fc ffba 	bl	800378c <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e21f      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	4b61      	ldr	r3, [pc, #388]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0xdc>
 8006832:	e014      	b.n	800685e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006834:	f7fc ffaa 	bl	800378c <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800683a:	e008      	b.n	800684e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800683c:	f7fc ffa6 	bl	800378c <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b64      	cmp	r3, #100	; 0x64
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e20b      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800684e:	4b57      	ldr	r3, [pc, #348]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f0      	bne.n	800683c <HAL_RCC_OscConfig+0x104>
 800685a:	e000      	b.n	800685e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d06f      	beq.n	800694a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800686a:	4b50      	ldr	r3, [pc, #320]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 030c 	and.w	r3, r3, #12
 8006872:	2b00      	cmp	r3, #0
 8006874:	d017      	beq.n	80068a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006876:	4b4d      	ldr	r3, [pc, #308]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800687e:	2b08      	cmp	r3, #8
 8006880:	d105      	bne.n	800688e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006882:	4b4a      	ldr	r3, [pc, #296]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800688e:	4b47      	ldr	r3, [pc, #284]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006896:	2b0c      	cmp	r3, #12
 8006898:	d11c      	bne.n	80068d4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800689a:	4b44      	ldr	r3, [pc, #272]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d116      	bne.n	80068d4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068a6:	4b41      	ldr	r3, [pc, #260]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <HAL_RCC_OscConfig+0x186>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d001      	beq.n	80068be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e1d3      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068be:	4b3b      	ldr	r3, [pc, #236]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	4937      	ldr	r1, [pc, #220]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068d2:	e03a      	b.n	800694a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d020      	beq.n	800691e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068dc:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <HAL_RCC_OscConfig+0x278>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e2:	f7fc ff53 	bl	800378c <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ea:	f7fc ff4f 	bl	800378c <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e1b4      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fc:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0f0      	beq.n	80068ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006908:	4b28      	ldr	r3, [pc, #160]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4925      	ldr	r1, [pc, #148]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006918:	4313      	orrs	r3, r2
 800691a:	600b      	str	r3, [r1, #0]
 800691c:	e015      	b.n	800694a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800691e:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <HAL_RCC_OscConfig+0x278>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fc ff32 	bl	800378c <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800692c:	f7fc ff2e 	bl	800378c <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e193      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800693e:	4b1b      	ldr	r3, [pc, #108]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d036      	beq.n	80069c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d016      	beq.n	800698c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800695e:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <HAL_RCC_OscConfig+0x27c>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006964:	f7fc ff12 	bl	800378c <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800696c:	f7fc ff0e 	bl	800378c <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e173      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800697e:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <HAL_RCC_OscConfig+0x274>)
 8006980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f0      	beq.n	800696c <HAL_RCC_OscConfig+0x234>
 800698a:	e01b      	b.n	80069c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800698c:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_RCC_OscConfig+0x27c>)
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006992:	f7fc fefb 	bl	800378c <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006998:	e00e      	b.n	80069b8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800699a:	f7fc fef7 	bl	800378c <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d907      	bls.n	80069b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e15c      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
 80069ac:	40023800 	.word	0x40023800
 80069b0:	42470000 	.word	0x42470000
 80069b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b8:	4b8a      	ldr	r3, [pc, #552]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 80069ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1ea      	bne.n	800699a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 8097 	beq.w	8006b00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069d2:	2300      	movs	r3, #0
 80069d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069d6:	4b83      	ldr	r3, [pc, #524]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10f      	bne.n	8006a02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	4b7f      	ldr	r3, [pc, #508]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	4a7e      	ldr	r2, [pc, #504]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 80069ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069f0:	6413      	str	r3, [r2, #64]	; 0x40
 80069f2:	4b7c      	ldr	r3, [pc, #496]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069fe:	2301      	movs	r3, #1
 8006a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a02:	4b79      	ldr	r3, [pc, #484]	; (8006be8 <HAL_RCC_OscConfig+0x4b0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d118      	bne.n	8006a40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a0e:	4b76      	ldr	r3, [pc, #472]	; (8006be8 <HAL_RCC_OscConfig+0x4b0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a75      	ldr	r2, [pc, #468]	; (8006be8 <HAL_RCC_OscConfig+0x4b0>)
 8006a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a1a:	f7fc feb7 	bl	800378c <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a22:	f7fc feb3 	bl	800378c <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e118      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a34:	4b6c      	ldr	r3, [pc, #432]	; (8006be8 <HAL_RCC_OscConfig+0x4b0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d106      	bne.n	8006a56 <HAL_RCC_OscConfig+0x31e>
 8006a48:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4c:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a4e:	f043 0301 	orr.w	r3, r3, #1
 8006a52:	6713      	str	r3, [r2, #112]	; 0x70
 8006a54:	e01c      	b.n	8006a90 <HAL_RCC_OscConfig+0x358>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCC_OscConfig+0x340>
 8006a5e:	4b61      	ldr	r3, [pc, #388]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	4a60      	ldr	r2, [pc, #384]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a64:	f043 0304 	orr.w	r3, r3, #4
 8006a68:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6a:	4b5e      	ldr	r3, [pc, #376]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	4a5d      	ldr	r2, [pc, #372]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	6713      	str	r3, [r2, #112]	; 0x70
 8006a76:	e00b      	b.n	8006a90 <HAL_RCC_OscConfig+0x358>
 8006a78:	4b5a      	ldr	r3, [pc, #360]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7c:	4a59      	ldr	r2, [pc, #356]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	6713      	str	r3, [r2, #112]	; 0x70
 8006a84:	4b57      	ldr	r3, [pc, #348]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	4a56      	ldr	r2, [pc, #344]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006a8a:	f023 0304 	bic.w	r3, r3, #4
 8006a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d015      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a98:	f7fc fe78 	bl	800378c <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9e:	e00a      	b.n	8006ab6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa0:	f7fc fe74 	bl	800378c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e0d7      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ab6:	4b4b      	ldr	r3, [pc, #300]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0ee      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x368>
 8006ac2:	e014      	b.n	8006aee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac4:	f7fc fe62 	bl	800378c <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006aca:	e00a      	b.n	8006ae2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006acc:	f7fc fe5e 	bl	800378c <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e0c1      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ae2:	4b40      	ldr	r3, [pc, #256]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1ee      	bne.n	8006acc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d105      	bne.n	8006b00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006af4:	4b3b      	ldr	r3, [pc, #236]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af8:	4a3a      	ldr	r2, [pc, #232]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80ad 	beq.w	8006c64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b0a:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 030c 	and.w	r3, r3, #12
 8006b12:	2b08      	cmp	r3, #8
 8006b14:	d060      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d145      	bne.n	8006baa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b1e:	4b33      	ldr	r3, [pc, #204]	; (8006bec <HAL_RCC_OscConfig+0x4b4>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fc fe32 	bl	800378c <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7fc fe2e 	bl	800378c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e093      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b3e:	4b29      	ldr	r3, [pc, #164]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69da      	ldr	r2, [r3, #28]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	019b      	lsls	r3, r3, #6
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b60:	085b      	lsrs	r3, r3, #1
 8006b62:	3b01      	subs	r3, #1
 8006b64:	041b      	lsls	r3, r3, #16
 8006b66:	431a      	orrs	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	061b      	lsls	r3, r3, #24
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	071b      	lsls	r3, r3, #28
 8006b76:	491b      	ldr	r1, [pc, #108]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <HAL_RCC_OscConfig+0x4b4>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b82:	f7fc fe03 	bl	800378c <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b88:	e008      	b.n	8006b9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b8a:	f7fc fdff 	bl	800378c <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e064      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b9c:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0f0      	beq.n	8006b8a <HAL_RCC_OscConfig+0x452>
 8006ba8:	e05c      	b.n	8006c64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006baa:	4b10      	ldr	r3, [pc, #64]	; (8006bec <HAL_RCC_OscConfig+0x4b4>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fc fdec 	bl	800378c <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bb8:	f7fc fde8 	bl	800378c <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e04d      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_RCC_OscConfig+0x4ac>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x480>
 8006bd6:	e045      	b.n	8006c64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d107      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e040      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
 8006be4:	40023800 	.word	0x40023800
 8006be8:	40007000 	.word	0x40007000
 8006bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006bf0:	4b1f      	ldr	r3, [pc, #124]	; (8006c70 <HAL_RCC_OscConfig+0x538>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d030      	beq.n	8006c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d129      	bne.n	8006c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d122      	bne.n	8006c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c20:	4013      	ands	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d119      	bne.n	8006c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d10f      	bne.n	8006c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d107      	bne.n	8006c60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d001      	beq.n	8006c64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40023800 	.word	0x40023800

08006c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e041      	b.n	8006d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fb fd24 	bl	80026e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	f000 fe56 	bl	8007964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e041      	b.n	8006da8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d106      	bne.n	8006d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f839 	bl	8006db0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f000 fe07 	bl	8007964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <HAL_TIM_PWM_Start+0x24>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	bf14      	ite	ne
 8006de0:	2301      	movne	r3, #1
 8006de2:	2300      	moveq	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	e022      	b.n	8006e2e <HAL_TIM_PWM_Start+0x6a>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d109      	bne.n	8006e02 <HAL_TIM_PWM_Start+0x3e>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	bf14      	ite	ne
 8006dfa:	2301      	movne	r3, #1
 8006dfc:	2300      	moveq	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	e015      	b.n	8006e2e <HAL_TIM_PWM_Start+0x6a>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d109      	bne.n	8006e1c <HAL_TIM_PWM_Start+0x58>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	bf14      	ite	ne
 8006e14:	2301      	movne	r3, #1
 8006e16:	2300      	moveq	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	e008      	b.n	8006e2e <HAL_TIM_PWM_Start+0x6a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	bf14      	ite	ne
 8006e28:	2301      	movne	r3, #1
 8006e2a:	2300      	moveq	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e07c      	b.n	8006f30 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_PWM_Start+0x82>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e44:	e013      	b.n	8006e6e <HAL_TIM_PWM_Start+0xaa>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_PWM_Start+0x92>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e54:	e00b      	b.n	8006e6e <HAL_TIM_PWM_Start+0xaa>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d104      	bne.n	8006e66 <HAL_TIM_PWM_Start+0xa2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e64:	e003      	b.n	8006e6e <HAL_TIM_PWM_Start+0xaa>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2201      	movs	r2, #1
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f85e 	bl	8007f38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2d      	ldr	r2, [pc, #180]	; (8006f38 <HAL_TIM_PWM_Start+0x174>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_TIM_PWM_Start+0xcc>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a2c      	ldr	r2, [pc, #176]	; (8006f3c <HAL_TIM_PWM_Start+0x178>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIM_PWM_Start+0xd0>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <HAL_TIM_PWM_Start+0xd2>
 8006e94:	2300      	movs	r3, #0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d007      	beq.n	8006eaa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <HAL_TIM_PWM_Start+0x174>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d022      	beq.n	8006efa <HAL_TIM_PWM_Start+0x136>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ebc:	d01d      	beq.n	8006efa <HAL_TIM_PWM_Start+0x136>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <HAL_TIM_PWM_Start+0x17c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d018      	beq.n	8006efa <HAL_TIM_PWM_Start+0x136>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <HAL_TIM_PWM_Start+0x180>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <HAL_TIM_PWM_Start+0x136>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <HAL_TIM_PWM_Start+0x184>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00e      	beq.n	8006efa <HAL_TIM_PWM_Start+0x136>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <HAL_TIM_PWM_Start+0x178>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_TIM_PWM_Start+0x136>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_TIM_PWM_Start+0x188>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <HAL_TIM_PWM_Start+0x136>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a16      	ldr	r2, [pc, #88]	; (8006f50 <HAL_TIM_PWM_Start+0x18c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d111      	bne.n	8006f1e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b06      	cmp	r3, #6
 8006f0a:	d010      	beq.n	8006f2e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1c:	e007      	b.n	8006f2e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0201 	orr.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40010000 	.word	0x40010000
 8006f3c:	40010400 	.word	0x40010400
 8006f40:	40000400 	.word	0x40000400
 8006f44:	40000800 	.word	0x40000800
 8006f48:	40000c00 	.word	0x40000c00
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	40001800 	.word	0x40001800

08006f54 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e022      	b.n	8006fc6 <HAL_TIM_PWM_Start_DMA+0x72>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d109      	bne.n	8006f9a <HAL_TIM_PWM_Start_DMA+0x46>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	bf0c      	ite	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	2300      	movne	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	e015      	b.n	8006fc6 <HAL_TIM_PWM_Start_DMA+0x72>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d109      	bne.n	8006fb4 <HAL_TIM_PWM_Start_DMA+0x60>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e008      	b.n	8006fc6 <HAL_TIM_PWM_Start_DMA+0x72>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2301      	moveq	r3, #1
 8006fc2:	2300      	movne	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e171      	b.n	80072b2 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x94>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	bf0c      	ite	eq
 8006fe0:	2301      	moveq	r3, #1
 8006fe2:	2300      	movne	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	e022      	b.n	800702e <HAL_TIM_PWM_Start_DMA+0xda>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d109      	bne.n	8007002 <HAL_TIM_PWM_Start_DMA+0xae>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	bf0c      	ite	eq
 8006ffa:	2301      	moveq	r3, #1
 8006ffc:	2300      	movne	r3, #0
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	e015      	b.n	800702e <HAL_TIM_PWM_Start_DMA+0xda>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d109      	bne.n	800701c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b01      	cmp	r3, #1
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	e008      	b.n	800702e <HAL_TIM_PWM_Start_DMA+0xda>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	bf0c      	ite	eq
 8007028:	2301      	moveq	r3, #1
 800702a:	2300      	movne	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d024      	beq.n	800707c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <HAL_TIM_PWM_Start_DMA+0xee>
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e137      	b.n	80072b2 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <HAL_TIM_PWM_Start_DMA+0xfe>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007050:	e016      	b.n	8007080 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b04      	cmp	r3, #4
 8007056:	d104      	bne.n	8007062 <HAL_TIM_PWM_Start_DMA+0x10e>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007060:	e00e      	b.n	8007080 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b08      	cmp	r3, #8
 8007066:	d104      	bne.n	8007072 <HAL_TIM_PWM_Start_DMA+0x11e>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007070:	e006      	b.n	8007080 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800707a:	e001      	b.n	8007080 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e118      	b.n	80072b2 <HAL_TIM_PWM_Start_DMA+0x35e>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b0c      	cmp	r3, #12
 8007084:	f200 80ae 	bhi.w	80071e4 <HAL_TIM_PWM_Start_DMA+0x290>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070c5 	.word	0x080070c5
 8007094:	080071e5 	.word	0x080071e5
 8007098:	080071e5 	.word	0x080071e5
 800709c:	080071e5 	.word	0x080071e5
 80070a0:	0800710d 	.word	0x0800710d
 80070a4:	080071e5 	.word	0x080071e5
 80070a8:	080071e5 	.word	0x080071e5
 80070ac:	080071e5 	.word	0x080071e5
 80070b0:	08007155 	.word	0x08007155
 80070b4:	080071e5 	.word	0x080071e5
 80070b8:	080071e5 	.word	0x080071e5
 80070bc:	080071e5 	.word	0x080071e5
 80070c0:	0800719d 	.word	0x0800719d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	4a7c      	ldr	r2, [pc, #496]	; (80072bc <HAL_TIM_PWM_Start_DMA+0x368>)
 80070ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	4a7b      	ldr	r2, [pc, #492]	; (80072c0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	4a7a      	ldr	r2, [pc, #488]	; (80072c4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80070da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3334      	adds	r3, #52	; 0x34
 80070e8:	461a      	mov	r2, r3
 80070ea:	887b      	ldrh	r3, [r7, #2]
 80070ec:	f7fc fd1a 	bl	8003b24 <HAL_DMA_Start_IT>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e0db      	b.n	80072b2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007108:	60da      	str	r2, [r3, #12]
      break;
 800710a:	e06e      	b.n	80071ea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	4a6a      	ldr	r2, [pc, #424]	; (80072bc <HAL_TIM_PWM_Start_DMA+0x368>)
 8007112:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	4a69      	ldr	r2, [pc, #420]	; (80072c0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800711a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	4a68      	ldr	r2, [pc, #416]	; (80072c4 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007122:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3338      	adds	r3, #56	; 0x38
 8007130:	461a      	mov	r2, r3
 8007132:	887b      	ldrh	r3, [r7, #2]
 8007134:	f7fc fcf6 	bl	8003b24 <HAL_DMA_Start_IT>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e0b7      	b.n	80072b2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007150:	60da      	str	r2, [r3, #12]
      break;
 8007152:	e04a      	b.n	80071ea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	4a58      	ldr	r2, [pc, #352]	; (80072bc <HAL_TIM_PWM_Start_DMA+0x368>)
 800715a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4a57      	ldr	r2, [pc, #348]	; (80072c0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007162:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	4a56      	ldr	r2, [pc, #344]	; (80072c4 <HAL_TIM_PWM_Start_DMA+0x370>)
 800716a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	333c      	adds	r3, #60	; 0x3c
 8007178:	461a      	mov	r2, r3
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	f7fc fcd2 	bl	8003b24 <HAL_DMA_Start_IT>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e093      	b.n	80072b2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68da      	ldr	r2, [r3, #12]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007198:	60da      	str	r2, [r3, #12]
      break;
 800719a:	e026      	b.n	80071ea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	4a46      	ldr	r2, [pc, #280]	; (80072bc <HAL_TIM_PWM_Start_DMA+0x368>)
 80071a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	4a45      	ldr	r2, [pc, #276]	; (80072c0 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80071aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	4a44      	ldr	r2, [pc, #272]	; (80072c4 <HAL_TIM_PWM_Start_DMA+0x370>)
 80071b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3340      	adds	r3, #64	; 0x40
 80071c0:	461a      	mov	r2, r3
 80071c2:	887b      	ldrh	r3, [r7, #2]
 80071c4:	f7fc fcae 	bl	8003b24 <HAL_DMA_Start_IT>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e06f      	b.n	80072b2 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071e0:	60da      	str	r2, [r3, #12]
      break;
 80071e2:	e002      	b.n	80071ea <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	75fb      	strb	r3, [r7, #23]
      break;
 80071e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d15f      	bne.n	80072b0 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2201      	movs	r2, #1
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fe9d 	bl	8007f38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a31      	ldr	r2, [pc, #196]	; (80072c8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d004      	beq.n	8007212 <HAL_TIM_PWM_Start_DMA+0x2be>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2f      	ldr	r2, [pc, #188]	; (80072cc <HAL_TIM_PWM_Start_DMA+0x378>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d101      	bne.n	8007216 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800722a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a25      	ldr	r2, [pc, #148]	; (80072c8 <HAL_TIM_PWM_Start_DMA+0x374>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d022      	beq.n	800727c <HAL_TIM_PWM_Start_DMA+0x328>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723e:	d01d      	beq.n	800727c <HAL_TIM_PWM_Start_DMA+0x328>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a22      	ldr	r2, [pc, #136]	; (80072d0 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d018      	beq.n	800727c <HAL_TIM_PWM_Start_DMA+0x328>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a21      	ldr	r2, [pc, #132]	; (80072d4 <HAL_TIM_PWM_Start_DMA+0x380>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <HAL_TIM_PWM_Start_DMA+0x328>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1f      	ldr	r2, [pc, #124]	; (80072d8 <HAL_TIM_PWM_Start_DMA+0x384>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00e      	beq.n	800727c <HAL_TIM_PWM_Start_DMA+0x328>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a1a      	ldr	r2, [pc, #104]	; (80072cc <HAL_TIM_PWM_Start_DMA+0x378>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d009      	beq.n	800727c <HAL_TIM_PWM_Start_DMA+0x328>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1b      	ldr	r2, [pc, #108]	; (80072dc <HAL_TIM_PWM_Start_DMA+0x388>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_TIM_PWM_Start_DMA+0x328>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1a      	ldr	r2, [pc, #104]	; (80072e0 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d111      	bne.n	80072a0 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b06      	cmp	r3, #6
 800728c:	d010      	beq.n	80072b0 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729e:	e007      	b.n	80072b0 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	08007855 	.word	0x08007855
 80072c0:	080078fd 	.word	0x080078fd
 80072c4:	080077c3 	.word	0x080077c3
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40010400 	.word	0x40010400
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	40000c00 	.word	0x40000c00
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40001800 	.word	0x40001800

080072e4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	d855      	bhi.n	80073a4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80072f8:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007335 	.word	0x08007335
 8007304:	080073a5 	.word	0x080073a5
 8007308:	080073a5 	.word	0x080073a5
 800730c:	080073a5 	.word	0x080073a5
 8007310:	08007351 	.word	0x08007351
 8007314:	080073a5 	.word	0x080073a5
 8007318:	080073a5 	.word	0x080073a5
 800731c:	080073a5 	.word	0x080073a5
 8007320:	0800736d 	.word	0x0800736d
 8007324:	080073a5 	.word	0x080073a5
 8007328:	080073a5 	.word	0x080073a5
 800732c:	080073a5 	.word	0x080073a5
 8007330:	08007389 	.word	0x08007389
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007342:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	4618      	mov	r0, r3
 800734a:	f7fc fcb3 	bl	8003cb4 <HAL_DMA_Abort_IT>
      break;
 800734e:	e02c      	b.n	80073aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	4618      	mov	r0, r3
 8007366:	f7fc fca5 	bl	8003cb4 <HAL_DMA_Abort_IT>
      break;
 800736a:	e01e      	b.n	80073aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800737a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	4618      	mov	r0, r3
 8007382:	f7fc fc97 	bl	8003cb4 <HAL_DMA_Abort_IT>
      break;
 8007386:	e010      	b.n	80073aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007396:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	4618      	mov	r0, r3
 800739e:	f7fc fc89 	bl	8003cb4 <HAL_DMA_Abort_IT>
      break;
 80073a2:	e002      	b.n	80073aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
      break;
 80073a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d161      	bne.n	8007474 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2200      	movs	r2, #0
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 fdbd 	bl	8007f38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <HAL_TIM_PWM_Stop_DMA+0xee>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a2d      	ldr	r2, [pc, #180]	; (8007484 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d101      	bne.n	80073d6 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80073d6:	2300      	movs	r3, #0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d017      	beq.n	800740c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6a1a      	ldr	r2, [r3, #32]
 80073e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80073e6:	4013      	ands	r3, r2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10f      	bne.n	800740c <HAL_TIM_PWM_Stop_DMA+0x128>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a1a      	ldr	r2, [r3, #32]
 80073f2:	f240 4344 	movw	r3, #1092	; 0x444
 80073f6:	4013      	ands	r3, r2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d107      	bne.n	800740c <HAL_TIM_PWM_Stop_DMA+0x128>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800740a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	f241 1311 	movw	r3, #4369	; 0x1111
 8007416:	4013      	ands	r3, r2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10f      	bne.n	800743c <HAL_TIM_PWM_Stop_DMA+0x158>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6a1a      	ldr	r2, [r3, #32]
 8007422:	f240 4344 	movw	r3, #1092	; 0x444
 8007426:	4013      	ands	r3, r2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d107      	bne.n	800743c <HAL_TIM_PWM_Stop_DMA+0x158>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0201 	bic.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <HAL_TIM_PWM_Stop_DMA+0x168>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800744a:	e013      	b.n	8007474 <HAL_TIM_PWM_Stop_DMA+0x190>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d104      	bne.n	800745c <HAL_TIM_PWM_Stop_DMA+0x178>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800745a:	e00b      	b.n	8007474 <HAL_TIM_PWM_Stop_DMA+0x190>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2b08      	cmp	r3, #8
 8007460:	d104      	bne.n	800746c <HAL_TIM_PWM_Stop_DMA+0x188>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800746a:	e003      	b.n	8007474 <HAL_TIM_PWM_Stop_DMA+0x190>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40010000 	.word	0x40010000
 8007484:	40010400 	.word	0x40010400

08007488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074a2:	2302      	movs	r3, #2
 80074a4:	e0ae      	b.n	8007604 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b0c      	cmp	r3, #12
 80074b2:	f200 809f 	bhi.w	80075f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074f1 	.word	0x080074f1
 80074c0:	080075f5 	.word	0x080075f5
 80074c4:	080075f5 	.word	0x080075f5
 80074c8:	080075f5 	.word	0x080075f5
 80074cc:	08007531 	.word	0x08007531
 80074d0:	080075f5 	.word	0x080075f5
 80074d4:	080075f5 	.word	0x080075f5
 80074d8:	080075f5 	.word	0x080075f5
 80074dc:	08007573 	.word	0x08007573
 80074e0:	080075f5 	.word	0x080075f5
 80074e4:	080075f5 	.word	0x080075f5
 80074e8:	080075f5 	.word	0x080075f5
 80074ec:	080075b3 	.word	0x080075b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 fad4 	bl	8007aa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699a      	ldr	r2, [r3, #24]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0208 	orr.w	r2, r2, #8
 800750a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0204 	bic.w	r2, r2, #4
 800751a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6999      	ldr	r1, [r3, #24]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691a      	ldr	r2, [r3, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	619a      	str	r2, [r3, #24]
      break;
 800752e:	e064      	b.n	80075fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fb24 	bl	8007b84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800754a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800755a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6999      	ldr	r1, [r3, #24]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	021a      	lsls	r2, r3, #8
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	619a      	str	r2, [r3, #24]
      break;
 8007570:	e043      	b.n	80075fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68b9      	ldr	r1, [r7, #8]
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fb79 	bl	8007c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69da      	ldr	r2, [r3, #28]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0208 	orr.w	r2, r2, #8
 800758c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0204 	bic.w	r2, r2, #4
 800759c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69d9      	ldr	r1, [r3, #28]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	61da      	str	r2, [r3, #28]
      break;
 80075b0:	e023      	b.n	80075fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fbcd 	bl	8007d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69d9      	ldr	r1, [r3, #28]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	021a      	lsls	r2, r3, #8
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	61da      	str	r2, [r3, #28]
      break;
 80075f2:	e002      	b.n	80075fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
      break;
 80075f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_TIM_ConfigClockSource+0x1c>
 8007624:	2302      	movs	r3, #2
 8007626:	e0b4      	b.n	8007792 <HAL_TIM_ConfigClockSource+0x186>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800764e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007660:	d03e      	beq.n	80076e0 <HAL_TIM_ConfigClockSource+0xd4>
 8007662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007666:	f200 8087 	bhi.w	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 800766a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766e:	f000 8086 	beq.w	800777e <HAL_TIM_ConfigClockSource+0x172>
 8007672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007676:	d87f      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 8007678:	2b70      	cmp	r3, #112	; 0x70
 800767a:	d01a      	beq.n	80076b2 <HAL_TIM_ConfigClockSource+0xa6>
 800767c:	2b70      	cmp	r3, #112	; 0x70
 800767e:	d87b      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 8007680:	2b60      	cmp	r3, #96	; 0x60
 8007682:	d050      	beq.n	8007726 <HAL_TIM_ConfigClockSource+0x11a>
 8007684:	2b60      	cmp	r3, #96	; 0x60
 8007686:	d877      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b50      	cmp	r3, #80	; 0x50
 800768a:	d03c      	beq.n	8007706 <HAL_TIM_ConfigClockSource+0xfa>
 800768c:	2b50      	cmp	r3, #80	; 0x50
 800768e:	d873      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	d058      	beq.n	8007746 <HAL_TIM_ConfigClockSource+0x13a>
 8007694:	2b40      	cmp	r3, #64	; 0x40
 8007696:	d86f      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 8007698:	2b30      	cmp	r3, #48	; 0x30
 800769a:	d064      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0x15a>
 800769c:	2b30      	cmp	r3, #48	; 0x30
 800769e:	d86b      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d060      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0x15a>
 80076a4:	2b20      	cmp	r3, #32
 80076a6:	d867      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d05c      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0x15a>
 80076ac:	2b10      	cmp	r3, #16
 80076ae:	d05a      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0x15a>
 80076b0:	e062      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6899      	ldr	r1, [r3, #8]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f000 fc19 	bl	8007ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	609a      	str	r2, [r3, #8]
      break;
 80076de:	e04f      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	6899      	ldr	r1, [r3, #8]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f000 fc02 	bl	8007ef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007702:	609a      	str	r2, [r3, #8]
      break;
 8007704:	e03c      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6818      	ldr	r0, [r3, #0]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6859      	ldr	r1, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	461a      	mov	r2, r3
 8007714:	f000 fb76 	bl	8007e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2150      	movs	r1, #80	; 0x50
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fbcf 	bl	8007ec2 <TIM_ITRx_SetConfig>
      break;
 8007724:	e02c      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	6859      	ldr	r1, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	461a      	mov	r2, r3
 8007734:	f000 fb95 	bl	8007e62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2160      	movs	r1, #96	; 0x60
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fbbf 	bl	8007ec2 <TIM_ITRx_SetConfig>
      break;
 8007744:	e01c      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	6859      	ldr	r1, [r3, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	461a      	mov	r2, r3
 8007754:	f000 fb56 	bl	8007e04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2140      	movs	r1, #64	; 0x40
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fbaf 	bl	8007ec2 <TIM_ITRx_SetConfig>
      break;
 8007764:	e00c      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f000 fba6 	bl	8007ec2 <TIM_ITRx_SetConfig>
      break;
 8007776:	e003      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
      break;
 800777c:	e000      	b.n	8007780 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800777e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d107      	bne.n	80077ea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077e8:	e02a      	b.n	8007840 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d107      	bne.n	8007804 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2202      	movs	r2, #2
 80077f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007802:	e01d      	b.n	8007840 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	429a      	cmp	r2, r3
 800780c:	d107      	bne.n	800781e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2204      	movs	r2, #4
 8007812:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800781c:	e010      	b.n	8007840 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	429a      	cmp	r2, r3
 8007826:	d107      	bne.n	8007838 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2208      	movs	r2, #8
 800782c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007836:	e003      	b.n	8007840 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007840:	68f8      	ldr	r0, [r7, #12]
 8007842:	f7ff ffb4 	bl	80077ae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d10b      	bne.n	8007884 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d136      	bne.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007882:	e031      	b.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	429a      	cmp	r2, r3
 800788c:	d10b      	bne.n	80078a6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2202      	movs	r2, #2
 8007892:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d125      	bne.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a4:	e020      	b.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d10b      	bne.n	80078c8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2204      	movs	r2, #4
 80078b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d114      	bne.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078c6:	e00f      	b.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d10a      	bne.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2208      	movs	r2, #8
 80078d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d103      	bne.n	80078e8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7fa fe07 	bl	80024fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	771a      	strb	r2, [r3, #28]
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	429a      	cmp	r2, r3
 8007912:	d103      	bne.n	800791c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	771a      	strb	r2, [r3, #28]
 800791a:	e019      	b.n	8007950 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d103      	bne.n	800792e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2202      	movs	r2, #2
 800792a:	771a      	strb	r2, [r3, #28]
 800792c:	e010      	b.n	8007950 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d103      	bne.n	8007940 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2204      	movs	r2, #4
 800793c:	771a      	strb	r2, [r3, #28]
 800793e:	e007      	b.n	8007950 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	429a      	cmp	r2, r3
 8007948:	d102      	bne.n	8007950 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2208      	movs	r2, #8
 800794e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff ff22 	bl	800779a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	771a      	strb	r2, [r3, #28]
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a40      	ldr	r2, [pc, #256]	; (8007a78 <TIM_Base_SetConfig+0x114>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d013      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007982:	d00f      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a3d      	ldr	r2, [pc, #244]	; (8007a7c <TIM_Base_SetConfig+0x118>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00b      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a3c      	ldr	r2, [pc, #240]	; (8007a80 <TIM_Base_SetConfig+0x11c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d007      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a3b      	ldr	r2, [pc, #236]	; (8007a84 <TIM_Base_SetConfig+0x120>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d003      	beq.n	80079a4 <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3a      	ldr	r2, [pc, #232]	; (8007a88 <TIM_Base_SetConfig+0x124>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d108      	bne.n	80079b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a2f      	ldr	r2, [pc, #188]	; (8007a78 <TIM_Base_SetConfig+0x114>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d02b      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c4:	d027      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a2c      	ldr	r2, [pc, #176]	; (8007a7c <TIM_Base_SetConfig+0x118>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d023      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2b      	ldr	r2, [pc, #172]	; (8007a80 <TIM_Base_SetConfig+0x11c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d01f      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a2a      	ldr	r2, [pc, #168]	; (8007a84 <TIM_Base_SetConfig+0x120>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d01b      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a29      	ldr	r2, [pc, #164]	; (8007a88 <TIM_Base_SetConfig+0x124>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d017      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a28      	ldr	r2, [pc, #160]	; (8007a8c <TIM_Base_SetConfig+0x128>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d013      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a27      	ldr	r2, [pc, #156]	; (8007a90 <TIM_Base_SetConfig+0x12c>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d00f      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a26      	ldr	r2, [pc, #152]	; (8007a94 <TIM_Base_SetConfig+0x130>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00b      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a25      	ldr	r2, [pc, #148]	; (8007a98 <TIM_Base_SetConfig+0x134>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d007      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a24      	ldr	r2, [pc, #144]	; (8007a9c <TIM_Base_SetConfig+0x138>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d003      	beq.n	8007a16 <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a23      	ldr	r2, [pc, #140]	; (8007aa0 <TIM_Base_SetConfig+0x13c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d108      	bne.n	8007a28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <TIM_Base_SetConfig+0x114>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_Base_SetConfig+0xf8>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a0c      	ldr	r2, [pc, #48]	; (8007a88 <TIM_Base_SetConfig+0x124>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d103      	bne.n	8007a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691a      	ldr	r2, [r3, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	615a      	str	r2, [r3, #20]
}
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800
 8007a84:	40000c00 	.word	0x40000c00
 8007a88:	40010400 	.word	0x40010400
 8007a8c:	40014000 	.word	0x40014000
 8007a90:	40014400 	.word	0x40014400
 8007a94:	40014800 	.word	0x40014800
 8007a98:	40001800 	.word	0x40001800
 8007a9c:	40001c00 	.word	0x40001c00
 8007aa0:	40002000 	.word	0x40002000

08007aa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	f023 0201 	bic.w	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f023 0303 	bic.w	r3, r3, #3
 8007ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 0302 	bic.w	r3, r3, #2
 8007aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a20      	ldr	r2, [pc, #128]	; (8007b7c <TIM_OC1_SetConfig+0xd8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_OC1_SetConfig+0x64>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <TIM_OC1_SetConfig+0xdc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d10c      	bne.n	8007b22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0308 	bic.w	r3, r3, #8
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f023 0304 	bic.w	r3, r3, #4
 8007b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a15      	ldr	r2, [pc, #84]	; (8007b7c <TIM_OC1_SetConfig+0xd8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d003      	beq.n	8007b32 <TIM_OC1_SetConfig+0x8e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <TIM_OC1_SetConfig+0xdc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d111      	bne.n	8007b56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	621a      	str	r2, [r3, #32]
}
 8007b70:	bf00      	nop
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40010400 	.word	0x40010400

08007b84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f023 0210 	bic.w	r2, r3, #16
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 0320 	bic.w	r3, r3, #32
 8007bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a22      	ldr	r2, [pc, #136]	; (8007c68 <TIM_OC2_SetConfig+0xe4>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_OC2_SetConfig+0x68>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a21      	ldr	r2, [pc, #132]	; (8007c6c <TIM_OC2_SetConfig+0xe8>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d10d      	bne.n	8007c08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a17      	ldr	r2, [pc, #92]	; (8007c68 <TIM_OC2_SetConfig+0xe4>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_OC2_SetConfig+0x94>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a16      	ldr	r2, [pc, #88]	; (8007c6c <TIM_OC2_SetConfig+0xe8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d113      	bne.n	8007c40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	621a      	str	r2, [r3, #32]
}
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	40010400 	.word	0x40010400

08007c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a21      	ldr	r2, [pc, #132]	; (8007d50 <TIM_OC3_SetConfig+0xe0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d003      	beq.n	8007cd6 <TIM_OC3_SetConfig+0x66>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a20      	ldr	r2, [pc, #128]	; (8007d54 <TIM_OC3_SetConfig+0xe4>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d10d      	bne.n	8007cf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <TIM_OC3_SetConfig+0xe0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d003      	beq.n	8007d02 <TIM_OC3_SetConfig+0x92>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <TIM_OC3_SetConfig+0xe4>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d113      	bne.n	8007d2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	621a      	str	r2, [r3, #32]
}
 8007d44:	bf00      	nop
 8007d46:	371c      	adds	r7, #28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40010400 	.word	0x40010400

08007d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	021b      	lsls	r3, r3, #8
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	031b      	lsls	r3, r3, #12
 8007daa:	693a      	ldr	r2, [r7, #16]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a12      	ldr	r2, [pc, #72]	; (8007dfc <TIM_OC4_SetConfig+0xa4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_OC4_SetConfig+0x68>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a11      	ldr	r2, [pc, #68]	; (8007e00 <TIM_OC4_SetConfig+0xa8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d109      	bne.n	8007dd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	019b      	lsls	r3, r3, #6
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	40010000 	.word	0x40010000
 8007e00:	40010400 	.word	0x40010400

08007e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	f023 0201 	bic.w	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f023 030a 	bic.w	r3, r3, #10
 8007e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	621a      	str	r2, [r3, #32]
}
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b087      	sub	sp, #28
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f023 0210 	bic.w	r2, r3, #16
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	031b      	lsls	r3, r3, #12
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	011b      	lsls	r3, r3, #4
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	f043 0307 	orr.w	r3, r3, #7
 8007ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	609a      	str	r2, [r3, #8]
}
 8007eec:	bf00      	nop
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	021a      	lsls	r2, r3, #8
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	609a      	str	r2, [r3, #8]
}
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f003 031f 	and.w	r3, r3, #31
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	401a      	ands	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1a      	ldr	r2, [r3, #32]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f003 031f 	and.w	r3, r3, #31
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f70:	431a      	orrs	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
	...

08007f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e05a      	b.n	8008052 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a21      	ldr	r2, [pc, #132]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d022      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe8:	d01d      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d018      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1b      	ldr	r2, [pc, #108]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d013      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a1a      	ldr	r2, [pc, #104]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00e      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a18      	ldr	r2, [pc, #96]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d009      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a17      	ldr	r2, [pc, #92]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d004      	beq.n	8008026 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a15      	ldr	r2, [pc, #84]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d10c      	bne.n	8008040 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800802c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	4313      	orrs	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	40010000 	.word	0x40010000
 8008064:	40000400 	.word	0x40000400
 8008068:	40000800 	.word	0x40000800
 800806c:	40000c00 	.word	0x40000c00
 8008070:	40010400 	.word	0x40010400
 8008074:	40014000 	.word	0x40014000
 8008078:	40001800 	.word	0x40001800

0800807c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008086:	2300      	movs	r3, #0
 8008088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008094:	2302      	movs	r3, #2
 8008096:	e03d      	b.n	8008114 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e03f      	b.n	80081b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fa fc30 	bl	80029ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2224      	movs	r2, #36	; 0x24
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fdc7 	bl	8008cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695a      	ldr	r2, [r3, #20]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08c      	sub	sp, #48	; 0x30
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4613      	mov	r3, r2
 80081c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	d165      	bne.n	80082a2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <HAL_UART_Transmit_DMA+0x26>
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e05e      	b.n	80082a4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_UART_Transmit_DMA+0x38>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e057      	b.n	80082a4 <HAL_UART_Transmit_DMA+0xe8>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2221      	movs	r2, #33	; 0x21
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008220:	4a22      	ldr	r2, [pc, #136]	; (80082ac <HAL_UART_Transmit_DMA+0xf0>)
 8008222:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	4a21      	ldr	r2, [pc, #132]	; (80082b0 <HAL_UART_Transmit_DMA+0xf4>)
 800822a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <HAL_UART_Transmit_DMA+0xf8>)
 8008232:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008238:	2200      	movs	r2, #0
 800823a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800823c:	f107 0308 	add.w	r3, r7, #8
 8008240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	6819      	ldr	r1, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3304      	adds	r3, #4
 8008250:	461a      	mov	r2, r3
 8008252:	88fb      	ldrh	r3, [r7, #6]
 8008254:	f7fb fc66 	bl	8003b24 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008260:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3314      	adds	r3, #20
 8008270:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	617b      	str	r3, [r7, #20]
   return(result);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3314      	adds	r3, #20
 8008288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828a:	627a      	str	r2, [r7, #36]	; 0x24
 800828c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6a39      	ldr	r1, [r7, #32]
 8008290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	61fb      	str	r3, [r7, #28]
   return(result);
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e000      	b.n	80082a4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
  }
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3730      	adds	r7, #48	; 0x30
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	08008829 	.word	0x08008829
 80082b0:	080088c3 	.word	0x080088c3
 80082b4:	080088df 	.word	0x080088df

080082b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b0ba      	sub	sp, #232	; 0xe8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80082de:	2300      	movs	r3, #0
 80082e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80082f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10f      	bne.n	800831e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <HAL_UART_IRQHandler+0x66>
 800830a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fc32 	bl	8008b80 <UART_Receive_IT>
      return;
 800831c:	e256      	b.n	80087cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800831e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 80de 	beq.w	80084e4 <HAL_UART_IRQHandler+0x22c>
 8008328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008338:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80d1 	beq.w	80084e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00b      	beq.n	8008366 <HAL_UART_IRQHandler+0xae>
 800834e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008356:	2b00      	cmp	r3, #0
 8008358:	d005      	beq.n	8008366 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835e:	f043 0201 	orr.w	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836a:	f003 0304 	and.w	r3, r3, #4
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <HAL_UART_IRQHandler+0xd2>
 8008372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008382:	f043 0202 	orr.w	r2, r3, #2
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00b      	beq.n	80083ae <HAL_UART_IRQHandler+0xf6>
 8008396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	f043 0204 	orr.w	r2, r3, #4
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d011      	beq.n	80083de <HAL_UART_IRQHandler+0x126>
 80083ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80083c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d005      	beq.n	80083de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	f043 0208 	orr.w	r2, r3, #8
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 81ed 	beq.w	80087c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <HAL_UART_IRQHandler+0x14e>
 80083f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fbbd 	bl	8008b80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	bf0c      	ite	eq
 8008414:	2301      	moveq	r3, #1
 8008416:	2300      	movne	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	f003 0308 	and.w	r3, r3, #8
 8008426:	2b00      	cmp	r3, #0
 8008428:	d103      	bne.n	8008432 <HAL_UART_IRQHandler+0x17a>
 800842a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800842e:	2b00      	cmp	r3, #0
 8008430:	d04f      	beq.n	80084d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fac5 	bl	80089c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d141      	bne.n	80084ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3314      	adds	r3, #20
 800844c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800845c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3314      	adds	r3, #20
 800846e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008472:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800847e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800848a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1d9      	bne.n	8008446 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	2b00      	cmp	r3, #0
 8008498:	d013      	beq.n	80084c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849e:	4a7d      	ldr	r2, [pc, #500]	; (8008694 <HAL_UART_IRQHandler+0x3dc>)
 80084a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7fb fc04 	bl	8003cb4 <HAL_DMA_Abort_IT>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d016      	beq.n	80084e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c0:	e00e      	b.n	80084e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f99a 	bl	80087fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c8:	e00a      	b.n	80084e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f996 	bl	80087fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d0:	e006      	b.n	80084e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f992 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084de:	e170      	b.n	80087c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e0:	bf00      	nop
    return;
 80084e2:	e16e      	b.n	80087c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	f040 814a 	bne.w	8008782 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f2:	f003 0310 	and.w	r3, r3, #16
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8143 	beq.w	8008782 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 813c 	beq.w	8008782 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800850a:	2300      	movs	r3, #0
 800850c:	60bb      	str	r3, [r7, #8]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60bb      	str	r3, [r7, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	f040 80b4 	bne.w	8008698 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800853c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8140 	beq.w	80087c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800854a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800854e:	429a      	cmp	r2, r3
 8008550:	f080 8139 	bcs.w	80087c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800855a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008566:	f000 8088 	beq.w	800867a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	330c      	adds	r3, #12
 8008570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	330c      	adds	r3, #12
 8008592:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800859a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1d9      	bne.n	800856a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3314      	adds	r3, #20
 80085bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085c8:	f023 0301 	bic.w	r3, r3, #1
 80085cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3314      	adds	r3, #20
 80085d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e1      	bne.n	80085b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3314      	adds	r3, #20
 80085f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085fc:	e853 3f00 	ldrex	r3, [r3]
 8008600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3314      	adds	r3, #20
 8008612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800861c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e3      	bne.n	80085f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	330c      	adds	r3, #12
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800864a:	f023 0310 	bic.w	r3, r3, #16
 800864e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	330c      	adds	r3, #12
 8008658:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800865c:	65ba      	str	r2, [r7, #88]	; 0x58
 800865e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008662:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800866a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e3      	bne.n	8008638 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	4618      	mov	r0, r3
 8008676:	f7fb faad 	bl	8003bd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008682:	b29b      	uxth	r3, r3
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	b29b      	uxth	r3, r3
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f8c0 	bl	8008810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008690:	e099      	b.n	80087c6 <HAL_UART_IRQHandler+0x50e>
 8008692:	bf00      	nop
 8008694:	08008a89 	.word	0x08008a89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 808b 	beq.w	80087ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80086b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8086 	beq.w	80087ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	330c      	adds	r3, #12
 80086de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80086e2:	647a      	str	r2, [r7, #68]	; 0x44
 80086e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e3      	bne.n	80086be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3314      	adds	r3, #20
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	623b      	str	r3, [r7, #32]
   return(result);
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	f023 0301 	bic.w	r3, r3, #1
 800870c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3314      	adds	r3, #20
 8008716:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800871a:	633a      	str	r2, [r7, #48]	; 0x30
 800871c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e3      	bne.n	80086f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	330c      	adds	r3, #12
 8008742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	e853 3f00 	ldrex	r3, [r3]
 800874a:	60fb      	str	r3, [r7, #12]
   return(result);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0310 	bic.w	r3, r3, #16
 8008752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	330c      	adds	r3, #12
 800875c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008760:	61fa      	str	r2, [r7, #28]
 8008762:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	69b9      	ldr	r1, [r7, #24]
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	617b      	str	r3, [r7, #20]
   return(result);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e3      	bne.n	800873c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f848 	bl	8008810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008780:	e023      	b.n	80087ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <HAL_UART_IRQHandler+0x4ea>
 800878e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f988 	bl	8008ab0 <UART_Transmit_IT>
    return;
 80087a0:	e014      	b.n	80087cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00e      	beq.n	80087cc <HAL_UART_IRQHandler+0x514>
 80087ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d008      	beq.n	80087cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9c8 	bl	8008b50 <UART_EndTransmit_IT>
    return;
 80087c0:	e004      	b.n	80087cc <HAL_UART_IRQHandler+0x514>
    return;
 80087c2:	bf00      	nop
 80087c4:	e002      	b.n	80087cc <HAL_UART_IRQHandler+0x514>
      return;
 80087c6:	bf00      	nop
 80087c8:	e000      	b.n	80087cc <HAL_UART_IRQHandler+0x514>
      return;
 80087ca:	bf00      	nop
  }
}
 80087cc:	37e8      	adds	r7, #232	; 0xe8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop

080087d4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b090      	sub	sp, #64	; 0x40
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008840:	2b00      	cmp	r3, #0
 8008842:	d137      	bne.n	80088b4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008846:	2200      	movs	r2, #0
 8008848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800884a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3314      	adds	r3, #20
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	e853 3f00 	ldrex	r3, [r3]
 8008858:	623b      	str	r3, [r7, #32]
   return(result);
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008860:	63bb      	str	r3, [r7, #56]	; 0x38
 8008862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3314      	adds	r3, #20
 8008868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800886a:	633a      	str	r2, [r7, #48]	; 0x30
 800886c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e5      	bne.n	800884a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	330c      	adds	r3, #12
 8008884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	60fb      	str	r3, [r7, #12]
   return(result);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
 8008896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	330c      	adds	r3, #12
 800889c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800889e:	61fa      	str	r2, [r7, #28]
 80088a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	69b9      	ldr	r1, [r7, #24]
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	617b      	str	r3, [r7, #20]
   return(result);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e5      	bne.n	800887e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088b2:	e002      	b.n	80088ba <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80088b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80088b6:	f7f9 fe0f 	bl	80024d8 <HAL_UART_TxCpltCallback>
}
 80088ba:	bf00      	nop
 80088bc:	3740      	adds	r7, #64	; 0x40
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff ff7f 	bl	80087d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fa:	2b80      	cmp	r3, #128	; 0x80
 80088fc:	bf0c      	ite	eq
 80088fe:	2301      	moveq	r3, #1
 8008900:	2300      	movne	r3, #0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b21      	cmp	r3, #33	; 0x21
 8008910:	d108      	bne.n	8008924 <UART_DMAError+0x46>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2200      	movs	r2, #0
 800891c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800891e:	68b8      	ldr	r0, [r7, #8]
 8008920:	f000 f827 	bl	8008972 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892e:	2b40      	cmp	r3, #64	; 0x40
 8008930:	bf0c      	ite	eq
 8008932:	2301      	moveq	r3, #1
 8008934:	2300      	movne	r3, #0
 8008936:	b2db      	uxtb	r3, r3
 8008938:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b22      	cmp	r3, #34	; 0x22
 8008944:	d108      	bne.n	8008958 <UART_DMAError+0x7a>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2200      	movs	r2, #0
 8008950:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008952:	68b8      	ldr	r0, [r7, #8]
 8008954:	f000 f835 	bl	80089c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895c:	f043 0210 	orr.w	r2, r3, #16
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008964:	68b8      	ldr	r0, [r7, #8]
 8008966:	f7ff ff49 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800896a:	bf00      	nop
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008972:	b480      	push	{r7}
 8008974:	b089      	sub	sp, #36	; 0x24
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	330c      	adds	r3, #12
 8008980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	60bb      	str	r3, [r7, #8]
   return(result);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008990:	61fb      	str	r3, [r7, #28]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	330c      	adds	r3, #12
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	61ba      	str	r2, [r7, #24]
 800899c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6979      	ldr	r1, [r7, #20]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	613b      	str	r3, [r7, #16]
   return(result);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e5      	bne.n	800897a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80089b6:	bf00      	nop
 80089b8:	3724      	adds	r7, #36	; 0x24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b095      	sub	sp, #84	; 0x54
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	330c      	adds	r3, #12
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	330c      	adds	r3, #12
 80089e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089ea:	643a      	str	r2, [r7, #64]	; 0x40
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e5      	bne.n	80089ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3314      	adds	r3, #20
 8008a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	f023 0301 	bic.w	r3, r3, #1
 8008a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3314      	adds	r3, #20
 8008a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e5      	bne.n	80089fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d119      	bne.n	8008a6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	330c      	adds	r3, #12
 8008a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f023 0310 	bic.w	r3, r3, #16
 8008a50:	647b      	str	r3, [r7, #68]	; 0x44
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	330c      	adds	r3, #12
 8008a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a5a:	61ba      	str	r2, [r7, #24]
 8008a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	6979      	ldr	r1, [r7, #20]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	613b      	str	r3, [r7, #16]
   return(result);
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e5      	bne.n	8008a3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008a7c:	bf00      	nop
 8008a7e:	3754      	adds	r7, #84	; 0x54
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f7ff feaa 	bl	80087fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b21      	cmp	r3, #33	; 0x21
 8008ac2:	d13e      	bne.n	8008b42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008acc:	d114      	bne.n	8008af8 <UART_Transmit_IT+0x48>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d110      	bne.n	8008af8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	1c9a      	adds	r2, r3, #2
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	621a      	str	r2, [r3, #32]
 8008af6:	e008      	b.n	8008b0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	1c59      	adds	r1, r3, #1
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6211      	str	r1, [r2, #32]
 8008b02:	781a      	ldrb	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	4619      	mov	r1, r3
 8008b18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10f      	bne.n	8008b3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68da      	ldr	r2, [r3, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	e000      	b.n	8008b44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b42:	2302      	movs	r3, #2
  }
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7f9 fcb1 	bl	80024d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08c      	sub	sp, #48	; 0x30
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b22      	cmp	r3, #34	; 0x22
 8008b92:	f040 80ab 	bne.w	8008cec <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9e:	d117      	bne.n	8008bd0 <UART_Receive_IT+0x50>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d113      	bne.n	8008bd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc8:	1c9a      	adds	r2, r3, #2
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	629a      	str	r2, [r3, #40]	; 0x28
 8008bce:	e026      	b.n	8008c1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008be2:	d007      	beq.n	8008bf4 <UART_Receive_IT+0x74>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <UART_Receive_IT+0x82>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	e008      	b.n	8008c14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d15a      	bne.n	8008ce8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 0220 	bic.w	r2, r2, #32
 8008c40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68da      	ldr	r2, [r3, #12]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	695a      	ldr	r2, [r3, #20]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f022 0201 	bic.w	r2, r2, #1
 8008c60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2220      	movs	r2, #32
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d135      	bne.n	8008cde <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	613b      	str	r3, [r7, #16]
   return(result);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f023 0310 	bic.w	r3, r3, #16
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	330c      	adds	r3, #12
 8008c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c98:	623a      	str	r2, [r7, #32]
 8008c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	69f9      	ldr	r1, [r7, #28]
 8008c9e:	6a3a      	ldr	r2, [r7, #32]
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e5      	bne.n	8008c78 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d10a      	bne.n	8008cd0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff fd9a 	bl	8008810 <HAL_UARTEx_RxEventCallback>
 8008cdc:	e002      	b.n	8008ce4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff fd82 	bl	80087e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e002      	b.n	8008cee <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	e000      	b.n	8008cee <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008cec:	2302      	movs	r3, #2
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3730      	adds	r7, #48	; 0x30
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfc:	b09f      	sub	sp, #124	; 0x7c
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0e:	68d9      	ldr	r1, [r3, #12]
 8008d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	ea40 0301 	orr.w	r3, r0, r1
 8008d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d3c:	f021 010c 	bic.w	r1, r1, #12
 8008d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d46:	430b      	orrs	r3, r1
 8008d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d56:	6999      	ldr	r1, [r3, #24]
 8008d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	ea40 0301 	orr.w	r3, r0, r1
 8008d60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	4bc5      	ldr	r3, [pc, #788]	; (800907c <UART_SetConfig+0x384>)
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d004      	beq.n	8008d76 <UART_SetConfig+0x7e>
 8008d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	4bc3      	ldr	r3, [pc, #780]	; (8009080 <UART_SetConfig+0x388>)
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d103      	bne.n	8008d7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d76:	f7fd fb19 	bl	80063ac <HAL_RCC_GetPCLK2Freq>
 8008d7a:	6778      	str	r0, [r7, #116]	; 0x74
 8008d7c:	e002      	b.n	8008d84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d7e:	f7fd fb01 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8008d82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d8c:	f040 80b6 	bne.w	8008efc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d92:	461c      	mov	r4, r3
 8008d94:	f04f 0500 	mov.w	r5, #0
 8008d98:	4622      	mov	r2, r4
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	1891      	adds	r1, r2, r2
 8008d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8008da0:	415b      	adcs	r3, r3
 8008da2:	647b      	str	r3, [r7, #68]	; 0x44
 8008da4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008da8:	1912      	adds	r2, r2, r4
 8008daa:	eb45 0303 	adc.w	r3, r5, r3
 8008dae:	f04f 0000 	mov.w	r0, #0
 8008db2:	f04f 0100 	mov.w	r1, #0
 8008db6:	00d9      	lsls	r1, r3, #3
 8008db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008dbc:	00d0      	lsls	r0, r2, #3
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	1911      	adds	r1, r2, r4
 8008dc4:	6639      	str	r1, [r7, #96]	; 0x60
 8008dc6:	416b      	adcs	r3, r5
 8008dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8008dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f04f 0300 	mov.w	r3, #0
 8008dd4:	1891      	adds	r1, r2, r2
 8008dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dd8:	415b      	adcs	r3, r3
 8008dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008de0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008de4:	f7f7 fe06 	bl	80009f4 <__aeabi_uldivmod>
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	4ba5      	ldr	r3, [pc, #660]	; (8009084 <UART_SetConfig+0x38c>)
 8008dee:	fba3 2302 	umull	r2, r3, r3, r2
 8008df2:	095b      	lsrs	r3, r3, #5
 8008df4:	011e      	lsls	r6, r3, #4
 8008df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008df8:	461c      	mov	r4, r3
 8008dfa:	f04f 0500 	mov.w	r5, #0
 8008dfe:	4622      	mov	r2, r4
 8008e00:	462b      	mov	r3, r5
 8008e02:	1891      	adds	r1, r2, r2
 8008e04:	6339      	str	r1, [r7, #48]	; 0x30
 8008e06:	415b      	adcs	r3, r3
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e0e:	1912      	adds	r2, r2, r4
 8008e10:	eb45 0303 	adc.w	r3, r5, r3
 8008e14:	f04f 0000 	mov.w	r0, #0
 8008e18:	f04f 0100 	mov.w	r1, #0
 8008e1c:	00d9      	lsls	r1, r3, #3
 8008e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e22:	00d0      	lsls	r0, r2, #3
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	1911      	adds	r1, r2, r4
 8008e2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e2c:	416b      	adcs	r3, r5
 8008e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	1891      	adds	r1, r2, r2
 8008e3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e3e:	415b      	adcs	r3, r3
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e4a:	f7f7 fdd3 	bl	80009f4 <__aeabi_uldivmod>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4b8c      	ldr	r3, [pc, #560]	; (8009084 <UART_SetConfig+0x38c>)
 8008e54:	fba3 1302 	umull	r1, r3, r3, r2
 8008e58:	095b      	lsrs	r3, r3, #5
 8008e5a:	2164      	movs	r1, #100	; 0x64
 8008e5c:	fb01 f303 	mul.w	r3, r1, r3
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	00db      	lsls	r3, r3, #3
 8008e64:	3332      	adds	r3, #50	; 0x32
 8008e66:	4a87      	ldr	r2, [pc, #540]	; (8009084 <UART_SetConfig+0x38c>)
 8008e68:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6c:	095b      	lsrs	r3, r3, #5
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e74:	441e      	add	r6, r3
 8008e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f04f 0100 	mov.w	r1, #0
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	1894      	adds	r4, r2, r2
 8008e84:	623c      	str	r4, [r7, #32]
 8008e86:	415b      	adcs	r3, r3
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
 8008e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e8e:	1812      	adds	r2, r2, r0
 8008e90:	eb41 0303 	adc.w	r3, r1, r3
 8008e94:	f04f 0400 	mov.w	r4, #0
 8008e98:	f04f 0500 	mov.w	r5, #0
 8008e9c:	00dd      	lsls	r5, r3, #3
 8008e9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ea2:	00d4      	lsls	r4, r2, #3
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	1814      	adds	r4, r2, r0
 8008eaa:	653c      	str	r4, [r7, #80]	; 0x50
 8008eac:	414b      	adcs	r3, r1
 8008eae:	657b      	str	r3, [r7, #84]	; 0x54
 8008eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f04f 0300 	mov.w	r3, #0
 8008eba:	1891      	adds	r1, r2, r2
 8008ebc:	61b9      	str	r1, [r7, #24]
 8008ebe:	415b      	adcs	r3, r3
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ec6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008eca:	f7f7 fd93 	bl	80009f4 <__aeabi_uldivmod>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4b6c      	ldr	r3, [pc, #432]	; (8009084 <UART_SetConfig+0x38c>)
 8008ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed8:	095b      	lsrs	r3, r3, #5
 8008eda:	2164      	movs	r1, #100	; 0x64
 8008edc:	fb01 f303 	mul.w	r3, r1, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	00db      	lsls	r3, r3, #3
 8008ee4:	3332      	adds	r3, #50	; 0x32
 8008ee6:	4a67      	ldr	r2, [pc, #412]	; (8009084 <UART_SetConfig+0x38c>)
 8008ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8008eec:	095b      	lsrs	r3, r3, #5
 8008eee:	f003 0207 	and.w	r2, r3, #7
 8008ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4432      	add	r2, r6
 8008ef8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008efa:	e0b9      	b.n	8009070 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008efe:	461c      	mov	r4, r3
 8008f00:	f04f 0500 	mov.w	r5, #0
 8008f04:	4622      	mov	r2, r4
 8008f06:	462b      	mov	r3, r5
 8008f08:	1891      	adds	r1, r2, r2
 8008f0a:	6139      	str	r1, [r7, #16]
 8008f0c:	415b      	adcs	r3, r3
 8008f0e:	617b      	str	r3, [r7, #20]
 8008f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f14:	1912      	adds	r2, r2, r4
 8008f16:	eb45 0303 	adc.w	r3, r5, r3
 8008f1a:	f04f 0000 	mov.w	r0, #0
 8008f1e:	f04f 0100 	mov.w	r1, #0
 8008f22:	00d9      	lsls	r1, r3, #3
 8008f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f28:	00d0      	lsls	r0, r2, #3
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	eb12 0804 	adds.w	r8, r2, r4
 8008f32:	eb43 0905 	adc.w	r9, r3, r5
 8008f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f04f 0100 	mov.w	r1, #0
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	f04f 0300 	mov.w	r3, #0
 8008f48:	008b      	lsls	r3, r1, #2
 8008f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f4e:	0082      	lsls	r2, r0, #2
 8008f50:	4640      	mov	r0, r8
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7f7 fd4e 	bl	80009f4 <__aeabi_uldivmod>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4b49      	ldr	r3, [pc, #292]	; (8009084 <UART_SetConfig+0x38c>)
 8008f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	011e      	lsls	r6, r3, #4
 8008f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f04f 0100 	mov.w	r1, #0
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	1894      	adds	r4, r2, r2
 8008f74:	60bc      	str	r4, [r7, #8]
 8008f76:	415b      	adcs	r3, r3
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f7e:	1812      	adds	r2, r2, r0
 8008f80:	eb41 0303 	adc.w	r3, r1, r3
 8008f84:	f04f 0400 	mov.w	r4, #0
 8008f88:	f04f 0500 	mov.w	r5, #0
 8008f8c:	00dd      	lsls	r5, r3, #3
 8008f8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f92:	00d4      	lsls	r4, r2, #3
 8008f94:	4622      	mov	r2, r4
 8008f96:	462b      	mov	r3, r5
 8008f98:	1814      	adds	r4, r2, r0
 8008f9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008f9c:	414b      	adcs	r3, r1
 8008f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f04f 0100 	mov.w	r1, #0
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	f04f 0300 	mov.w	r3, #0
 8008fb2:	008b      	lsls	r3, r1, #2
 8008fb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fb8:	0082      	lsls	r2, r0, #2
 8008fba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008fbe:	f7f7 fd19 	bl	80009f4 <__aeabi_uldivmod>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4b2f      	ldr	r3, [pc, #188]	; (8009084 <UART_SetConfig+0x38c>)
 8008fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	3332      	adds	r3, #50	; 0x32
 8008fda:	4a2a      	ldr	r2, [pc, #168]	; (8009084 <UART_SetConfig+0x38c>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fe6:	441e      	add	r6, r3
 8008fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fea:	4618      	mov	r0, r3
 8008fec:	f04f 0100 	mov.w	r1, #0
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	1894      	adds	r4, r2, r2
 8008ff6:	603c      	str	r4, [r7, #0]
 8008ff8:	415b      	adcs	r3, r3
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009000:	1812      	adds	r2, r2, r0
 8009002:	eb41 0303 	adc.w	r3, r1, r3
 8009006:	f04f 0400 	mov.w	r4, #0
 800900a:	f04f 0500 	mov.w	r5, #0
 800900e:	00dd      	lsls	r5, r3, #3
 8009010:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009014:	00d4      	lsls	r4, r2, #3
 8009016:	4622      	mov	r2, r4
 8009018:	462b      	mov	r3, r5
 800901a:	eb12 0a00 	adds.w	sl, r2, r0
 800901e:	eb43 0b01 	adc.w	fp, r3, r1
 8009022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4618      	mov	r0, r3
 8009028:	f04f 0100 	mov.w	r1, #0
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	008b      	lsls	r3, r1, #2
 8009036:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800903a:	0082      	lsls	r2, r0, #2
 800903c:	4650      	mov	r0, sl
 800903e:	4659      	mov	r1, fp
 8009040:	f7f7 fcd8 	bl	80009f4 <__aeabi_uldivmod>
 8009044:	4602      	mov	r2, r0
 8009046:	460b      	mov	r3, r1
 8009048:	4b0e      	ldr	r3, [pc, #56]	; (8009084 <UART_SetConfig+0x38c>)
 800904a:	fba3 1302 	umull	r1, r3, r3, r2
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	2164      	movs	r1, #100	; 0x64
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	3332      	adds	r3, #50	; 0x32
 800905c:	4a09      	ldr	r2, [pc, #36]	; (8009084 <UART_SetConfig+0x38c>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	f003 020f 	and.w	r2, r3, #15
 8009068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4432      	add	r2, r6
 800906e:	609a      	str	r2, [r3, #8]
}
 8009070:	bf00      	nop
 8009072:	377c      	adds	r7, #124	; 0x7c
 8009074:	46bd      	mov	sp, r7
 8009076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907a:	bf00      	nop
 800907c:	40011000 	.word	0x40011000
 8009080:	40011400 	.word	0x40011400
 8009084:	51eb851f 	.word	0x51eb851f

08009088 <__libc_init_array>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	4d0d      	ldr	r5, [pc, #52]	; (80090c0 <__libc_init_array+0x38>)
 800908c:	4c0d      	ldr	r4, [pc, #52]	; (80090c4 <__libc_init_array+0x3c>)
 800908e:	1b64      	subs	r4, r4, r5
 8009090:	10a4      	asrs	r4, r4, #2
 8009092:	2600      	movs	r6, #0
 8009094:	42a6      	cmp	r6, r4
 8009096:	d109      	bne.n	80090ac <__libc_init_array+0x24>
 8009098:	4d0b      	ldr	r5, [pc, #44]	; (80090c8 <__libc_init_array+0x40>)
 800909a:	4c0c      	ldr	r4, [pc, #48]	; (80090cc <__libc_init_array+0x44>)
 800909c:	f000 f820 	bl	80090e0 <_init>
 80090a0:	1b64      	subs	r4, r4, r5
 80090a2:	10a4      	asrs	r4, r4, #2
 80090a4:	2600      	movs	r6, #0
 80090a6:	42a6      	cmp	r6, r4
 80090a8:	d105      	bne.n	80090b6 <__libc_init_array+0x2e>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b0:	4798      	blx	r3
 80090b2:	3601      	adds	r6, #1
 80090b4:	e7ee      	b.n	8009094 <__libc_init_array+0xc>
 80090b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090ba:	4798      	blx	r3
 80090bc:	3601      	adds	r6, #1
 80090be:	e7f2      	b.n	80090a6 <__libc_init_array+0x1e>
 80090c0:	08009138 	.word	0x08009138
 80090c4:	08009138 	.word	0x08009138
 80090c8:	08009138 	.word	0x08009138
 80090cc:	0800913c 	.word	0x0800913c

080090d0 <memset>:
 80090d0:	4402      	add	r2, r0
 80090d2:	4603      	mov	r3, r0
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d100      	bne.n	80090da <memset+0xa>
 80090d8:	4770      	bx	lr
 80090da:	f803 1b01 	strb.w	r1, [r3], #1
 80090de:	e7f9      	b.n	80090d4 <memset+0x4>

080090e0 <_init>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr

080090ec <_fini>:
 80090ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ee:	bf00      	nop
 80090f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f2:	bc08      	pop	{r3}
 80090f4:	469e      	mov	lr, r3
 80090f6:	4770      	bx	lr
