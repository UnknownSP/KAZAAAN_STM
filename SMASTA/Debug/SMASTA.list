
SMASTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800ab8c  0800ab8c  0001ab8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad10  0800ad10  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad10  0800ad10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad18  0800ad18  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800ad20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f80  200000c0  0800ade0  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002040  0800ade0  00022040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9cb  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003230  00000000  00000000  0003babb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001178  00000000  00000000  0003ff60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ad3  00000000  00000000  000410d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b08  00000000  00000000  00065bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6575  00000000  00000000  0007e6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005834  00000000  00000000  00154c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ab74 	.word	0x0800ab74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800ab74 	.word	0x0800ab74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b96e 	b.w	8000d90 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8083 	bne.w	8000be2 <__udivmoddi4+0x116>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4617      	mov	r7, r2
 8000ae0:	d947      	bls.n	8000b72 <__udivmoddi4+0xa6>
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	b142      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	f1c2 0020 	rsb	r0, r2, #32
 8000aec:	fa24 f000 	lsr.w	r0, r4, r0
 8000af0:	4091      	lsls	r1, r2
 8000af2:	4097      	lsls	r7, r2
 8000af4:	ea40 0c01 	orr.w	ip, r0, r1
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbbc f6f8 	udiv	r6, ip, r8
 8000b04:	fa1f fe87 	uxth.w	lr, r7
 8000b08:	fb08 c116 	mls	r1, r8, r6, ip
 8000b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b10:	fb06 f10e 	mul.w	r1, r6, lr
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b1e:	f080 8119 	bcs.w	8000d54 <__udivmoddi4+0x288>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8116 	bls.w	8000d54 <__udivmoddi4+0x288>
 8000b28:	3e02      	subs	r6, #2
 8000b2a:	443b      	add	r3, r7
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3310 	mls	r3, r8, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b40:	45a6      	cmp	lr, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	193c      	adds	r4, r7, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b4a:	f080 8105 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b4e:	45a6      	cmp	lr, r4
 8000b50:	f240 8102 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b54:	3802      	subs	r0, #2
 8000b56:	443c      	add	r4, r7
 8000b58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5c:	eba4 040e 	sub.w	r4, r4, lr
 8000b60:	2600      	movs	r6, #0
 8000b62:	b11d      	cbz	r5, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c5 4300 	strd	r4, r3, [r5]
 8000b6c:	4631      	mov	r1, r6
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	b902      	cbnz	r2, 8000b76 <__udivmoddi4+0xaa>
 8000b74:	deff      	udf	#255	; 0xff
 8000b76:	fab2 f282 	clz	r2, r2
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	d150      	bne.n	8000c20 <__udivmoddi4+0x154>
 8000b7e:	1bcb      	subs	r3, r1, r7
 8000b80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b84:	fa1f f887 	uxth.w	r8, r7
 8000b88:	2601      	movs	r6, #1
 8000b8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b98:	fb08 f30c 	mul.w	r3, r8, ip
 8000b9c:	428b      	cmp	r3, r1
 8000b9e:	d907      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ba0:	1879      	adds	r1, r7, r1
 8000ba2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0xe2>
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	f200 80e9 	bhi.w	8000d80 <__udivmoddi4+0x2b4>
 8000bae:	4684      	mov	ip, r0
 8000bb0:	1ac9      	subs	r1, r1, r3
 8000bb2:	b2a3      	uxth	r3, r4
 8000bb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bbc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc0:	fb08 f800 	mul.w	r8, r8, r0
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x10c>
 8000bc8:	193c      	adds	r4, r7, r4
 8000bca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x10a>
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	f200 80d9 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	eba4 0408 	sub.w	r4, r4, r8
 8000bdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be0:	e7bf      	b.n	8000b62 <__udivmoddi4+0x96>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x12e>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	f000 80b1 	beq.w	8000d4e <__udivmoddi4+0x282>
 8000bec:	2600      	movs	r6, #0
 8000bee:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4631      	mov	r1, r6
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	fab3 f683 	clz	r6, r3
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d14a      	bne.n	8000c98 <__udivmoddi4+0x1cc>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0x140>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 80b8 	bhi.w	8000d7c <__udivmoddi4+0x2b0>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	468c      	mov	ip, r1
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0a8      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000c1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c1e:	e7a5      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000c20:	f1c2 0320 	rsb	r3, r2, #32
 8000c24:	fa20 f603 	lsr.w	r6, r0, r3
 8000c28:	4097      	lsls	r7, r2
 8000c2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c32:	40d9      	lsrs	r1, r3
 8000c34:	4330      	orrs	r0, r6
 8000c36:	0c03      	lsrs	r3, r0, #16
 8000c38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c3c:	fa1f f887 	uxth.w	r8, r7
 8000c40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c48:	fb06 f108 	mul.w	r1, r6, r8
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x19c>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c5a:	f080 808d 	bcs.w	8000d78 <__udivmoddi4+0x2ac>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 808a 	bls.w	8000d78 <__udivmoddi4+0x2ac>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b281      	uxth	r1, r0
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb00 f308 	mul.w	r3, r0, r8
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x1c4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c86:	d273      	bcs.n	8000d70 <__udivmoddi4+0x2a4>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d971      	bls.n	8000d70 <__udivmoddi4+0x2a4>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4439      	add	r1, r7
 8000c90:	1acb      	subs	r3, r1, r3
 8000c92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c96:	e778      	b.n	8000b8a <__udivmoddi4+0xbe>
 8000c98:	f1c6 0c20 	rsb	ip, r6, #32
 8000c9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca4:	431c      	orrs	r4, r3
 8000ca6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000caa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	0c3b      	lsrs	r3, r7, #16
 8000cba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cbe:	fa1f f884 	uxth.w	r8, r4
 8000cc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cca:	fb09 fa08 	mul.w	sl, r9, r8
 8000cce:	458a      	cmp	sl, r1
 8000cd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x220>
 8000cda:	1861      	adds	r1, r4, r1
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce0:	d248      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce2:	458a      	cmp	sl, r1
 8000ce4:	d946      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000ce6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cea:	4421      	add	r1, r4
 8000cec:	eba1 010a 	sub.w	r1, r1, sl
 8000cf0:	b2bf      	uxth	r7, r7
 8000cf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cfe:	fb00 f808 	mul.w	r8, r0, r8
 8000d02:	45b8      	cmp	r8, r7
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x24a>
 8000d06:	19e7      	adds	r7, r4, r7
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d0c:	d22e      	bcs.n	8000d6c <__udivmoddi4+0x2a0>
 8000d0e:	45b8      	cmp	r8, r7
 8000d10:	d92c      	bls.n	8000d6c <__udivmoddi4+0x2a0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4427      	add	r7, r4
 8000d16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1a:	eba7 0708 	sub.w	r7, r7, r8
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	454f      	cmp	r7, r9
 8000d24:	46c6      	mov	lr, r8
 8000d26:	4649      	mov	r1, r9
 8000d28:	d31a      	bcc.n	8000d60 <__udivmoddi4+0x294>
 8000d2a:	d017      	beq.n	8000d5c <__udivmoddi4+0x290>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x27a>
 8000d2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d32:	eb67 0701 	sbc.w	r7, r7, r1
 8000d36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3a:	40f2      	lsrs	r2, r6
 8000d3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d40:	40f7      	lsrs	r7, r6
 8000d42:	e9c5 2700 	strd	r2, r7, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e70b      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e9      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6fd      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d5c:	4543      	cmp	r3, r8
 8000d5e:	d2e5      	bcs.n	8000d2c <__udivmoddi4+0x260>
 8000d60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d64:	eb69 0104 	sbc.w	r1, r9, r4
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7df      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e7d2      	b.n	8000d16 <__udivmoddi4+0x24a>
 8000d70:	4660      	mov	r0, ip
 8000d72:	e78d      	b.n	8000c90 <__udivmoddi4+0x1c4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7b9      	b.n	8000cec <__udivmoddi4+0x220>
 8000d78:	4666      	mov	r6, ip
 8000d7a:	e775      	b.n	8000c68 <__udivmoddi4+0x19c>
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0x14a>
 8000d80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d84:	4439      	add	r1, r7
 8000d86:	e713      	b.n	8000bb0 <__udivmoddi4+0xe4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	e724      	b.n	8000bd8 <__udivmoddi4+0x10c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop

08000d94 <appInit>:
	15,
	48,
	81,
};

int appInit(void){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	D_LED_Init_YellowRandom();
 8000d98:	f002 fc98 	bl	80036cc <D_LED_Init_YellowRandom>
	return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <appTask>:

int appTask(void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
		LED_P_BLINK_YELLOW,
		LED_P_BLUE,
	};
	uint8_t temp[10][3];

	DeltaTime = G_System_counter - Recent_System_counter;
 8000daa:	4baf      	ldr	r3, [pc, #700]	; (8001068 <appTask+0x2c4>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4baf      	ldr	r3, [pc, #700]	; (800106c <appTask+0x2c8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4aae      	ldr	r2, [pc, #696]	; (8001070 <appTask+0x2cc>)
 8000db6:	6013      	str	r3, [r2, #0]

	Encoder_Process();
 8000db8:	f000 fde8 	bl	800198c <Encoder_Process>

	if(IO_READ_USERBUTTON()){
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	48ac      	ldr	r0, [pc, #688]	; (8001074 <appTask+0x2d0>)
 8000dc2:	f002 fa02 	bl	80031ca <D_GPIO_Read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f083 0301 	eor.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d018      	beq.n	8000e04 <appTask+0x60>
		//IO_SET_USERLED();
		//IO_SET_STAYKICKER();
		//IO_SET_KICKER();
		//D_PWM_Set(3,1,5000);
		if(_userbutton_ena){
 8000dd2:	4ba9      	ldr	r3, [pc, #676]	; (8001078 <appTask+0x2d4>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d010      	beq.n	8000dfc <appTask+0x58>
			if(_is_SMASTA_Game){
 8000dda:	4ba8      	ldr	r3, [pc, #672]	; (800107c <appTask+0x2d8>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d006      	beq.n	8000df0 <appTask+0x4c>
				_is_SMASTA_Game = false;
 8000de2:	4ba6      	ldr	r3, [pc, #664]	; (800107c <appTask+0x2d8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
				smasta_mode = 4;
 8000de8:	4ba5      	ldr	r3, [pc, #660]	; (8001080 <appTask+0x2dc>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e002      	b.n	8000df6 <appTask+0x52>
			}else{
				_is_SMASTA_Game = true;
 8000df0:	4ba2      	ldr	r3, [pc, #648]	; (800107c <appTask+0x2d8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
			}
			croon_direction = 0;
 8000df6:	4ba3      	ldr	r3, [pc, #652]	; (8001084 <appTask+0x2e0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
		}
		_userbutton_ena = false;
 8000dfc:	4b9e      	ldr	r3, [pc, #632]	; (8001078 <appTask+0x2d4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e002      	b.n	8000e0a <appTask+0x66>
	}else{
		_userbutton_ena = true;
 8000e04:	4b9c      	ldr	r3, [pc, #624]	; (8001078 <appTask+0x2d4>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
		//IO_RESET_STAYKICKER();
		//IO_RESET_KICKER();
		//D_PWM_Set(3,1,0);
	}

	if(_is_SMASTA_Game){
 8000e0a:	4b9c      	ldr	r3, [pc, #624]	; (800107c <appTask+0x2d8>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 82d8 	beq.w	80013c4 <appTask+0x620>
		caseTime += DeltaTime;
 8000e14:	4b9c      	ldr	r3, [pc, #624]	; (8001088 <appTask+0x2e4>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b95      	ldr	r3, [pc, #596]	; (8001070 <appTask+0x2cc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a9a      	ldr	r2, [pc, #616]	; (8001088 <appTask+0x2e4>)
 8000e20:	6013      	str	r3, [r2, #0]
		switch (smasta_mode)
 8000e22:	4b97      	ldr	r3, [pc, #604]	; (8001080 <appTask+0x2dc>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	3b04      	subs	r3, #4
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	f200 82cd 	bhi.w	80013c8 <appTask+0x624>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <appTask+0x90>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e59 	.word	0x08000e59
 8000e38:	08000e9d 	.word	0x08000e9d
 8000e3c:	08000eed 	.word	0x08000eed
 8000e40:	08000f71 	.word	0x08000f71
 8000e44:	08001003 	.word	0x08001003
 8000e48:	080010fd 	.word	0x080010fd
 8000e4c:	080011fb 	.word	0x080011fb
 8000e50:	080012b1 	.word	0x080012b1
 8000e54:	0800134b 	.word	0x0800134b
		{
		case SM_INIT:
			Croon_Rotate(0,0);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 fd54 	bl	8001908 <Croon_Rotate>
			BumpLED_Set(0,0,0,1);
 8000e60:	2301      	movs	r3, #1
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 fc66 	bl	8001738 <BumpLED_Set>
			BumpLED_Set(0,0,0,2);
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 fc60 	bl	8001738 <BumpLED_Set>
			D_LED_Off();
 8000e78:	f002 fcd0 	bl	800381c <D_LED_Off>
			if(caseTime >= 1000){
 8000e7c:	4b82      	ldr	r3, [pc, #520]	; (8001088 <appTask+0x2e4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e84:	f0c0 82a2 	bcc.w	80013cc <appTask+0x628>
				smasta_mode += 1;
 8000e88:	4b7d      	ldr	r3, [pc, #500]	; (8001080 <appTask+0x2dc>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b7b      	ldr	r3, [pc, #492]	; (8001080 <appTask+0x2dc>)
 8000e92:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8000e94:	4b7c      	ldr	r3, [pc, #496]	; (8001088 <appTask+0x2e4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e9a:	e297      	b.n	80013cc <appTask+0x628>
		case SM_CROON_INIT:
			D_LED_Get_YellowRandomFlow(LED_Temp);
 8000e9c:	487b      	ldr	r0, [pc, #492]	; (800108c <appTask+0x2e8>)
 8000e9e:	f002 fc6d 	bl	800377c <D_LED_Get_YellowRandomFlow>
			D_LED_Set_All(LED_Temp);
 8000ea2:	487a      	ldr	r0, [pc, #488]	; (800108c <appTask+0x2e8>)
 8000ea4:	f002 fce8 	bl	8003878 <D_LED_Set_All>
			BumpLED_Set(150,150,40,1);
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	2228      	movs	r2, #40	; 0x28
 8000eac:	2196      	movs	r1, #150	; 0x96
 8000eae:	2096      	movs	r0, #150	; 0x96
 8000eb0:	f000 fc42 	bl	8001738 <BumpLED_Set>
			BumpLED_Set(150,150,40,2);
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	2228      	movs	r2, #40	; 0x28
 8000eb8:	2196      	movs	r1, #150	; 0x96
 8000eba:	2096      	movs	r0, #150	; 0x96
 8000ebc:	f000 fc3c 	bl	8001738 <BumpLED_Set>
			Croon_Rotate(CROON_INIT_SPEED,croon_direction);
 8000ec0:	4b70      	ldr	r3, [pc, #448]	; (8001084 <appTask+0x2e0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000eca:	f000 fd1d 	bl	8001908 <Croon_Rotate>
			if(Encoder_ResetCount >= 2){
 8000ece:	4b70      	ldr	r3, [pc, #448]	; (8001090 <appTask+0x2ec>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	f240 827c 	bls.w	80013d0 <appTask+0x62c>
				smasta_mode += 1;
 8000ed8:	4b69      	ldr	r3, [pc, #420]	; (8001080 <appTask+0x2dc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b67      	ldr	r3, [pc, #412]	; (8001080 <appTask+0x2dc>)
 8000ee2:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8000ee4:	4b68      	ldr	r3, [pc, #416]	; (8001088 <appTask+0x2e4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000eea:	e271      	b.n	80013d0 <appTask+0x62c>
		case SM_BALL_DETECT:
			D_LED_Get_YellowRandomFlow(LED_Temp);
 8000eec:	4867      	ldr	r0, [pc, #412]	; (800108c <appTask+0x2e8>)
 8000eee:	f002 fc45 	bl	800377c <D_LED_Get_YellowRandomFlow>
			D_LED_Set_All(LED_Temp);
 8000ef2:	4866      	ldr	r0, [pc, #408]	; (800108c <appTask+0x2e8>)
 8000ef4:	f002 fcc0 	bl	8003878 <D_LED_Set_All>
			BumpLED_Set(150,150,40,1);
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2228      	movs	r2, #40	; 0x28
 8000efc:	2196      	movs	r1, #150	; 0x96
 8000efe:	2096      	movs	r0, #150	; 0x96
 8000f00:	f000 fc1a 	bl	8001738 <BumpLED_Set>
			BumpLED_Set(150,150,40,2);
 8000f04:	2302      	movs	r3, #2
 8000f06:	2228      	movs	r2, #40	; 0x28
 8000f08:	2196      	movs	r1, #150	; 0x96
 8000f0a:	2096      	movs	r0, #150	; 0x96
 8000f0c:	f000 fc14 	bl	8001738 <BumpLED_Set>
			ball_detect_num = Ball_Detect(croon_direction);
 8000f10:	4b5c      	ldr	r3, [pc, #368]	; (8001084 <appTask+0x2e0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fca7 	bl	8001868 <Ball_Detect>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a5d      	ldr	r2, [pc, #372]	; (8001094 <appTask+0x2f0>)
 8000f1e:	6013      	str	r3, [r2, #0]
			if(ball_detect_num != 0){
 8000f20:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <appTask+0x2f0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 8255 	beq.w	80013d4 <appTask+0x630>
				croon_target = Encoder_RangeAdjust((5-(ball_detect_num%5)) * 20 + (-4) + 50 + 2);
 8000f2a:	4b5a      	ldr	r3, [pc, #360]	; (8001094 <appTask+0x2f0>)
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <appTask+0x2f4>)
 8000f30:	fb83 2301 	smull	r2, r3, r3, r1
 8000f34:	105a      	asrs	r2, r3, #1
 8000f36:	17cb      	asrs	r3, r1, #31
 8000f38:	1ad2      	subs	r2, r2, r3
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	1aca      	subs	r2, r1, r3
 8000f42:	f1c2 0205 	rsb	r2, r2, #5
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	3330      	adds	r3, #48	; 0x30
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fc72 	bl	800183a <Encoder_RangeAdjust>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a50      	ldr	r2, [pc, #320]	; (800109c <appTask+0x2f8>)
 8000f5a:	6013      	str	r3, [r2, #0]
				smasta_mode += 1;
 8000f5c:	4b48      	ldr	r3, [pc, #288]	; (8001080 <appTask+0x2dc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	4b46      	ldr	r3, [pc, #280]	; (8001080 <appTask+0x2dc>)
 8000f66:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8000f68:	4b47      	ldr	r3, [pc, #284]	; (8001088 <appTask+0x2e4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000f6e:	e231      	b.n	80013d4 <appTask+0x630>
		case SM_CROON_SET_KICKER:
			D_LED_Get_YellowRandomFlow(LED_Temp);
 8000f70:	4846      	ldr	r0, [pc, #280]	; (800108c <appTask+0x2e8>)
 8000f72:	f002 fc03 	bl	800377c <D_LED_Get_YellowRandomFlow>
			D_LED_Set_All(LED_Temp);
 8000f76:	4845      	ldr	r0, [pc, #276]	; (800108c <appTask+0x2e8>)
 8000f78:	f002 fc7e 	bl	8003878 <D_LED_Set_All>
			BumpLED_Set(150,150,40,1);
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	2228      	movs	r2, #40	; 0x28
 8000f80:	2196      	movs	r1, #150	; 0x96
 8000f82:	2096      	movs	r0, #150	; 0x96
 8000f84:	f000 fbd8 	bl	8001738 <BumpLED_Set>
			BumpLED_Set(150,150,40,2);
 8000f88:	2302      	movs	r3, #2
 8000f8a:	2228      	movs	r2, #40	; 0x28
 8000f8c:	2196      	movs	r1, #150	; 0x96
 8000f8e:	2096      	movs	r0, #150	; 0x96
 8000f90:	f000 fbd2 	bl	8001738 <BumpLED_Set>
			target_diff = Encoder_Diff(Encoder_Count, croon_target);
 8000f94:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <appTask+0x2fc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <appTask+0x2f8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	f000 fc35 	bl	8001810 <Encoder_Diff>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <appTask+0x300>)
 8000faa:	6013      	str	r3, [r2, #0]
			if(target_diff >= 25){
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <appTask+0x300>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b18      	cmp	r3, #24
 8000fb2:	dd07      	ble.n	8000fc4 <appTask+0x220>
				Croon_Rotate(CROON_INIT_SPEED,croon_direction);
 8000fb4:	4b33      	ldr	r3, [pc, #204]	; (8001084 <appTask+0x2e0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000fbe:	f000 fca3 	bl	8001908 <Croon_Rotate>
				smasta_mode += 1;
				caseTime = 0;
			}else{
				Croon_Rotate(CROON_INIT_MIN_SPEED + ((CROON_INIT_SPEED-CROON_INIT_MIN_SPEED)*target_diff)/25,croon_direction);
			}
			break;
 8000fc2:	e210      	b.n	80013e6 <appTask+0x642>
			}else if(target_diff == 0){
 8000fc4:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <appTask+0x300>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10d      	bne.n	8000fe8 <appTask+0x244>
				Croon_Rotate(0,0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 fc9a 	bl	8001908 <Croon_Rotate>
				smasta_mode += 1;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <appTask+0x2dc>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <appTask+0x2dc>)
 8000fde:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <appTask+0x2e4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
			break;
 8000fe6:	e1fe      	b.n	80013e6 <appTask+0x642>
				Croon_Rotate(CROON_INIT_MIN_SPEED + ((CROON_INIT_SPEED-CROON_INIT_MIN_SPEED)*target_diff)/25,croon_direction);
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <appTask+0x300>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2216      	movs	r2, #22
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	3396      	adds	r3, #150	; 0x96
 8000ff4:	4a23      	ldr	r2, [pc, #140]	; (8001084 <appTask+0x2e0>)
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc84 	bl	8001908 <Croon_Rotate>
			break;
 8001000:	e1f1      	b.n	80013e6 <appTask+0x642>

		case SM_LED_INIT:
			if(caseTime >= 500 && caseTime <= 1500){
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <appTask+0x2e4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800100a:	d34d      	bcc.n	80010a8 <appTask+0x304>
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <appTask+0x2e4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001014:	4293      	cmp	r3, r2
 8001016:	d847      	bhi.n	80010a8 <appTask+0x304>
				for(int i=0; i<LED_NUM; i++){
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
 800101c:	e01c      	b.n	8001058 <appTask+0x2b4>
					LED_Temp[i][0] = 80;
 800101e:	491b      	ldr	r1, [pc, #108]	; (800108c <appTask+0x2e8>)
 8001020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	440b      	add	r3, r1
 800102a:	2250      	movs	r2, #80	; 0x50
 800102c:	701a      	strb	r2, [r3, #0]
					LED_Temp[i][1] = 40;
 800102e:	4917      	ldr	r1, [pc, #92]	; (800108c <appTask+0x2e8>)
 8001030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	440b      	add	r3, r1
 800103a:	3301      	adds	r3, #1
 800103c:	2228      	movs	r2, #40	; 0x28
 800103e:	701a      	strb	r2, [r3, #0]
					LED_Temp[i][2] = 0;
 8001040:	4912      	ldr	r1, [pc, #72]	; (800108c <appTask+0x2e8>)
 8001042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	440b      	add	r3, r1
 800104c:	3302      	adds	r3, #2
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<LED_NUM; i++){
 8001052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001054:	3301      	adds	r3, #1
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
 8001058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105a:	2b31      	cmp	r3, #49	; 0x31
 800105c:	dddf      	ble.n	800101e <appTask+0x27a>
				}
				D_LED_Set_All(LED_Temp);
 800105e:	480b      	ldr	r0, [pc, #44]	; (800108c <appTask+0x2e8>)
 8001060:	f002 fc0a 	bl	8003878 <D_LED_Set_All>
 8001064:	e049      	b.n	80010fa <appTask+0x356>
 8001066:	bf00      	nop
 8001068:	200001c0 	.word	0x200001c0
 800106c:	2000017c 	.word	0x2000017c
 8001070:	20000180 	.word	0x20000180
 8001074:	40020800 	.word	0x40020800
 8001078:	2000019c 	.word	0x2000019c
 800107c:	20000190 	.word	0x20000190
 8001080:	20000004 	.word	0x20000004
 8001084:	20000194 	.word	0x20000194
 8001088:	20000198 	.word	0x20000198
 800108c:	200000e4 	.word	0x200000e4
 8001090:	200000e0 	.word	0x200000e0
 8001094:	200001a0 	.word	0x200001a0
 8001098:	66666667 	.word	0x66666667
 800109c:	200001a4 	.word	0x200001a4
 80010a0:	200000dc 	.word	0x200000dc
 80010a4:	200001a8 	.word	0x200001a8
			}else if(caseTime >= 500 && caseTime <= 2000){
 80010a8:	4bbc      	ldr	r3, [pc, #752]	; (800139c <appTask+0x5f8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010b0:	d313      	bcc.n	80010da <appTask+0x336>
 80010b2:	4bba      	ldr	r3, [pc, #744]	; (800139c <appTask+0x5f8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010ba:	d80e      	bhi.n	80010da <appTask+0x336>
				BumpLED_Set(0,0,0,1);
 80010bc:	2301      	movs	r3, #1
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2000      	movs	r0, #0
 80010c4:	f000 fb38 	bl	8001738 <BumpLED_Set>
				BumpLED_Set(0,0,0,2);
 80010c8:	2302      	movs	r3, #2
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 fb32 	bl	8001738 <BumpLED_Set>
				D_LED_Off();
 80010d4:	f002 fba2 	bl	800381c <D_LED_Off>
 80010d8:	e00f      	b.n	80010fa <appTask+0x356>
			}else if(caseTime > 2000){
 80010da:	4bb0      	ldr	r3, [pc, #704]	; (800139c <appTask+0x5f8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010e2:	f240 8179 	bls.w	80013d8 <appTask+0x634>
				smasta_mode += 1;
 80010e6:	4bae      	ldr	r3, [pc, #696]	; (80013a0 <appTask+0x5fc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4bac      	ldr	r3, [pc, #688]	; (80013a0 <appTask+0x5fc>)
 80010f0:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 80010f2:	4baa      	ldr	r3, [pc, #680]	; (800139c <appTask+0x5f8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80010f8:	e16e      	b.n	80013d8 <appTask+0x634>
 80010fa:	e16d      	b.n	80013d8 <appTask+0x634>
		case SM_LED_POCKET_SHOW:
			D_LED_Off();
 80010fc:	f002 fb8e 	bl	800381c <D_LED_Off>
			for(int i=0; i<5; i++){
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
 8001104:	e04f      	b.n	80011a6 <appTask+0x402>
				LED_Pocket_Get(temp,Pocket[i],i+1,Encoder_Count);
 8001106:	4aa7      	ldr	r2, [pc, #668]	; (80013a4 <appTask+0x600>)
 8001108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	b2d9      	uxtb	r1, r3
 8001110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	4ba4      	ldr	r3, [pc, #656]	; (80013a8 <appTask+0x604>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4638      	mov	r0, r7
 800111a:	f000 fd4d 	bl	8001bb8 <LED_Pocket_Get>
				int phase = caseTime/POCKET_SHOWTIME;
 800111e:	4b9f      	ldr	r3, [pc, #636]	; (800139c <appTask+0x5f8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4aa2      	ldr	r2, [pc, #648]	; (80013ac <appTask+0x608>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	623b      	str	r3, [r7, #32]
				if(i > phase){
 800112c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	429a      	cmp	r2, r3
 8001132:	dd05      	ble.n	8001140 <appTask+0x39c>
					LED_Pocket_Blightness(temp, 0);
 8001134:	463b      	mov	r3, r7
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fcbd 	bl	8001ab8 <LED_Pocket_Blightness>
 800113e:	e028      	b.n	8001192 <appTask+0x3ee>
				}else if(i < phase){
 8001140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	429a      	cmp	r2, r3
 8001146:	da05      	bge.n	8001154 <appTask+0x3b0>
					LED_Pocket_Blightness(temp, 100);
 8001148:	463b      	mov	r3, r7
 800114a:	2164      	movs	r1, #100	; 0x64
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fcb3 	bl	8001ab8 <LED_Pocket_Blightness>
 8001152:	e01e      	b.n	8001192 <appTask+0x3ee>
				}else{
					LED_Pocket_Blightness(temp, (int)((double)(caseTime%POCKET_SHOWTIME)/(POCKET_SHOWTIME/100.0)));
 8001154:	4b91      	ldr	r3, [pc, #580]	; (800139c <appTask+0x5f8>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b94      	ldr	r3, [pc, #592]	; (80013ac <appTask+0x608>)
 800115a:	fba3 1302 	umull	r1, r3, r3, r2
 800115e:	099b      	lsrs	r3, r3, #6
 8001160:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001164:	fb01 f303 	mul.w	r3, r1, r3
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9e2 	bl	8000534 <__aeabi_ui2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b8e      	ldr	r3, [pc, #568]	; (80013b0 <appTask+0x60c>)
 8001176:	f7ff fb81 	bl	800087c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fc63 	bl	8000a4c <__aeabi_d2iz>
 8001186:	4602      	mov	r2, r0
 8001188:	463b      	mov	r3, r7
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fc93 	bl	8001ab8 <LED_Pocket_Blightness>
				}
				D_LED_Set_Circle(temp, i+1);
 8001192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	463b      	mov	r3, r7
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f002 fbb0 	bl	8003900 <D_LED_Set_Circle>
			for(int i=0; i<5; i++){
 80011a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a2:	3301      	adds	r3, #1
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
 80011a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	ddac      	ble.n	8001106 <appTask+0x362>
			}
			D_LED_Rotate(-(int)(Encoder_Count/2.0) + LED_OFFSET);
 80011ac:	4b7e      	ldr	r3, [pc, #504]	; (80013a8 <appTask+0x604>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9bf 	bl	8000534 <__aeabi_ui2d>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011be:	f7ff fb5d 	bl	800087c <__aeabi_ddiv>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fc3f 	bl	8000a4c <__aeabi_d2iz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f1c3 0306 	rsb	r3, r3, #6
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fc75 	bl	8003ac4 <D_LED_Rotate>
			if(caseTime > POCKET_SHOWTIME*5 + 1000){
 80011da:	4b70      	ldr	r3, [pc, #448]	; (800139c <appTask+0x5f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80011e2:	f240 80fb 	bls.w	80013dc <appTask+0x638>
				smasta_mode += 1;
 80011e6:	4b6e      	ldr	r3, [pc, #440]	; (80013a0 <appTask+0x5fc>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <appTask+0x5fc>)
 80011f0:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 80011f2:	4b6a      	ldr	r3, [pc, #424]	; (800139c <appTask+0x5f8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
			}
			break;
 80011f8:	e0f0      	b.n	80013dc <appTask+0x638>
		
		case SM_LAUNCH_BALL:
			D_LED_Off();
 80011fa:	f002 fb0f 	bl	800381c <D_LED_Off>
			for(int i=0; i<5; i++){
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001202:	e015      	b.n	8001230 <appTask+0x48c>
				LED_Pocket_Get(temp,Pocket[i],i+1,Encoder_Count);
 8001204:	4a67      	ldr	r2, [pc, #412]	; (80013a4 <appTask+0x600>)
 8001206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	b2d9      	uxtb	r1, r3
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	4b65      	ldr	r3, [pc, #404]	; (80013a8 <appTask+0x604>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4638      	mov	r0, r7
 8001218:	f000 fcce 	bl	8001bb8 <LED_Pocket_Get>
				D_LED_Set_Circle(temp, i+1);
 800121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	463b      	mov	r3, r7
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fb6b 	bl	8003900 <D_LED_Set_Circle>
			for(int i=0; i<5; i++){
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	3301      	adds	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001232:	2b04      	cmp	r3, #4
 8001234:	dde6      	ble.n	8001204 <appTask+0x460>
			}
			D_LED_Rotate(-(int)(Encoder_Count/2.0) + LED_OFFSET);
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <appTask+0x604>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f97a 	bl	8000534 <__aeabi_ui2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001248:	f7ff fb18 	bl	800087c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fbfa 	bl	8000a4c <__aeabi_d2iz>
 8001258:	4603      	mov	r3, r0
 800125a:	f1c3 0306 	rsb	r3, r3, #6
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fc30 	bl	8003ac4 <D_LED_Rotate>

			//IO_SET_KICKER();
			if(IO_READ_KICKER_DOWN()==1){
 8001264:	2102      	movs	r1, #2
 8001266:	4853      	ldr	r0, [pc, #332]	; (80013b4 <appTask+0x610>)
 8001268:	f001 ffaf 	bl	80031ca <D_GPIO_Read>
 800126c:	4603      	mov	r3, r0
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80b3 	beq.w	80013e0 <appTask+0x63c>
				BumpLED_Set(BUMP_1_WAITCOLOR_R,BUMP_1_WAITCOLOR_G,BUMP_1_WAITCOLOR_B,1);
 800127a:	2301      	movs	r3, #1
 800127c:	2282      	movs	r2, #130	; 0x82
 800127e:	2146      	movs	r1, #70	; 0x46
 8001280:	2082      	movs	r0, #130	; 0x82
 8001282:	f000 fa59 	bl	8001738 <BumpLED_Set>
				BumpLED_Set(BUMP_2_WAITCOLOR_R,BUMP_2_WAITCOLOR_G,BUMP_2_WAITCOLOR_B,2);
 8001286:	2302      	movs	r3, #2
 8001288:	2264      	movs	r2, #100	; 0x64
 800128a:	2164      	movs	r1, #100	; 0x64
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f000 fa53 	bl	8001738 <BumpLED_Set>
				IO_RESET_KICKER();
 8001292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001296:	4848      	ldr	r0, [pc, #288]	; (80013b8 <appTask+0x614>)
 8001298:	f001 ff87 	bl	80031aa <D_GPIO_Reset>
				smasta_mode += 1;
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <appTask+0x5fc>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <appTask+0x5fc>)
 80012a6:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 80012a8:	4b3c      	ldr	r3, [pc, #240]	; (800139c <appTask+0x5f8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
			}
			break;
 80012ae:	e097      	b.n	80013e0 <appTask+0x63c>

		case SM_LAUNCH_WAIT:
			D_LED_Off();
 80012b0:	f002 fab4 	bl	800381c <D_LED_Off>
			for(int i=0; i<5; i++){
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b8:	e015      	b.n	80012e6 <appTask+0x542>
				LED_Pocket_Get(temp,Pocket[i],i+1,Encoder_Count);
 80012ba:	4a3a      	ldr	r2, [pc, #232]	; (80013a4 <appTask+0x600>)
 80012bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	b2d9      	uxtb	r1, r3
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <appTask+0x604>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4638      	mov	r0, r7
 80012ce:	f000 fc73 	bl	8001bb8 <LED_Pocket_Get>
				D_LED_Set_Circle(temp, i+1);
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	463b      	mov	r3, r7
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f002 fb10 	bl	8003900 <D_LED_Set_Circle>
			for(int i=0; i<5; i++){
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	3301      	adds	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80012e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	dde6      	ble.n	80012ba <appTask+0x516>
			}
			D_LED_Rotate(-(int)(Encoder_Count/2.0) + LED_OFFSET);
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <appTask+0x604>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f91f 	bl	8000534 <__aeabi_ui2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fe:	f7ff fabd 	bl	800087c <__aeabi_ddiv>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f7ff fb9f 	bl	8000a4c <__aeabi_d2iz>
 800130e:	4603      	mov	r3, r0
 8001310:	f1c3 0306 	rsb	r3, r3, #6
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fbd5 	bl	8003ac4 <D_LED_Rotate>

			if(caseTime >= 800 && IO_READ_KICKER_DOWN()==0){
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <appTask+0x5f8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001322:	d35f      	bcc.n	80013e4 <appTask+0x640>
 8001324:	2102      	movs	r1, #2
 8001326:	4823      	ldr	r0, [pc, #140]	; (80013b4 <appTask+0x610>)
 8001328:	f001 ff4f 	bl	80031ca <D_GPIO_Read>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d058      	beq.n	80013e4 <appTask+0x640>
				D_LED_Off();
 8001332:	f002 fa73 	bl	800381c <D_LED_Off>
				smasta_mode += 1;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <appTask+0x5fc>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <appTask+0x5fc>)
 8001340:	701a      	strb	r2, [r3, #0]
				caseTime = 0;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <appTask+0x5f8>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
			}
			break;
 8001348:	e04c      	b.n	80013e4 <appTask+0x640>

		case SM_CROON_SET_BLOCK:
			Croon_Rotate(CROON_INIT_SPEED,croon_direction);
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <appTask+0x618>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001354:	f000 fad8 	bl	8001908 <Croon_Rotate>
			for(int i=0; i<3; i++){
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
 800135c:	e019      	b.n	8001392 <appTask+0x5ee>
				if(Encoder_Count == BlockPosition_Encoder[i]){
 800135e:	4a18      	ldr	r2, [pc, #96]	; (80013c0 <appTask+0x61c>)
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <appTask+0x604>)
 8001368:	6812      	ldr	r2, [r2, #0]
 800136a:	4293      	cmp	r3, r2
 800136c:	d10e      	bne.n	800138c <appTask+0x5e8>
					Croon_Rotate(0,0);
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f000 fac9 	bl	8001908 <Croon_Rotate>
					smasta_mode += 1;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <appTask+0x5fc>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <appTask+0x5fc>)
 8001380:	701a      	strb	r2, [r3, #0]
					caseTime = 0;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <appTask+0x5f8>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
					break;
 8001388:	bf00      	nop
				}
			}
			break;
 800138a:	e02c      	b.n	80013e6 <appTask+0x642>
			for(int i=0; i<3; i++){
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	3301      	adds	r3, #1
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	2b02      	cmp	r3, #2
 8001396:	dde2      	ble.n	800135e <appTask+0x5ba>
			break;
 8001398:	e025      	b.n	80013e6 <appTask+0x642>
 800139a:	bf00      	nop
 800139c:	20000198 	.word	0x20000198
 80013a0:	20000004 	.word	0x20000004
 80013a4:	20000014 	.word	0x20000014
 80013a8:	200000dc 	.word	0x200000dc
 80013ac:	1b4e81b5 	.word	0x1b4e81b5
 80013b0:	40180000 	.word	0x40180000
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020400 	.word	0x40020400
 80013bc:	20000194 	.word	0x20000194
 80013c0:	20000008 	.word	0x20000008

		default:
			break;
		}
	}
 80013c4:	bf00      	nop
 80013c6:	e00e      	b.n	80013e6 <appTask+0x642>
			break;
 80013c8:	bf00      	nop
 80013ca:	e00c      	b.n	80013e6 <appTask+0x642>
			break;
 80013cc:	bf00      	nop
 80013ce:	e00a      	b.n	80013e6 <appTask+0x642>
			break;
 80013d0:	bf00      	nop
 80013d2:	e008      	b.n	80013e6 <appTask+0x642>
			break;
 80013d4:	bf00      	nop
 80013d6:	e006      	b.n	80013e6 <appTask+0x642>
			break;
 80013d8:	bf00      	nop
 80013da:	e004      	b.n	80013e6 <appTask+0x642>
			break;
 80013dc:	bf00      	nop
 80013de:	e002      	b.n	80013e6 <appTask+0x642>
			break;
 80013e0:	bf00      	nop
 80013e2:	e000      	b.n	80013e6 <appTask+0x642>
			break;
 80013e4:	bf00      	nop

	if(IO_READ_BUMP_1_HIT()==1 && !_bump1_is_on && !_bump1_wait_off){
 80013e6:	2110      	movs	r1, #16
 80013e8:	48b2      	ldr	r0, [pc, #712]	; (80016b4 <appTask+0x910>)
 80013ea:	f001 feee 	bl	80031ca <D_GPIO_Read>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <appTask+0x682>
 80013fa:	4baf      	ldr	r3, [pc, #700]	; (80016b8 <appTask+0x914>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	f083 0301 	eor.w	r3, r3, #1
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00e      	beq.n	8001426 <appTask+0x682>
 8001408:	4bac      	ldr	r3, [pc, #688]	; (80016bc <appTask+0x918>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <appTask+0x682>
		_bump1_is_on = true;
 8001416:	4ba8      	ldr	r3, [pc, #672]	; (80016b8 <appTask+0x914>)
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
		IO_SET_BUMP_1();
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	48a7      	ldr	r0, [pc, #668]	; (80016c0 <appTask+0x91c>)
 8001422:	f001 feb2 	bl	800318a <D_GPIO_Set>
	}
	if(_bump1_is_on && IO_READ_BUMP_1_SOL()==1 && !_bump1_wait_off){
 8001426:	4ba4      	ldr	r3, [pc, #656]	; (80016b8 <appTask+0x914>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d01b      	beq.n	8001466 <appTask+0x6c2>
 800142e:	2101      	movs	r1, #1
 8001430:	48a3      	ldr	r0, [pc, #652]	; (80016c0 <appTask+0x91c>)
 8001432:	f001 feca 	bl	80031ca <D_GPIO_Read>
 8001436:	4603      	mov	r3, r0
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d011      	beq.n	8001466 <appTask+0x6c2>
 8001442:	4b9e      	ldr	r3, [pc, #632]	; (80016bc <appTask+0x918>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f083 0301 	eor.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00a      	beq.n	8001466 <appTask+0x6c2>
		_bump1_is_on = false;
 8001450:	4b99      	ldr	r3, [pc, #612]	; (80016b8 <appTask+0x914>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
		_bump1_wait_off = true;
 8001456:	4b99      	ldr	r3, [pc, #612]	; (80016bc <appTask+0x918>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
		IO_RESET_BUMP_1();
 800145c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001460:	4897      	ldr	r0, [pc, #604]	; (80016c0 <appTask+0x91c>)
 8001462:	f001 fea2 	bl	80031aa <D_GPIO_Reset>
	}
	if(_bump1_wait_off && IO_READ_BUMP_1_SOL()==0 && IO_READ_BUMP_1_HIT()==0){
 8001466:	4b95      	ldr	r3, [pc, #596]	; (80016bc <appTask+0x918>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d010      	beq.n	8001490 <appTask+0x6ec>
 800146e:	2101      	movs	r1, #1
 8001470:	4893      	ldr	r0, [pc, #588]	; (80016c0 <appTask+0x91c>)
 8001472:	f001 feaa 	bl	80031ca <D_GPIO_Read>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d009      	beq.n	8001490 <appTask+0x6ec>
 800147c:	2110      	movs	r1, #16
 800147e:	488d      	ldr	r0, [pc, #564]	; (80016b4 <appTask+0x910>)
 8001480:	f001 fea3 	bl	80031ca <D_GPIO_Read>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <appTask+0x6ec>
		_bump1_wait_off = false;
 800148a:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <appTask+0x918>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	}
	if(IO_READ_BUMP_2_HIT()==1 && !_bump2_is_on && !_bump2_wait_off){
 8001490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001494:	488b      	ldr	r0, [pc, #556]	; (80016c4 <appTask+0x920>)
 8001496:	f001 fe98 	bl	80031ca <D_GPIO_Read>
 800149a:	4603      	mov	r3, r0
 800149c:	f083 0301 	eor.w	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d014      	beq.n	80014d0 <appTask+0x72c>
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <appTask+0x924>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00d      	beq.n	80014d0 <appTask+0x72c>
 80014b4:	4b85      	ldr	r3, [pc, #532]	; (80016cc <appTask+0x928>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <appTask+0x72c>
		_bump2_is_on = true;
 80014c2:	4b81      	ldr	r3, [pc, #516]	; (80016c8 <appTask+0x924>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
		IO_SET_BUMP_2();
 80014c8:	2120      	movs	r1, #32
 80014ca:	487d      	ldr	r0, [pc, #500]	; (80016c0 <appTask+0x91c>)
 80014cc:	f001 fe5d 	bl	800318a <D_GPIO_Set>
	}
	if(_bump2_is_on && IO_READ_BUMP_2_SOL()==1 && !_bump2_wait_off){
 80014d0:	4b7d      	ldr	r3, [pc, #500]	; (80016c8 <appTask+0x924>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01a      	beq.n	800150e <appTask+0x76a>
 80014d8:	2104      	movs	r1, #4
 80014da:	487d      	ldr	r0, [pc, #500]	; (80016d0 <appTask+0x92c>)
 80014dc:	f001 fe75 	bl	80031ca <D_GPIO_Read>
 80014e0:	4603      	mov	r3, r0
 80014e2:	f083 0301 	eor.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d010      	beq.n	800150e <appTask+0x76a>
 80014ec:	4b77      	ldr	r3, [pc, #476]	; (80016cc <appTask+0x928>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f083 0301 	eor.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <appTask+0x76a>
		_bump2_is_on = false;
 80014fa:	4b73      	ldr	r3, [pc, #460]	; (80016c8 <appTask+0x924>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
		_bump2_wait_off = true;
 8001500:	4b72      	ldr	r3, [pc, #456]	; (80016cc <appTask+0x928>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
		IO_RESET_BUMP_2();
 8001506:	2120      	movs	r1, #32
 8001508:	486d      	ldr	r0, [pc, #436]	; (80016c0 <appTask+0x91c>)
 800150a:	f001 fe4e 	bl	80031aa <D_GPIO_Reset>
	}
	if(_bump2_wait_off && IO_READ_BUMP_2_SOL()==0 && IO_READ_BUMP_2_HIT()==0){
 800150e:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <appTask+0x928>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d011      	beq.n	800153a <appTask+0x796>
 8001516:	2104      	movs	r1, #4
 8001518:	486d      	ldr	r0, [pc, #436]	; (80016d0 <appTask+0x92c>)
 800151a:	f001 fe56 	bl	80031ca <D_GPIO_Read>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00a      	beq.n	800153a <appTask+0x796>
 8001524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001528:	4866      	ldr	r0, [pc, #408]	; (80016c4 <appTask+0x920>)
 800152a:	f001 fe4e 	bl	80031ca <D_GPIO_Read>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <appTask+0x796>
		_bump2_wait_off = false;
 8001534:	4b65      	ldr	r3, [pc, #404]	; (80016cc <appTask+0x928>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
	//	RainbowTime = 0;
	//	if(RainbowCount >= 50){
	//		RainbowCount = 0;
	//	}
	//}
	GradationTime += DeltaTime;
 800153a:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <appTask+0x930>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <appTask+0x934>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <appTask+0x930>)
 8001546:	6013      	str	r3, [r2, #0]
	if(GradationTime >= (GRADATION_CYCLETIME/(LED_NUM*10))){
 8001548:	4b62      	ldr	r3, [pc, #392]	; (80016d4 <appTask+0x930>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b0d      	cmp	r3, #13
 800154e:	d91e      	bls.n	800158e <appTask+0x7ea>
		//GradationFadeCount++;
		GradationCount++;
 8001550:	4b62      	ldr	r3, [pc, #392]	; (80016dc <appTask+0x938>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	4a61      	ldr	r2, [pc, #388]	; (80016dc <appTask+0x938>)
 8001558:	6013      	str	r3, [r2, #0]
		GradationTime = 0;
 800155a:	4b5e      	ldr	r3, [pc, #376]	; (80016d4 <appTask+0x930>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
		//if(GradationFadeCount >= 10){
		//	GradationFadeCount = 0;
		//}
		if(GradationCount > 250*2){
 8001560:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <appTask+0x938>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001568:	dd02      	ble.n	8001570 <appTask+0x7cc>
			GradationCount = 0;
 800156a:	4b5c      	ldr	r3, [pc, #368]	; (80016dc <appTask+0x938>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
		}
		GradationFadeCount = GradationCount%10;
 8001570:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <appTask+0x938>)
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	4b5a      	ldr	r3, [pc, #360]	; (80016e0 <appTask+0x93c>)
 8001576:	fb83 2301 	smull	r2, r3, r3, r1
 800157a:	109a      	asrs	r2, r3, #2
 800157c:	17cb      	asrs	r3, r1, #31
 800157e:	1ad2      	subs	r2, r2, r3
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	1aca      	subs	r2, r1, r3
 800158a:	4b56      	ldr	r3, [pc, #344]	; (80016e4 <appTask+0x940>)
 800158c:	601a      	str	r2, [r3, #0]
	//D_LED_YellowRandomFlow(LED_Temp,DeltaTime);
	//D_LED_Set_All(LED_Temp);
	//Start yellow code end

	//D_LED_Rotate(-(int)(Encoder_Count/2.0) + LED_OFFSET);
	D_LED_Set_YellowRandomFlow(DeltaTime);
 800158e:	4b52      	ldr	r3, [pc, #328]	; (80016d8 <appTask+0x934>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f002 f8c2 	bl	800371c <D_LED_Set_YellowRandomFlow>
	D_LED_Set_Rainbow(DeltaTime);
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <appTask+0x934>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fee5 	bl	800336c <D_LED_Set_Rainbow>
	D_LED_Set_Blink(DeltaTime);
 80015a2:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <appTask+0x934>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 fe24 	bl	80031f4 <D_LED_Set_Blink>
    D_LED_Send();
 80015ac:	f002 fa16 	bl	80039dc <D_LED_Send>

	int16_t debug_bits = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_ENC_STEP() << 0);
 80015b4:	2104      	movs	r1, #4
 80015b6:	4843      	ldr	r0, [pc, #268]	; (80016c4 <appTask+0x920>)
 80015b8:	f001 fe07 	bl	80031ca <D_GPIO_Read>
 80015bc:	4603      	mov	r3, r0
 80015be:	b21a      	sxth	r2, r3
 80015c0:	8bfb      	ldrh	r3, [r7, #30]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_ENC_HOME() << 1);
 80015c6:	2108      	movs	r1, #8
 80015c8:	483e      	ldr	r0, [pc, #248]	; (80016c4 <appTask+0x920>)
 80015ca:	f001 fdfe 	bl	80031ca <D_GPIO_Read>
 80015ce:	4603      	mov	r3, r0
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	8bfb      	ldrh	r3, [r7, #30]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_BUMP_1_HIT() << 2);
 80015da:	2110      	movs	r1, #16
 80015dc:	4835      	ldr	r0, [pc, #212]	; (80016b4 <appTask+0x910>)
 80015de:	f001 fdf4 	bl	80031ca <D_GPIO_Read>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f083 0301 	eor.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_BUMP_1_SOL() << 3);
 80015f4:	2101      	movs	r1, #1
 80015f6:	4832      	ldr	r0, [pc, #200]	; (80016c0 <appTask+0x91c>)
 80015f8:	f001 fde7 	bl	80031ca <D_GPIO_Read>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	b21a      	sxth	r2, r3
 8001608:	8bfb      	ldrh	r3, [r7, #30]
 800160a:	4313      	orrs	r3, r2
 800160c:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_BUMP_2_HIT() << 4);
 800160e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001612:	482c      	ldr	r0, [pc, #176]	; (80016c4 <appTask+0x920>)
 8001614:	f001 fdd9 	bl	80031ca <D_GPIO_Read>
 8001618:	4603      	mov	r3, r0
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	b21a      	sxth	r2, r3
 8001624:	8bfb      	ldrh	r3, [r7, #30]
 8001626:	4313      	orrs	r3, r2
 8001628:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_BUMP_2_SOL() << 5);
 800162a:	2104      	movs	r1, #4
 800162c:	4828      	ldr	r0, [pc, #160]	; (80016d0 <appTask+0x92c>)
 800162e:	f001 fdcc 	bl	80031ca <D_GPIO_Read>
 8001632:	4603      	mov	r3, r0
 8001634:	f083 0301 	eor.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	b21a      	sxth	r2, r3
 800163e:	8bfb      	ldrh	r3, [r7, #30]
 8001640:	4313      	orrs	r3, r2
 8001642:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_BALL_DETECT() << 6);
 8001644:	2101      	movs	r1, #1
 8001646:	481f      	ldr	r0, [pc, #124]	; (80016c4 <appTask+0x920>)
 8001648:	f001 fdbf 	bl	80031ca <D_GPIO_Read>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	019b      	lsls	r3, r3, #6
 8001656:	b21a      	sxth	r2, r3
 8001658:	8bfb      	ldrh	r3, [r7, #30]
 800165a:	4313      	orrs	r3, r2
 800165c:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_KICKER_DOWN() << 7);
 800165e:	2102      	movs	r1, #2
 8001660:	4818      	ldr	r0, [pc, #96]	; (80016c4 <appTask+0x920>)
 8001662:	f001 fdb2 	bl	80031ca <D_GPIO_Read>
 8001666:	4603      	mov	r3, r0
 8001668:	f083 0301 	eor.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	01db      	lsls	r3, r3, #7
 8001670:	b21a      	sxth	r2, r3
 8001672:	8bfb      	ldrh	r3, [r7, #30]
 8001674:	4313      	orrs	r3, r2
 8001676:	83fb      	strh	r3, [r7, #30]
	debug_bits |= ((int)IO_READ_STAYKICKER_DOWN() << 8);
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <appTask+0x91c>)
 800167c:	f001 fda5 	bl	80031ca <D_GPIO_Read>
 8001680:	4603      	mov	r3, r0
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	8bfb      	ldrh	r3, [r7, #30]
 8001688:	4313      	orrs	r3, r2
 800168a:	83fb      	strh	r3, [r7, #30]
	D_Mess_printf("\033[1;1H");
 800168c:	4816      	ldr	r0, [pc, #88]	; (80016e8 <appTask+0x944>)
 800168e:	f002 faad 	bl	8003bec <D_Mess_printf>
	D_Mess_printf("[%10d]\n",G_System_counter);
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <appTask+0x948>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4815      	ldr	r0, [pc, #84]	; (80016f0 <appTask+0x94c>)
 800169a:	f002 faa7 	bl	8003bec <D_Mess_printf>
	D_Mess_printf("[%10d]\n",Encoder_Count);
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <appTask+0x950>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <appTask+0x94c>)
 80016a6:	f002 faa1 	bl	8003bec <D_Mess_printf>
	D_Mess_printf("[%10d]\n",ball_detect_num);
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <appTask+0x954>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	e024      	b.n	80016fc <appTask+0x958>
 80016b2:	bf00      	nop
 80016b4:	40020000 	.word	0x40020000
 80016b8:	2000018c 	.word	0x2000018c
 80016bc:	2000018e 	.word	0x2000018e
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	2000018d 	.word	0x2000018d
 80016cc:	2000018f 	.word	0x2000018f
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	20000184 	.word	0x20000184
 80016d8:	20000180 	.word	0x20000180
 80016dc:	20000000 	.word	0x20000000
 80016e0:	66666667 	.word	0x66666667
 80016e4:	20000188 	.word	0x20000188
 80016e8:	0800ab8c 	.word	0x0800ab8c
 80016ec:	200001c0 	.word	0x200001c0
 80016f0:	0800ab94 	.word	0x0800ab94
 80016f4:	200000dc 	.word	0x200000dc
 80016f8:	200001a0 	.word	0x200001a0
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <appTask+0x984>)
 80016fe:	f002 fa75 	bl	8003bec <D_Mess_printf>
	D_Mess_printf("%016b\n", debug_bits);
 8001702:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001706:	4619      	mov	r1, r3
 8001708:	4808      	ldr	r0, [pc, #32]	; (800172c <appTask+0x988>)
 800170a:	f002 fa6f 	bl	8003bec <D_Mess_printf>


	Recent_System_counter = Recent_System_counter + DeltaTime;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <appTask+0x98c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <appTask+0x990>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a05      	ldr	r2, [pc, #20]	; (8001730 <appTask+0x98c>)
 800171a:	6013      	str	r3, [r2, #0]
	return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3738      	adds	r7, #56	; 0x38
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	0800ab94 	.word	0x0800ab94
 800172c:	0800ab9c 	.word	0x0800ab9c
 8001730:	2000017c 	.word	0x2000017c
 8001734:	20000180 	.word	0x20000180

08001738 <BumpLED_Set>:


static void BumpLED_Set(uint8_t R, uint8_t G, uint8_t B, int bumper){
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	460b      	mov	r3, r1
 8001746:	71bb      	strb	r3, [r7, #6]
 8001748:	4613      	mov	r3, r2
 800174a:	717b      	strb	r3, [r7, #5]
	double coeff = 5000.0/255.0;
 800174c:	a32e      	add	r3, pc, #184	; (adr r3, 8001808 <BumpLED_Set+0xd0>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int R_adjust = (int)((double)R*coeff);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe feeb 	bl	8000534 <__aeabi_ui2d>
 800175e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001762:	f7fe ff61 	bl	8000628 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f96d 	bl	8000a4c <__aeabi_d2iz>
 8001772:	4603      	mov	r3, r0
 8001774:	617b      	str	r3, [r7, #20]
	int G_adjust = (int)((double)G*coeff);
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fedb 	bl	8000534 <__aeabi_ui2d>
 800177e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001782:	f7fe ff51 	bl	8000628 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f95d 	bl	8000a4c <__aeabi_d2iz>
 8001792:	4603      	mov	r3, r0
 8001794:	613b      	str	r3, [r7, #16]
	int B_adjust = (int)((double)B*coeff);
 8001796:	797b      	ldrb	r3, [r7, #5]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fecb 	bl	8000534 <__aeabi_ui2d>
 800179e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a2:	f7fe ff41 	bl	8000628 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f94d 	bl	8000a4c <__aeabi_d2iz>
 80017b2:	4603      	mov	r3, r0
 80017b4:	60fb      	str	r3, [r7, #12]
	if(bumper == 1){
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10f      	bne.n	80017dc <BumpLED_Set+0xa4>
		D_PWM_Set(BUMP_1_R_TIM,BUMP_1_R_CHANNEL,R_adjust);
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	2103      	movs	r1, #3
 80017c0:	2002      	movs	r0, #2
 80017c2:	f002 fc53 	bl	800406c <D_PWM_Set>
		D_PWM_Set(BUMP_1_G_TIM,BUMP_1_G_CHANNEL,G_adjust);
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	2104      	movs	r1, #4
 80017ca:	2002      	movs	r0, #2
 80017cc:	f002 fc4e 	bl	800406c <D_PWM_Set>
		D_PWM_Set(BUMP_1_B_TIM,BUMP_1_B_CHANNEL,B_adjust);
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	2104      	movs	r1, #4
 80017d4:	2003      	movs	r0, #3
 80017d6:	f002 fc49 	bl	800406c <D_PWM_Set>
	}else if(bumper == 2){
		D_PWM_Set(BUMP_2_R_TIM,BUMP_2_R_CHANNEL,R_adjust);
		D_PWM_Set(BUMP_2_G_TIM,BUMP_2_G_CHANNEL,G_adjust);
		D_PWM_Set(BUMP_2_B_TIM,BUMP_2_B_CHANNEL,B_adjust);
	}
}
 80017da:	e011      	b.n	8001800 <BumpLED_Set+0xc8>
	}else if(bumper == 2){
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d10e      	bne.n	8001800 <BumpLED_Set+0xc8>
		D_PWM_Set(BUMP_2_R_TIM,BUMP_2_R_CHANNEL,R_adjust);
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	2103      	movs	r1, #3
 80017e6:	2003      	movs	r0, #3
 80017e8:	f002 fc40 	bl	800406c <D_PWM_Set>
		D_PWM_Set(BUMP_2_G_TIM,BUMP_2_G_CHANNEL,G_adjust);
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	2101      	movs	r1, #1
 80017f0:	2002      	movs	r0, #2
 80017f2:	f002 fc3b 	bl	800406c <D_PWM_Set>
		D_PWM_Set(BUMP_2_B_TIM,BUMP_2_B_CHANNEL,B_adjust);
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	2102      	movs	r1, #2
 80017fa:	2002      	movs	r0, #2
 80017fc:	f002 fc36 	bl	800406c <D_PWM_Set>
}
 8001800:	bf00      	nop
 8001802:	3720      	adds	r7, #32
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	9b9b9b9c 	.word	0x9b9b9b9c
 800180c:	40339b9b 	.word	0x40339b9b

08001810 <Encoder_Diff>:

static int Encoder_Diff(int nowCount, int targetCount){
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	if(nowCount > targetCount){
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	dd02      	ble.n	8001828 <Encoder_Diff+0x18>
		targetCount += 100;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	3364      	adds	r3, #100	; 0x64
 8001826:	603b      	str	r3, [r7, #0]
	}
	return targetCount - nowCount;
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	1ad3      	subs	r3, r2, r3
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <Encoder_RangeAdjust>:

static int Encoder_RangeAdjust(int count){
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	if(count > 100){
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	dd02      	ble.n	800184e <Encoder_RangeAdjust+0x14>
		count -= 100;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b64      	subs	r3, #100	; 0x64
 800184c:	607b      	str	r3, [r7, #4]
	}
	if(count < 1){
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	dc02      	bgt.n	800185a <Encoder_RangeAdjust+0x20>
		count += 100;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3364      	adds	r3, #100	; 0x64
 8001858:	607b      	str	r3, [r7, #4]
	}
	return count;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <Ball_Detect>:

static int Ball_Detect(int direction){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	int return_num = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
	if(IO_READ_BALL_DETECT()==1){
 8001874:	2101      	movs	r1, #1
 8001876:	4822      	ldr	r0, [pc, #136]	; (8001900 <Ball_Detect+0x98>)
 8001878:	f001 fca7 	bl	80031ca <D_GPIO_Read>
 800187c:	4603      	mov	r3, r0
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d035      	beq.n	80018f4 <Ball_Detect+0x8c>
		if(Encoder_Count >= (5+2) && Encoder_Count < (25+2)){			//middle 16	 reverse 66
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <Ball_Detect+0x9c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b06      	cmp	r3, #6
 800188e:	d906      	bls.n	800189e <Ball_Detect+0x36>
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <Ball_Detect+0x9c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b1a      	cmp	r3, #26
 8001896:	d802      	bhi.n	800189e <Ball_Detect+0x36>
			return_num = 4;
 8001898:	2304      	movs	r3, #4
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e02a      	b.n	80018f4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (25+2) && Encoder_Count < (45+2)){	//middle 36  reverse 86
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <Ball_Detect+0x9c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b1a      	cmp	r3, #26
 80018a4:	d906      	bls.n	80018b4 <Ball_Detect+0x4c>
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <Ball_Detect+0x9c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b2e      	cmp	r3, #46	; 0x2e
 80018ac:	d802      	bhi.n	80018b4 <Ball_Detect+0x4c>
			return_num = 3;
 80018ae:	2303      	movs	r3, #3
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e01f      	b.n	80018f4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (45+2) && Encoder_Count < (65+2)){	//middle 56  reverse 6
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <Ball_Detect+0x9c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b2e      	cmp	r3, #46	; 0x2e
 80018ba:	d906      	bls.n	80018ca <Ball_Detect+0x62>
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <Ball_Detect+0x9c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b42      	cmp	r3, #66	; 0x42
 80018c2:	d802      	bhi.n	80018ca <Ball_Detect+0x62>
			return_num = 2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e014      	b.n	80018f4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (65+2) && Encoder_Count < (85+2)){	//middle 76  reverse 26
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <Ball_Detect+0x9c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b42      	cmp	r3, #66	; 0x42
 80018d0:	d906      	bls.n	80018e0 <Ball_Detect+0x78>
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <Ball_Detect+0x9c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b56      	cmp	r3, #86	; 0x56
 80018d8:	d802      	bhi.n	80018e0 <Ball_Detect+0x78>
			return_num = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e009      	b.n	80018f4 <Ball_Detect+0x8c>
		}else if(Encoder_Count >= (85+2) || Encoder_Count < (5+2)){		//middle 96  reverse 46
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <Ball_Detect+0x9c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b56      	cmp	r3, #86	; 0x56
 80018e6:	d803      	bhi.n	80018f0 <Ball_Detect+0x88>
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <Ball_Detect+0x9c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b06      	cmp	r3, #6
 80018ee:	d801      	bhi.n	80018f4 <Ball_Detect+0x8c>
			return_num = 5;
 80018f0:	2305      	movs	r3, #5
 80018f2:	60fb      	str	r3, [r7, #12]
		}
	}
	return return_num;
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40020800 	.word	0x40020800
 8001904:	200000dc 	.word	0x200000dc

08001908 <Croon_Rotate>:

static void Croon_Rotate(int speed, int direction){
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	if(speed > 1000) speed = 1000;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001918:	dd02      	ble.n	8001920 <Croon_Rotate+0x18>
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	607b      	str	r3, [r7, #4]
	if(speed < 0)	speed = 0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da01      	bge.n	800192a <Croon_Rotate+0x22>
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
	int set_speed = speed * 5;
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
	if(speed == 0){
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10e      	bne.n	8001958 <Croon_Rotate+0x50>
		IO_SET_MOTOR_ENA();
 800193a:	2110      	movs	r1, #16
 800193c:	4812      	ldr	r0, [pc, #72]	; (8001988 <Croon_Rotate+0x80>)
 800193e:	f001 fc24 	bl	800318a <D_GPIO_Set>
		D_PWM_Set(CROON_MOTOR_F_TIM,CROON_MOTOR_F_CHANNEL,0);
 8001942:	2200      	movs	r2, #0
 8001944:	2101      	movs	r1, #1
 8001946:	2003      	movs	r0, #3
 8001948:	f002 fb90 	bl	800406c <D_PWM_Set>
		D_PWM_Set(CROON_MOTOR_R_TIM,CROON_MOTOR_R_CHANNEL,0);
 800194c:	2200      	movs	r2, #0
 800194e:	2102      	movs	r1, #2
 8001950:	2003      	movs	r0, #3
 8001952:	f002 fb8b 	bl	800406c <D_PWM_Set>
		return;
 8001956:	e014      	b.n	8001982 <Croon_Rotate+0x7a>
	}
	IO_RESET_MOTOR_ENA();
 8001958:	2110      	movs	r1, #16
 800195a:	480b      	ldr	r0, [pc, #44]	; (8001988 <Croon_Rotate+0x80>)
 800195c:	f001 fc25 	bl	80031aa <D_GPIO_Reset>
	if(direction == 0){
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <Croon_Rotate+0x6a>
		D_PWM_Set(CROON_MOTOR_F_TIM,CROON_MOTOR_F_CHANNEL,set_speed);
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	2101      	movs	r1, #1
 800196a:	2003      	movs	r0, #3
 800196c:	f002 fb7e 	bl	800406c <D_PWM_Set>
 8001970:	e007      	b.n	8001982 <Croon_Rotate+0x7a>
	}else if(direction == 1){
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d104      	bne.n	8001982 <Croon_Rotate+0x7a>
		D_PWM_Set(CROON_MOTOR_R_TIM,CROON_MOTOR_R_CHANNEL,set_speed);
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	2102      	movs	r1, #2
 800197c:	2003      	movs	r0, #3
 800197e:	f002 fb75 	bl	800406c <D_PWM_Set>
	}
}
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40020800 	.word	0x40020800

0800198c <Encoder_Process>:

static int Encoder_Process(void){
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	static bool reset = false;
	int enc_state = (int)IO_READ_ENC_STEP();
 8001992:	2104      	movs	r1, #4
 8001994:	4840      	ldr	r0, [pc, #256]	; (8001a98 <Encoder_Process+0x10c>)
 8001996:	f001 fc18 	bl	80031ca <D_GPIO_Read>
 800199a:	4603      	mov	r3, r0
 800199c:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_ENC_HOME();
 800199e:	2108      	movs	r1, #8
 80019a0:	483d      	ldr	r0, [pc, #244]	; (8001a98 <Encoder_Process+0x10c>)
 80019a2:	f001 fc12 	bl	80031ca <D_GPIO_Read>
 80019a6:	4603      	mov	r3, r0
 80019a8:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 80019aa:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <Encoder_Process+0x110>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d005      	beq.n	80019c0 <Encoder_Process+0x34>
		enc_change_count++;
 80019b4:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <Encoder_Process+0x114>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a39      	ldr	r2, [pc, #228]	; (8001aa0 <Encoder_Process+0x114>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e002      	b.n	80019c6 <Encoder_Process+0x3a>
	}else{
		enc_change_count = 0;
 80019c0:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <Encoder_Process+0x114>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <Encoder_Process+0x114>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	dd10      	ble.n	80019f0 <Encoder_Process+0x64>
		recent_enc_state = enc_state;
 80019ce:	4a33      	ldr	r2, [pc, #204]	; (8001a9c <Encoder_Process+0x110>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 80019d4:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <Encoder_Process+0x114>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
		if(enc_state == 0 || enc_state == 1){
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <Encoder_Process+0x5a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d104      	bne.n	80019f0 <Encoder_Process+0x64>
			Encoder_Count++;
 80019e6:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <Encoder_Process+0x118>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	4a2d      	ldr	r2, [pc, #180]	; (8001aa4 <Encoder_Process+0x118>)
 80019ee:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <Encoder_Process+0x11c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d005      	beq.n	8001a06 <Encoder_Process+0x7a>
		home_change_count++;
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <Encoder_Process+0x120>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a2a      	ldr	r2, [pc, #168]	; (8001aac <Encoder_Process+0x120>)
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e002      	b.n	8001a0c <Encoder_Process+0x80>
	}else{
		home_change_count = 0;
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <Encoder_Process+0x120>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5 && !reset){
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <Encoder_Process+0x120>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	dd2d      	ble.n	8001a70 <Encoder_Process+0xe4>
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <Encoder_Process+0x124>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f083 0301 	eor.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d026      	beq.n	8001a70 <Encoder_Process+0xe4>
		reset = true;
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <Encoder_Process+0x124>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
		recent_home_state = home_state;
 8001a28:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <Encoder_Process+0x11c>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <Encoder_Process+0x120>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d11a      	bne.n	8001a70 <Encoder_Process+0xe4>
			if(recent_enc_state == 0){
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <Encoder_Process+0x110>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <Encoder_Process+0xbe>
				Encoder_Count = 1;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <Encoder_Process+0x118>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e006      	b.n	8001a58 <Encoder_Process+0xcc>
			}else if(recent_enc_state == 1){
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <Encoder_Process+0x110>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d102      	bne.n	8001a58 <Encoder_Process+0xcc>
				Encoder_Count = 2;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <Encoder_Process+0x118>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	601a      	str	r2, [r3, #0]
			}
			Encoder_ResetCount += 1;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <Encoder_Process+0x128>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <Encoder_Process+0x128>)
 8001a60:	6013      	str	r3, [r2, #0]
			if(Encoder_ResetCount > 10){
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <Encoder_Process+0x128>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	d902      	bls.n	8001a70 <Encoder_Process+0xe4>
				Encoder_ResetCount = 10;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <Encoder_Process+0x128>)
 8001a6c:	220a      	movs	r2, #10
 8001a6e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(Encoder_Count > 10){
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <Encoder_Process+0x118>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b0a      	cmp	r3, #10
 8001a76:	d902      	bls.n	8001a7e <Encoder_Process+0xf2>
		reset = false;
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <Encoder_Process+0x124>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
		//Encoder_Count = 0;
	}
	if(Encoder_Count > 100){
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <Encoder_Process+0x118>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d902      	bls.n	8001a8c <Encoder_Process+0x100>
		Encoder_Count = 1;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <Encoder_Process+0x118>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	200001ac 	.word	0x200001ac
 8001aa0:	200001b0 	.word	0x200001b0
 8001aa4:	200000dc 	.word	0x200000dc
 8001aa8:	200001b4 	.word	0x200001b4
 8001aac:	200001b8 	.word	0x200001b8
 8001ab0:	200001bc 	.word	0x200001bc
 8001ab4:	200000e0 	.word	0x200000e0

08001ab8 <LED_Pocket_Blightness>:


static void LED_Pocket_Blightness(uint8_t LED[][3], int blightness){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
	if(blightness > 100) blightness = 100;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	dd01      	ble.n	8001acc <LED_Pocket_Blightness+0x14>
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	603b      	str	r3, [r7, #0]
	double coeff = (double)blightness * (1.0/100.0);
 8001acc:	6838      	ldr	r0, [r7, #0]
 8001ace:	f7fe fd41 	bl	8000554 <__aeabi_i2d>
 8001ad2:	a337      	add	r3, pc, #220	; (adr r3, 8001bb0 <LED_Pocket_Blightness+0xf8>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fda6 	bl	8000628 <__aeabi_dmul>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for(int i=0; i<10; i++){
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e059      	b.n	8001b9e <LED_Pocket_Blightness+0xe6>
		LED[i][0] = (int)((double)LED[i][0]*coeff);
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd1b 	bl	8000534 <__aeabi_ui2d>
 8001afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b02:	f7fe fd91 	bl	8000628 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7fe ff9d 	bl	8000a4c <__aeabi_d2iz>
 8001b12:	4601      	mov	r1, r0
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	701a      	strb	r2, [r3, #0]
		LED[i][1] = (int)((double)LED[i][1]*coeff);
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fcfe 	bl	8000534 <__aeabi_ui2d>
 8001b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b3c:	f7fe fd74 	bl	8000628 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe ff80 	bl	8000a4c <__aeabi_d2iz>
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	705a      	strb	r2, [r3, #1]
		LED[i][2] = (int)((double)LED[i][2]*coeff);
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	789b      	ldrb	r3, [r3, #2]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fce1 	bl	8000534 <__aeabi_ui2d>
 8001b72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b76:	f7fe fd57 	bl	8000628 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7fe ff63 	bl	8000a4c <__aeabi_d2iz>
 8001b86:	4601      	mov	r1, r0
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	b2ca      	uxtb	r2, r1
 8001b96:	709a      	strb	r2, [r3, #2]
	for(int i=0; i<10; i++){
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	dda2      	ble.n	8001aea <LED_Pocket_Blightness+0x32>
	}
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	47ae147b 	.word	0x47ae147b
 8001bb4:	3f847ae1 	.word	0x3f847ae1

08001bb8 <LED_Pocket_Get>:

static void LED_Pocket_Get(uint8_t LED[][3], LED_Pocket_Mode mode, int pocket, int encoder){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	72fb      	strb	r3, [r7, #11]
	int i;
	switch(mode){
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	3b03      	subs	r3, #3
 8001bcc:	2b13      	cmp	r3, #19
 8001bce:	f200 8147 	bhi.w	8001e60 <LED_Pocket_Get+0x2a8>
 8001bd2:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <LED_Pocket_Get+0x20>)
 8001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd8:	08001c29 	.word	0x08001c29
 8001bdc:	08001c6d 	.word	0x08001c6d
 8001be0:	08001cb1 	.word	0x08001cb1
 8001be4:	08001cf5 	.word	0x08001cf5
 8001be8:	08001d39 	.word	0x08001d39
 8001bec:	08001d7d 	.word	0x08001d7d
 8001bf0:	08001e61 	.word	0x08001e61
 8001bf4:	08001e61 	.word	0x08001e61
 8001bf8:	08001e61 	.word	0x08001e61
 8001bfc:	08001e61 	.word	0x08001e61
 8001c00:	08001e61 	.word	0x08001e61
 8001c04:	08001e61 	.word	0x08001e61
 8001c08:	08001e61 	.word	0x08001e61
 8001c0c:	08001e61 	.word	0x08001e61
 8001c10:	08001e61 	.word	0x08001e61
 8001c14:	08001e61 	.word	0x08001e61
 8001c18:	08001e61 	.word	0x08001e61
 8001c1c:	08001dc1 	.word	0x08001dc1
 8001c20:	08001dcd 	.word	0x08001dcd
 8001c24:	08001e17 	.word	0x08001e17
	case LED_P_RED:
		for(i=0; i<10; i++){
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e01a      	b.n	8001c64 <LED_Pocket_Get+0xac>
			LED[i][0] = 200;
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	22c8      	movs	r2, #200	; 0xc8
 8001c3c:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 0;
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 0;
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4413      	add	r3, r2
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b09      	cmp	r3, #9
 8001c68:	dde1      	ble.n	8001c2e <LED_Pocket_Get+0x76>
		}
		break;    
 8001c6a:	e0f9      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_GREEN:
		for(i=0; i<10; i++){
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e01a      	b.n	8001ca8 <LED_Pocket_Get+0xf0>
			LED[i][0] = 0;
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 200;
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	22c8      	movs	r2, #200	; 0xc8
 8001c90:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 0;
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	2b09      	cmp	r3, #9
 8001cac:	dde1      	ble.n	8001c72 <LED_Pocket_Get+0xba>
		}
		break;      
 8001cae:	e0d7      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_BLUE:
		for(i=0; i<10; i++){
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e01a      	b.n	8001cec <LED_Pocket_Get+0x134>
			LED[i][0] = 0;
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 0;
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 200;
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	22c8      	movs	r2, #200	; 0xc8
 8001ce4:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	2b09      	cmp	r3, #9
 8001cf0:	dde1      	ble.n	8001cb6 <LED_Pocket_Get+0xfe>
		}
		break;     
 8001cf2:	e0b5      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_YELLOW:
		for(i=0; i<10; i++){
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e01a      	b.n	8001d30 <LED_Pocket_Get+0x178>
			LED[i][0] = 200;
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	22c8      	movs	r2, #200	; 0xc8
 8001d08:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 200;
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4413      	add	r3, r2
 8001d16:	22c8      	movs	r2, #200	; 0xc8
 8001d18:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 0;
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b09      	cmp	r3, #9
 8001d34:	dde1      	ble.n	8001cfa <LED_Pocket_Get+0x142>
		}
		break;     
 8001d36:	e093      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_PURPLE:
		for(i=0; i<10; i++){
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e01a      	b.n	8001d74 <LED_Pocket_Get+0x1bc>
			LED[i][0] = 200;
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	22c8      	movs	r2, #200	; 0xc8
 8001d4c:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 0;
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4413      	add	r3, r2
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 200;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	22c8      	movs	r2, #200	; 0xc8
 8001d6c:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3301      	adds	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	dde1      	ble.n	8001d3e <LED_Pocket_Get+0x186>
		}
		break;     
 8001d7a:	e071      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_CYAN:
		for(i=0; i<10; i++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e01a      	b.n	8001db8 <LED_Pocket_Get+0x200>
			LED[i][0] = 0;
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 200;
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	22c8      	movs	r2, #200	; 0xc8
 8001da0:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 200;
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4413      	add	r3, r2
 8001dae:	22c8      	movs	r2, #200	; 0xc8
 8001db0:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b09      	cmp	r3, #9
 8001dbc:	dde1      	ble.n	8001d82 <LED_Pocket_Get+0x1ca>
		}
		break;       
 8001dbe:	e04f      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_RAINBOW:
		D_LED_Get_Rainbow(LED, encoder, pocket);
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6839      	ldr	r1, [r7, #0]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f001 fafb 	bl	80033c0 <D_LED_Get_Rainbow>
		break;
 8001dca:	e049      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_BLINK_PURPLE:
		for(i=0; i<10; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e01a      	b.n	8001e08 <LED_Pocket_Get+0x250>
			LED[i][0] = 200;
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	4413      	add	r3, r2
 8001dde:	22c8      	movs	r2, #200	; 0xc8
 8001de0:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 0;
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4413      	add	r3, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 200;
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	22c8      	movs	r2, #200	; 0xc8
 8001e00:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	dde1      	ble.n	8001dd2 <LED_Pocket_Get+0x21a>
		}
		D_LED_Get_Blink(LED);
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f001 fa3e 	bl	8003290 <D_LED_Get_Blink>
		break;
 8001e14:	e024      	b.n	8001e60 <LED_Pocket_Get+0x2a8>
    case LED_P_BLINK_YELLOW:
		for(i=0; i<10; i++){
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e01a      	b.n	8001e52 <LED_Pocket_Get+0x29a>
			LED[i][0] = 200;
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	22c8      	movs	r2, #200	; 0xc8
 8001e2a:	701a      	strb	r2, [r3, #0]
			LED[i][1] = 200;
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	22c8      	movs	r2, #200	; 0xc8
 8001e3a:	705a      	strb	r2, [r3, #1]
			LED[i][2] = 0;
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	2200      	movs	r2, #0
 8001e4a:	709a      	strb	r2, [r3, #2]
		for(i=0; i<10; i++){
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	dde1      	ble.n	8001e1c <LED_Pocket_Get+0x264>
		}
		D_LED_Get_Blink(LED);
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f001 fa19 	bl	8003290 <D_LED_Get_Blink>
		break;
 8001e5e:	bf00      	nop
	}

	LED[0][0] = 0;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
	LED[0][1] = 0;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
	LED[0][2] = 0;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	709a      	strb	r2, [r3, #2]
	LED[9][0] = 0;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	331b      	adds	r3, #27
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
	LED[9][1] = 0;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	331b      	adds	r3, #27
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
	LED[9][2] = 0;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	331b      	adds	r3, #27
 8001e86:	2200      	movs	r2, #0
 8001e88:	709a      	strb	r2, [r3, #2]
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop

08001e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e98:	f002 f954 	bl	8004144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e9c:	f000 f820 	bl	8001ee0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ea0:	f000 fb38 	bl	8002514 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ea4:	f000 fad8 	bl	8002458 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001ea8:	f000 fa82 	bl	80023b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001eac:	f000 faaa 	bl	8002404 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001eb0:	f000 f882 	bl	8001fb8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001eb4:	f000 f8ae 	bl	8002014 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001eb8:	f000 f94c 	bl	8002154 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ebc:	f000 f9e0 	bl	8002280 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  
  D_PWM_Init();
 8001ec0:	f002 f8ac 	bl	800401c <D_PWM_Init>
  appInit();
 8001ec4:	f7fe ff66 	bl	8000d94 <appInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 8001ec8:	f7fe ff6c 	bl	8000da4 <appTask>
    if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8001ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <main+0x48>)
 8001ed2:	f003 f85f 	bl	8004f94 <HAL_GPIO_ReadPin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 8001ed6:	f001 fea9 	bl	8003c2c <D_Mess_flush>
	  appTask();
 8001eda:	e7f5      	b.n	8001ec8 <main+0x34>
 8001edc:	40020800 	.word	0x40020800

08001ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b094      	sub	sp, #80	; 0x50
 8001ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	2234      	movs	r2, #52	; 0x34
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f007 fe36 	bl	8009b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <SystemClock_Config+0xd0>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a28      	ldr	r2, [pc, #160]	; (8001fb0 <SystemClock_Config+0xd0>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <SystemClock_Config+0xd0>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f20:	2300      	movs	r3, #0
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <SystemClock_Config+0xd4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f2c:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <SystemClock_Config+0xd4>)
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <SystemClock_Config+0xd4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f44:	2301      	movs	r3, #1
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f54:	2308      	movs	r3, #8
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001f58:	2350      	movs	r3, #80	; 0x50
 8001f5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f60:	2302      	movs	r3, #2
 8001f62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f005 f925 	bl	80071bc <HAL_RCC_OscConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f78:	f000 fbc2 	bl	8002700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f7c:	230f      	movs	r3, #15
 8001f7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f80:	2302      	movs	r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	2102      	movs	r1, #2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 fe43 	bl	8006c24 <HAL_RCC_ClockConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001fa4:	f000 fbac 	bl	8002700 <Error_Handler>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3750      	adds	r7, #80	; 0x50
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <MX_I2C1_Init+0x54>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fc4:	4a12      	ldr	r2, [pc, #72]	; (8002010 <MX_I2C1_Init+0x58>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <MX_I2C1_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_I2C1_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_I2C1_Init+0x50>)
 8001ff6:	f002 ffff 	bl	8004ff8 <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002000:	f000 fb7e 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20001b5c 	.word	0x20001b5c
 800200c:	40005400 	.word	0x40005400
 8002010:	000186a0 	.word	0x000186a0

08002014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b096      	sub	sp, #88	; 0x58
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	615a      	str	r2, [r3, #20]
 8002044:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2220      	movs	r2, #32
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f007 fd87 	bl	8009b60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002052:	4b3e      	ldr	r3, [pc, #248]	; (800214c <MX_TIM1_Init+0x138>)
 8002054:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <MX_TIM1_Init+0x13c>)
 8002056:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <MX_TIM1_Init+0x138>)
 800205a:	2203      	movs	r2, #3
 800205c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <MX_TIM1_Init+0x138>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <MX_TIM1_Init+0x138>)
 8002066:	2218      	movs	r2, #24
 8002068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800206a:	4b38      	ldr	r3, [pc, #224]	; (800214c <MX_TIM1_Init+0x138>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002070:	4b36      	ldr	r3, [pc, #216]	; (800214c <MX_TIM1_Init+0x138>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b35      	ldr	r3, [pc, #212]	; (800214c <MX_TIM1_Init+0x138>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800207c:	4833      	ldr	r0, [pc, #204]	; (800214c <MX_TIM1_Init+0x138>)
 800207e:	f005 fb3b 	bl	80076f8 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002088:	f000 fb3a 	bl	8002700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002096:	4619      	mov	r1, r3
 8002098:	482c      	ldr	r0, [pc, #176]	; (800214c <MX_TIM1_Init+0x138>)
 800209a:	f005 fff9 	bl	8008090 <HAL_TIM_ConfigClockSource>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80020a4:	f000 fb2c 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020a8:	4828      	ldr	r0, [pc, #160]	; (800214c <MX_TIM1_Init+0x138>)
 80020aa:	f005 fb74 	bl	8007796 <HAL_TIM_PWM_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80020b4:	f000 fb24 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020c4:	4619      	mov	r1, r3
 80020c6:	4821      	ldr	r0, [pc, #132]	; (800214c <MX_TIM1_Init+0x138>)
 80020c8:	f006 fc9e 	bl	8008a08 <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020d2:	f000 fb15 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d6:	2360      	movs	r3, #96	; 0x60
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f6:	2200      	movs	r2, #0
 80020f8:	4619      	mov	r1, r3
 80020fa:	4814      	ldr	r0, [pc, #80]	; (800214c <MX_TIM1_Init+0x138>)
 80020fc:	f005 ff06 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002106:	f000 fafb 	bl	8002700 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800211e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002122:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	4807      	ldr	r0, [pc, #28]	; (800214c <MX_TIM1_Init+0x138>)
 800212e:	f006 fce7 	bl	8008b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002138:	f000 fae2 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <MX_TIM1_Init+0x138>)
 800213e:	f000 fc49 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8002142:	bf00      	nop
 8002144:	3758      	adds	r7, #88	; 0x58
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20001d5c 	.word	0x20001d5c
 8002150:	40010000 	.word	0x40010000

08002154 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08e      	sub	sp, #56	; 0x38
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002168:	f107 0320 	add.w	r3, r7, #32
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
 8002180:	615a      	str	r2, [r3, #20]
 8002182:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002184:	4b3d      	ldr	r3, [pc, #244]	; (800227c <MX_TIM2_Init+0x128>)
 8002186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800218a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <MX_TIM2_Init+0x128>)
 800218e:	224f      	movs	r2, #79	; 0x4f
 8002190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002192:	4b3a      	ldr	r3, [pc, #232]	; (800227c <MX_TIM2_Init+0x128>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002198:	4b38      	ldr	r3, [pc, #224]	; (800227c <MX_TIM2_Init+0x128>)
 800219a:	f241 3287 	movw	r2, #4999	; 0x1387
 800219e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a0:	4b36      	ldr	r3, [pc, #216]	; (800227c <MX_TIM2_Init+0x128>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a6:	4b35      	ldr	r3, [pc, #212]	; (800227c <MX_TIM2_Init+0x128>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ac:	4833      	ldr	r0, [pc, #204]	; (800227c <MX_TIM2_Init+0x128>)
 80021ae:	f005 faa3 	bl	80076f8 <HAL_TIM_Base_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021b8:	f000 faa2 	bl	8002700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c6:	4619      	mov	r1, r3
 80021c8:	482c      	ldr	r0, [pc, #176]	; (800227c <MX_TIM2_Init+0x128>)
 80021ca:	f005 ff61 	bl	8008090 <HAL_TIM_ConfigClockSource>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021d4:	f000 fa94 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021d8:	4828      	ldr	r0, [pc, #160]	; (800227c <MX_TIM2_Init+0x128>)
 80021da:	f005 fadc 	bl	8007796 <HAL_TIM_PWM_Init>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80021e4:	f000 fa8c 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f0:	f107 0320 	add.w	r3, r7, #32
 80021f4:	4619      	mov	r1, r3
 80021f6:	4821      	ldr	r0, [pc, #132]	; (800227c <MX_TIM2_Init+0x128>)
 80021f8:	f006 fc06 	bl	8008a08 <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002202:	f000 fa7d 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002206:	2360      	movs	r3, #96	; 0x60
 8002208:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	4817      	ldr	r0, [pc, #92]	; (800227c <MX_TIM2_Init+0x128>)
 800221e:	f005 fe75 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002228:	f000 fa6a 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	2204      	movs	r2, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4812      	ldr	r0, [pc, #72]	; (800227c <MX_TIM2_Init+0x128>)
 8002234:	f005 fe6a 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800223e:	f000 fa5f 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	2208      	movs	r2, #8
 8002246:	4619      	mov	r1, r3
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <MX_TIM2_Init+0x128>)
 800224a:	f005 fe5f 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002254:	f000 fa54 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	220c      	movs	r2, #12
 800225c:	4619      	mov	r1, r3
 800225e:	4807      	ldr	r0, [pc, #28]	; (800227c <MX_TIM2_Init+0x128>)
 8002260:	f005 fe54 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800226a:	f000 fa49 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <MX_TIM2_Init+0x128>)
 8002270:	f000 fbb0 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8002274:	bf00      	nop
 8002276:	3738      	adds	r7, #56	; 0x38
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20001e04 	.word	0x20001e04

08002280 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	f107 0320 	add.w	r3, r7, #32
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800229e:	1d3b      	adds	r3, r7, #4
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
 80022ac:	615a      	str	r2, [r3, #20]
 80022ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022b2:	4a3e      	ldr	r2, [pc, #248]	; (80023ac <MX_TIM3_Init+0x12c>)
 80022b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80022b6:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022b8:	224f      	movs	r2, #79	; 0x4f
 80022ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b3a      	ldr	r3, [pc, #232]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022c4:	f241 3287 	movw	r2, #4999	; 0x1387
 80022c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022d6:	4834      	ldr	r0, [pc, #208]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022d8:	f005 fa0e 	bl	80076f8 <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022e2:	f000 fa0d 	bl	8002700 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f0:	4619      	mov	r1, r3
 80022f2:	482d      	ldr	r0, [pc, #180]	; (80023a8 <MX_TIM3_Init+0x128>)
 80022f4:	f005 fecc 	bl	8008090 <HAL_TIM_ConfigClockSource>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022fe:	f000 f9ff 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002302:	4829      	ldr	r0, [pc, #164]	; (80023a8 <MX_TIM3_Init+0x128>)
 8002304:	f005 fa47 	bl	8007796 <HAL_TIM_PWM_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800230e:	f000 f9f7 	bl	8002700 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800231a:	f107 0320 	add.w	r3, r7, #32
 800231e:	4619      	mov	r1, r3
 8002320:	4821      	ldr	r0, [pc, #132]	; (80023a8 <MX_TIM3_Init+0x128>)
 8002322:	f006 fb71 	bl	8008a08 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800232c:	f000 f9e8 	bl	8002700 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002330:	2360      	movs	r3, #96	; 0x60
 8002332:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2200      	movs	r2, #0
 8002344:	4619      	mov	r1, r3
 8002346:	4818      	ldr	r0, [pc, #96]	; (80023a8 <MX_TIM3_Init+0x128>)
 8002348:	f005 fde0 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002352:	f000 f9d5 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	2204      	movs	r2, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4812      	ldr	r0, [pc, #72]	; (80023a8 <MX_TIM3_Init+0x128>)
 800235e:	f005 fdd5 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002368:	f000 f9ca 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2208      	movs	r2, #8
 8002370:	4619      	mov	r1, r3
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <MX_TIM3_Init+0x128>)
 8002374:	f005 fdca 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800237e:	f000 f9bf 	bl	8002700 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	220c      	movs	r2, #12
 8002386:	4619      	mov	r1, r3
 8002388:	4807      	ldr	r0, [pc, #28]	; (80023a8 <MX_TIM3_Init+0x128>)
 800238a:	f005 fdbf 	bl	8007f0c <HAL_TIM_PWM_ConfigChannel>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002394:	f000 f9b4 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <MX_TIM3_Init+0x128>)
 800239a:	f000 fb1b 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 800239e:	bf00      	nop
 80023a0:	3738      	adds	r7, #56	; 0x38
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20001bb0 	.word	0x20001bb0
 80023ac:	40000400 	.word	0x40000400

080023b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <MX_USART1_UART_Init+0x50>)
 80023b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023d6:	220c      	movs	r2, #12
 80023d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART1_UART_Init+0x4c>)
 80023e8:	f006 fbdc 	bl	8008ba4 <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023f2:	f000 f985 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20001d18 	.word	0x20001d18
 8002400:	40011000 	.word	0x40011000

08002404 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800240a:	4a12      	ldr	r2, [pc, #72]	; (8002454 <MX_USART2_UART_Init+0x50>)
 800240c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_USART2_UART_Init+0x4c>)
 800243c:	f006 fbb2 	bl	8008ba4 <HAL_UART_Init>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002446:	f000 f95b 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20001e4c 	.word	0x20001e4c
 8002454:	40004400 	.word	0x40004400

08002458 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <MX_DMA_Init+0xb8>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a2a      	ldr	r2, [pc, #168]	; (8002510 <MX_DMA_Init+0xb8>)
 8002468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <MX_DMA_Init+0xb8>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	603b      	str	r3, [r7, #0]
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <MX_DMA_Init+0xb8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a23      	ldr	r2, [pc, #140]	; (8002510 <MX_DMA_Init+0xb8>)
 8002484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <MX_DMA_Init+0xb8>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002496:	2200      	movs	r2, #0
 8002498:	2100      	movs	r1, #0
 800249a:	200b      	movs	r0, #11
 800249c:	f001 ff9f 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80024a0:	200b      	movs	r0, #11
 80024a2:	f001 ffb8 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2010      	movs	r0, #16
 80024ac:	f001 ff97 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024b0:	2010      	movs	r0, #16
 80024b2:	f001 ffb0 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2011      	movs	r0, #17
 80024bc:	f001 ff8f 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024c0:	2011      	movs	r0, #17
 80024c2:	f001 ffa8 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	202f      	movs	r0, #47	; 0x2f
 80024cc:	f001 ff87 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80024d0:	202f      	movs	r0, #47	; 0x2f
 80024d2:	f001 ffa0 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2039      	movs	r0, #57	; 0x39
 80024dc:	f001 ff7f 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80024e0:	2039      	movs	r0, #57	; 0x39
 80024e2:	f001 ff98 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	203a      	movs	r0, #58	; 0x3a
 80024ec:	f001 ff77 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80024f0:	203a      	movs	r0, #58	; 0x3a
 80024f2:	f001 ff90 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2100      	movs	r1, #0
 80024fa:	2046      	movs	r0, #70	; 0x46
 80024fc:	f001 ff6f 	bl	80043de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002500:	2046      	movs	r0, #70	; 0x46
 8002502:	f001 ff88 	bl	8004416 <HAL_NVIC_EnableIRQ>

}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a59      	ldr	r2, [pc, #356]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a4b      	ldr	r2, [pc, #300]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4b45      	ldr	r3, [pc, #276]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 80025a4:	f043 0308 	orr.w	r3, r3, #8
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <MX_GPIO_Init+0x1a0>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2120      	movs	r1, #32
 80025ba:	483f      	ldr	r0, [pc, #252]	; (80026b8 <MX_GPIO_Init+0x1a4>)
 80025bc:	f002 fd02 	bl	8004fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2110      	movs	r1, #16
 80025c4:	483d      	ldr	r0, [pc, #244]	; (80026bc <MX_GPIO_Init+0x1a8>)
 80025c6:	f002 fcfd 	bl	8004fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	f24e 0120 	movw	r1, #57376	; 0xe020
 80025d0:	483b      	ldr	r0, [pc, #236]	; (80026c0 <MX_GPIO_Init+0x1ac>)
 80025d2:	f002 fcf7 	bl	8004fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025e6:	f107 0314 	add.w	r3, r7, #20
 80025ea:	4619      	mov	r1, r3
 80025ec:	4833      	ldr	r0, [pc, #204]	; (80026bc <MX_GPIO_Init+0x1a8>)
 80025ee:	f002 fb3d 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80025f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80025f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	482d      	ldr	r0, [pc, #180]	; (80026bc <MX_GPIO_Init+0x1a8>)
 8002608:	f002 fb30 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800260c:	2310      	movs	r3, #16
 800260e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002610:	2300      	movs	r3, #0
 8002612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002614:	2301      	movs	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4826      	ldr	r0, [pc, #152]	; (80026b8 <MX_GPIO_Init+0x1a4>)
 8002620:	f002 fb24 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002624:	2320      	movs	r3, #32
 8002626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	481f      	ldr	r0, [pc, #124]	; (80026b8 <MX_GPIO_Init+0x1a4>)
 800263c:	f002 fb16 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002640:	2310      	movs	r3, #16
 8002642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002644:	2301      	movs	r3, #1
 8002646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4819      	ldr	r0, [pc, #100]	; (80026bc <MX_GPIO_Init+0x1a8>)
 8002658:	f002 fb08 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800265c:	2381      	movs	r3, #129	; 0x81
 800265e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002664:	2301      	movs	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	4619      	mov	r1, r3
 800266e:	4814      	ldr	r0, [pc, #80]	; (80026c0 <MX_GPIO_Init+0x1ac>)
 8002670:	f002 fafc 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8002674:	f24e 0320 	movw	r3, #57376	; 0xe020
 8002678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f107 0314 	add.w	r3, r7, #20
 800268a:	4619      	mov	r1, r3
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <MX_GPIO_Init+0x1ac>)
 800268e:	f002 faed 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002692:	2304      	movs	r3, #4
 8002694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800269a:	2301      	movs	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <MX_GPIO_Init+0x1b0>)
 80026a6:	f002 fae1 	bl	8004c6c <HAL_GPIO_Init>

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	; 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020000 	.word	0x40020000
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020400 	.word	0x40020400
 80026c4:	40020c00 	.word	0x40020c00

080026c8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_UART_TxCpltCallback+0x20>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 80026da:	f001 fad9 	bl	8003c90 <D_Mess_TransitionCompletedCallBack>
  }
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40004400 	.word	0x40004400

080026ec <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  //busy = false;
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
  //HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	//datasentflag=1;
  D_LED_Callback();
 80026f4:	f001 fa6a 	bl	8003bcc <D_LED_Callback>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002708:	e7fe      	b.n	8002708 <Error_Handler+0x8>
	...

0800270c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_MspInit+0x4c>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_MspInit+0x4c>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_MspInit+0x4c>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_MspInit+0x4c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_MspInit+0x4c>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_MspInit+0x4c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800274a:	2007      	movs	r0, #7
 800274c:	f001 fe3c 	bl	80043c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a50      	ldr	r2, [pc, #320]	; (80028bc <HAL_I2C_MspInit+0x160>)
 800277a:	4293      	cmp	r3, r2
 800277c:	f040 8099 	bne.w	80028b2 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	4b4e      	ldr	r3, [pc, #312]	; (80028c0 <HAL_I2C_MspInit+0x164>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <HAL_I2C_MspInit+0x164>)
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	6313      	str	r3, [r2, #48]	; 0x30
 8002790:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_I2C_MspInit+0x164>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800279c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a2:	2312      	movs	r3, #18
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ae:	2304      	movs	r3, #4
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4842      	ldr	r0, [pc, #264]	; (80028c4 <HAL_I2C_MspInit+0x168>)
 80027ba:	f002 fa57 	bl	8004c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_I2C_MspInit+0x164>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a3e      	ldr	r2, [pc, #248]	; (80028c0 <HAL_I2C_MspInit+0x164>)
 80027c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_I2C_MspInit+0x164>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 80027dc:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_I2C_MspInit+0x170>)
 80027de:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80027e0:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 80027e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 80027f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027fa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027fc:	4b32      	ldr	r3, [pc, #200]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800280e:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002814:	4b2c      	ldr	r3, [pc, #176]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800281a:	482b      	ldr	r0, [pc, #172]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 800281c:	f001 fe16 	bl	800444c <HAL_DMA_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002826:	f7ff ff6b 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a26      	ldr	r2, [pc, #152]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <HAL_I2C_MspInit+0x16c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 8002838:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <HAL_I2C_MspInit+0x178>)
 800283a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 800283e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002842:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284a:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 8002852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002856:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 800286c:	2200      	movs	r2, #0
 800286e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 8002872:	2200      	movs	r2, #0
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002876:	4816      	ldr	r0, [pc, #88]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 8002878:	f001 fde8 	bl	800444c <HAL_DMA_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002882:	f7ff ff3d 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 800288a:	635a      	str	r2, [r3, #52]	; 0x34
 800288c:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_I2C_MspInit+0x174>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	201f      	movs	r0, #31
 8002898:	f001 fda1 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800289c:	201f      	movs	r0, #31
 800289e:	f001 fdba 	bl	8004416 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	2020      	movs	r0, #32
 80028a8:	f001 fd99 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80028ac:	2020      	movs	r0, #32
 80028ae:	f001 fdb2 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40005400 	.word	0x40005400
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020400 	.word	0x40020400
 80028c8:	20001da4 	.word	0x20001da4
 80028cc:	40026010 	.word	0x40026010
 80028d0:	20001afc 	.word	0x20001afc
 80028d4:	400260b8 	.word	0x400260b8

080028d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <HAL_TIM_Base_MspInit+0xe8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d13e      	bne.n	8002968 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	4a34      	ldr	r2, [pc, #208]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6453      	str	r3, [r2, #68]	; 0x44
 80028fa:	4b32      	ldr	r3, [pc, #200]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002906:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002908:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_TIM_Base_MspInit+0xf4>)
 800290a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 800290e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002912:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002914:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800291a:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 800291c:	2200      	movs	r2, #0
 800291e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002920:	4b29      	ldr	r3, [pc, #164]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002926:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 800292a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800292e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002936:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800294a:	481f      	ldr	r0, [pc, #124]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 800294c:	f001 fd7e 	bl	800444c <HAL_DMA_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002956:	f7ff fed3 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_TIM_Base_MspInit+0xf0>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002966:	e026      	b.n	80029b6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
}
 800298e:	e012      	b.n	80029b6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_TIM_Base_MspInit+0xf8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d10d      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_TIM_Base_MspInit+0xec>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40023800 	.word	0x40023800
 80029c8:	20001a3c 	.word	0x20001a3c
 80029cc:	40026428 	.word	0x40026428
 80029d0:	40000400 	.word	0x40000400

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a64      	ldr	r2, [pc, #400]	; (8002b84 <HAL_TIM_MspPostInit+0x1b0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11f      	bne.n	8002a36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4a62      	ldr	r2, [pc, #392]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6313      	str	r3, [r2, #48]	; 0x30
 8002a06:	4b60      	ldr	r3, [pc, #384]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4857      	ldr	r0, [pc, #348]	; (8002b8c <HAL_TIM_MspPostInit+0x1b8>)
 8002a30:	f002 f91c 	bl	8004c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a34:	e0a2      	b.n	8002b7c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d13d      	bne.n	8002abc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	4a4f      	ldr	r2, [pc, #316]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a50:	4b4d      	ldr	r3, [pc, #308]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	4b49      	ldr	r3, [pc, #292]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a66:	f043 0302 	orr.w	r3, r3, #2
 8002a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6c:	4b46      	ldr	r3, [pc, #280]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	4619      	mov	r1, r3
 8002a92:	483e      	ldr	r0, [pc, #248]	; (8002b8c <HAL_TIM_MspPostInit+0x1b8>)
 8002a94:	f002 f8ea 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8002a98:	f240 4304 	movw	r3, #1028	; 0x404
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4836      	ldr	r0, [pc, #216]	; (8002b90 <HAL_TIM_MspPostInit+0x1bc>)
 8002ab6:	f002 f8d9 	bl	8004c6c <HAL_GPIO_Init>
}
 8002aba:	e05f      	b.n	8002b7c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM3)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a34      	ldr	r2, [pc, #208]	; (8002b94 <HAL_TIM_MspPostInit+0x1c0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d15a      	bne.n	8002b7c <HAL_TIM_MspPostInit+0x1a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a2e      	ldr	r2, [pc, #184]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a27      	ldr	r2, [pc, #156]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a20      	ldr	r2, [pc, #128]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002b08:	f043 0304 	orr.w	r3, r3, #4
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_TIM_MspPostInit+0x1b4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b1a:	23c0      	movs	r3, #192	; 0xc0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2300      	movs	r3, #0
 8002b28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b32:	4619      	mov	r1, r3
 8002b34:	4815      	ldr	r0, [pc, #84]	; (8002b8c <HAL_TIM_MspPostInit+0x1b8>)
 8002b36:	f002 f899 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b52:	4619      	mov	r1, r3
 8002b54:	480e      	ldr	r0, [pc, #56]	; (8002b90 <HAL_TIM_MspPostInit+0x1bc>)
 8002b56:	f002 f889 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4808      	ldr	r0, [pc, #32]	; (8002b98 <HAL_TIM_MspPostInit+0x1c4>)
 8002b78:	f002 f878 	bl	8004c6c <HAL_GPIO_Init>
}
 8002b7c:	bf00      	nop
 8002b7e:	3738      	adds	r7, #56	; 0x38
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40020800 	.word	0x40020800

08002b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a97      	ldr	r2, [pc, #604]	; (8002e18 <HAL_UART_MspInit+0x27c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f040 8092 	bne.w	8002ce4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	4b95      	ldr	r3, [pc, #596]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	4a94      	ldr	r2, [pc, #592]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002bca:	f043 0310 	orr.w	r3, r3, #16
 8002bce:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd0:	4b92      	ldr	r3, [pc, #584]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4a8d      	ldr	r2, [pc, #564]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6313      	str	r3, [r2, #48]	; 0x30
 8002bec:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bf8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4882      	ldr	r0, [pc, #520]	; (8002e20 <HAL_UART_MspInit+0x284>)
 8002c16:	f002 f829 	bl	8004c6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002c1a:	4b82      	ldr	r3, [pc, #520]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c1c:	4a82      	ldr	r2, [pc, #520]	; (8002e28 <HAL_UART_MspInit+0x28c>)
 8002c1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002c20:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c26:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c28:	4b7e      	ldr	r3, [pc, #504]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c2e:	4b7d      	ldr	r3, [pc, #500]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c34:	4b7b      	ldr	r3, [pc, #492]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c3c:	4b79      	ldr	r3, [pc, #484]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c42:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c48:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c4e:	4b75      	ldr	r3, [pc, #468]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c54:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c5a:	4872      	ldr	r0, [pc, #456]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c5c:	f001 fbf6 	bl	800444c <HAL_DMA_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c66:	f7ff fd4b 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8002c70:	4a6c      	ldr	r2, [pc, #432]	; (8002e24 <HAL_UART_MspInit+0x288>)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002c78:	4a6d      	ldr	r2, [pc, #436]	; (8002e30 <HAL_UART_MspInit+0x294>)
 8002c7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c7c:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002c7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c82:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c84:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002c86:	2240      	movs	r2, #64	; 0x40
 8002c88:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8a:	4b68      	ldr	r3, [pc, #416]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c90:	4b66      	ldr	r3, [pc, #408]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c96:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c98:	4b64      	ldr	r3, [pc, #400]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c9e:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ca4:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002caa:	4b60      	ldr	r3, [pc, #384]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb0:	4b5e      	ldr	r3, [pc, #376]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cb6:	485d      	ldr	r0, [pc, #372]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002cb8:	f001 fbc8 	bl	800444c <HAL_DMA_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002cc2:	f7ff fd1d 	bl	8002700 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a58      	ldr	r2, [pc, #352]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
 8002ccc:	4a57      	ldr	r2, [pc, #348]	; (8002e2c <HAL_UART_MspInit+0x290>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2025      	movs	r0, #37	; 0x25
 8002cd8:	f001 fb81 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cdc:	2025      	movs	r0, #37	; 0x25
 8002cde:	f001 fb9a 	bl	8004416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ce2:	e095      	b.n	8002e10 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_UART_MspInit+0x298>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 8090 	bne.w	8002e10 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	4a48      	ldr	r2, [pc, #288]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4a41      	ldr	r2, [pc, #260]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1c:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HAL_UART_MspInit+0x280>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d28:	230c      	movs	r3, #12
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d38:	2307      	movs	r3, #7
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	4837      	ldr	r0, [pc, #220]	; (8002e20 <HAL_UART_MspInit+0x284>)
 8002d44:	f001 ff92 	bl	8004c6c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d4a:	4a3c      	ldr	r2, [pc, #240]	; (8002e3c <HAL_UART_MspInit+0x2a0>)
 8002d4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d54:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d56:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d62:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d6a:	4b33      	ldr	r3, [pc, #204]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d70:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d82:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d88:	482b      	ldr	r0, [pc, #172]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d8a:	f001 fb5f 	bl	800444c <HAL_DMA_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002d94:	f7ff fcb4 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a27      	ldr	r2, [pc, #156]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <HAL_UART_MspInit+0x29c>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002da4:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002da6:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <HAL_UART_MspInit+0x2a8>)
 8002da8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002db2:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002db4:	2240      	movs	r2, #64	; 0x40
 8002db6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dbe:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd8:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002de4:	4816      	ldr	r0, [pc, #88]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002de6:	f001 fb31 	bl	800444c <HAL_DMA_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8002df0:	f7ff fc86 	bl	8002700 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002df8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dfa:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <HAL_UART_MspInit+0x2a4>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	2026      	movs	r0, #38	; 0x26
 8002e06:	f001 faea 	bl	80043de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e0a:	2026      	movs	r0, #38	; 0x26
 8002e0c:	f001 fb03 	bl	8004416 <HAL_NVIC_EnableIRQ>
}
 8002e10:	bf00      	nop
 8002e12:	3730      	adds	r7, #48	; 0x30
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40011000 	.word	0x40011000
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	20001c58 	.word	0x20001c58
 8002e28:	40026440 	.word	0x40026440
 8002e2c:	20001bf8 	.word	0x20001bf8
 8002e30:	400264b8 	.word	0x400264b8
 8002e34:	40004400 	.word	0x40004400
 8002e38:	20001a9c 	.word	0x20001a9c
 8002e3c:	40026088 	.word	0x40026088
 8002e40:	20001cb8 	.word	0x20001cb8
 8002e44:	400260a0 	.word	0x400260a0

08002e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <NMI_Handler+0x4>

08002e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <HardFault_Handler+0x4>

08002e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <MemManage_Handler+0x4>

08002e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5e:	e7fe      	b.n	8002e5e <BusFault_Handler+0x4>

08002e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <UsageFault_Handler+0x4>

08002e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e94:	f001 f9a8 	bl	80041e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <SysTick_Handler+0x18>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a02      	ldr	r2, [pc, #8]	; (8002ea8 <SysTick_Handler+0x18>)
 8002ea0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200001c0 	.word	0x200001c0

08002eac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <DMA1_Stream0_IRQHandler+0x10>)
 8002eb2:	f001 fc63 	bl	800477c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20001da4 	.word	0x20001da4

08002ec0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <DMA1_Stream5_IRQHandler+0x10>)
 8002ec6:	f001 fc59 	bl	800477c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20001a9c 	.word	0x20001a9c

08002ed4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <DMA1_Stream6_IRQHandler+0x10>)
 8002eda:	f001 fc4f 	bl	800477c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20001cb8 	.word	0x20001cb8

08002ee8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <I2C1_EV_IRQHandler+0x10>)
 8002eee:	f002 f9c7 	bl	8005280 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20001b5c 	.word	0x20001b5c

08002efc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <I2C1_ER_IRQHandler+0x10>)
 8002f02:	f002 fb2e 	bl	8005562 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20001b5c 	.word	0x20001b5c

08002f10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <USART1_IRQHandler+0x10>)
 8002f16:	f005 ff11 	bl	8008d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20001d18 	.word	0x20001d18

08002f24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <USART2_IRQHandler+0x10>)
 8002f2a:	f005 ff07 	bl	8008d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20001e4c 	.word	0x20001e4c

08002f38 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <DMA1_Stream7_IRQHandler+0x10>)
 8002f3e:	f001 fc1d 	bl	800477c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20001afc 	.word	0x20001afc

08002f4c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <DMA2_Stream1_IRQHandler+0x10>)
 8002f52:	f001 fc13 	bl	800477c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20001a3c 	.word	0x20001a3c

08002f60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <DMA2_Stream2_IRQHandler+0x10>)
 8002f66:	f001 fc09 	bl	800477c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20001c58 	.word	0x20001c58

08002f74 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <DMA2_Stream7_IRQHandler+0x10>)
 8002f7a:	f001 fbff 	bl	800477c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20001bf8 	.word	0x20001bf8

08002f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
	return 1;
 8002f8c:	2301      	movs	r3, #1
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <_kill>:

int _kill(int pid, int sig)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002fa2:	f006 fdb3 	bl	8009b0c <__errno>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2216      	movs	r2, #22
 8002faa:	601a      	str	r2, [r3, #0]
	return -1;
 8002fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_exit>:

void _exit (int status)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7ff ffe7 	bl	8002f98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002fca:	e7fe      	b.n	8002fca <_exit+0x12>

08002fcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e00a      	b.n	8002ff4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fde:	f3af 8000 	nop.w
 8002fe2:	4601      	mov	r1, r0
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	60ba      	str	r2, [r7, #8]
 8002fea:	b2ca      	uxtb	r2, r1
 8002fec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	dbf0      	blt.n	8002fde <_read+0x12>
	}

return len;
 8002ffc:	687b      	ldr	r3, [r7, #4]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3718      	adds	r7, #24
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	e009      	b.n	800302c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	60ba      	str	r2, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	3301      	adds	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	dbf1      	blt.n	8003018 <_write+0x12>
	}
	return len;
 8003034:	687b      	ldr	r3, [r7, #4]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <_close>:

int _close(int file)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
	return -1;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003066:	605a      	str	r2, [r3, #4]
	return 0;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_isatty>:

int _isatty(int file)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
	return 1;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
	return 0;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <_sbrk+0x5c>)
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <_sbrk+0x60>)
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <_sbrk+0x64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <_sbrk+0x64>)
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <_sbrk+0x68>)
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <_sbrk+0x64>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d207      	bcs.n	80030e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030d8:	f006 fd18 	bl	8009b0c <__errno>
 80030dc:	4603      	mov	r3, r0
 80030de:	220c      	movs	r2, #12
 80030e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e6:	e009      	b.n	80030fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <_sbrk+0x64>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a05      	ldr	r2, [pc, #20]	; (800310c <_sbrk+0x64>)
 80030f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20020000 	.word	0x20020000
 8003108:	00000400 	.word	0x00000400
 800310c:	200001c4 	.word	0x200001c4
 8003110:	20002040 	.word	0x20002040

08003114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <SystemInit+0x20>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	4a05      	ldr	r2, [pc, #20]	; (8003134 <SystemInit+0x20>)
 8003120:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003124:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003138:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003170 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800313c:	480d      	ldr	r0, [pc, #52]	; (8003174 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800313e:	490e      	ldr	r1, [pc, #56]	; (8003178 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003140:	4a0e      	ldr	r2, [pc, #56]	; (800317c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003144:	e002      	b.n	800314c <LoopCopyDataInit>

08003146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314a:	3304      	adds	r3, #4

0800314c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800314c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800314e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003150:	d3f9      	bcc.n	8003146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003152:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003154:	4c0b      	ldr	r4, [pc, #44]	; (8003184 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003158:	e001      	b.n	800315e <LoopFillZerobss>

0800315a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800315c:	3204      	adds	r2, #4

0800315e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800315e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003160:	d3fb      	bcc.n	800315a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003162:	f7ff ffd7 	bl	8003114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003166:	f006 fcd7 	bl	8009b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316a:	f7fe fe93 	bl	8001e94 <main>
  bx  lr    
 800316e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003170:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003178:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800317c:	0800ad20 	.word	0x0800ad20
  ldr r2, =_sbss
 8003180:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8003184:	20002040 	.word	0x20002040

08003188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003188:	e7fe      	b.n	8003188 <ADC_IRQHandler>

0800318a <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8003196:	887b      	ldrh	r3, [r7, #2]
 8003198:	2201      	movs	r2, #1
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f001 ff11 	bl	8004fc4 <HAL_GPIO_WritePin>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	460b      	mov	r3, r1
 80031b4:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 80031b6:	887b      	ldrh	r3, [r7, #2]
 80031b8:	2200      	movs	r2, #0
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f001 ff01 	bl	8004fc4 <HAL_GPIO_WritePin>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 80031d6:	887b      	ldrh	r3, [r7, #2]
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f001 feda 	bl	8004f94 <HAL_GPIO_ReadPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <D_LED_Set_Blink>:
	{ 29, 32,136},
	{  0,104,183},
};
static double BlinkCoeff = 1.0;

void D_LED_Set_Blink(int deltatime){
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	static uint32_t BlinkTime = 0;
	BlinkTime += deltatime;
 80031fc:	4b21      	ldr	r3, [pc, #132]	; (8003284 <D_LED_Set_Blink+0x90>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4413      	add	r3, r2
 8003204:	4a1f      	ldr	r2, [pc, #124]	; (8003284 <D_LED_Set_Blink+0x90>)
 8003206:	6013      	str	r3, [r2, #0]
	if(BlinkTime >= BLINK_FLOWTIME){
 8003208:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <D_LED_Set_Blink+0x90>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f240 52db 	movw	r2, #1499	; 0x5db
 8003210:	4293      	cmp	r3, r2
 8003212:	d902      	bls.n	800321a <D_LED_Set_Blink+0x26>
		BlinkTime = 0;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <D_LED_Set_Blink+0x90>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
	}
	if(BlinkTime <= 100){
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <D_LED_Set_Blink+0x90>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d807      	bhi.n	8003232 <D_LED_Set_Blink+0x3e>
		BlinkCoeff = 0.0;
 8003222:	4919      	ldr	r1, [pc, #100]	; (8003288 <D_LED_Set_Blink+0x94>)
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9c1 2300 	strd	r2, r3, [r1]
	}else if(BlinkTime <= 350){
		BlinkCoeff = 0.0;
	}else if(BlinkTime <= 450){
		BlinkCoeff = 1.0;
	}
}
 8003230:	e022      	b.n	8003278 <D_LED_Set_Blink+0x84>
	}else if(BlinkTime <= 250){
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <D_LED_Set_Blink+0x90>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2bfa      	cmp	r3, #250	; 0xfa
 8003238:	d806      	bhi.n	8003248 <D_LED_Set_Blink+0x54>
		BlinkCoeff = 1.0;
 800323a:	4913      	ldr	r1, [pc, #76]	; (8003288 <D_LED_Set_Blink+0x94>)
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <D_LED_Set_Blink+0x98>)
 8003242:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003246:	e017      	b.n	8003278 <D_LED_Set_Blink+0x84>
	}else if(BlinkTime <= 350){
 8003248:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <D_LED_Set_Blink+0x90>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003250:	d807      	bhi.n	8003262 <D_LED_Set_Blink+0x6e>
		BlinkCoeff = 0.0;
 8003252:	490d      	ldr	r1, [pc, #52]	; (8003288 <D_LED_Set_Blink+0x94>)
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003260:	e00a      	b.n	8003278 <D_LED_Set_Blink+0x84>
	}else if(BlinkTime <= 450){
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <D_LED_Set_Blink+0x90>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800326a:	d805      	bhi.n	8003278 <D_LED_Set_Blink+0x84>
		BlinkCoeff = 1.0;
 800326c:	4906      	ldr	r1, [pc, #24]	; (8003288 <D_LED_Set_Blink+0x94>)
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <D_LED_Set_Blink+0x98>)
 8003274:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	20001628 	.word	0x20001628
 8003288:	20000048 	.word	0x20000048
 800328c:	3ff00000 	.word	0x3ff00000

08003290 <D_LED_Get_Blink>:

void D_LED_Get_Blink(uint8_t LED[][3]){
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	for(int j=0;j<10;j++){
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e05c      	b.n	8003358 <D_LED_Get_Blink+0xc8>
		LED[j][0] = (int)((double)LED[j][0]*BlinkCoeff);
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4413      	add	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f941 	bl	8000534 <__aeabi_ui2d>
 80032b2:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <D_LED_Get_Blink+0xd8>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fd f9b6 	bl	8000628 <__aeabi_dmul>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7fd fbc2 	bl	8000a4c <__aeabi_d2iz>
 80032c8:	4601      	mov	r1, r0
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	b2ca      	uxtb	r2, r1
 80032d8:	701a      	strb	r2, [r3, #0]
		LED[j][1] = (int)((double)LED[j][1]*BlinkCoeff);
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f923 	bl	8000534 <__aeabi_ui2d>
 80032ee:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <D_LED_Get_Blink+0xd8>)
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f7fd f998 	bl	8000628 <__aeabi_dmul>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	f7fd fba4 	bl	8000a4c <__aeabi_d2iz>
 8003304:	4601      	mov	r1, r0
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	b2ca      	uxtb	r2, r1
 8003314:	705a      	strb	r2, [r3, #1]
		LED[j][2] = (int)((double)LED[j][2]*BlinkCoeff);
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	789b      	ldrb	r3, [r3, #2]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd f905 	bl	8000534 <__aeabi_ui2d>
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <D_LED_Get_Blink+0xd8>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f7fd f97a 	bl	8000628 <__aeabi_dmul>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4610      	mov	r0, r2
 800333a:	4619      	mov	r1, r3
 800333c:	f7fd fb86 	bl	8000a4c <__aeabi_d2iz>
 8003340:	4601      	mov	r1, r0
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	b2ca      	uxtb	r2, r1
 8003350:	709a      	strb	r2, [r3, #2]
	for(int j=0;j<10;j++){
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3301      	adds	r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b09      	cmp	r3, #9
 800335c:	dd9f      	ble.n	800329e <D_LED_Get_Blink+0xe>
	}
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000048 	.word	0x20000048

0800336c <D_LED_Set_Rainbow>:

void D_LED_Set_Rainbow(int deltatime){
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	static uint32_t RainbowTime = 0;
	RainbowTime += deltatime;
 8003374:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <D_LED_Set_Rainbow+0x4c>)
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <D_LED_Set_Rainbow+0x4c>)
 800337e:	6013      	str	r3, [r2, #0]
	if(RainbowTime >= RAINBOW_FLOWTIME){
 8003380:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <D_LED_Set_Rainbow+0x4c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b63      	cmp	r3, #99	; 0x63
 8003386:	d90e      	bls.n	80033a6 <D_LED_Set_Rainbow+0x3a>
		RainbowCount++;
 8003388:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <D_LED_Set_Rainbow+0x50>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	4a0b      	ldr	r2, [pc, #44]	; (80033bc <D_LED_Set_Rainbow+0x50>)
 8003390:	6013      	str	r3, [r2, #0]
		RainbowTime = 0;
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <D_LED_Set_Rainbow+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
		if(RainbowCount >= 50){
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <D_LED_Set_Rainbow+0x50>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b31      	cmp	r3, #49	; 0x31
 800339e:	dd02      	ble.n	80033a6 <D_LED_Set_Rainbow+0x3a>
			RainbowCount = 0;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <D_LED_Set_Rainbow+0x50>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
		}
	}
	D_LED_Rainbow_ArraySwap(RainbowCount);
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <D_LED_Set_Rainbow+0x50>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f870 	bl	8003490 <D_LED_Rainbow_ArraySwap>
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	2000162c 	.word	0x2000162c
 80033bc:	20001624 	.word	0x20001624

080033c0 <D_LED_Get_Rainbow>:

void D_LED_Get_Rainbow(uint8_t LED[][3], int encoder, int pocket){
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
	for(int j=0; j<10; j++){
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	e052      	b.n	8003478 <D_LED_Get_Rainbow+0xb8>
		int index = ((int)(encoder/2.0) + (pocket-1)*10+j) % 50;
 80033d2:	68b8      	ldr	r0, [r7, #8]
 80033d4:	f7fd f8be 	bl	8000554 <__aeabi_i2d>
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033e0:	f7fd fa4c 	bl	800087c <__aeabi_ddiv>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fb2e 	bl	8000a4c <__aeabi_d2iz>
 80033f0:	4601      	mov	r1, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	18ca      	adds	r2, r1, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4413      	add	r3, r2
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <D_LED_Get_Rainbow+0xc8>)
 8003406:	fb82 1203 	smull	r1, r2, r2, r3
 800340a:	1111      	asrs	r1, r2, #4
 800340c:	17da      	asrs	r2, r3, #31
 800340e:	1a8a      	subs	r2, r1, r2
 8003410:	2132      	movs	r1, #50	; 0x32
 8003412:	fb01 f202 	mul.w	r2, r1, r2
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	613b      	str	r3, [r7, #16]
		LED[j][0] = LED_Temp_Rainbow[index][0];
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	18d1      	adds	r1, r2, r3
 8003426:	4819      	ldr	r0, [pc, #100]	; (800348c <D_LED_Get_Rainbow+0xcc>)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	4403      	add	r3, r0
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	700b      	strb	r3, [r1, #0]
		LED[j][1] = LED_Temp_Rainbow[index][1];
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	18d1      	adds	r1, r2, r3
 8003442:	4812      	ldr	r0, [pc, #72]	; (800348c <D_LED_Get_Rainbow+0xcc>)
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	4403      	add	r3, r0
 800344e:	3301      	adds	r3, #1
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	704b      	strb	r3, [r1, #1]
		LED[j][2] = LED_Temp_Rainbow[index][2];
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	18d1      	adds	r1, r2, r3
 8003460:	480a      	ldr	r0, [pc, #40]	; (800348c <D_LED_Get_Rainbow+0xcc>)
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	4403      	add	r3, r0
 800346c:	3302      	adds	r3, #2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	708b      	strb	r3, [r1, #2]
	for(int j=0; j<10; j++){
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b09      	cmp	r3, #9
 800347c:	dda9      	ble.n	80033d2 <D_LED_Get_Rainbow+0x12>
	}
}
 800347e:	bf00      	nop
 8003480:	bf00      	nop
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	51eb851f 	.word	0x51eb851f
 800348c:	2000158c 	.word	0x2000158c

08003490 <D_LED_Rainbow_ArraySwap>:

void D_LED_Rainbow_ArraySwap(int num){
 8003490:	b480      	push	{r7}
 8003492:	b0ad      	sub	sp, #180	; 0xb4
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	uint8_t arr_temp[LED_NUM][3];
	for(int i=0; i<LED_NUM; i++){
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800349e:	e05c      	b.n	800355a <D_LED_Rainbow_ArraySwap+0xca>
		LED_Temp_Rainbow[i][0] = Rainbow[i%7][0];
 80034a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034a4:	4b86      	ldr	r3, [pc, #536]	; (80036c0 <D_LED_Rainbow_ArraySwap+0x230>)
 80034a6:	fb83 1302 	smull	r1, r3, r3, r2
 80034aa:	4413      	add	r3, r2
 80034ac:	1099      	asrs	r1, r3, #2
 80034ae:	17d3      	asrs	r3, r2, #31
 80034b0:	1ac9      	subs	r1, r1, r3
 80034b2:	460b      	mov	r3, r1
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	1a5b      	subs	r3, r3, r1
 80034b8:	1ad1      	subs	r1, r2, r3
 80034ba:	4a82      	ldr	r2, [pc, #520]	; (80036c4 <D_LED_Rainbow_ArraySwap+0x234>)
 80034bc:	460b      	mov	r3, r1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	440b      	add	r3, r1
 80034c2:	4413      	add	r3, r2
 80034c4:	7818      	ldrb	r0, [r3, #0]
 80034c6:	4980      	ldr	r1, [pc, #512]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 80034c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	440b      	add	r3, r1
 80034d4:	4602      	mov	r2, r0
 80034d6:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = Rainbow[i%7][1];
 80034d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034dc:	4b78      	ldr	r3, [pc, #480]	; (80036c0 <D_LED_Rainbow_ArraySwap+0x230>)
 80034de:	fb83 1302 	smull	r1, r3, r3, r2
 80034e2:	4413      	add	r3, r2
 80034e4:	1099      	asrs	r1, r3, #2
 80034e6:	17d3      	asrs	r3, r2, #31
 80034e8:	1ac9      	subs	r1, r1, r3
 80034ea:	460b      	mov	r3, r1
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a5b      	subs	r3, r3, r1
 80034f0:	1ad1      	subs	r1, r2, r3
 80034f2:	4a74      	ldr	r2, [pc, #464]	; (80036c4 <D_LED_Rainbow_ArraySwap+0x234>)
 80034f4:	460b      	mov	r3, r1
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	440b      	add	r3, r1
 80034fa:	4413      	add	r3, r2
 80034fc:	3301      	adds	r3, #1
 80034fe:	7818      	ldrb	r0, [r3, #0]
 8003500:	4971      	ldr	r1, [pc, #452]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 8003502:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	440b      	add	r3, r1
 800350e:	3301      	adds	r3, #1
 8003510:	4602      	mov	r2, r0
 8003512:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = Rainbow[i%7][2];
 8003514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003518:	4b69      	ldr	r3, [pc, #420]	; (80036c0 <D_LED_Rainbow_ArraySwap+0x230>)
 800351a:	fb83 1302 	smull	r1, r3, r3, r2
 800351e:	4413      	add	r3, r2
 8003520:	1099      	asrs	r1, r3, #2
 8003522:	17d3      	asrs	r3, r2, #31
 8003524:	1ac9      	subs	r1, r1, r3
 8003526:	460b      	mov	r3, r1
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	1a5b      	subs	r3, r3, r1
 800352c:	1ad1      	subs	r1, r2, r3
 800352e:	4a65      	ldr	r2, [pc, #404]	; (80036c4 <D_LED_Rainbow_ArraySwap+0x234>)
 8003530:	460b      	mov	r3, r1
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	440b      	add	r3, r1
 8003536:	4413      	add	r3, r2
 8003538:	3302      	adds	r3, #2
 800353a:	7818      	ldrb	r0, [r3, #0]
 800353c:	4962      	ldr	r1, [pc, #392]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 800353e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	440b      	add	r3, r1
 800354a:	3302      	adds	r3, #2
 800354c:	4602      	mov	r2, r0
 800354e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<LED_NUM; i++){
 8003550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003554:	3301      	adds	r3, #1
 8003556:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800355a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800355e:	2b31      	cmp	r3, #49	; 0x31
 8003560:	dd9e      	ble.n	80034a0 <D_LED_Rainbow_ArraySwap+0x10>
	}
	int indx;
	for(int i=0;i<LED_NUM; i++){
 8003562:	2300      	movs	r3, #0
 8003564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003568:	e057      	b.n	800361a <D_LED_Rainbow_ArraySwap+0x18a>
		indx = i + num;
 800356a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		if(indx >= LED_NUM){
 8003576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800357a:	2b31      	cmp	r3, #49	; 0x31
 800357c:	dd04      	ble.n	8003588 <D_LED_Rainbow_ArraySwap+0xf8>
			indx -= LED_NUM;
 800357e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003582:	3b32      	subs	r3, #50	; 0x32
 8003584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		if(indx < 0){
 8003588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800358c:	2b00      	cmp	r3, #0
 800358e:	da04      	bge.n	800359a <D_LED_Rainbow_ArraySwap+0x10a>
			indx += LED_NUM;
 8003590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003594:	3332      	adds	r3, #50	; 0x32
 8003596:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		arr_temp[i][0] = LED_Temp_Rainbow[indx][0];
 800359a:	494b      	ldr	r1, [pc, #300]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 800359c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	7819      	ldrb	r1, [r3, #0]
 80035aa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80035b8:	4413      	add	r3, r2
 80035ba:	3ba8      	subs	r3, #168	; 0xa8
 80035bc:	460a      	mov	r2, r1
 80035be:	701a      	strb	r2, [r3, #0]
		arr_temp[i][1] = LED_Temp_Rainbow[indx][1];
 80035c0:	4941      	ldr	r1, [pc, #260]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 80035c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	3301      	adds	r3, #1
 80035d0:	7819      	ldrb	r1, [r3, #0]
 80035d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80035e0:	4413      	add	r3, r2
 80035e2:	3ba7      	subs	r3, #167	; 0xa7
 80035e4:	460a      	mov	r2, r1
 80035e6:	701a      	strb	r2, [r3, #0]
		arr_temp[i][2] = LED_Temp_Rainbow[indx][2];
 80035e8:	4937      	ldr	r1, [pc, #220]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 80035ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	440b      	add	r3, r1
 80035f6:	3302      	adds	r3, #2
 80035f8:	7819      	ldrb	r1, [r3, #0]
 80035fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003608:	4413      	add	r3, r2
 800360a:	3ba6      	subs	r3, #166	; 0xa6
 800360c:	460a      	mov	r2, r1
 800360e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 8003610:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003614:	3301      	adds	r3, #1
 8003616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800361a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800361e:	2b31      	cmp	r3, #49	; 0x31
 8003620:	dda3      	ble.n	800356a <D_LED_Rainbow_ArraySwap+0xda>
	}
	for(int i=0;i<LED_NUM; i++){
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003628:	e03f      	b.n	80036aa <D_LED_Rainbow_ArraySwap+0x21a>
		LED_Temp_Rainbow[i][0] = arr_temp[i][0];
 800362a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003638:	4413      	add	r3, r2
 800363a:	3ba8      	subs	r3, #168	; 0xa8
 800363c:	7818      	ldrb	r0, [r3, #0]
 800363e:	4922      	ldr	r1, [pc, #136]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 8003640:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	440b      	add	r3, r1
 800364c:	4602      	mov	r2, r0
 800364e:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = arr_temp[i][1];
 8003650:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003654:	4613      	mov	r3, r2
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800365e:	4413      	add	r3, r2
 8003660:	3ba7      	subs	r3, #167	; 0xa7
 8003662:	7818      	ldrb	r0, [r3, #0]
 8003664:	4918      	ldr	r1, [pc, #96]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 8003666:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800366a:	4613      	mov	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4413      	add	r3, r2
 8003670:	440b      	add	r3, r1
 8003672:	3301      	adds	r3, #1
 8003674:	4602      	mov	r2, r0
 8003676:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = arr_temp[i][2];
 8003678:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800367c:	4613      	mov	r3, r2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	4413      	add	r3, r2
 8003682:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003686:	4413      	add	r3, r2
 8003688:	3ba6      	subs	r3, #166	; 0xa6
 800368a:	7818      	ldrb	r0, [r3, #0]
 800368c:	490e      	ldr	r1, [pc, #56]	; (80036c8 <D_LED_Rainbow_ArraySwap+0x238>)
 800368e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	440b      	add	r3, r1
 800369a:	3302      	adds	r3, #2
 800369c:	4602      	mov	r2, r0
 800369e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 80036a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036a4:	3301      	adds	r3, #1
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ae:	2b31      	cmp	r3, #49	; 0x31
 80036b0:	ddbb      	ble.n	800362a <D_LED_Rainbow_ArraySwap+0x19a>
	}
}
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
 80036b6:	37b4      	adds	r7, #180	; 0xb4
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	92492493 	.word	0x92492493
 80036c4:	2000002c 	.word	0x2000002c
 80036c8:	2000158c 	.word	0x2000158c

080036cc <D_LED_Init_YellowRandom>:

void D_LED_Init_YellowRandom(void){
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_NUM; i++){
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
 80036d6:	e015      	b.n	8003704 <D_LED_Init_YellowRandom+0x38>
		Yellow_Random[i] = rand()%50;
 80036d8:	f006 fa4a 	bl	8009b70 <rand>
 80036dc:	4603      	mov	r3, r0
 80036de:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <D_LED_Init_YellowRandom+0x48>)
 80036e0:	fb82 1203 	smull	r1, r2, r2, r3
 80036e4:	1111      	asrs	r1, r2, #4
 80036e6:	17da      	asrs	r2, r3, #31
 80036e8:	1a8a      	subs	r2, r1, r2
 80036ea:	2132      	movs	r1, #50	; 0x32
 80036ec:	fb01 f202 	mul.w	r2, r1, r2
 80036f0:	1a9a      	subs	r2, r3, r2
 80036f2:	b2d1      	uxtb	r1, r2
 80036f4:	4a08      	ldr	r2, [pc, #32]	; (8003718 <D_LED_Init_YellowRandom+0x4c>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	460a      	mov	r2, r1
 80036fc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<LED_NUM; i++){
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3301      	adds	r3, #1
 8003702:	607b      	str	r3, [r7, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b31      	cmp	r3, #49	; 0x31
 8003708:	dde6      	ble.n	80036d8 <D_LED_Init_YellowRandom+0xc>
	}
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	51eb851f 	.word	0x51eb851f
 8003718:	20001554 	.word	0x20001554

0800371c <D_LED_Set_YellowRandomFlow>:

void D_LED_Set_YellowRandomFlow(int deltatime){
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	static uint32_t YellowRandomTime = 0;
	YellowRandomTime+=deltatime;
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <D_LED_Set_YellowRandomFlow+0x54>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	4a10      	ldr	r2, [pc, #64]	; (8003770 <D_LED_Set_YellowRandomFlow+0x54>)
 800372e:	6013      	str	r3, [r2, #0]
	if(YellowRandomTime >= YELLOWRANDOM_FLOWTIME){
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <D_LED_Set_YellowRandomFlow+0x54>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b31      	cmp	r3, #49	; 0x31
 8003736:	d915      	bls.n	8003764 <D_LED_Set_YellowRandomFlow+0x48>
		YellowRandomTime = 0;
 8003738:	4b0d      	ldr	r3, [pc, #52]	; (8003770 <D_LED_Set_YellowRandomFlow+0x54>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
		YellowRandom_num += 1;
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <D_LED_Set_YellowRandomFlow+0x58>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3301      	adds	r3, #1
 8003744:	4a0b      	ldr	r2, [pc, #44]	; (8003774 <D_LED_Set_YellowRandomFlow+0x58>)
 8003746:	6013      	str	r3, [r2, #0]
		YellowRandom_num %= 50;
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <D_LED_Set_YellowRandomFlow+0x58>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <D_LED_Set_YellowRandomFlow+0x5c>)
 800374e:	fb83 1302 	smull	r1, r3, r3, r2
 8003752:	1119      	asrs	r1, r3, #4
 8003754:	17d3      	asrs	r3, r2, #31
 8003756:	1acb      	subs	r3, r1, r3
 8003758:	2132      	movs	r1, #50	; 0x32
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <D_LED_Set_YellowRandomFlow+0x58>)
 8003762:	6013      	str	r3, [r2, #0]
	}
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	20001630 	.word	0x20001630
 8003774:	20001588 	.word	0x20001588
 8003778:	51eb851f 	.word	0x51eb851f

0800377c <D_LED_Get_YellowRandomFlow>:

void D_LED_Get_YellowRandomFlow(uint8_t LED[][3]){
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	for(int i=0; i<LED_NUM; i++){
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e039      	b.n	80037fe <D_LED_Get_YellowRandomFlow+0x82>
		LED[i][0] = 180;
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	22b4      	movs	r2, #180	; 0xb4
 8003798:	701a      	strb	r2, [r3, #0]
		int index = i+YellowRandom_num;
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <D_LED_Get_YellowRandomFlow+0x98>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
		if(index >= LED_NUM) index -= LED_NUM;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b31      	cmp	r3, #49	; 0x31
 80037a8:	dd02      	ble.n	80037b0 <D_LED_Get_YellowRandomFlow+0x34>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	3b32      	subs	r3, #50	; 0x32
 80037ae:	60bb      	str	r3, [r7, #8]
		if(index < 0) index += LED_NUM;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	da02      	bge.n	80037bc <D_LED_Get_YellowRandomFlow+0x40>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3332      	adds	r3, #50	; 0x32
 80037ba:	60bb      	str	r3, [r7, #8]
		LED[i][1] = 150-Yellow_Random[index];
 80037bc:	4a16      	ldr	r2, [pc, #88]	; (8003818 <D_LED_Get_YellowRandomFlow+0x9c>)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4413      	add	r3, r2
 80037c2:	7819      	ldrb	r1, [r3, #0]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	441a      	add	r2, r3
 80037d0:	f06f 0369 	mvn.w	r3, #105	; 0x69
 80037d4:	1a5b      	subs	r3, r3, r1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	7053      	strb	r3, [r2, #1]
		LED[i][2] = 50-Yellow_Random[LED_NUM-index-1];
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f1c3 0331 	rsb	r3, r3, #49	; 0x31
 80037e0:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <D_LED_Get_YellowRandomFlow+0x9c>)
 80037e2:	5cd1      	ldrb	r1, [r2, r3]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	f1c1 0232 	rsb	r2, r1, #50	; 0x32
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	709a      	strb	r2, [r3, #2]
	for(int i=0; i<LED_NUM; i++){
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3301      	adds	r3, #1
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b31      	cmp	r3, #49	; 0x31
 8003802:	ddc2      	ble.n	800378a <D_LED_Get_YellowRandomFlow+0xe>
	}
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20001588 	.word	0x20001588
 8003818:	20001554 	.word	0x20001554

0800381c <D_LED_Off>:

void D_LED_Off(void){
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
	for(int i=0; i<LED_NUM; i++){
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	e01a      	b.n	800385e <D_LED_Off+0x42>
		LED_Data[i][0] = i;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	b2d9      	uxtb	r1, r3
 800382c:	4a11      	ldr	r2, [pc, #68]	; (8003874 <D_LED_Off+0x58>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 8003834:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <D_LED_Off+0x58>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	2200      	movs	r2, #0
 800383e:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 8003840:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <D_LED_Off+0x58>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	2200      	movs	r2, #0
 800384a:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <D_LED_Off+0x58>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	2200      	movs	r2, #0
 8003856:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<LED_NUM; i++){
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3301      	adds	r3, #1
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b31      	cmp	r3, #49	; 0x31
 8003862:	dde1      	ble.n	8003828 <D_LED_Off+0xc>
	}
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20001e90 	.word	0x20001e90

08003878 <D_LED_Set_All>:
	LED_Data[LEDnum][2] = Red;
	LED_Data[LEDnum][3] = Blue;
}

void D_LED_Set_All(uint8_t LED[][3])
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	for(int i=0; i<LED_NUM; i++){
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e02f      	b.n	80038e6 <D_LED_Set_All+0x6e>
		LED_Data[i][0] = i;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	b2d9      	uxtb	r1, r3
 800388a:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <D_LED_Set_All+0x84>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = LED[i][1];
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4613      	mov	r3, r2
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	4413      	add	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	4413      	add	r3, r2
 800389e:	7859      	ldrb	r1, [r3, #1]
 80038a0:	4a16      	ldr	r2, [pc, #88]	; (80038fc <D_LED_Set_All+0x84>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	460a      	mov	r2, r1
 80038aa:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = LED[i][0];
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	7819      	ldrb	r1, [r3, #0]
 80038ba:	4a10      	ldr	r2, [pc, #64]	; (80038fc <D_LED_Set_All+0x84>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	460a      	mov	r2, r1
 80038c4:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = LED[i][2];
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	7899      	ldrb	r1, [r3, #2]
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <D_LED_Set_All+0x84>)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	460a      	mov	r2, r1
 80038de:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<LED_NUM; i++){
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3301      	adds	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b31      	cmp	r3, #49	; 0x31
 80038ea:	ddcc      	ble.n	8003886 <D_LED_Set_All+0xe>
	}
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20001e90 	.word	0x20001e90

08003900 <D_LED_Set_Circle>:

void D_LED_Set_Circle(uint8_t LED[][3], int num){
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
	for(int i=0; i<10; i++){
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e059      	b.n	80039c4 <D_LED_Set_Circle+0xc4>
		LED_Data[(num-1)*10 + i][0] = (num-1)*10 + i;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	3b01      	subs	r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	0092      	lsls	r2, r2, #2
 800391a:	4413      	add	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	b2d8      	uxtb	r0, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	b2d9      	uxtb	r1, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1e5a      	subs	r2, r3, #1
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	461a      	mov	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	1842      	adds	r2, r0, r1
 8003938:	b2d1      	uxtb	r1, r2
 800393a:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <D_LED_Set_Circle+0xd8>)
 800393c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[(num-1)*10 + i][1] = LED[i][1];
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4613      	mov	r3, r2
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4413      	add	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	18d1      	adds	r1, r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	1e5a      	subs	r2, r3, #1
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	461a      	mov	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	7849      	ldrb	r1, [r1, #1]
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <D_LED_Set_Circle+0xd8>)
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	460a      	mov	r2, r1
 8003968:	705a      	strb	r2, [r3, #1]
		LED_Data[(num-1)*10 + i][2] = LED[i][0];
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	4413      	add	r3, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	18d1      	adds	r1, r2, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	1e5a      	subs	r2, r3, #1
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4413      	add	r3, r2
 8003988:	7809      	ldrb	r1, [r1, #0]
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <D_LED_Set_Circle+0xd8>)
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	460a      	mov	r2, r1
 8003992:	709a      	strb	r2, [r3, #2]
		LED_Data[(num-1)*10 + i][3] = LED[i][2];
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	18d1      	adds	r1, r2, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	1e5a      	subs	r2, r3, #1
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	461a      	mov	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	7889      	ldrb	r1, [r1, #2]
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <D_LED_Set_Circle+0xd8>)
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	460a      	mov	r2, r1
 80039bc:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<10; i++){
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3301      	adds	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b09      	cmp	r3, #9
 80039c8:	dda2      	ble.n	8003910 <D_LED_Set_Circle+0x10>
	}
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	20001e90 	.word	0x20001e90

080039dc <D_LED_Send>:

void D_LED_Send(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int j= 0; j<LED_NUM; j++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	e036      	b.n	8003a5a <D_LED_Send+0x7e>
	{
		color = ((LED_Data[j][1]<<16) | (LED_Data[j][2]<<8) | (LED_Data[j][3]));
 80039ec:	4a31      	ldr	r2, [pc, #196]	; (8003ab4 <D_LED_Send+0xd8>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	041a      	lsls	r2, r3, #16
 80039f8:	492e      	ldr	r1, [pc, #184]	; (8003ab4 <D_LED_Send+0xd8>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	789b      	ldrb	r3, [r3, #2]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	431a      	orrs	r2, r3
 8003a06:	492b      	ldr	r1, [pc, #172]	; (8003ab4 <D_LED_Send+0xd8>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	78db      	ldrb	r3, [r3, #3]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	607b      	str	r3, [r7, #4]
		for (int i=23; i>=0; i--)
 8003a14:	2317      	movs	r3, #23
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e019      	b.n	8003a4e <D_LED_Send+0x72>
		{
			if (color&(1<<i))
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <D_LED_Send+0x5c>
			{
				pwmData[indx] = 15;  // 2/3 of 25
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <D_LED_Send+0xdc>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	210f      	movs	r1, #15
 8003a32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003a36:	e004      	b.n	8003a42 <D_LED_Send+0x66>
			}
			else pwmData[indx] = 7;  // 1/3 of 25
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <D_LED_Send+0xdc>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2107      	movs	r1, #7
 8003a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			indx++;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	3301      	adds	r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	dae2      	bge.n	8003a1a <D_LED_Send+0x3e>
	for (int j= 0; j<LED_NUM; j++)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3301      	adds	r3, #1
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b31      	cmp	r3, #49	; 0x31
 8003a5e:	ddc5      	ble.n	80039ec <D_LED_Send+0x10>
		}
	}

	for (int i=0; i<50; i++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	e00a      	b.n	8003a7c <D_LED_Send+0xa0>
	{
		pwmData[indx] = 0;
 8003a66:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <D_LED_Send+0xdc>)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3301      	adds	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b31      	cmp	r3, #49	; 0x31
 8003a80:	ddf1      	ble.n	8003a66 <D_LED_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx*2);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4a0b      	ldr	r2, [pc, #44]	; (8003ab8 <D_LED_Send+0xdc>)
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	480b      	ldr	r0, [pc, #44]	; (8003abc <D_LED_Send+0xe0>)
 8003a90:	f003 ffa2 	bl	80079d8 <HAL_TIM_PWM_Start_DMA>
	while (!_dataSent){};
 8003a94:	bf00      	nop
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <D_LED_Send+0xe4>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f7      	bne.n	8003a96 <D_LED_Send+0xba>
	_dataSent = false;
 8003aa6:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <D_LED_Send+0xe4>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	20001e90 	.word	0x20001e90
 8003ab8:	200001cc 	.word	0x200001cc
 8003abc:	20001d5c 	.word	0x20001d5c
 8003ac0:	200001c8 	.word	0x200001c8

08003ac4 <D_LED_Rotate>:

void D_LED_Rotate(int num){
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	int indx = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
	for(int i=0;i<LED_NUM; i++){
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	e03b      	b.n	8003b4e <D_LED_Rotate+0x8a>
		indx = i + num;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
		if(indx >= LED_NUM){
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b31      	cmp	r3, #49	; 0x31
 8003ae2:	dd02      	ble.n	8003aea <D_LED_Rotate+0x26>
			indx -= 50;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3b32      	subs	r3, #50	; 0x32
 8003ae8:	617b      	str	r3, [r7, #20]
		}
		if(indx < 0){
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	da02      	bge.n	8003af6 <D_LED_Rotate+0x32>
			indx += 50;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	3332      	adds	r3, #50	; 0x32
 8003af4:	617b      	str	r3, [r7, #20]
		}
		D_LED_Temp[i][0] = LED_Data[indx][0];
 8003af6:	4a33      	ldr	r2, [pc, #204]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8003afe:	4a32      	ldr	r2, [pc, #200]	; (8003bc8 <D_LED_Rotate+0x104>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		D_LED_Temp[i][1] = LED_Data[indx][1];
 8003b06:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	7859      	ldrb	r1, [r3, #1]
 8003b10:	4a2d      	ldr	r2, [pc, #180]	; (8003bc8 <D_LED_Rotate+0x104>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	460a      	mov	r2, r1
 8003b1a:	705a      	strb	r2, [r3, #1]
		D_LED_Temp[i][2] = LED_Data[indx][2];
 8003b1c:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	7899      	ldrb	r1, [r3, #2]
 8003b26:	4a28      	ldr	r2, [pc, #160]	; (8003bc8 <D_LED_Rotate+0x104>)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	460a      	mov	r2, r1
 8003b30:	709a      	strb	r2, [r3, #2]
		D_LED_Temp[i][3] = LED_Data[indx][3];
 8003b32:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	78d9      	ldrb	r1, [r3, #3]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <D_LED_Rotate+0x104>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	460a      	mov	r2, r1
 8003b46:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b31      	cmp	r3, #49	; 0x31
 8003b52:	ddc0      	ble.n	8003ad6 <D_LED_Rotate+0x12>
	}
	for(int i=0;i<LED_NUM; i++){
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e029      	b.n	8003bae <D_LED_Rotate+0xea>
		LED_Data[i][0] = i;//D_LED_Temp[i][0];
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	b2d9      	uxtb	r1, r3
 8003b5e:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = D_LED_Temp[i][1];
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <D_LED_Rotate+0x104>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	7859      	ldrb	r1, [r3, #1]
 8003b70:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	460a      	mov	r2, r1
 8003b7a:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = D_LED_Temp[i][2];
 8003b7c:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <D_LED_Rotate+0x104>)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	7899      	ldrb	r1, [r3, #2]
 8003b86:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	460a      	mov	r2, r1
 8003b90:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = D_LED_Temp[i][3];
 8003b92:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <D_LED_Rotate+0x104>)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	78d9      	ldrb	r1, [r3, #3]
 8003b9c:	4a09      	ldr	r2, [pc, #36]	; (8003bc4 <D_LED_Rotate+0x100>)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	460a      	mov	r2, r1
 8003ba6:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b31      	cmp	r3, #49	; 0x31
 8003bb2:	ddd2      	ble.n	8003b5a <D_LED_Rotate+0x96>
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20001e90 	.word	0x20001e90
 8003bc8:	20001f58 	.word	0x20001f58

08003bcc <D_LED_Callback>:

void D_LED_Callback(void){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4804      	ldr	r0, [pc, #16]	; (8003be4 <D_LED_Callback+0x18>)
 8003bd4:	f004 f8c8 	bl	8007d68 <HAL_TIM_PWM_Stop_DMA>
    _dataSent = true;
 8003bd8:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <D_LED_Callback+0x1c>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20001d5c 	.word	0x20001d5c
 8003be8:	200001c8 	.word	0x200001c8

08003bec <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 8003bec:	b40f      	push	{r0, r1, r2, r3}
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	6938      	ldr	r0, [r7, #16]
 8003bfe:	f000 f891 	bl	8003d24 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <D_Mess_printf+0x38>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <D_Mess_printf+0x3c>)
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8003c0e:	dd01      	ble.n	8003c14 <D_Mess_printf+0x28>
	  D_Mess_flush();
 8003c10:	f000 f80c 	bl	8003c2c <D_Mess_flush>
  }
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1e:	b004      	add	sp, #16
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20002028 	.word	0x20002028
 8003c28:	20001634 	.word	0x20001634

08003c2c <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 8003c30:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <D_Mess_flush+0x54>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f083 0301 	eor.w	r3, r3, #1
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <D_Mess_flush+0x1c>
		outptr = buff;
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <D_Mess_flush+0x58>)
 8003c42:	4a11      	ldr	r2, [pc, #68]	; (8003c88 <D_Mess_flush+0x5c>)
 8003c44:	601a      	str	r2, [r3, #0]
		return;
 8003c46:	e01a      	b.n	8003c7e <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <D_Mess_flush+0x58>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <D_Mess_flush+0x58>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	490b      	ldr	r1, [pc, #44]	; (8003c84 <D_Mess_flush+0x58>)
 8003c58:	600a      	str	r2, [r1, #0]
 8003c5a:	220a      	movs	r2, #10
 8003c5c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <D_Mess_flush+0x58>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <D_Mess_flush+0x5c>)
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4907      	ldr	r1, [pc, #28]	; (8003c88 <D_Mess_flush+0x5c>)
 8003c6c:	4807      	ldr	r0, [pc, #28]	; (8003c8c <D_Mess_flush+0x60>)
 8003c6e:	f004 ffe7 	bl	8008c40 <HAL_UART_Transmit_DMA>
		had_completed = false;
 8003c72:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <D_Mess_flush+0x54>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8003c78:	4b02      	ldr	r3, [pc, #8]	; (8003c84 <D_Mess_flush+0x58>)
 8003c7a:	4a03      	ldr	r2, [pc, #12]	; (8003c88 <D_Mess_flush+0x5c>)
 8003c7c:	601a      	str	r2, [r3, #0]
}
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000050 	.word	0x20000050
 8003c84:	20002028 	.word	0x20002028
 8003c88:	20001634 	.word	0x20001634
 8003c8c:	20001e4c 	.word	0x20001e4c

08003c90 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  had_completed = true;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <D_Mess_TransitionCompletedCallBack+0x14>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000050 	.word	0x20000050

08003ca8 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	2b0a      	cmp	r3, #10
 8003cb6:	d102      	bne.n	8003cbe <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8003cb8:	200d      	movs	r0, #13
 8003cba:	f7ff fff5 	bl	8003ca8 <xputc>
  }
  if( outptr ){
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <xputc+0x48>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <xputc+0x48>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <xputc+0x48>)
 8003cce:	600a      	str	r2, [r1, #0]
 8003cd0:	79fa      	ldrb	r2, [r7, #7]
 8003cd2:	701a      	strb	r2, [r3, #0]
    return;
 8003cd4:	e008      	b.n	8003ce8 <xputc+0x40>
  }

  if( xfunc_out ){
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <xputc+0x4c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <xputc+0x40>
    xfunc_out((unsigned char)c);
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <xputc+0x4c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	79fa      	ldrb	r2, [r7, #7]
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4798      	blx	r3
  }
}
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20002028 	.word	0x20002028
 8003cf4:	20002024 	.word	0x20002024

08003cf8 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  while( *str ){
 8003d00:	e006      	b.n	8003d10 <xputs+0x18>
    xputc(*str++);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ffcc 	bl	8003ca8 <xputc>
  while( *str ){
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1f4      	bne.n	8003d02 <xputs+0xa>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	; 0x38
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 8003d38:	7ffb      	ldrb	r3, [r7, #31]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8167 	beq.w	800400e <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 8003d40:	7ffb      	ldrb	r3, [r7, #31]
 8003d42:	2b25      	cmp	r3, #37	; 0x25
 8003d44:	d004      	beq.n	8003d50 <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 8003d46:	7ffb      	ldrb	r3, [r7, #31]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ffad 	bl	8003ca8 <xputc>
 8003d4e:	e15d      	b.n	800400c <xvprintf+0x2e8>
    }
    f = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
 8003d60:	2b30      	cmp	r3, #48	; 0x30
 8003d62:	d107      	bne.n	8003d74 <xvprintf+0x50>
      f = 1; c = *fmt++;
 8003d64:	2301      	movs	r3, #1
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	607a      	str	r2, [r7, #4]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	77fb      	strb	r3, [r7, #31]
 8003d72:	e009      	b.n	8003d88 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 8003d74:	7ffb      	ldrb	r3, [r7, #31]
 8003d76:	2b2d      	cmp	r3, #45	; 0x2d
 8003d78:	d106      	bne.n	8003d88 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8c:	e00e      	b.n	8003dac <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 8003d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	461a      	mov	r2, r3
 8003d9a:	7ffb      	ldrb	r3, [r7, #31]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3b30      	subs	r3, #48	; 0x30
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	7ffb      	ldrb	r3, [r7, #31]
 8003dae:	2b2f      	cmp	r3, #47	; 0x2f
 8003db0:	d902      	bls.n	8003db8 <xvprintf+0x94>
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
 8003db4:	2b39      	cmp	r3, #57	; 0x39
 8003db6:	d9ea      	bls.n	8003d8e <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8003db8:	7ffb      	ldrb	r3, [r7, #31]
 8003dba:	2b6c      	cmp	r3, #108	; 0x6c
 8003dbc:	d002      	beq.n	8003dc4 <xvprintf+0xa0>
 8003dbe:	7ffb      	ldrb	r3, [r7, #31]
 8003dc0:	2b4c      	cmp	r3, #76	; 0x4c
 8003dc2:	d108      	bne.n	8003dd6 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f043 0304 	orr.w	r3, r3, #4
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 811a 	beq.w	8004012 <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 8003dde:	7ffb      	ldrb	r3, [r7, #31]
 8003de0:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 8003de2:	7fbb      	ldrb	r3, [r7, #30]
 8003de4:	2b60      	cmp	r3, #96	; 0x60
 8003de6:	d902      	bls.n	8003dee <xvprintf+0xca>
      d -= 0x20;
 8003de8:	7fbb      	ldrb	r3, [r7, #30]
 8003dea:	3b20      	subs	r3, #32
 8003dec:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 8003dee:	7fbb      	ldrb	r3, [r7, #30]
 8003df0:	3b42      	subs	r3, #66	; 0x42
 8003df2:	2b16      	cmp	r3, #22
 8003df4:	d873      	bhi.n	8003ede <xvprintf+0x1ba>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <xvprintf+0xd8>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003ec7 	.word	0x08003ec7
 8003e00:	08003eb5 	.word	0x08003eb5
 8003e04:	08003ed3 	.word	0x08003ed3
 8003e08:	08003edf 	.word	0x08003edf
 8003e0c:	08003edf 	.word	0x08003edf
 8003e10:	08003edf 	.word	0x08003edf
 8003e14:	08003edf 	.word	0x08003edf
 8003e18:	08003edf 	.word	0x08003edf
 8003e1c:	08003edf 	.word	0x08003edf
 8003e20:	08003edf 	.word	0x08003edf
 8003e24:	08003edf 	.word	0x08003edf
 8003e28:	08003edf 	.word	0x08003edf
 8003e2c:	08003edf 	.word	0x08003edf
 8003e30:	08003ecd 	.word	0x08003ecd
 8003e34:	08003edf 	.word	0x08003edf
 8003e38:	08003edf 	.word	0x08003edf
 8003e3c:	08003edf 	.word	0x08003edf
 8003e40:	08003e59 	.word	0x08003e59
 8003e44:	08003edf 	.word	0x08003edf
 8003e48:	08003ed3 	.word	0x08003ed3
 8003e4c:	08003edf 	.word	0x08003edf
 8003e50:	08003edf 	.word	0x08003edf
 8003e54:	08003ed9 	.word	0x08003ed9
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	603a      	str	r2, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 8003e62:	2300      	movs	r3, #0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	e002      	b.n	8003e6e <xvprintf+0x14a>
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f6      	bne.n	8003e68 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 8003e7a:	e002      	b.n	8003e82 <xvprintf+0x15e>
        xputc(' ');
 8003e7c:	2020      	movs	r0, #32
 8003e7e:	f7ff ff13 	bl	8003ca8 <xputc>
      while( !( f & 2 ) && j++ < w ){
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <xvprintf+0x174>
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d8f1      	bhi.n	8003e7c <xvprintf+0x158>
      }
      xputs(p);
 8003e98:	69b8      	ldr	r0, [r7, #24]
 8003e9a:	f7ff ff2d 	bl	8003cf8 <xputs>
      while( j++ < w ){
 8003e9e:	e002      	b.n	8003ea6 <xvprintf+0x182>
        xputc(' ');
 8003ea0:	2020      	movs	r0, #32
 8003ea2:	f7ff ff01 	bl	8003ca8 <xputc>
      while( j++ < w ){
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d8f6      	bhi.n	8003ea0 <xvprintf+0x17c>
      }
      continue;
 8003eb2:	e0ab      	b.n	800400c <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	603a      	str	r2, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fef2 	bl	8003ca8 <xputc>
 8003ec4:	e0a2      	b.n	800400c <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eca:	e00d      	b.n	8003ee8 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 8003ecc:	2308      	movs	r3, #8
 8003ece:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed0:	e00a      	b.n	8003ee8 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 8003ed2:	230a      	movs	r3, #10
 8003ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed6:	e007      	b.n	8003ee8 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 8003ed8:	2310      	movs	r3, #16
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
 8003edc:	e004      	b.n	8003ee8 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fee1 	bl	8003ca8 <xputc>
 8003ee6:	e091      	b.n	800400c <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <xvprintf+0x1d8>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	1d1a      	adds	r2, r3, #4
 8003ef6:	603a      	str	r2, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	e00b      	b.n	8003f14 <xvprintf+0x1f0>
 8003efc:	7fbb      	ldrb	r3, [r7, #30]
 8003efe:	2b44      	cmp	r3, #68	; 0x44
 8003f00:	d104      	bne.n	8003f0c <xvprintf+0x1e8>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	1d1a      	adds	r2, r3, #4
 8003f06:	603a      	str	r2, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e003      	b.n	8003f14 <xvprintf+0x1f0>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1d1a      	adds	r2, r3, #4
 8003f10:	603a      	str	r2, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8003f16:	7fbb      	ldrb	r3, [r7, #30]
 8003f18:	2b44      	cmp	r3, #68	; 0x44
 8003f1a:	d109      	bne.n	8003f30 <xvprintf+0x20c>
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	da06      	bge.n	8003f30 <xvprintf+0x20c>
      v = 0 - v;
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	425b      	negs	r3, r3
 8003f26:	623b      	str	r3, [r7, #32]
      f |= 8;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	f043 0308 	orr.w	r3, r3, #8
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f38:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f3e:	fb01 f202 	mul.w	r2, r1, r2
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	77bb      	strb	r3, [r7, #30]
 8003f46:	6a3a      	ldr	r2, [r7, #32]
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 8003f50:	7fbb      	ldrb	r3, [r7, #30]
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	d908      	bls.n	8003f68 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b78      	cmp	r3, #120	; 0x78
 8003f5a:	d101      	bne.n	8003f60 <xvprintf+0x23c>
 8003f5c:	2227      	movs	r2, #39	; 0x27
 8003f5e:	e000      	b.n	8003f62 <xvprintf+0x23e>
 8003f60:	2207      	movs	r2, #7
 8003f62:	7fbb      	ldrb	r3, [r7, #30]
 8003f64:	4413      	add	r3, r2
 8003f66:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	633a      	str	r2, [r7, #48]	; 0x30
 8003f6e:	7fba      	ldrb	r2, [r7, #30]
 8003f70:	3230      	adds	r2, #48	; 0x30
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003f78:	440b      	add	r3, r1
 8003f7a:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <xvprintf+0x266>
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	2b0f      	cmp	r3, #15
 8003f88:	d9d4      	bls.n	8003f34 <xvprintf+0x210>
    if( f & 8 ){
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <xvprintf+0x282>
      s[i++] = '-';
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	633a      	str	r2, [r7, #48]	; 0x30
 8003f9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f9e:	4413      	add	r3, r2
 8003fa0:	222d      	movs	r2, #45	; 0x2d
 8003fa2:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <xvprintf+0x294>
 8003fb4:	2330      	movs	r3, #48	; 0x30
 8003fb6:	e000      	b.n	8003fba <xvprintf+0x296>
 8003fb8:	2320      	movs	r3, #32
 8003fba:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8003fbc:	e003      	b.n	8003fc6 <xvprintf+0x2a2>
      xputc(d);
 8003fbe:	7fbb      	ldrb	r3, [r7, #30]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fe71 	bl	8003ca8 <xputc>
    while( !( f & 2 ) && j++ < w ){
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <xvprintf+0x2b8>
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d8f0      	bhi.n	8003fbe <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe2:	f107 0208 	add.w	r2, r7, #8
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fe5b 	bl	8003ca8 <xputc>
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f1      	bne.n	8003fdc <xvprintf+0x2b8>
    while( j++ < w ){
 8003ff8:	e002      	b.n	8004000 <xvprintf+0x2dc>
      xputc(' ');
 8003ffa:	2020      	movs	r0, #32
 8003ffc:	f7ff fe54 	bl	8003ca8 <xputc>
    while( j++ < w ){
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004008:	429a      	cmp	r2, r3
 800400a:	d8f6      	bhi.n	8003ffa <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 800400c:	e68f      	b.n	8003d2e <xvprintf+0xa>
      break;                                            /* End of format? */
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8004012:	bf00      	nop
    }
  }
} /* xvprintf */
 8004014:	bf00      	nop
 8004016:	3738      	adds	r7, #56	; 0x38
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004020:	2100      	movs	r1, #0
 8004022:	4810      	ldr	r0, [pc, #64]	; (8004064 <D_PWM_Init+0x48>)
 8004024:	f003 fc10 	bl	8007848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004028:	2104      	movs	r1, #4
 800402a:	480e      	ldr	r0, [pc, #56]	; (8004064 <D_PWM_Init+0x48>)
 800402c:	f003 fc0c 	bl	8007848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004030:	2108      	movs	r1, #8
 8004032:	480c      	ldr	r0, [pc, #48]	; (8004064 <D_PWM_Init+0x48>)
 8004034:	f003 fc08 	bl	8007848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004038:	210c      	movs	r1, #12
 800403a:	480a      	ldr	r0, [pc, #40]	; (8004064 <D_PWM_Init+0x48>)
 800403c:	f003 fc04 	bl	8007848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004040:	2100      	movs	r1, #0
 8004042:	4809      	ldr	r0, [pc, #36]	; (8004068 <D_PWM_Init+0x4c>)
 8004044:	f003 fc00 	bl	8007848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004048:	2104      	movs	r1, #4
 800404a:	4807      	ldr	r0, [pc, #28]	; (8004068 <D_PWM_Init+0x4c>)
 800404c:	f003 fbfc 	bl	8007848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8004050:	2108      	movs	r1, #8
 8004052:	4805      	ldr	r0, [pc, #20]	; (8004068 <D_PWM_Init+0x4c>)
 8004054:	f003 fbf8 	bl	8007848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8004058:	210c      	movs	r1, #12
 800405a:	4803      	ldr	r0, [pc, #12]	; (8004068 <D_PWM_Init+0x4c>)
 800405c:	f003 fbf4 	bl	8007848 <HAL_TIM_PWM_Start>
}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20001e04 	.word	0x20001e04
 8004068:	20001bb0 	.word	0x20001bb0

0800406c <D_PWM_Set>:

void D_PWM_Set(int timer, int channel, int value){
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
	if(value > 5000) value = 5000;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f241 3288 	movw	r2, #5000	; 0x1388
 800407e:	4293      	cmp	r3, r2
 8004080:	dd02      	ble.n	8004088 <D_PWM_Set+0x1c>
 8004082:	f241 3388 	movw	r3, #5000	; 0x1388
 8004086:	607b      	str	r3, [r7, #4]
	if(value < 0)	value = 0;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	da01      	bge.n	8004092 <D_PWM_Set+0x26>
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
	if(timer == 2){
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d123      	bne.n	80040e0 <D_PWM_Set+0x74>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	3b01      	subs	r3, #1
 800409c:	2b03      	cmp	r3, #3
 800409e:	d846      	bhi.n	800412e <D_PWM_Set+0xc2>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <D_PWM_Set+0x3c>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040c3 	.word	0x080040c3
 80040b0:	080040cd 	.word	0x080040cd
 80040b4:	080040d7 	.word	0x080040d7
		switch(channel){
		case 1:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80040b8:	4b20      	ldr	r3, [pc, #128]	; (800413c <D_PWM_Set+0xd0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80040c0:	e035      	b.n	800412e <D_PWM_Set+0xc2>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, value);
 80040c2:	4b1e      	ldr	r3, [pc, #120]	; (800413c <D_PWM_Set+0xd0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80040ca:	e030      	b.n	800412e <D_PWM_Set+0xc2>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, value);
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <D_PWM_Set+0xd0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80040d4:	e02b      	b.n	800412e <D_PWM_Set+0xc2>
		case 4:
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, value);
 80040d6:	4b19      	ldr	r3, [pc, #100]	; (800413c <D_PWM_Set+0xd0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80040de:	e026      	b.n	800412e <D_PWM_Set+0xc2>
		}
	}else if(timer == 3){
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d122      	bne.n	800412c <D_PWM_Set+0xc0>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d81f      	bhi.n	800412e <D_PWM_Set+0xc2>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <D_PWM_Set+0x88>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004105 	.word	0x08004105
 80040f8:	0800410f 	.word	0x0800410f
 80040fc:	08004119 	.word	0x08004119
 8004100:	08004123 	.word	0x08004123
		switch(channel){
		case 1:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <D_PWM_Set+0xd4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800410c:	e00f      	b.n	800412e <D_PWM_Set+0xc2>
		case 2:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <D_PWM_Set+0xd4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8004116:	e00a      	b.n	800412e <D_PWM_Set+0xc2>
		case 3:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <D_PWM_Set+0xd4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004120:	e005      	b.n	800412e <D_PWM_Set+0xc2>
		case 4:
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, value);
 8004122:	4b07      	ldr	r3, [pc, #28]	; (8004140 <D_PWM_Set+0xd4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800412a:	e000      	b.n	800412e <D_PWM_Set+0xc2>
		}
	}
 800412c:	bf00      	nop
}
 800412e:	bf00      	nop
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20001e04 	.word	0x20001e04
 8004140:	20001bb0 	.word	0x20001bb0

08004144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <HAL_Init+0x40>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <HAL_Init+0x40>)
 800414e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_Init+0x40>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <HAL_Init+0x40>)
 800415a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_Init+0x40>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a07      	ldr	r2, [pc, #28]	; (8004184 <HAL_Init+0x40>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800416c:	2003      	movs	r0, #3
 800416e:	f000 f92b 	bl	80043c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004172:	2000      	movs	r0, #0
 8004174:	f000 f808 	bl	8004188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004178:	f7fe fac8 	bl	800270c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023c00 	.word	0x40023c00

08004188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_InitTick+0x54>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <HAL_InitTick+0x58>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800419e:	fbb3 f3f1 	udiv	r3, r3, r1
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f943 	bl	8004432 <HAL_SYSTICK_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00e      	b.n	80041d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b0f      	cmp	r3, #15
 80041ba:	d80a      	bhi.n	80041d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041bc:	2200      	movs	r2, #0
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c4:	f000 f90b 	bl	80043de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041c8:	4a06      	ldr	r2, [pc, #24]	; (80041e4 <HAL_InitTick+0x5c>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000028 	.word	0x20000028
 80041e0:	20000058 	.word	0x20000058
 80041e4:	20000054 	.word	0x20000054

080041e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_IncTick+0x20>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <HAL_IncTick+0x24>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4413      	add	r3, r2
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <HAL_IncTick+0x24>)
 80041fa:	6013      	str	r3, [r2, #0]
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20000058 	.word	0x20000058
 800420c:	2000202c 	.word	0x2000202c

08004210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return uwTick;
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <HAL_GetTick+0x14>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	2000202c 	.word	0x2000202c

08004228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004238:	4b0c      	ldr	r3, [pc, #48]	; (800426c <__NVIC_SetPriorityGrouping+0x44>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004244:	4013      	ands	r3, r2
 8004246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004250:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <__NVIC_SetPriorityGrouping+0x44>)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	60d3      	str	r3, [r2, #12]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <__NVIC_GetPriorityGrouping+0x18>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	f003 0307 	and.w	r3, r3, #7
}
 800427e:	4618      	mov	r0, r3
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429a:	2b00      	cmp	r3, #0
 800429c:	db0b      	blt.n	80042b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429e:	79fb      	ldrb	r3, [r7, #7]
 80042a0:	f003 021f 	and.w	r2, r3, #31
 80042a4:	4907      	ldr	r1, [pc, #28]	; (80042c4 <__NVIC_EnableIRQ+0x38>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	2001      	movs	r0, #1
 80042ae:	fa00 f202 	lsl.w	r2, r0, r2
 80042b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	e000e100 	.word	0xe000e100

080042c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db0a      	blt.n	80042f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	490c      	ldr	r1, [pc, #48]	; (8004314 <__NVIC_SetPriority+0x4c>)
 80042e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e6:	0112      	lsls	r2, r2, #4
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	440b      	add	r3, r1
 80042ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f0:	e00a      	b.n	8004308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4908      	ldr	r1, [pc, #32]	; (8004318 <__NVIC_SetPriority+0x50>)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3b04      	subs	r3, #4
 8004300:	0112      	lsls	r2, r2, #4
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	440b      	add	r3, r1
 8004306:	761a      	strb	r2, [r3, #24]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	e000e100 	.word	0xe000e100
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	; 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f1c3 0307 	rsb	r3, r3, #7
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf28      	it	cs
 800433a:	2304      	movcs	r3, #4
 800433c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3304      	adds	r3, #4
 8004342:	2b06      	cmp	r3, #6
 8004344:	d902      	bls.n	800434c <NVIC_EncodePriority+0x30>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3b03      	subs	r3, #3
 800434a:	e000      	b.n	800434e <NVIC_EncodePriority+0x32>
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43da      	mvns	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	401a      	ands	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa01 f303 	lsl.w	r3, r1, r3
 800436e:	43d9      	mvns	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004374:	4313      	orrs	r3, r2
         );
}
 8004376:	4618      	mov	r0, r3
 8004378:	3724      	adds	r7, #36	; 0x24
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004394:	d301      	bcc.n	800439a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004396:	2301      	movs	r3, #1
 8004398:	e00f      	b.n	80043ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800439a:	4a0a      	ldr	r2, [pc, #40]	; (80043c4 <SysTick_Config+0x40>)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3b01      	subs	r3, #1
 80043a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043a2:	210f      	movs	r1, #15
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a8:	f7ff ff8e 	bl	80042c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <SysTick_Config+0x40>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043b2:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <SysTick_Config+0x40>)
 80043b4:	2207      	movs	r2, #7
 80043b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	e000e010 	.word	0xe000e010

080043c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff29 	bl	8004228 <__NVIC_SetPriorityGrouping>
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	4603      	mov	r3, r0
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f0:	f7ff ff3e 	bl	8004270 <__NVIC_GetPriorityGrouping>
 80043f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	6978      	ldr	r0, [r7, #20]
 80043fc:	f7ff ff8e 	bl	800431c <NVIC_EncodePriority>
 8004400:	4602      	mov	r2, r0
 8004402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff5d 	bl	80042c8 <__NVIC_SetPriority>
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff ff31 	bl	800428c <__NVIC_EnableIRQ>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff ffa2 	bl	8004384 <SysTick_Config>
 8004440:	4603      	mov	r3, r0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004458:	f7ff feda 	bl	8004210 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e099      	b.n	800459c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004488:	e00f      	b.n	80044aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800448a:	f7ff fec1 	bl	8004210 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b05      	cmp	r3, #5
 8004496:	d908      	bls.n	80044aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2203      	movs	r2, #3
 80044a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e078      	b.n	800459c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e8      	bne.n	800448a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4b38      	ldr	r3, [pc, #224]	; (80045a4 <HAL_DMA_Init+0x158>)
 80044c4:	4013      	ands	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b04      	cmp	r3, #4
 8004502:	d107      	bne.n	8004514 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4313      	orrs	r3, r2
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0307 	bic.w	r3, r3, #7
 800452a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b04      	cmp	r3, #4
 800453c:	d117      	bne.n	800456e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fb0f 	bl	8004b74 <DMA_CheckFifoParam>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2240      	movs	r2, #64	; 0x40
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800456a:	2301      	movs	r3, #1
 800456c:	e016      	b.n	800459c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fac6 	bl	8004b08 <DMA_CalcBaseAndBitshift>
 800457c:	4603      	mov	r3, r0
 800457e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	223f      	movs	r2, #63	; 0x3f
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	f010803f 	.word	0xf010803f

080045a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_DMA_Start_IT+0x26>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e040      	b.n	8004650 <HAL_DMA_Start_IT+0xa8>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d12f      	bne.n	8004642 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fa58 	bl	8004aac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	223f      	movs	r2, #63	; 0x3f
 8004602:	409a      	lsls	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0216 	orr.w	r2, r2, #22
 8004616:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e005      	b.n	800464e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800464a:	2302      	movs	r3, #2
 800464c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004666:	f7ff fdd3 	bl	8004210 <HAL_GetTick>
 800466a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d008      	beq.n	800468a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2280      	movs	r2, #128	; 0x80
 800467c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e052      	b.n	8004730 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0216 	bic.w	r2, r2, #22
 8004698:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695a      	ldr	r2, [r3, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <HAL_DMA_Abort+0x62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d007      	beq.n	80046ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0208 	bic.w	r2, r2, #8
 80046c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046da:	e013      	b.n	8004704 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046dc:	f7ff fd98 	bl	8004210 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d90c      	bls.n	8004704 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2203      	movs	r2, #3
 80046f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e015      	b.n	8004730 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e4      	bne.n	80046dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	223f      	movs	r2, #63	; 0x3f
 8004718:	409a      	lsls	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d004      	beq.n	8004756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e00c      	b.n	8004770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2205      	movs	r2, #5
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0201 	bic.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004788:	4b92      	ldr	r3, [pc, #584]	; (80049d4 <HAL_DMA_IRQHandler+0x258>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a92      	ldr	r2, [pc, #584]	; (80049d8 <HAL_DMA_IRQHandler+0x25c>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	0a9b      	lsrs	r3, r3, #10
 8004794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	2208      	movs	r2, #8
 80047a8:	409a      	lsls	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4013      	ands	r3, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01a      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0204 	bic.w	r2, r2, #4
 80047ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	2208      	movs	r2, #8
 80047d6:	409a      	lsls	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	f043 0201 	orr.w	r2, r3, #1
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ec:	2201      	movs	r2, #1
 80047ee:	409a      	lsls	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d012      	beq.n	800481e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480a:	2201      	movs	r2, #1
 800480c:	409a      	lsls	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	f043 0202 	orr.w	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	2204      	movs	r2, #4
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d012      	beq.n	8004854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	2204      	movs	r2, #4
 8004842:	409a      	lsls	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	2210      	movs	r2, #16
 800485a:	409a      	lsls	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d043      	beq.n	80048ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d03c      	beq.n	80048ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	2210      	movs	r2, #16
 8004878:	409a      	lsls	r2, r3
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d018      	beq.n	80048be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d108      	bne.n	80048ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d024      	beq.n	80048ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
 80048aa:	e01f      	b.n	80048ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01b      	beq.n	80048ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	4798      	blx	r3
 80048bc:	e016      	b.n	80048ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0208 	bic.w	r2, r2, #8
 80048da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	2220      	movs	r2, #32
 80048f2:	409a      	lsls	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4013      	ands	r3, r2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 808e 	beq.w	8004a1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8086 	beq.w	8004a1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004912:	2220      	movs	r2, #32
 8004914:	409a      	lsls	r2, r3
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b05      	cmp	r3, #5
 8004924:	d136      	bne.n	8004994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0216 	bic.w	r2, r2, #22
 8004934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <HAL_DMA_IRQHandler+0x1da>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0208 	bic.w	r2, r2, #8
 8004964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496a:	223f      	movs	r2, #63	; 0x3f
 800496c:	409a      	lsls	r2, r3
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004986:	2b00      	cmp	r3, #0
 8004988:	d07d      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
        }
        return;
 8004992:	e078      	b.n	8004a86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01c      	beq.n	80049dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d108      	bne.n	80049c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d030      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
 80049c0:	e02b      	b.n	8004a1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d027      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
 80049d2:	e022      	b.n	8004a1a <HAL_DMA_IRQHandler+0x29e>
 80049d4:	20000028 	.word	0x20000028
 80049d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10f      	bne.n	8004a0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0210 	bic.w	r2, r2, #16
 80049f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d032      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d022      	beq.n	8004a74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2205      	movs	r2, #5
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d307      	bcc.n	8004a62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f2      	bne.n	8004a46 <HAL_DMA_IRQHandler+0x2ca>
 8004a60:	e000      	b.n	8004a64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a62:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
 8004a84:	e000      	b.n	8004a88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a86:	bf00      	nop
    }
  }
}
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop

08004a90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a9e:	b2db      	uxtb	r3, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b40      	cmp	r3, #64	; 0x40
 8004ad8:	d108      	bne.n	8004aec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004aea:	e007      	b.n	8004afc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	60da      	str	r2, [r3, #12]
}
 8004afc:	bf00      	nop
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	3b10      	subs	r3, #16
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <DMA_CalcBaseAndBitshift+0x64>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b22:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <DMA_CalcBaseAndBitshift+0x68>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d909      	bls.n	8004b4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	1d1a      	adds	r2, r3, #4
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	659a      	str	r2, [r3, #88]	; 0x58
 8004b48:	e007      	b.n	8004b5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b52:	f023 0303 	bic.w	r3, r3, #3
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	aaaaaaab 	.word	0xaaaaaaab
 8004b70:	0800abbc 	.word	0x0800abbc

08004b74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11f      	bne.n	8004bce <DMA_CheckFifoParam+0x5a>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d856      	bhi.n	8004c42 <DMA_CheckFifoParam+0xce>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <DMA_CheckFifoParam+0x28>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bbf 	.word	0x08004bbf
 8004ba4:	08004bad 	.word	0x08004bad
 8004ba8:	08004c43 	.word	0x08004c43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d046      	beq.n	8004c46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bbc:	e043      	b.n	8004c46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc6:	d140      	bne.n	8004c4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bcc:	e03d      	b.n	8004c4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d121      	bne.n	8004c1c <DMA_CheckFifoParam+0xa8>
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d837      	bhi.n	8004c4e <DMA_CheckFifoParam+0xda>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <DMA_CheckFifoParam+0x70>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004bfb 	.word	0x08004bfb
 8004bec:	08004bf5 	.word	0x08004bf5
 8004bf0:	08004c0d 	.word	0x08004c0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf8:	e030      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d025      	beq.n	8004c52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c0a:	e022      	b.n	8004c52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c14:	d11f      	bne.n	8004c56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c1a:	e01c      	b.n	8004c56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d903      	bls.n	8004c2a <DMA_CheckFifoParam+0xb6>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d003      	beq.n	8004c30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c28:	e018      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2e:	e015      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00e      	beq.n	8004c5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c40:	e00b      	b.n	8004c5a <DMA_CheckFifoParam+0xe6>
      break;
 8004c42:	bf00      	nop
 8004c44:	e00a      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      break;
 8004c46:	bf00      	nop
 8004c48:	e008      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      break;
 8004c4a:	bf00      	nop
 8004c4c:	e006      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e004      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop

08004c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b089      	sub	sp, #36	; 0x24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e165      	b.n	8004f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c88:	2201      	movs	r2, #1
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	f040 8154 	bne.w	8004f4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d005      	beq.n	8004cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d130      	bne.n	8004d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	2203      	movs	r2, #3
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 0201 	and.w	r2, r3, #1
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d017      	beq.n	8004d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	2203      	movs	r2, #3
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d123      	bne.n	8004db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	08da      	lsrs	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3208      	adds	r2, #8
 8004d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	220f      	movs	r2, #15
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	08da      	lsrs	r2, r3, #3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3208      	adds	r2, #8
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	2203      	movs	r2, #3
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80ae 	beq.w	8004f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	4b5d      	ldr	r3, [pc, #372]	; (8004f6c <HAL_GPIO_Init+0x300>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	4a5c      	ldr	r2, [pc, #368]	; (8004f6c <HAL_GPIO_Init+0x300>)
 8004dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e00:	6453      	str	r3, [r2, #68]	; 0x44
 8004e02:	4b5a      	ldr	r3, [pc, #360]	; (8004f6c <HAL_GPIO_Init+0x300>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e0e:	4a58      	ldr	r2, [pc, #352]	; (8004f70 <HAL_GPIO_Init+0x304>)
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	3302      	adds	r3, #2
 8004e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	220f      	movs	r2, #15
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a4f      	ldr	r2, [pc, #316]	; (8004f74 <HAL_GPIO_Init+0x308>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d025      	beq.n	8004e86 <HAL_GPIO_Init+0x21a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a4e      	ldr	r2, [pc, #312]	; (8004f78 <HAL_GPIO_Init+0x30c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01f      	beq.n	8004e82 <HAL_GPIO_Init+0x216>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a4d      	ldr	r2, [pc, #308]	; (8004f7c <HAL_GPIO_Init+0x310>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d019      	beq.n	8004e7e <HAL_GPIO_Init+0x212>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a4c      	ldr	r2, [pc, #304]	; (8004f80 <HAL_GPIO_Init+0x314>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d013      	beq.n	8004e7a <HAL_GPIO_Init+0x20e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a4b      	ldr	r2, [pc, #300]	; (8004f84 <HAL_GPIO_Init+0x318>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00d      	beq.n	8004e76 <HAL_GPIO_Init+0x20a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a4a      	ldr	r2, [pc, #296]	; (8004f88 <HAL_GPIO_Init+0x31c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <HAL_GPIO_Init+0x206>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a49      	ldr	r2, [pc, #292]	; (8004f8c <HAL_GPIO_Init+0x320>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_GPIO_Init+0x202>
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	e00c      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e6e:	2307      	movs	r3, #7
 8004e70:	e00a      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e72:	2305      	movs	r3, #5
 8004e74:	e008      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e76:	2304      	movs	r3, #4
 8004e78:	e006      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e004      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e002      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_GPIO_Init+0x21c>
 8004e86:	2300      	movs	r3, #0
 8004e88:	69fa      	ldr	r2, [r7, #28]
 8004e8a:	f002 0203 	and.w	r2, r2, #3
 8004e8e:	0092      	lsls	r2, r2, #2
 8004e90:	4093      	lsls	r3, r2
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e98:	4935      	ldr	r1, [pc, #212]	; (8004f70 <HAL_GPIO_Init+0x304>)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ea6:	4b3a      	ldr	r3, [pc, #232]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004eca:	4a31      	ldr	r2, [pc, #196]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ed0:	4b2f      	ldr	r3, [pc, #188]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4013      	ands	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ef4:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004efa:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4013      	ands	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f48:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <HAL_GPIO_Init+0x324>)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b0f      	cmp	r3, #15
 8004f58:	f67f ae96 	bls.w	8004c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3724      	adds	r7, #36	; 0x24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40013800 	.word	0x40013800
 8004f74:	40020000 	.word	0x40020000
 8004f78:	40020400 	.word	0x40020400
 8004f7c:	40020800 	.word	0x40020800
 8004f80:	40020c00 	.word	0x40020c00
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40021400 	.word	0x40021400
 8004f8c:	40021800 	.word	0x40021800
 8004f90:	40013c00 	.word	0x40013c00

08004f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fac:	2301      	movs	r3, #1
 8004fae:	73fb      	strb	r3, [r7, #15]
 8004fb0:	e001      	b.n	8004fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	807b      	strh	r3, [r7, #2]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fd4:	787b      	ldrb	r3, [r7, #1]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fda:	887a      	ldrh	r2, [r7, #2]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fe0:	e003      	b.n	8004fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fe2:	887b      	ldrh	r3, [r7, #2]
 8004fe4:	041a      	lsls	r2, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	619a      	str	r2, [r3, #24]
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
	...

08004ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e12b      	b.n	8005262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fd fb9c 	bl	800275c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800504a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800505a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800505c:	f001 fed4 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 8005060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a81      	ldr	r2, [pc, #516]	; (800526c <HAL_I2C_Init+0x274>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d807      	bhi.n	800507c <HAL_I2C_Init+0x84>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a80      	ldr	r2, [pc, #512]	; (8005270 <HAL_I2C_Init+0x278>)
 8005070:	4293      	cmp	r3, r2
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e006      	b.n	800508a <HAL_I2C_Init+0x92>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a7d      	ldr	r2, [pc, #500]	; (8005274 <HAL_I2C_Init+0x27c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	bf94      	ite	ls
 8005084:	2301      	movls	r3, #1
 8005086:	2300      	movhi	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0e7      	b.n	8005262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a78      	ldr	r2, [pc, #480]	; (8005278 <HAL_I2C_Init+0x280>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0c9b      	lsrs	r3, r3, #18
 800509c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a6a      	ldr	r2, [pc, #424]	; (800526c <HAL_I2C_Init+0x274>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d802      	bhi.n	80050cc <HAL_I2C_Init+0xd4>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	3301      	adds	r3, #1
 80050ca:	e009      	b.n	80050e0 <HAL_I2C_Init+0xe8>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	4a69      	ldr	r2, [pc, #420]	; (800527c <HAL_I2C_Init+0x284>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	3301      	adds	r3, #1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	495c      	ldr	r1, [pc, #368]	; (800526c <HAL_I2C_Init+0x274>)
 80050fc:	428b      	cmp	r3, r1
 80050fe:	d819      	bhi.n	8005134 <HAL_I2C_Init+0x13c>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1e59      	subs	r1, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	fbb1 f3f3 	udiv	r3, r1, r3
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005114:	400b      	ands	r3, r1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_I2C_Init+0x138>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1e59      	subs	r1, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fbb1 f3f3 	udiv	r3, r1, r3
 8005128:	3301      	adds	r3, #1
 800512a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800512e:	e051      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 8005130:	2304      	movs	r3, #4
 8005132:	e04f      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d111      	bne.n	8005160 <HAL_I2C_Init+0x168>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1e58      	subs	r0, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	440b      	add	r3, r1
 800514a:	fbb0 f3f3 	udiv	r3, r0, r3
 800514e:	3301      	adds	r3, #1
 8005150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e012      	b.n	8005186 <HAL_I2C_Init+0x18e>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1e58      	subs	r0, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	0099      	lsls	r1, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	fbb0 f3f3 	udiv	r3, r0, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <HAL_I2C_Init+0x196>
 800518a:	2301      	movs	r3, #1
 800518c:	e022      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10e      	bne.n	80051b4 <HAL_I2C_Init+0x1bc>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1e58      	subs	r0, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	440b      	add	r3, r1
 80051a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051a8:	3301      	adds	r3, #1
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	e00f      	b.n	80051d4 <HAL_I2C_Init+0x1dc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1e58      	subs	r0, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	0099      	lsls	r1, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ca:	3301      	adds	r3, #1
 80051cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	6809      	ldr	r1, [r1, #0]
 80051d8:	4313      	orrs	r3, r2
 80051da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6911      	ldr	r1, [r2, #16]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	4311      	orrs	r1, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	430b      	orrs	r3, r1
 8005216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	000186a0 	.word	0x000186a0
 8005270:	001e847f 	.word	0x001e847f
 8005274:	003d08ff 	.word	0x003d08ff
 8005278:	431bde83 	.word	0x431bde83
 800527c:	10624dd3 	.word	0x10624dd3

08005280 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d003      	beq.n	80052b8 <HAL_I2C_EV_IRQHandler+0x38>
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	f040 80c1 	bne.w	800543a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_I2C_EV_IRQHandler+0x6e>
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052d8:	d003      	beq.n	80052e2 <HAL_I2C_EV_IRQHandler+0x62>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052e0:	d101      	bne.n	80052e6 <HAL_I2C_EV_IRQHandler+0x66>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_I2C_EV_IRQHandler+0x68>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	f000 8132 	beq.w	8005552 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <HAL_I2C_EV_IRQHandler+0x92>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	0a5b      	lsrs	r3, r3, #9
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d006      	beq.n	8005312 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f001 fc71 	bl	8006bec <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd79 	bl	8005e02 <I2C_Master_SB>
 8005310:	e092      	b.n	8005438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <HAL_I2C_EV_IRQHandler+0xb2>
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	0a5b      	lsrs	r3, r3, #9
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fdef 	bl	8005f0e <I2C_Master_ADD10>
 8005330:	e082      	b.n	8005438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <HAL_I2C_EV_IRQHandler+0xd2>
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	0a5b      	lsrs	r3, r3, #9
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fe09 	bl	8005f62 <I2C_Master_ADDR>
 8005350:	e072      	b.n	8005438 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	089b      	lsrs	r3, r3, #2
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d03b      	beq.n	80053d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536c:	f000 80f3 	beq.w	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	09db      	lsrs	r3, r3, #7
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00f      	beq.n	800539c <HAL_I2C_EV_IRQHandler+0x11c>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	0a9b      	lsrs	r3, r3, #10
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d009      	beq.n	800539c <HAL_I2C_EV_IRQHandler+0x11c>
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f9f3 	bl	8005780 <I2C_MasterTransmit_TXE>
 800539a:	e04d      	b.n	8005438 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	089b      	lsrs	r3, r3, #2
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80d6 	beq.w	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	0a5b      	lsrs	r3, r3, #9
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80cf 	beq.w	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	2b21      	cmp	r3, #33	; 0x21
 80053bc:	d103      	bne.n	80053c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa7a 	bl	80058b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053c4:	e0c7      	b.n	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	f040 80c4 	bne.w	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fae8 	bl	80059a4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d4:	e0bf      	b.n	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e4:	f000 80b7 	beq.w	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	099b      	lsrs	r3, r3, #6
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00f      	beq.n	8005414 <HAL_I2C_EV_IRQHandler+0x194>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	0a9b      	lsrs	r3, r3, #10
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <HAL_I2C_EV_IRQHandler+0x194>
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	089b      	lsrs	r3, r3, #2
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fb5d 	bl	8005acc <I2C_MasterReceive_RXNE>
 8005412:	e011      	b.n	8005438 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 809a 	beq.w	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	0a5b      	lsrs	r3, r3, #9
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8093 	beq.w	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fbfc 	bl	8005c2e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005436:	e08e      	b.n	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005438:	e08d      	b.n	8005556 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	e007      	b.n	800545c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <HAL_I2C_EV_IRQHandler+0x20e>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	0a5b      	lsrs	r3, r3, #9
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00c      	beq.n	800548e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005484:	69b9      	ldr	r1, [r7, #24]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 ffba 	bl	8006400 <I2C_Slave_ADDR>
 800548c:	e066      	b.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_I2C_EV_IRQHandler+0x22e>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	0a5b      	lsrs	r3, r3, #9
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fff4 	bl	8006494 <I2C_Slave_STOPF>
 80054ac:	e056      	b.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	2b21      	cmp	r3, #33	; 0x21
 80054b2:	d002      	beq.n	80054ba <HAL_I2C_EV_IRQHandler+0x23a>
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	2b29      	cmp	r3, #41	; 0x29
 80054b8:	d125      	bne.n	8005506 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	09db      	lsrs	r3, r3, #7
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00f      	beq.n	80054e6 <HAL_I2C_EV_IRQHandler+0x266>
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	0a9b      	lsrs	r3, r3, #10
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_I2C_EV_IRQHandler+0x266>
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	089b      	lsrs	r3, r3, #2
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fed0 	bl	8006284 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054e4:	e039      	b.n	800555a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	089b      	lsrs	r3, r3, #2
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d033      	beq.n	800555a <HAL_I2C_EV_IRQHandler+0x2da>
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	0a5b      	lsrs	r3, r3, #9
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d02d      	beq.n	800555a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fefd 	bl	80062fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005504:	e029      	b.n	800555a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00f      	beq.n	8005532 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	0a9b      	lsrs	r3, r3, #10
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_I2C_EV_IRQHandler+0x2b2>
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	089b      	lsrs	r3, r3, #2
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 ff08 	bl	8006340 <I2C_SlaveReceive_RXNE>
 8005530:	e014      	b.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	089b      	lsrs	r3, r3, #2
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	0a5b      	lsrs	r3, r3, #9
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 ff36 	bl	80063bc <I2C_SlaveReceive_BTF>
 8005550:	e004      	b.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800555a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b08a      	sub	sp, #40	; 0x28
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005584:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	0a1b      	lsrs	r3, r3, #8
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00e      	beq.n	80055b0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	0a5b      	lsrs	r3, r3, #9
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <HAL_I2C_ER_IRQHandler+0x78>
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	f043 0302 	orr.w	r3, r3, #2
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80055d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	0a9b      	lsrs	r3, r3, #10
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d03f      	beq.n	8005666 <HAL_I2C_ER_IRQHandler+0x104>
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d039      	beq.n	8005666 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80055f2:	7efb      	ldrb	r3, [r7, #27]
 80055f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800560c:	7ebb      	ldrb	r3, [r7, #26]
 800560e:	2b20      	cmp	r3, #32
 8005610:	d112      	bne.n	8005638 <HAL_I2C_ER_IRQHandler+0xd6>
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10f      	bne.n	8005638 <HAL_I2C_ER_IRQHandler+0xd6>
 8005618:	7cfb      	ldrb	r3, [r7, #19]
 800561a:	2b21      	cmp	r3, #33	; 0x21
 800561c:	d008      	beq.n	8005630 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800561e:	7cfb      	ldrb	r3, [r7, #19]
 8005620:	2b29      	cmp	r3, #41	; 0x29
 8005622:	d005      	beq.n	8005630 <HAL_I2C_ER_IRQHandler+0xce>
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	2b28      	cmp	r3, #40	; 0x28
 8005628:	d106      	bne.n	8005638 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b21      	cmp	r3, #33	; 0x21
 800562e:	d103      	bne.n	8005638 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f001 f85f 	bl	80066f4 <I2C_Slave_AF>
 8005636:	e016      	b.n	8005666 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005640:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	f043 0304 	orr.w	r3, r3, #4
 8005648:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800564a:	7efb      	ldrb	r3, [r7, #27]
 800564c:	2b10      	cmp	r3, #16
 800564e:	d002      	beq.n	8005656 <HAL_I2C_ER_IRQHandler+0xf4>
 8005650:	7efb      	ldrb	r3, [r7, #27]
 8005652:	2b40      	cmp	r3, #64	; 0x40
 8005654:	d107      	bne.n	8005666 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005664:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	0adb      	lsrs	r3, r3, #11
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <HAL_I2C_ER_IRQHandler+0x12e>
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	f043 0308 	orr.w	r3, r3, #8
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800568e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f001 f896 	bl	80067d4 <I2C_ITError>
  }
}
 80056a8:	bf00      	nop
 80056aa:	3728      	adds	r7, #40	; 0x28
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
 800570c:	4613      	mov	r3, r2
 800570e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005796:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d150      	bne.n	8005848 <I2C_MasterTransmit_TXE+0xc8>
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	2b21      	cmp	r3, #33	; 0x21
 80057aa:	d14d      	bne.n	8005848 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d01d      	beq.n	80057ee <I2C_MasterTransmit_TXE+0x6e>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d01a      	beq.n	80057ee <I2C_MasterTransmit_TXE+0x6e>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057be:	d016      	beq.n	80057ee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2211      	movs	r2, #17
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff ff62 	bl	80056b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ec:	e060      	b.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057fc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d107      	bne.n	8005838 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff7d 	bl	8005730 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005836:	e03b      	b.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff35 	bl	80056b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005846:	e033      	b.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b21      	cmp	r3, #33	; 0x21
 800584c:	d005      	beq.n	800585a <I2C_MasterTransmit_TXE+0xda>
 800584e:	7bbb      	ldrb	r3, [r7, #14]
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d12d      	bne.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b22      	cmp	r3, #34	; 0x22
 8005858:	d12a      	bne.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d108      	bne.n	8005876 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005874:	e01c      	b.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	d103      	bne.n	800588a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f88e 	bl	80059a4 <I2C_MemoryTransmit_TXE_BTF>
}
 8005888:	e012      	b.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	781a      	ldrb	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058ae:	e7ff      	b.n	80058b0 <I2C_MasterTransmit_TXE+0x130>
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b21      	cmp	r3, #33	; 0x21
 80058d0:	d164      	bne.n	800599c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005900:	e04c      	b.n	800599c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b08      	cmp	r3, #8
 8005906:	d01d      	beq.n	8005944 <I2C_MasterTransmit_BTF+0x8c>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b20      	cmp	r3, #32
 800590c:	d01a      	beq.n	8005944 <I2C_MasterTransmit_BTF+0x8c>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005914:	d016      	beq.n	8005944 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005924:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2211      	movs	r2, #17
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff feb7 	bl	80056b0 <HAL_I2C_MasterTxCpltCallback>
}
 8005942:	e02b      	b.n	800599c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005952:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005962:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d107      	bne.n	800598e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff fed2 	bl	8005730 <HAL_I2C_MemTxCpltCallback>
}
 800598c:	e006      	b.n	800599c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fe8a 	bl	80056b0 <HAL_I2C_MasterTxCpltCallback>
}
 800599c:	bf00      	nop
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d11d      	bne.n	80059f8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d10b      	bne.n	80059dc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80059da:	e073      	b.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	121b      	asrs	r3, r3, #8
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059f6:	e065      	b.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10b      	bne.n	8005a18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a16:	e055      	b.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d151      	bne.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b22      	cmp	r3, #34	; 0x22
 8005a24:	d10d      	bne.n	8005a42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a40:	e040      	b.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b21      	cmp	r3, #33	; 0x21
 8005a50:	d112      	bne.n	8005a78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	781a      	ldrb	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a76:	e025      	b.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d120      	bne.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	2b21      	cmp	r3, #33	; 0x21
 8005a86:	d11d      	bne.n	8005ac4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fe36 	bl	8005730 <HAL_I2C_MemTxCpltCallback>
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b22      	cmp	r3, #34	; 0x22
 8005ade:	f040 80a2 	bne.w	8005c26 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d921      	bls.n	8005b34 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	f040 8082 	bne.w	8005c26 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b30:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005b32:	e078      	b.n	8005c26 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d074      	beq.n	8005c26 <I2C_MasterReceive_RXNE+0x15a>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d002      	beq.n	8005b48 <I2C_MasterReceive_RXNE+0x7c>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d16e      	bne.n	8005c26 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 f81d 	bl	8006b88 <I2C_WaitOnSTOPRequestThroughIT>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d142      	bne.n	8005bda <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b62:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b72:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d10a      	bne.n	8005bc4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fdc1 	bl	8005744 <HAL_I2C_MemRxCpltCallback>
}
 8005bc2:	e030      	b.n	8005c26 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2212      	movs	r2, #18
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff fd76 	bl	80056c4 <HAL_I2C_MasterRxCpltCallback>
}
 8005bd8:	e025      	b.n	8005c26 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005be8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	1c5a      	adds	r2, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fd99 	bl	8005758 <HAL_I2C_ErrorCallback>
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d11b      	bne.n	8005c7e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c54:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c7c:	e0bd      	b.n	8005dfa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d129      	bne.n	8005cdc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c96:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d00a      	beq.n	8005cb4 <I2C_MasterReceive_BTF+0x86>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d007      	beq.n	8005cb4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cda:	e08e      	b.n	8005dfa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d176      	bne.n	8005dd4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d002      	beq.n	8005cf2 <I2C_MasterReceive_BTF+0xc4>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b10      	cmp	r3, #16
 8005cf0:	d108      	bne.n	8005d04 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e019      	b.n	8005d38 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d002      	beq.n	8005d10 <I2C_MasterReceive_BTF+0xe2>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d108      	bne.n	8005d22 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e00a      	b.n	8005d38 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d007      	beq.n	8005d38 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d10a      	bne.n	8005dbe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fcc4 	bl	8005744 <HAL_I2C_MemRxCpltCallback>
}
 8005dbc:	e01d      	b.n	8005dfa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2212      	movs	r2, #18
 8005dca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fc79 	bl	80056c4 <HAL_I2C_MasterRxCpltCallback>
}
 8005dd2:	e012      	b.n	8005dfa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691a      	ldr	r2, [r3, #16]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	b2d2      	uxtb	r2, r2
 8005de0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d117      	bne.n	8005e46 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e2e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005e30:	e067      	b.n	8005f02 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f043 0301 	orr.w	r3, r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	611a      	str	r2, [r3, #16]
}
 8005e44:	e05d      	b.n	8005f02 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e4e:	d133      	bne.n	8005eb8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b21      	cmp	r3, #33	; 0x21
 8005e5a:	d109      	bne.n	8005e70 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e6c:	611a      	str	r2, [r3, #16]
 8005e6e:	e008      	b.n	8005e82 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <I2C_Master_SB+0x92>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d108      	bne.n	8005ea6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d032      	beq.n	8005f02 <I2C_Master_SB+0x100>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d02d      	beq.n	8005f02 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb4:	605a      	str	r2, [r3, #4]
}
 8005eb6:	e024      	b.n	8005f02 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10e      	bne.n	8005ede <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	11db      	asrs	r3, r3, #7
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 0306 	and.w	r3, r3, #6
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f063 030f 	orn	r3, r3, #15
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]
}
 8005edc:	e011      	b.n	8005f02 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d10d      	bne.n	8005f02 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	11db      	asrs	r3, r3, #7
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f003 0306 	and.w	r3, r3, #6
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f063 030e 	orn	r3, r3, #14
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	611a      	str	r2, [r3, #16]
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <I2C_Master_ADD10+0x26>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d108      	bne.n	8005f46 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00c      	beq.n	8005f56 <I2C_Master_ADD10+0x48>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f54:	605a      	str	r2, [r3, #4]
  }
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b091      	sub	sp, #68	; 0x44
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b22      	cmp	r3, #34	; 0x22
 8005f8a:	f040 8169 	bne.w	8006260 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <I2C_Master_ADDR+0x54>
 8005f96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d10b      	bne.n	8005fb6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	e160      	b.n	8006278 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d11d      	bne.n	8005ffa <I2C_Master_ADDR+0x98>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fc6:	d118      	bne.n	8005ffa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8005ff8:	e13e      	b.n	8006278 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d113      	bne.n	800602c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006004:	2300      	movs	r3, #0
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e115      	b.n	8006258 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	f040 808a 	bne.w	800614c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800603e:	d137      	bne.n	80060b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800605e:	d113      	bne.n	8006088 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006070:	2300      	movs	r3, #0
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	e0e7      	b.n	8006258 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006088:	2300      	movs	r3, #0
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	e0d3      	b.n	8006258 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80060b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d02e      	beq.n	8006114 <I2C_Master_ADDR+0x1b2>
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d02b      	beq.n	8006114 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	2b12      	cmp	r3, #18
 80060c0:	d102      	bne.n	80060c8 <I2C_Master_ADDR+0x166>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d125      	bne.n	8006114 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d00e      	beq.n	80060ec <I2C_Master_ADDR+0x18a>
 80060ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d00b      	beq.n	80060ec <I2C_Master_ADDR+0x18a>
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	2b10      	cmp	r3, #16
 80060d8:	d008      	beq.n	80060ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e007      	b.n	80060fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	e0a1      	b.n	8006258 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006122:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e085      	b.n	8006258 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d14d      	bne.n	80061f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	2b04      	cmp	r3, #4
 800615a:	d016      	beq.n	800618a <I2C_Master_ADDR+0x228>
 800615c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615e:	2b02      	cmp	r3, #2
 8006160:	d013      	beq.n	800618a <I2C_Master_ADDR+0x228>
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	2b10      	cmp	r3, #16
 8006166:	d010      	beq.n	800618a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006176:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e007      	b.n	800619a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006198:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a8:	d117      	bne.n	80061da <I2C_Master_ADDR+0x278>
 80061aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061b0:	d00b      	beq.n	80061ca <I2C_Master_ADDR+0x268>
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d008      	beq.n	80061ca <I2C_Master_ADDR+0x268>
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d005      	beq.n	80061ca <I2C_Master_ADDR+0x268>
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	2b10      	cmp	r3, #16
 80061c2:	d002      	beq.n	80061ca <I2C_Master_ADDR+0x268>
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	d107      	bne.n	80061da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	e032      	b.n	8006258 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006200:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006210:	d117      	bne.n	8006242 <I2C_Master_ADDR+0x2e0>
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006218:	d00b      	beq.n	8006232 <I2C_Master_ADDR+0x2d0>
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	2b01      	cmp	r3, #1
 800621e:	d008      	beq.n	8006232 <I2C_Master_ADDR+0x2d0>
 8006220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006222:	2b08      	cmp	r3, #8
 8006224:	d005      	beq.n	8006232 <I2C_Master_ADDR+0x2d0>
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	2b10      	cmp	r3, #16
 800622a:	d002      	beq.n	8006232 <I2C_Master_ADDR+0x2d0>
 800622c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622e:	2b20      	cmp	r3, #32
 8006230:	d107      	bne.n	8006242 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006240:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	613b      	str	r3, [r7, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800625e:	e00b      	b.n	8006278 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
}
 8006276:	e7ff      	b.n	8006278 <I2C_Master_ADDR+0x316>
 8006278:	bf00      	nop
 800627a:	3744      	adds	r7, #68	; 0x44
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006292:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d02b      	beq.n	80062f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d114      	bne.n	80062f6 <I2C_SlaveTransmit_TXE+0x72>
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2b29      	cmp	r3, #41	; 0x29
 80062d0:	d111      	bne.n	80062f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2221      	movs	r2, #33	; 0x21
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2228      	movs	r2, #40	; 0x28
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff f9f1 	bl	80056d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d011      	beq.n	8006334 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d02c      	beq.n	80063b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d114      	bne.n	80063b4 <I2C_SlaveReceive_RXNE+0x74>
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	2b2a      	cmp	r3, #42	; 0x2a
 800638e:	d111      	bne.n	80063b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2222      	movs	r2, #34	; 0x22
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2228      	movs	r2, #40	; 0x28
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f7ff f99c 	bl	80056ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063b4:	bf00      	nop
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d012      	beq.n	80063f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800641a:	2b28      	cmp	r3, #40	; 0x28
 800641c:	d127      	bne.n	800646e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800642c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	81bb      	strh	r3, [r7, #12]
 8006450:	e002      	b.n	8006458 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006460:	89ba      	ldrh	r2, [r7, #12]
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff f94a 	bl	8005700 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800646c:	e00e      	b.n	800648c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80064b4:	2300      	movs	r3, #0
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f0:	d172      	bne.n	80065d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	2b22      	cmp	r3, #34	; 0x22
 80064f6:	d002      	beq.n	80064fe <I2C_Slave_STOPF+0x6a>
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b2a      	cmp	r3, #42	; 0x2a
 80064fc:	d135      	bne.n	800656a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	b29a      	uxth	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	f043 0204 	orr.w	r2, r3, #4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006530:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe faaa 	bl	8004a90 <HAL_DMA_GetState>
 800653c:	4603      	mov	r3, r0
 800653e:	2b01      	cmp	r3, #1
 8006540:	d049      	beq.n	80065d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	4a69      	ldr	r2, [pc, #420]	; (80066ec <I2C_Slave_STOPF+0x258>)
 8006548:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe f8f2 	bl	8004738 <HAL_DMA_Abort_IT>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d03d      	beq.n	80065d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006564:	4610      	mov	r0, r2
 8006566:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006568:	e035      	b.n	80065d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b29a      	uxth	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f043 0204 	orr.w	r2, r3, #4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800659c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fa74 	bl	8004a90 <HAL_DMA_GetState>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d014      	beq.n	80065d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	4a4e      	ldr	r2, [pc, #312]	; (80066ec <I2C_Slave_STOPF+0x258>)
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe f8bc 	bl	8004738 <HAL_DMA_Abort_IT>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
 80065d4:	e000      	b.n	80065d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d03e      	beq.n	8006660 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d112      	bne.n	8006616 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	d112      	bne.n	800664a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d005      	beq.n	8006660 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	f043 0204 	orr.w	r2, r3, #4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f8b3 	bl	80067d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800666e:	e039      	b.n	80066e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b2a      	cmp	r3, #42	; 0x2a
 8006674:	d109      	bne.n	800668a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2228      	movs	r2, #40	; 0x28
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff f831 	bl	80056ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b28      	cmp	r3, #40	; 0x28
 8006694:	d111      	bne.n	80066ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a15      	ldr	r2, [pc, #84]	; (80066f0 <I2C_Slave_STOPF+0x25c>)
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff f832 	bl	800571c <HAL_I2C_ListenCpltCallback>
}
 80066b8:	e014      	b.n	80066e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	2b22      	cmp	r3, #34	; 0x22
 80066c0:	d002      	beq.n	80066c8 <I2C_Slave_STOPF+0x234>
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b22      	cmp	r3, #34	; 0x22
 80066c6:	d10d      	bne.n	80066e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff f804 	bl	80056ec <HAL_I2C_SlaveRxCpltCallback>
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	08006a39 	.word	0x08006a39
 80066f0:	ffff0000 	.word	0xffff0000

080066f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006702:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b08      	cmp	r3, #8
 800670e:	d002      	beq.n	8006716 <I2C_Slave_AF+0x22>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b20      	cmp	r3, #32
 8006714:	d129      	bne.n	800676a <I2C_Slave_AF+0x76>
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b28      	cmp	r3, #40	; 0x28
 800671a:	d126      	bne.n	800676a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a2c      	ldr	r2, [pc, #176]	; (80067d0 <I2C_Slave_AF+0xdc>)
 8006720:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006730:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800673a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fe ffda 	bl	800571c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006768:	e02e      	b.n	80067c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b21      	cmp	r3, #33	; 0x21
 800676e:	d126      	bne.n	80067be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <I2C_Slave_AF+0xdc>)
 8006774:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2221      	movs	r2, #33	; 0x21
 800677a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800679a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fe ff8e 	bl	80056d8 <HAL_I2C_SlaveTxCpltCallback>
}
 80067bc:	e004      	b.n	80067c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067c6:	615a      	str	r2, [r3, #20]
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	ffff0000 	.word	0xffff0000

080067d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d002      	beq.n	80067f8 <I2C_ITError+0x24>
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d10a      	bne.n	800680e <I2C_ITError+0x3a>
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b22      	cmp	r3, #34	; 0x22
 80067fc:	d107      	bne.n	800680e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800680c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006814:	2b28      	cmp	r3, #40	; 0x28
 8006816:	d107      	bne.n	8006828 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2228      	movs	r2, #40	; 0x28
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006826:	e015      	b.n	8006854 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006836:	d00a      	beq.n	800684e <I2C_ITError+0x7a>
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b60      	cmp	r3, #96	; 0x60
 800683c:	d007      	beq.n	800684e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	d162      	bne.n	800692a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006872:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b01      	cmp	r3, #1
 8006880:	d020      	beq.n	80068c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	4a6a      	ldr	r2, [pc, #424]	; (8006a30 <I2C_ITError+0x25c>)
 8006888:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688e:	4618      	mov	r0, r3
 8006890:	f7fd ff52 	bl	8004738 <HAL_DMA_Abort_IT>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8089 	beq.w	80069ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068be:	4610      	mov	r0, r2
 80068c0:	4798      	blx	r3
 80068c2:	e074      	b.n	80069ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	4a59      	ldr	r2, [pc, #356]	; (8006a30 <I2C_ITError+0x25c>)
 80068ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fd ff31 	bl	8004738 <HAL_DMA_Abort_IT>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d068      	beq.n	80069ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d10b      	bne.n	8006902 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006924:	4610      	mov	r0, r2
 8006926:	4798      	blx	r3
 8006928:	e041      	b.n	80069ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b60      	cmp	r3, #96	; 0x60
 8006934:	d125      	bne.n	8006982 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d10b      	bne.n	800696a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0201 	bic.w	r2, r2, #1
 8006978:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fe fef6 	bl	800576c <HAL_I2C_AbortCpltCallback>
 8006980:	e015      	b.n	80069ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d10b      	bne.n	80069a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7fe fed5 	bl	8005758 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10e      	bne.n	80069dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d109      	bne.n	80069dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d104      	bne.n	80069dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d113      	bne.n	8006a28 <I2C_ITError+0x254>
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	2b28      	cmp	r3, #40	; 0x28
 8006a04:	d110      	bne.n	8006a28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a0a      	ldr	r2, [pc, #40]	; (8006a34 <I2C_ITError+0x260>)
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fe fe7a 	bl	800571c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	08006a39 	.word	0x08006a39
 8006a34:	ffff0000 	.word	0xffff0000

08006a38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a52:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <I2C_DMAAbort+0x148>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	08db      	lsrs	r3, r3, #3
 8006a58:	4a4a      	ldr	r2, [pc, #296]	; (8006b84 <I2C_DMAAbort+0x14c>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	0a1a      	lsrs	r2, r3, #8
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00da      	lsls	r2, r3, #3
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f043 0220 	orr.w	r2, r3, #32
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006a7e:	e00a      	b.n	8006a96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a94:	d0ea      	beq.n	8006a6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d003      	beq.n	8006adc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad8:	2200      	movs	r2, #0
 8006ada:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae8:	2200      	movs	r2, #0
 8006aea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b60      	cmp	r3, #96	; 0x60
 8006b06:	d10e      	bne.n	8006b26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b1e:	6978      	ldr	r0, [r7, #20]
 8006b20:	f7fe fe24 	bl	800576c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b24:	e027      	b.n	8006b76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b26:	7cfb      	ldrb	r3, [r7, #19]
 8006b28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b2c:	2b28      	cmp	r3, #40	; 0x28
 8006b2e:	d117      	bne.n	8006b60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2228      	movs	r2, #40	; 0x28
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b5e:	e007      	b.n	8006b70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006b70:	6978      	ldr	r0, [r7, #20]
 8006b72:	f7fe fdf1 	bl	8005758 <HAL_I2C_ErrorCallback>
}
 8006b76:	bf00      	nop
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000028 	.word	0x20000028
 8006b84:	14f8b589 	.word	0x14f8b589

08006b88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006b94:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	08db      	lsrs	r3, r3, #3
 8006b9a:	4a13      	ldr	r2, [pc, #76]	; (8006be8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	0a1a      	lsrs	r2, r3, #8
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e008      	b.n	8006bd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd4:	d0e9      	beq.n	8006baa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	20000028 	.word	0x20000028
 8006be8:	14f8b589 	.word	0x14f8b589

08006bec <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006bfc:	d103      	bne.n	8006c06 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c04:	e007      	b.n	8006c16 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c0e:	d102      	bne.n	8006c16 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2208      	movs	r2, #8
 8006c14:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
	...

08006c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0cc      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c38:	4b68      	ldr	r3, [pc, #416]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 030f 	and.w	r3, r3, #15
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d90c      	bls.n	8006c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c46:	4b65      	ldr	r3, [pc, #404]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c48:	683a      	ldr	r2, [r7, #0]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4e:	4b63      	ldr	r3, [pc, #396]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0b8      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d020      	beq.n	8006cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c78:	4b59      	ldr	r3, [pc, #356]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4a58      	ldr	r2, [pc, #352]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c90:	4b53      	ldr	r3, [pc, #332]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4a52      	ldr	r2, [pc, #328]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c9c:	4b50      	ldr	r3, [pc, #320]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	494d      	ldr	r1, [pc, #308]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d044      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d107      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cc2:	4b47      	ldr	r3, [pc, #284]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d119      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e07f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d107      	bne.n	8006cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ce2:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e06f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf2:	4b3b      	ldr	r3, [pc, #236]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e067      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d02:	4b37      	ldr	r3, [pc, #220]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f023 0203 	bic.w	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4934      	ldr	r1, [pc, #208]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d14:	f7fd fa7c 	bl	8004210 <HAL_GetTick>
 8006d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1a:	e00a      	b.n	8006d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d1c:	f7fd fa78 	bl	8004210 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e04f      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d32:	4b2b      	ldr	r3, [pc, #172]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f003 020c 	and.w	r2, r3, #12
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d1eb      	bne.n	8006d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d44:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 030f 	and.w	r3, r3, #15
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d20c      	bcs.n	8006d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d52:	4b22      	ldr	r3, [pc, #136]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <HAL_RCC_ClockConfig+0x1b8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e032      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d78:	4b19      	ldr	r3, [pc, #100]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4916      	ldr	r1, [pc, #88]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	490e      	ldr	r1, [pc, #56]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006daa:	f000 f855 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 8006dae:	4602      	mov	r2, r0
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	091b      	lsrs	r3, r3, #4
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	490a      	ldr	r1, [pc, #40]	; (8006de4 <HAL_RCC_ClockConfig+0x1c0>)
 8006dbc:	5ccb      	ldrb	r3, [r1, r3]
 8006dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <HAL_RCC_ClockConfig+0x1c8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fd f9dc 	bl	8004188 <HAL_InitTick>

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	40023c00 	.word	0x40023c00
 8006de0:	40023800 	.word	0x40023800
 8006de4:	0800aba4 	.word	0x0800aba4
 8006de8:	20000028 	.word	0x20000028
 8006dec:	20000054 	.word	0x20000054

08006df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006df4:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8006df6:	681b      	ldr	r3, [r3, #0]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20000028 	.word	0x20000028

08006e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e0c:	f7ff fff0 	bl	8006df0 <HAL_RCC_GetHCLKFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	0a9b      	lsrs	r3, r3, #10
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4903      	ldr	r1, [pc, #12]	; (8006e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	0800abb4 	.word	0x0800abb4

08006e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e34:	f7ff ffdc 	bl	8006df0 <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	0b5b      	lsrs	r3, r3, #13
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4903      	ldr	r1, [pc, #12]	; (8006e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40023800 	.word	0x40023800
 8006e54:	0800abb4 	.word	0x0800abb4

08006e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e5c:	b088      	sub	sp, #32
 8006e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e74:	4bce      	ldr	r3, [pc, #824]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 030c 	and.w	r3, r3, #12
 8006e7c:	2b0c      	cmp	r3, #12
 8006e7e:	f200 818d 	bhi.w	800719c <HAL_RCC_GetSysClockFreq+0x344>
 8006e82:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <HAL_RCC_GetSysClockFreq+0x30>)
 8006e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e88:	08006ebd 	.word	0x08006ebd
 8006e8c:	0800719d 	.word	0x0800719d
 8006e90:	0800719d 	.word	0x0800719d
 8006e94:	0800719d 	.word	0x0800719d
 8006e98:	08006ec3 	.word	0x08006ec3
 8006e9c:	0800719d 	.word	0x0800719d
 8006ea0:	0800719d 	.word	0x0800719d
 8006ea4:	0800719d 	.word	0x0800719d
 8006ea8:	08006ec9 	.word	0x08006ec9
 8006eac:	0800719d 	.word	0x0800719d
 8006eb0:	0800719d 	.word	0x0800719d
 8006eb4:	0800719d 	.word	0x0800719d
 8006eb8:	0800703d 	.word	0x0800703d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ebc:	4bbd      	ldr	r3, [pc, #756]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006ebe:	61bb      	str	r3, [r7, #24]
       break;
 8006ec0:	e16f      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ec2:	4bbd      	ldr	r3, [pc, #756]	; (80071b8 <HAL_RCC_GetSysClockFreq+0x360>)
 8006ec4:	61bb      	str	r3, [r7, #24]
      break;
 8006ec6:	e16c      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ec8:	4bb9      	ldr	r3, [pc, #740]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ed0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ed2:	4bb7      	ldr	r3, [pc, #732]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d053      	beq.n	8006f86 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ede:	4bb4      	ldr	r3, [pc, #720]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	099b      	lsrs	r3, r3, #6
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f04f 0300 	mov.w	r3, #0
 8006eea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006eee:	f04f 0100 	mov.w	r1, #0
 8006ef2:	ea02 0400 	and.w	r4, r2, r0
 8006ef6:	603c      	str	r4, [r7, #0]
 8006ef8:	400b      	ands	r3, r1
 8006efa:	607b      	str	r3, [r7, #4]
 8006efc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f00:	4620      	mov	r0, r4
 8006f02:	4629      	mov	r1, r5
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	014b      	lsls	r3, r1, #5
 8006f0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f12:	0142      	lsls	r2, r0, #5
 8006f14:	4610      	mov	r0, r2
 8006f16:	4619      	mov	r1, r3
 8006f18:	4623      	mov	r3, r4
 8006f1a:	1ac0      	subs	r0, r0, r3
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	eb61 0103 	sbc.w	r1, r1, r3
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	018b      	lsls	r3, r1, #6
 8006f2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f30:	0182      	lsls	r2, r0, #6
 8006f32:	1a12      	subs	r2, r2, r0
 8006f34:	eb63 0301 	sbc.w	r3, r3, r1
 8006f38:	f04f 0000 	mov.w	r0, #0
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	00d9      	lsls	r1, r3, #3
 8006f42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f46:	00d0      	lsls	r0, r2, #3
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	1852      	adds	r2, r2, r1
 8006f50:	4629      	mov	r1, r5
 8006f52:	eb43 0101 	adc.w	r1, r3, r1
 8006f56:	460b      	mov	r3, r1
 8006f58:	f04f 0000 	mov.w	r0, #0
 8006f5c:	f04f 0100 	mov.w	r1, #0
 8006f60:	0259      	lsls	r1, r3, #9
 8006f62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f66:	0250      	lsls	r0, r2, #9
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	461a      	mov	r2, r3
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	f7f9 fd90 	bl	8000a9c <__aeabi_uldivmod>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4613      	mov	r3, r2
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	e04c      	b.n	8007020 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f86:	4b8a      	ldr	r3, [pc, #552]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	099b      	lsrs	r3, r3, #6
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f96:	f04f 0100 	mov.w	r1, #0
 8006f9a:	ea02 0a00 	and.w	sl, r2, r0
 8006f9e:	ea03 0b01 	and.w	fp, r3, r1
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	f04f 0200 	mov.w	r2, #0
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	014b      	lsls	r3, r1, #5
 8006fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006fb4:	0142      	lsls	r2, r0, #5
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	ebb0 000a 	subs.w	r0, r0, sl
 8006fbe:	eb61 010b 	sbc.w	r1, r1, fp
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	018b      	lsls	r3, r1, #6
 8006fcc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fd0:	0182      	lsls	r2, r0, #6
 8006fd2:	1a12      	subs	r2, r2, r0
 8006fd4:	eb63 0301 	sbc.w	r3, r3, r1
 8006fd8:	f04f 0000 	mov.w	r0, #0
 8006fdc:	f04f 0100 	mov.w	r1, #0
 8006fe0:	00d9      	lsls	r1, r3, #3
 8006fe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fe6:	00d0      	lsls	r0, r2, #3
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	eb12 020a 	adds.w	r2, r2, sl
 8006ff0:	eb43 030b 	adc.w	r3, r3, fp
 8006ff4:	f04f 0000 	mov.w	r0, #0
 8006ff8:	f04f 0100 	mov.w	r1, #0
 8006ffc:	0299      	lsls	r1, r3, #10
 8006ffe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007002:	0290      	lsls	r0, r2, #10
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4610      	mov	r0, r2
 800700a:	4619      	mov	r1, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	461a      	mov	r2, r3
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	f7f9 fd42 	bl	8000a9c <__aeabi_uldivmod>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4613      	mov	r3, r2
 800701e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007020:	4b63      	ldr	r3, [pc, #396]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	0c1b      	lsrs	r3, r3, #16
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	3301      	adds	r3, #1
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	61bb      	str	r3, [r7, #24]
      break;
 800703a:	e0b2      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800703c:	4b5c      	ldr	r3, [pc, #368]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007044:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007046:	4b5a      	ldr	r3, [pc, #360]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d04d      	beq.n	80070ee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007052:	4b57      	ldr	r3, [pc, #348]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	461a      	mov	r2, r3
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007062:	f04f 0100 	mov.w	r1, #0
 8007066:	ea02 0800 	and.w	r8, r2, r0
 800706a:	ea03 0901 	and.w	r9, r3, r1
 800706e:	4640      	mov	r0, r8
 8007070:	4649      	mov	r1, r9
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	014b      	lsls	r3, r1, #5
 800707c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007080:	0142      	lsls	r2, r0, #5
 8007082:	4610      	mov	r0, r2
 8007084:	4619      	mov	r1, r3
 8007086:	ebb0 0008 	subs.w	r0, r0, r8
 800708a:	eb61 0109 	sbc.w	r1, r1, r9
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	f04f 0300 	mov.w	r3, #0
 8007096:	018b      	lsls	r3, r1, #6
 8007098:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800709c:	0182      	lsls	r2, r0, #6
 800709e:	1a12      	subs	r2, r2, r0
 80070a0:	eb63 0301 	sbc.w	r3, r3, r1
 80070a4:	f04f 0000 	mov.w	r0, #0
 80070a8:	f04f 0100 	mov.w	r1, #0
 80070ac:	00d9      	lsls	r1, r3, #3
 80070ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070b2:	00d0      	lsls	r0, r2, #3
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	eb12 0208 	adds.w	r2, r2, r8
 80070bc:	eb43 0309 	adc.w	r3, r3, r9
 80070c0:	f04f 0000 	mov.w	r0, #0
 80070c4:	f04f 0100 	mov.w	r1, #0
 80070c8:	0259      	lsls	r1, r3, #9
 80070ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80070ce:	0250      	lsls	r0, r2, #9
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4610      	mov	r0, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	461a      	mov	r2, r3
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	f7f9 fcdc 	bl	8000a9c <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4613      	mov	r3, r2
 80070ea:	61fb      	str	r3, [r7, #28]
 80070ec:	e04a      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ee:	4b30      	ldr	r3, [pc, #192]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	099b      	lsrs	r3, r3, #6
 80070f4:	461a      	mov	r2, r3
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070fe:	f04f 0100 	mov.w	r1, #0
 8007102:	ea02 0400 	and.w	r4, r2, r0
 8007106:	ea03 0501 	and.w	r5, r3, r1
 800710a:	4620      	mov	r0, r4
 800710c:	4629      	mov	r1, r5
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	014b      	lsls	r3, r1, #5
 8007118:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800711c:	0142      	lsls	r2, r0, #5
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	1b00      	subs	r0, r0, r4
 8007124:	eb61 0105 	sbc.w	r1, r1, r5
 8007128:	f04f 0200 	mov.w	r2, #0
 800712c:	f04f 0300 	mov.w	r3, #0
 8007130:	018b      	lsls	r3, r1, #6
 8007132:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007136:	0182      	lsls	r2, r0, #6
 8007138:	1a12      	subs	r2, r2, r0
 800713a:	eb63 0301 	sbc.w	r3, r3, r1
 800713e:	f04f 0000 	mov.w	r0, #0
 8007142:	f04f 0100 	mov.w	r1, #0
 8007146:	00d9      	lsls	r1, r3, #3
 8007148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800714c:	00d0      	lsls	r0, r2, #3
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	1912      	adds	r2, r2, r4
 8007154:	eb45 0303 	adc.w	r3, r5, r3
 8007158:	f04f 0000 	mov.w	r0, #0
 800715c:	f04f 0100 	mov.w	r1, #0
 8007160:	0299      	lsls	r1, r3, #10
 8007162:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007166:	0290      	lsls	r0, r2, #10
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4610      	mov	r0, r2
 800716e:	4619      	mov	r1, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	461a      	mov	r2, r3
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	f7f9 fc90 	bl	8000a9c <__aeabi_uldivmod>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4613      	mov	r3, r2
 8007182:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	0f1b      	lsrs	r3, r3, #28
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	61bb      	str	r3, [r7, #24]
      break;
 800719a:	e002      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800719e:	61bb      	str	r3, [r7, #24]
      break;
 80071a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071a2:	69bb      	ldr	r3, [r7, #24]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3720      	adds	r7, #32
 80071a8:	46bd      	mov	sp, r7
 80071aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ae:	bf00      	nop
 80071b0:	40023800 	.word	0x40023800
 80071b4:	00f42400 	.word	0x00f42400
 80071b8:	007a1200 	.word	0x007a1200

080071bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e28d      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8083 	beq.w	80072e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071dc:	4b94      	ldr	r3, [pc, #592]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 030c 	and.w	r3, r3, #12
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d019      	beq.n	800721c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071e8:	4b91      	ldr	r3, [pc, #580]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d106      	bne.n	8007202 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80071f4:	4b8e      	ldr	r3, [pc, #568]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007200:	d00c      	beq.n	800721c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007202:	4b8b      	ldr	r3, [pc, #556]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800720a:	2b0c      	cmp	r3, #12
 800720c:	d112      	bne.n	8007234 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800720e:	4b88      	ldr	r3, [pc, #544]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721a:	d10b      	bne.n	8007234 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800721c:	4b84      	ldr	r3, [pc, #528]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d05b      	beq.n	80072e0 <HAL_RCC_OscConfig+0x124>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d157      	bne.n	80072e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e25a      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723c:	d106      	bne.n	800724c <HAL_RCC_OscConfig+0x90>
 800723e:	4b7c      	ldr	r3, [pc, #496]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a7b      	ldr	r2, [pc, #492]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e01d      	b.n	8007288 <HAL_RCC_OscConfig+0xcc>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007254:	d10c      	bne.n	8007270 <HAL_RCC_OscConfig+0xb4>
 8007256:	4b76      	ldr	r3, [pc, #472]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a75      	ldr	r2, [pc, #468]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 800725c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	4b73      	ldr	r3, [pc, #460]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a72      	ldr	r2, [pc, #456]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	e00b      	b.n	8007288 <HAL_RCC_OscConfig+0xcc>
 8007270:	4b6f      	ldr	r3, [pc, #444]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a6e      	ldr	r2, [pc, #440]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	4b6c      	ldr	r3, [pc, #432]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a6b      	ldr	r2, [pc, #428]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d013      	beq.n	80072b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007290:	f7fc ffbe 	bl	8004210 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007298:	f7fc ffba 	bl	8004210 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	; 0x64
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e21f      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072aa:	4b61      	ldr	r3, [pc, #388]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0xdc>
 80072b6:	e014      	b.n	80072e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b8:	f7fc ffaa 	bl	8004210 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072c0:	f7fc ffa6 	bl	8004210 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b64      	cmp	r3, #100	; 0x64
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e20b      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072d2:	4b57      	ldr	r3, [pc, #348]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0x104>
 80072de:	e000      	b.n	80072e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d06f      	beq.n	80073ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80072ee:	4b50      	ldr	r3, [pc, #320]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 030c 	and.w	r3, r3, #12
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d017      	beq.n	800732a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80072fa:	4b4d      	ldr	r3, [pc, #308]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007302:	2b08      	cmp	r3, #8
 8007304:	d105      	bne.n	8007312 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007306:	4b4a      	ldr	r3, [pc, #296]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00b      	beq.n	800732a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007312:	4b47      	ldr	r3, [pc, #284]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800731a:	2b0c      	cmp	r3, #12
 800731c:	d11c      	bne.n	8007358 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800731e:	4b44      	ldr	r3, [pc, #272]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d116      	bne.n	8007358 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800732a:	4b41      	ldr	r3, [pc, #260]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d005      	beq.n	8007342 <HAL_RCC_OscConfig+0x186>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d001      	beq.n	8007342 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e1d3      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007342:	4b3b      	ldr	r3, [pc, #236]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	4937      	ldr	r1, [pc, #220]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007352:	4313      	orrs	r3, r2
 8007354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007356:	e03a      	b.n	80073ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d020      	beq.n	80073a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007360:	4b34      	ldr	r3, [pc, #208]	; (8007434 <HAL_RCC_OscConfig+0x278>)
 8007362:	2201      	movs	r2, #1
 8007364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007366:	f7fc ff53 	bl	8004210 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800736c:	e008      	b.n	8007380 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800736e:	f7fc ff4f 	bl	8004210 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e1b4      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007380:	4b2b      	ldr	r3, [pc, #172]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0f0      	beq.n	800736e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800738c:	4b28      	ldr	r3, [pc, #160]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	4925      	ldr	r1, [pc, #148]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 800739c:	4313      	orrs	r3, r2
 800739e:	600b      	str	r3, [r1, #0]
 80073a0:	e015      	b.n	80073ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <HAL_RCC_OscConfig+0x278>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a8:	f7fc ff32 	bl	8004210 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073b0:	f7fc ff2e 	bl	8004210 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e193      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073c2:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1f0      	bne.n	80073b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d036      	beq.n	8007448 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d016      	beq.n	8007410 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e2:	4b15      	ldr	r3, [pc, #84]	; (8007438 <HAL_RCC_OscConfig+0x27c>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e8:	f7fc ff12 	bl	8004210 <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073f0:	f7fc ff0e 	bl	8004210 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e173      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007402:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <HAL_RCC_OscConfig+0x274>)
 8007404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0x234>
 800740e:	e01b      	b.n	8007448 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <HAL_RCC_OscConfig+0x27c>)
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007416:	f7fc fefb 	bl	8004210 <HAL_GetTick>
 800741a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800741c:	e00e      	b.n	800743c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800741e:	f7fc fef7 	bl	8004210 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d907      	bls.n	800743c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e15c      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
 8007430:	40023800 	.word	0x40023800
 8007434:	42470000 	.word	0x42470000
 8007438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800743c:	4b8a      	ldr	r3, [pc, #552]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800743e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1ea      	bne.n	800741e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8097 	beq.w	8007584 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800745a:	4b83      	ldr	r3, [pc, #524]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10f      	bne.n	8007486 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007466:	2300      	movs	r3, #0
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	4b7f      	ldr	r3, [pc, #508]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	4a7e      	ldr	r2, [pc, #504]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 8007470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007474:	6413      	str	r3, [r2, #64]	; 0x40
 8007476:	4b7c      	ldr	r3, [pc, #496]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747e:	60bb      	str	r3, [r7, #8]
 8007480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007482:	2301      	movs	r3, #1
 8007484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007486:	4b79      	ldr	r3, [pc, #484]	; (800766c <HAL_RCC_OscConfig+0x4b0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748e:	2b00      	cmp	r3, #0
 8007490:	d118      	bne.n	80074c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007492:	4b76      	ldr	r3, [pc, #472]	; (800766c <HAL_RCC_OscConfig+0x4b0>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a75      	ldr	r2, [pc, #468]	; (800766c <HAL_RCC_OscConfig+0x4b0>)
 8007498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800749c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800749e:	f7fc feb7 	bl	8004210 <HAL_GetTick>
 80074a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a4:	e008      	b.n	80074b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a6:	f7fc feb3 	bl	8004210 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d901      	bls.n	80074b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e118      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074b8:	4b6c      	ldr	r3, [pc, #432]	; (800766c <HAL_RCC_OscConfig+0x4b0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0f0      	beq.n	80074a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d106      	bne.n	80074da <HAL_RCC_OscConfig+0x31e>
 80074cc:	4b66      	ldr	r3, [pc, #408]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80074ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d0:	4a65      	ldr	r2, [pc, #404]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80074d2:	f043 0301 	orr.w	r3, r3, #1
 80074d6:	6713      	str	r3, [r2, #112]	; 0x70
 80074d8:	e01c      	b.n	8007514 <HAL_RCC_OscConfig+0x358>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d10c      	bne.n	80074fc <HAL_RCC_OscConfig+0x340>
 80074e2:	4b61      	ldr	r3, [pc, #388]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80074e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e6:	4a60      	ldr	r2, [pc, #384]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80074e8:	f043 0304 	orr.w	r3, r3, #4
 80074ec:	6713      	str	r3, [r2, #112]	; 0x70
 80074ee:	4b5e      	ldr	r3, [pc, #376]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	4a5d      	ldr	r2, [pc, #372]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	6713      	str	r3, [r2, #112]	; 0x70
 80074fa:	e00b      	b.n	8007514 <HAL_RCC_OscConfig+0x358>
 80074fc:	4b5a      	ldr	r3, [pc, #360]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80074fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007500:	4a59      	ldr	r2, [pc, #356]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 8007502:	f023 0301 	bic.w	r3, r3, #1
 8007506:	6713      	str	r3, [r2, #112]	; 0x70
 8007508:	4b57      	ldr	r3, [pc, #348]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800750a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750c:	4a56      	ldr	r2, [pc, #344]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800750e:	f023 0304 	bic.w	r3, r3, #4
 8007512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d015      	beq.n	8007548 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751c:	f7fc fe78 	bl	8004210 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007522:	e00a      	b.n	800753a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007524:	f7fc fe74 	bl	8004210 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007532:	4293      	cmp	r3, r2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e0d7      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800753a:	4b4b      	ldr	r3, [pc, #300]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0ee      	beq.n	8007524 <HAL_RCC_OscConfig+0x368>
 8007546:	e014      	b.n	8007572 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007548:	f7fc fe62 	bl	8004210 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800754e:	e00a      	b.n	8007566 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007550:	f7fc fe5e 	bl	8004210 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f241 3288 	movw	r2, #5000	; 0x1388
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e0c1      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007566:	4b40      	ldr	r3, [pc, #256]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 8007568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756a:	f003 0302 	and.w	r3, r3, #2
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1ee      	bne.n	8007550 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007572:	7dfb      	ldrb	r3, [r7, #23]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d105      	bne.n	8007584 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007578:	4b3b      	ldr	r3, [pc, #236]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	4a3a      	ldr	r2, [pc, #232]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 800757e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 80ad 	beq.w	80076e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800758e:	4b36      	ldr	r3, [pc, #216]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 030c 	and.w	r3, r3, #12
 8007596:	2b08      	cmp	r3, #8
 8007598:	d060      	beq.n	800765c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d145      	bne.n	800762e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a2:	4b33      	ldr	r3, [pc, #204]	; (8007670 <HAL_RCC_OscConfig+0x4b4>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a8:	f7fc fe32 	bl	8004210 <HAL_GetTick>
 80075ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ae:	e008      	b.n	80075c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075b0:	f7fc fe2e 	bl	8004210 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d901      	bls.n	80075c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e093      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075c2:	4b29      	ldr	r3, [pc, #164]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f0      	bne.n	80075b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	019b      	lsls	r3, r3, #6
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	085b      	lsrs	r3, r3, #1
 80075e6:	3b01      	subs	r3, #1
 80075e8:	041b      	lsls	r3, r3, #16
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	061b      	lsls	r3, r3, #24
 80075f2:	431a      	orrs	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f8:	071b      	lsls	r3, r3, #28
 80075fa:	491b      	ldr	r1, [pc, #108]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007600:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <HAL_RCC_OscConfig+0x4b4>)
 8007602:	2201      	movs	r2, #1
 8007604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007606:	f7fc fe03 	bl	8004210 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800760e:	f7fc fdff 	bl	8004210 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e064      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007620:	4b11      	ldr	r3, [pc, #68]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0f0      	beq.n	800760e <HAL_RCC_OscConfig+0x452>
 800762c:	e05c      	b.n	80076e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762e:	4b10      	ldr	r3, [pc, #64]	; (8007670 <HAL_RCC_OscConfig+0x4b4>)
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fc fdec 	bl	8004210 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800763c:	f7fc fde8 	bl	8004210 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e04d      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800764e:	4b06      	ldr	r3, [pc, #24]	; (8007668 <HAL_RCC_OscConfig+0x4ac>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x480>
 800765a:	e045      	b.n	80076e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d107      	bne.n	8007674 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e040      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
 8007668:	40023800 	.word	0x40023800
 800766c:	40007000 	.word	0x40007000
 8007670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007674:	4b1f      	ldr	r3, [pc, #124]	; (80076f4 <HAL_RCC_OscConfig+0x538>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d030      	beq.n	80076e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800768c:	429a      	cmp	r2, r3
 800768e:	d129      	bne.n	80076e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800769a:	429a      	cmp	r2, r3
 800769c:	d122      	bne.n	80076e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80076a4:	4013      	ands	r3, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80076aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d119      	bne.n	80076e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	085b      	lsrs	r3, r3, #1
 80076bc:	3b01      	subs	r3, #1
 80076be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d10f      	bne.n	80076e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d107      	bne.n	80076e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40023800 	.word	0x40023800

080076f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d101      	bne.n	800770a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e041      	b.n	800778e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d106      	bne.n	8007724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7fb f8da 	bl	80028d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f000 fe56 	bl	80083e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e041      	b.n	800782c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f839 	bl	8007834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3304      	adds	r3, #4
 80077d2:	4619      	mov	r1, r3
 80077d4:	4610      	mov	r0, r2
 80077d6:	f000 fe07 	bl	80083e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <HAL_TIM_PWM_Start+0x24>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b01      	cmp	r3, #1
 8007862:	bf14      	ite	ne
 8007864:	2301      	movne	r3, #1
 8007866:	2300      	moveq	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	e022      	b.n	80078b2 <HAL_TIM_PWM_Start+0x6a>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b04      	cmp	r3, #4
 8007870:	d109      	bne.n	8007886 <HAL_TIM_PWM_Start+0x3e>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b01      	cmp	r3, #1
 800787c:	bf14      	ite	ne
 800787e:	2301      	movne	r3, #1
 8007880:	2300      	moveq	r3, #0
 8007882:	b2db      	uxtb	r3, r3
 8007884:	e015      	b.n	80078b2 <HAL_TIM_PWM_Start+0x6a>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b08      	cmp	r3, #8
 800788a:	d109      	bne.n	80078a0 <HAL_TIM_PWM_Start+0x58>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	bf14      	ite	ne
 8007898:	2301      	movne	r3, #1
 800789a:	2300      	moveq	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	e008      	b.n	80078b2 <HAL_TIM_PWM_Start+0x6a>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	bf14      	ite	ne
 80078ac:	2301      	movne	r3, #1
 80078ae:	2300      	moveq	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e07c      	b.n	80079b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d104      	bne.n	80078ca <HAL_TIM_PWM_Start+0x82>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078c8:	e013      	b.n	80078f2 <HAL_TIM_PWM_Start+0xaa>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d104      	bne.n	80078da <HAL_TIM_PWM_Start+0x92>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078d8:	e00b      	b.n	80078f2 <HAL_TIM_PWM_Start+0xaa>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d104      	bne.n	80078ea <HAL_TIM_PWM_Start+0xa2>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e8:	e003      	b.n	80078f2 <HAL_TIM_PWM_Start+0xaa>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2202      	movs	r2, #2
 80078ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2201      	movs	r2, #1
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f001 f85e 	bl	80089bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a2d      	ldr	r2, [pc, #180]	; (80079bc <HAL_TIM_PWM_Start+0x174>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <HAL_TIM_PWM_Start+0xcc>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2c      	ldr	r2, [pc, #176]	; (80079c0 <HAL_TIM_PWM_Start+0x178>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d101      	bne.n	8007918 <HAL_TIM_PWM_Start+0xd0>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <HAL_TIM_PWM_Start+0xd2>
 8007918:	2300      	movs	r3, #0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800792c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a22      	ldr	r2, [pc, #136]	; (80079bc <HAL_TIM_PWM_Start+0x174>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d022      	beq.n	800797e <HAL_TIM_PWM_Start+0x136>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007940:	d01d      	beq.n	800797e <HAL_TIM_PWM_Start+0x136>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <HAL_TIM_PWM_Start+0x17c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d018      	beq.n	800797e <HAL_TIM_PWM_Start+0x136>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a1d      	ldr	r2, [pc, #116]	; (80079c8 <HAL_TIM_PWM_Start+0x180>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d013      	beq.n	800797e <HAL_TIM_PWM_Start+0x136>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <HAL_TIM_PWM_Start+0x184>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00e      	beq.n	800797e <HAL_TIM_PWM_Start+0x136>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a16      	ldr	r2, [pc, #88]	; (80079c0 <HAL_TIM_PWM_Start+0x178>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d009      	beq.n	800797e <HAL_TIM_PWM_Start+0x136>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a18      	ldr	r2, [pc, #96]	; (80079d0 <HAL_TIM_PWM_Start+0x188>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d004      	beq.n	800797e <HAL_TIM_PWM_Start+0x136>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a16      	ldr	r2, [pc, #88]	; (80079d4 <HAL_TIM_PWM_Start+0x18c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d111      	bne.n	80079a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b06      	cmp	r3, #6
 800798e:	d010      	beq.n	80079b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a0:	e007      	b.n	80079b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0201 	orr.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40010000 	.word	0x40010000
 80079c0:	40010400 	.word	0x40010400
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40001800 	.word	0x40001800

080079d8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d109      	bne.n	8007a04 <HAL_TIM_PWM_Start_DMA+0x2c>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	bf0c      	ite	eq
 80079fc:	2301      	moveq	r3, #1
 80079fe:	2300      	movne	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	e022      	b.n	8007a4a <HAL_TIM_PWM_Start_DMA+0x72>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d109      	bne.n	8007a1e <HAL_TIM_PWM_Start_DMA+0x46>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	bf0c      	ite	eq
 8007a16:	2301      	moveq	r3, #1
 8007a18:	2300      	movne	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	e015      	b.n	8007a4a <HAL_TIM_PWM_Start_DMA+0x72>
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d109      	bne.n	8007a38 <HAL_TIM_PWM_Start_DMA+0x60>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	bf0c      	ite	eq
 8007a30:	2301      	moveq	r3, #1
 8007a32:	2300      	movne	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e008      	b.n	8007a4a <HAL_TIM_PWM_Start_DMA+0x72>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	bf0c      	ite	eq
 8007a44:	2301      	moveq	r3, #1
 8007a46:	2300      	movne	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e171      	b.n	8007d36 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d109      	bne.n	8007a6c <HAL_TIM_PWM_Start_DMA+0x94>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	bf0c      	ite	eq
 8007a64:	2301      	moveq	r3, #1
 8007a66:	2300      	movne	r3, #0
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	e022      	b.n	8007ab2 <HAL_TIM_PWM_Start_DMA+0xda>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d109      	bne.n	8007a86 <HAL_TIM_PWM_Start_DMA+0xae>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	bf0c      	ite	eq
 8007a7e:	2301      	moveq	r3, #1
 8007a80:	2300      	movne	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	e015      	b.n	8007ab2 <HAL_TIM_PWM_Start_DMA+0xda>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d109      	bne.n	8007aa0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	bf0c      	ite	eq
 8007a98:	2301      	moveq	r3, #1
 8007a9a:	2300      	movne	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	e008      	b.n	8007ab2 <HAL_TIM_PWM_Start_DMA+0xda>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	bf0c      	ite	eq
 8007aac:	2301      	moveq	r3, #1
 8007aae:	2300      	movne	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d024      	beq.n	8007b00 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_PWM_Start_DMA+0xee>
 8007abc:	887b      	ldrh	r3, [r7, #2]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e137      	b.n	8007d36 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ad4:	e016      	b.n	8007b04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ae4:	e00e      	b.n	8007b04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_PWM_Start_DMA+0x11e>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007af4:	e006      	b.n	8007b04 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2202      	movs	r2, #2
 8007afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007afe:	e001      	b.n	8007b04 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e118      	b.n	8007d36 <HAL_TIM_PWM_Start_DMA+0x35e>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b0c      	cmp	r3, #12
 8007b08:	f200 80ae 	bhi.w	8007c68 <HAL_TIM_PWM_Start_DMA+0x290>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b49 	.word	0x08007b49
 8007b18:	08007c69 	.word	0x08007c69
 8007b1c:	08007c69 	.word	0x08007c69
 8007b20:	08007c69 	.word	0x08007c69
 8007b24:	08007b91 	.word	0x08007b91
 8007b28:	08007c69 	.word	0x08007c69
 8007b2c:	08007c69 	.word	0x08007c69
 8007b30:	08007c69 	.word	0x08007c69
 8007b34:	08007bd9 	.word	0x08007bd9
 8007b38:	08007c69 	.word	0x08007c69
 8007b3c:	08007c69 	.word	0x08007c69
 8007b40:	08007c69 	.word	0x08007c69
 8007b44:	08007c21 	.word	0x08007c21
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	4a7c      	ldr	r2, [pc, #496]	; (8007d40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	4a7b      	ldr	r2, [pc, #492]	; (8007d44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	4a7a      	ldr	r2, [pc, #488]	; (8007d48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007b5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3334      	adds	r3, #52	; 0x34
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	887b      	ldrh	r3, [r7, #2]
 8007b70:	f7fc fd1a 	bl	80045a8 <HAL_DMA_Start_IT>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e0db      	b.n	8007d36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b8c:	60da      	str	r2, [r3, #12]
      break;
 8007b8e:	e06e      	b.n	8007c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b94:	4a6a      	ldr	r2, [pc, #424]	; (8007d40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007b96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	4a69      	ldr	r2, [pc, #420]	; (8007d44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007b9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	4a68      	ldr	r2, [pc, #416]	; (8007d48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007ba6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3338      	adds	r3, #56	; 0x38
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	887b      	ldrh	r3, [r7, #2]
 8007bb8:	f7fc fcf6 	bl	80045a8 <HAL_DMA_Start_IT>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e0b7      	b.n	8007d36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bd4:	60da      	str	r2, [r3, #12]
      break;
 8007bd6:	e04a      	b.n	8007c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4a58      	ldr	r2, [pc, #352]	; (8007d40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007bde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be4:	4a57      	ldr	r2, [pc, #348]	; (8007d44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a56      	ldr	r2, [pc, #344]	; (8007d48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007bee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	333c      	adds	r3, #60	; 0x3c
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	887b      	ldrh	r3, [r7, #2]
 8007c00:	f7fc fcd2 	bl	80045a8 <HAL_DMA_Start_IT>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e093      	b.n	8007d36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c1c:	60da      	str	r2, [r3, #12]
      break;
 8007c1e:	e026      	b.n	8007c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	4a46      	ldr	r2, [pc, #280]	; (8007d40 <HAL_TIM_PWM_Start_DMA+0x368>)
 8007c26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2c:	4a45      	ldr	r2, [pc, #276]	; (8007d44 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8007c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c34:	4a44      	ldr	r2, [pc, #272]	; (8007d48 <HAL_TIM_PWM_Start_DMA+0x370>)
 8007c36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3340      	adds	r3, #64	; 0x40
 8007c44:	461a      	mov	r2, r3
 8007c46:	887b      	ldrh	r3, [r7, #2]
 8007c48:	f7fc fcae 	bl	80045a8 <HAL_DMA_Start_IT>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e06f      	b.n	8007d36 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c64:	60da      	str	r2, [r3, #12]
      break;
 8007c66:	e002      	b.n	8007c6e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d15f      	bne.n	8007d34 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fe9d 	bl	80089bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a31      	ldr	r2, [pc, #196]	; (8007d4c <HAL_TIM_PWM_Start_DMA+0x374>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_TIM_PWM_Start_DMA+0x2be>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2f      	ldr	r2, [pc, #188]	; (8007d50 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d101      	bne.n	8007c9a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <HAL_TIM_PWM_Start_DMA+0x374>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d022      	beq.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x328>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc2:	d01d      	beq.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x328>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a22      	ldr	r2, [pc, #136]	; (8007d54 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d018      	beq.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x328>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a21      	ldr	r2, [pc, #132]	; (8007d58 <HAL_TIM_PWM_Start_DMA+0x380>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d013      	beq.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x328>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <HAL_TIM_PWM_Start_DMA+0x384>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00e      	beq.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x328>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a1a      	ldr	r2, [pc, #104]	; (8007d50 <HAL_TIM_PWM_Start_DMA+0x378>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d009      	beq.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x328>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1b      	ldr	r2, [pc, #108]	; (8007d60 <HAL_TIM_PWM_Start_DMA+0x388>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d004      	beq.n	8007d00 <HAL_TIM_PWM_Start_DMA+0x328>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1a      	ldr	r2, [pc, #104]	; (8007d64 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d111      	bne.n	8007d24 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b06      	cmp	r3, #6
 8007d10:	d010      	beq.n	8007d34 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0201 	orr.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d22:	e007      	b.n	8007d34 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0201 	orr.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	080082d9 	.word	0x080082d9
 8007d44:	08008381 	.word	0x08008381
 8007d48:	08008247 	.word	0x08008247
 8007d4c:	40010000 	.word	0x40010000
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40001800 	.word	0x40001800

08007d68 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b0c      	cmp	r3, #12
 8007d7a:	d855      	bhi.n	8007e28 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007db9 	.word	0x08007db9
 8007d88:	08007e29 	.word	0x08007e29
 8007d8c:	08007e29 	.word	0x08007e29
 8007d90:	08007e29 	.word	0x08007e29
 8007d94:	08007dd5 	.word	0x08007dd5
 8007d98:	08007e29 	.word	0x08007e29
 8007d9c:	08007e29 	.word	0x08007e29
 8007da0:	08007e29 	.word	0x08007e29
 8007da4:	08007df1 	.word	0x08007df1
 8007da8:	08007e29 	.word	0x08007e29
 8007dac:	08007e29 	.word	0x08007e29
 8007db0:	08007e29 	.word	0x08007e29
 8007db4:	08007e0d 	.word	0x08007e0d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007dc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fc fcb3 	bl	8004738 <HAL_DMA_Abort_IT>
      break;
 8007dd2:	e02c      	b.n	8007e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007de2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fc fca5 	bl	8004738 <HAL_DMA_Abort_IT>
      break;
 8007dee:	e01e      	b.n	8007e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fc fc97 	bl	8004738 <HAL_DMA_Abort_IT>
      break;
 8007e0a:	e010      	b.n	8007e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fc fc89 	bl	8004738 <HAL_DMA_Abort_IT>
      break;
 8007e26:	e002      	b.n	8007e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d161      	bne.n	8007ef8 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fdbd 	bl	80089bc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2f      	ldr	r2, [pc, #188]	; (8007f04 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_TIM_PWM_Stop_DMA+0xee>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a2d      	ldr	r2, [pc, #180]	; (8007f08 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d101      	bne.n	8007e5a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d017      	beq.n	8007e90 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10f      	bne.n	8007e90 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a1a      	ldr	r2, [r3, #32]
 8007e76:	f240 4344 	movw	r3, #1092	; 0x444
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d107      	bne.n	8007e90 <HAL_TIM_PWM_Stop_DMA+0x128>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6a1a      	ldr	r2, [r3, #32]
 8007e96:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10f      	bne.n	8007ec0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6a1a      	ldr	r2, [r3, #32]
 8007ea6:	f240 4344 	movw	r3, #1092	; 0x444
 8007eaa:	4013      	ands	r3, r2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0201 	bic.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <HAL_TIM_PWM_Stop_DMA+0x168>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ece:	e013      	b.n	8007ef8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d104      	bne.n	8007ee0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ede:	e00b      	b.n	8007ef8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d104      	bne.n	8007ef0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007eee:	e003      	b.n	8007ef8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40010000 	.word	0x40010000
 8007f08:	40010400 	.word	0x40010400

08007f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e0ae      	b.n	8008088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b0c      	cmp	r3, #12
 8007f36:	f200 809f 	bhi.w	8008078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f3a:	a201      	add	r2, pc, #4	; (adr r2, 8007f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f40:	08007f75 	.word	0x08007f75
 8007f44:	08008079 	.word	0x08008079
 8007f48:	08008079 	.word	0x08008079
 8007f4c:	08008079 	.word	0x08008079
 8007f50:	08007fb5 	.word	0x08007fb5
 8007f54:	08008079 	.word	0x08008079
 8007f58:	08008079 	.word	0x08008079
 8007f5c:	08008079 	.word	0x08008079
 8007f60:	08007ff7 	.word	0x08007ff7
 8007f64:	08008079 	.word	0x08008079
 8007f68:	08008079 	.word	0x08008079
 8007f6c:	08008079 	.word	0x08008079
 8007f70:	08008037 	.word	0x08008037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fad4 	bl	8008528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f042 0208 	orr.w	r2, r2, #8
 8007f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0204 	bic.w	r2, r2, #4
 8007f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6999      	ldr	r1, [r3, #24]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	619a      	str	r2, [r3, #24]
      break;
 8007fb2:	e064      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fb24 	bl	8008608 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699a      	ldr	r2, [r3, #24]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6999      	ldr	r1, [r3, #24]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	021a      	lsls	r2, r3, #8
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	619a      	str	r2, [r3, #24]
      break;
 8007ff4:	e043      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fb79 	bl	80086f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69da      	ldr	r2, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0208 	orr.w	r2, r2, #8
 8008010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0204 	bic.w	r2, r2, #4
 8008020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69d9      	ldr	r1, [r3, #28]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	691a      	ldr	r2, [r3, #16]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	61da      	str	r2, [r3, #28]
      break;
 8008034:	e023      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 fbcd 	bl	80087dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	69d9      	ldr	r1, [r3, #28]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	021a      	lsls	r2, r3, #8
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	61da      	str	r2, [r3, #28]
      break;
 8008076:	e002      	b.n	800807e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75fb      	strb	r3, [r7, #23]
      break;
 800807c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <HAL_TIM_ConfigClockSource+0x1c>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e0b4      	b.n	8008216 <HAL_TIM_ConfigClockSource+0x186>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e4:	d03e      	beq.n	8008164 <HAL_TIM_ConfigClockSource+0xd4>
 80080e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ea:	f200 8087 	bhi.w	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 80080ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080f2:	f000 8086 	beq.w	8008202 <HAL_TIM_ConfigClockSource+0x172>
 80080f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080fa:	d87f      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b70      	cmp	r3, #112	; 0x70
 80080fe:	d01a      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0xa6>
 8008100:	2b70      	cmp	r3, #112	; 0x70
 8008102:	d87b      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b60      	cmp	r3, #96	; 0x60
 8008106:	d050      	beq.n	80081aa <HAL_TIM_ConfigClockSource+0x11a>
 8008108:	2b60      	cmp	r3, #96	; 0x60
 800810a:	d877      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 800810c:	2b50      	cmp	r3, #80	; 0x50
 800810e:	d03c      	beq.n	800818a <HAL_TIM_ConfigClockSource+0xfa>
 8008110:	2b50      	cmp	r3, #80	; 0x50
 8008112:	d873      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	d058      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x13a>
 8008118:	2b40      	cmp	r3, #64	; 0x40
 800811a:	d86f      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 800811c:	2b30      	cmp	r3, #48	; 0x30
 800811e:	d064      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008120:	2b30      	cmp	r3, #48	; 0x30
 8008122:	d86b      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 8008124:	2b20      	cmp	r3, #32
 8008126:	d060      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008128:	2b20      	cmp	r3, #32
 800812a:	d867      	bhi.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d05c      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008130:	2b10      	cmp	r3, #16
 8008132:	d05a      	beq.n	80081ea <HAL_TIM_ConfigClockSource+0x15a>
 8008134:	e062      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6899      	ldr	r1, [r3, #8]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f000 fc19 	bl	800897c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	609a      	str	r2, [r3, #8]
      break;
 8008162:	e04f      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	6899      	ldr	r1, [r3, #8]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685a      	ldr	r2, [r3, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f000 fc02 	bl	800897c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008186:	609a      	str	r2, [r3, #8]
      break;
 8008188:	e03c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6859      	ldr	r1, [r3, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	461a      	mov	r2, r3
 8008198:	f000 fb76 	bl	8008888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2150      	movs	r1, #80	; 0x50
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fbcf 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80081a8:	e02c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f000 fb95 	bl	80088e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2160      	movs	r1, #96	; 0x60
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fbbf 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80081c8:	e01c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6859      	ldr	r1, [r3, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	461a      	mov	r2, r3
 80081d8:	f000 fb56 	bl	8008888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2140      	movs	r1, #64	; 0x40
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fbaf 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80081e8:	e00c      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f000 fba6 	bl	8008946 <TIM_ITRx_SetConfig>
      break;
 80081fa:	e003      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008200:	e000      	b.n	8008204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008214:	7bfb      	ldrb	r3, [r7, #15]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800821e:	b480      	push	{r7}
 8008220:	b083      	sub	sp, #12
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	429a      	cmp	r2, r3
 800825c:	d107      	bne.n	800826e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800826c:	e02a      	b.n	80082c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	429a      	cmp	r2, r3
 8008276:	d107      	bne.n	8008288 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2202      	movs	r2, #2
 800827c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008286:	e01d      	b.n	80082c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	429a      	cmp	r2, r3
 8008290:	d107      	bne.n	80082a2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2204      	movs	r2, #4
 8008296:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082a0:	e010      	b.n	80082c4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d107      	bne.n	80082bc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2208      	movs	r2, #8
 80082b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ba:	e003      	b.n	80082c4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff ffb4 	bl	8008232 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	771a      	strb	r2, [r3, #28]
}
 80082d0:	bf00      	nop
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d10b      	bne.n	8008308 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2201      	movs	r2, #1
 80082f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d136      	bne.n	800836c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008306:	e031      	b.n	800836c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	429a      	cmp	r2, r3
 8008310:	d10b      	bne.n	800832a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2202      	movs	r2, #2
 8008316:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d125      	bne.n	800836c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008328:	e020      	b.n	800836c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d10b      	bne.n	800834c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2204      	movs	r2, #4
 8008338:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d114      	bne.n	800836c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800834a:	e00f      	b.n	800836c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	429a      	cmp	r2, r3
 8008354:	d10a      	bne.n	800836c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2208      	movs	r2, #8
 800835a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d103      	bne.n	800836c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7fa f9bd 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	771a      	strb	r2, [r3, #28]
}
 8008378:	bf00      	nop
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	429a      	cmp	r2, r3
 8008396:	d103      	bne.n	80083a0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	771a      	strb	r2, [r3, #28]
 800839e:	e019      	b.n	80083d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d103      	bne.n	80083b2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2202      	movs	r2, #2
 80083ae:	771a      	strb	r2, [r3, #28]
 80083b0:	e010      	b.n	80083d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d103      	bne.n	80083c4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2204      	movs	r2, #4
 80083c0:	771a      	strb	r2, [r3, #28]
 80083c2:	e007      	b.n	80083d4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d102      	bne.n	80083d4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2208      	movs	r2, #8
 80083d2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f7ff ff22 	bl	800821e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
}
 80083e0:	bf00      	nop
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a40      	ldr	r2, [pc, #256]	; (80084fc <TIM_Base_SetConfig+0x114>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d013      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008406:	d00f      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a3d      	ldr	r2, [pc, #244]	; (8008500 <TIM_Base_SetConfig+0x118>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a3c      	ldr	r2, [pc, #240]	; (8008504 <TIM_Base_SetConfig+0x11c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a3b      	ldr	r2, [pc, #236]	; (8008508 <TIM_Base_SetConfig+0x120>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_Base_SetConfig+0x40>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a3a      	ldr	r2, [pc, #232]	; (800850c <TIM_Base_SetConfig+0x124>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d108      	bne.n	800843a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2f      	ldr	r2, [pc, #188]	; (80084fc <TIM_Base_SetConfig+0x114>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d02b      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008448:	d027      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a2c      	ldr	r2, [pc, #176]	; (8008500 <TIM_Base_SetConfig+0x118>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d023      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a2b      	ldr	r2, [pc, #172]	; (8008504 <TIM_Base_SetConfig+0x11c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d01f      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a2a      	ldr	r2, [pc, #168]	; (8008508 <TIM_Base_SetConfig+0x120>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d01b      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4a29      	ldr	r2, [pc, #164]	; (800850c <TIM_Base_SetConfig+0x124>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d017      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4a28      	ldr	r2, [pc, #160]	; (8008510 <TIM_Base_SetConfig+0x128>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d013      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a27      	ldr	r2, [pc, #156]	; (8008514 <TIM_Base_SetConfig+0x12c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00f      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a26      	ldr	r2, [pc, #152]	; (8008518 <TIM_Base_SetConfig+0x130>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d00b      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a25      	ldr	r2, [pc, #148]	; (800851c <TIM_Base_SetConfig+0x134>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d007      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a24      	ldr	r2, [pc, #144]	; (8008520 <TIM_Base_SetConfig+0x138>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d003      	beq.n	800849a <TIM_Base_SetConfig+0xb2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a23      	ldr	r2, [pc, #140]	; (8008524 <TIM_Base_SetConfig+0x13c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d108      	bne.n	80084ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <TIM_Base_SetConfig+0x114>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d003      	beq.n	80084e0 <TIM_Base_SetConfig+0xf8>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a0c      	ldr	r2, [pc, #48]	; (800850c <TIM_Base_SetConfig+0x124>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d103      	bne.n	80084e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	691a      	ldr	r2, [r3, #16]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	615a      	str	r2, [r3, #20]
}
 80084ee:	bf00      	nop
 80084f0:	3714      	adds	r7, #20
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40000400 	.word	0x40000400
 8008504:	40000800 	.word	0x40000800
 8008508:	40000c00 	.word	0x40000c00
 800850c:	40010400 	.word	0x40010400
 8008510:	40014000 	.word	0x40014000
 8008514:	40014400 	.word	0x40014400
 8008518:	40014800 	.word	0x40014800
 800851c:	40001800 	.word	0x40001800
 8008520:	40001c00 	.word	0x40001c00
 8008524:	40002000 	.word	0x40002000

08008528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	f023 0201 	bic.w	r2, r3, #1
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 0302 	bic.w	r3, r3, #2
 8008570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a20      	ldr	r2, [pc, #128]	; (8008600 <TIM_OC1_SetConfig+0xd8>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_OC1_SetConfig+0x64>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a1f      	ldr	r2, [pc, #124]	; (8008604 <TIM_OC1_SetConfig+0xdc>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d10c      	bne.n	80085a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f023 0308 	bic.w	r3, r3, #8
 8008592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f023 0304 	bic.w	r3, r3, #4
 80085a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a15      	ldr	r2, [pc, #84]	; (8008600 <TIM_OC1_SetConfig+0xd8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d003      	beq.n	80085b6 <TIM_OC1_SetConfig+0x8e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a14      	ldr	r2, [pc, #80]	; (8008604 <TIM_OC1_SetConfig+0xdc>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d111      	bne.n	80085da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	621a      	str	r2, [r3, #32]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40010000 	.word	0x40010000
 8008604:	40010400 	.word	0x40010400

08008608 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	f023 0210 	bic.w	r2, r3, #16
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800863e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	021b      	lsls	r3, r3, #8
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f023 0320 	bic.w	r3, r3, #32
 8008652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a22      	ldr	r2, [pc, #136]	; (80086ec <TIM_OC2_SetConfig+0xe4>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d003      	beq.n	8008670 <TIM_OC2_SetConfig+0x68>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a21      	ldr	r2, [pc, #132]	; (80086f0 <TIM_OC2_SetConfig+0xe8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d10d      	bne.n	800868c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a17      	ldr	r2, [pc, #92]	; (80086ec <TIM_OC2_SetConfig+0xe4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d003      	beq.n	800869c <TIM_OC2_SetConfig+0x94>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a16      	ldr	r2, [pc, #88]	; (80086f0 <TIM_OC2_SetConfig+0xe8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d113      	bne.n	80086c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40010400 	.word	0x40010400

080086f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4313      	orrs	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800873c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	021b      	lsls	r3, r3, #8
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	4313      	orrs	r3, r2
 8008748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a21      	ldr	r2, [pc, #132]	; (80087d4 <TIM_OC3_SetConfig+0xe0>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d003      	beq.n	800875a <TIM_OC3_SetConfig+0x66>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <TIM_OC3_SetConfig+0xe4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d10d      	bne.n	8008776 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	021b      	lsls	r3, r3, #8
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a16      	ldr	r2, [pc, #88]	; (80087d4 <TIM_OC3_SetConfig+0xe0>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d003      	beq.n	8008786 <TIM_OC3_SetConfig+0x92>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <TIM_OC3_SetConfig+0xe4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d113      	bne.n	80087ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800878c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	4313      	orrs	r3, r2
 80087a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	621a      	str	r2, [r3, #32]
}
 80087c8:	bf00      	nop
 80087ca:	371c      	adds	r7, #28
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400

080087dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800880a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	021b      	lsls	r3, r3, #8
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	031b      	lsls	r3, r3, #12
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	4313      	orrs	r3, r2
 8008832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a12      	ldr	r2, [pc, #72]	; (8008880 <TIM_OC4_SetConfig+0xa4>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC4_SetConfig+0x68>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a11      	ldr	r2, [pc, #68]	; (8008884 <TIM_OC4_SetConfig+0xa8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d109      	bne.n	8008858 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800884a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	695b      	ldr	r3, [r3, #20]
 8008850:	019b      	lsls	r3, r3, #6
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	621a      	str	r2, [r3, #32]
}
 8008872:	bf00      	nop
 8008874:	371c      	adds	r7, #28
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	40010000 	.word	0x40010000
 8008884:	40010400 	.word	0x40010400

08008888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	f023 030a 	bic.w	r3, r3, #10
 80088c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	621a      	str	r2, [r3, #32]
}
 80088da:	bf00      	nop
 80088dc:	371c      	adds	r7, #28
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b087      	sub	sp, #28
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f023 0210 	bic.w	r2, r3, #16
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	031b      	lsls	r3, r3, #12
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	011b      	lsls	r3, r3, #4
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008946:	b480      	push	{r7}
 8008948:	b085      	sub	sp, #20
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	f043 0307 	orr.w	r3, r3, #7
 8008968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	609a      	str	r2, [r3, #8]
}
 8008970:	bf00      	nop
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
 8008988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	021a      	lsls	r2, r3, #8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	431a      	orrs	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	371c      	adds	r7, #28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	2201      	movs	r2, #1
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a1a      	ldr	r2, [r3, #32]
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	43db      	mvns	r3, r3
 80089de:	401a      	ands	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1a      	ldr	r2, [r3, #32]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	fa01 f303 	lsl.w	r3, r1, r3
 80089f4:	431a      	orrs	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e05a      	b.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a21      	ldr	r2, [pc, #132]	; (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d022      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a6c:	d01d      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1d      	ldr	r2, [pc, #116]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d018      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a1b      	ldr	r2, [pc, #108]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d013      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a1a      	ldr	r2, [pc, #104]	; (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00e      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a18      	ldr	r2, [pc, #96]	; (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d009      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a15      	ldr	r2, [pc, #84]	; (8008afc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	40010000 	.word	0x40010000
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	40010400 	.word	0x40010400
 8008af8:	40014000 	.word	0x40014000
 8008afc:	40001800 	.word	0x40001800

08008b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e03d      	b.n	8008b98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e03f      	b.n	8008c36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7f9 ffe6 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2224      	movs	r2, #36	; 0x24
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fdc7 	bl	800977c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	695a      	ldr	r2, [r3, #20]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2220      	movs	r2, #32
 8008c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b08c      	sub	sp, #48	; 0x30
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	d165      	bne.n	8008d26 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d002      	beq.n	8008c66 <HAL_UART_Transmit_DMA+0x26>
 8008c60:	88fb      	ldrh	r3, [r7, #6]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e05e      	b.n	8008d28 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_UART_Transmit_DMA+0x38>
 8008c74:	2302      	movs	r3, #2
 8008c76:	e057      	b.n	8008d28 <HAL_UART_Transmit_DMA+0xe8>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	88fa      	ldrh	r2, [r7, #6]
 8008c8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	88fa      	ldrh	r2, [r7, #6]
 8008c90:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2221      	movs	r2, #33	; 0x21
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	4a22      	ldr	r2, [pc, #136]	; (8008d30 <HAL_UART_Transmit_DMA+0xf0>)
 8008ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cac:	4a21      	ldr	r2, [pc, #132]	; (8008d34 <HAL_UART_Transmit_DMA+0xf4>)
 8008cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb4:	4a20      	ldr	r2, [pc, #128]	; (8008d38 <HAL_UART_Transmit_DMA+0xf8>)
 8008cb6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	6819      	ldr	r1, [r3, #0]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	88fb      	ldrh	r3, [r7, #6]
 8008cd8:	f7fb fc66 	bl	80045a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ce4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8008d10:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	6a39      	ldr	r1, [r7, #32]
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e5      	bne.n	8008cee <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	e000      	b.n	8008d28 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008d26:	2302      	movs	r3, #2
  }
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3730      	adds	r7, #48	; 0x30
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	080092ad 	.word	0x080092ad
 8008d34:	08009347 	.word	0x08009347
 8008d38:	08009363 	.word	0x08009363

08008d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b0ba      	sub	sp, #232	; 0xe8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	695b      	ldr	r3, [r3, #20]
 8008d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10f      	bne.n	8008da2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d009      	beq.n	8008da2 <HAL_UART_IRQHandler+0x66>
 8008d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d92:	f003 0320 	and.w	r3, r3, #32
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fc32 	bl	8009604 <UART_Receive_IT>
      return;
 8008da0:	e256      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 80de 	beq.w	8008f68 <HAL_UART_IRQHandler+0x22c>
 8008dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f000 80d1 	beq.w	8008f68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <HAL_UART_IRQHandler+0xae>
 8008dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f043 0201 	orr.w	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0304 	and.w	r3, r3, #4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <HAL_UART_IRQHandler+0xd2>
 8008df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	f043 0202 	orr.w	r2, r3, #2
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00b      	beq.n	8008e32 <HAL_UART_IRQHandler+0xf6>
 8008e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d005      	beq.n	8008e32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2a:	f043 0204 	orr.w	r2, r3, #4
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e36:	f003 0308 	and.w	r3, r3, #8
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d011      	beq.n	8008e62 <HAL_UART_IRQHandler+0x126>
 8008e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f043 0208 	orr.w	r2, r3, #8
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 81ed 	beq.w	8009246 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d008      	beq.n	8008e8a <HAL_UART_IRQHandler+0x14e>
 8008e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fbbd 	bl	8009604 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	bf0c      	ite	eq
 8008e98:	2301      	moveq	r3, #1
 8008e9a:	2300      	movne	r3, #0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f003 0308 	and.w	r3, r3, #8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d103      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x17a>
 8008eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d04f      	beq.n	8008f56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fac5 	bl	8009446 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec6:	2b40      	cmp	r3, #64	; 0x40
 8008ec8:	d141      	bne.n	8008f4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3314      	adds	r3, #20
 8008ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3314      	adds	r3, #20
 8008ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1d9      	bne.n	8008eca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d013      	beq.n	8008f46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	4a7d      	ldr	r2, [pc, #500]	; (8009118 <HAL_UART_IRQHandler+0x3dc>)
 8008f24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fb fc04 	bl	8004738 <HAL_DMA_Abort_IT>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d016      	beq.n	8008f64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f40:	4610      	mov	r0, r2
 8008f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f44:	e00e      	b.n	8008f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f99a 	bl	8009280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4c:	e00a      	b.n	8008f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f996 	bl	8009280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f54:	e006      	b.n	8008f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f992 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f62:	e170      	b.n	8009246 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f64:	bf00      	nop
    return;
 8008f66:	e16e      	b.n	8009246 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	f040 814a 	bne.w	8009206 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	f000 8143 	beq.w	8009206 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 813c 	beq.w	8009206 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60bb      	str	r3, [r7, #8]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	f040 80b4 	bne.w	800911c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 8140 	beq.w	800924a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	f080 8139 	bcs.w	800924a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fea:	f000 8088 	beq.w	80090fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	330c      	adds	r3, #12
 8008ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800900c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	330c      	adds	r3, #12
 8009016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800901a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800901e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1d9      	bne.n	8008fee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3314      	adds	r3, #20
 8009040:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800904a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800904c:	f023 0301 	bic.w	r3, r3, #1
 8009050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3314      	adds	r3, #20
 800905a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800905e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009062:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009066:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e1      	bne.n	800903a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3314      	adds	r3, #20
 800907c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800908c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3314      	adds	r3, #20
 8009096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800909a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800909c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e3      	bne.n	8009076 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	330c      	adds	r3, #12
 80090c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ce:	f023 0310 	bic.w	r3, r3, #16
 80090d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	330c      	adds	r3, #12
 80090dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80090e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e3      	bne.n	80090bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fb faad 	bl	8004658 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009106:	b29b      	uxth	r3, r3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	b29b      	uxth	r3, r3
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f8c0 	bl	8009294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009114:	e099      	b.n	800924a <HAL_UART_IRQHandler+0x50e>
 8009116:	bf00      	nop
 8009118:	0800950d 	.word	0x0800950d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009124:	b29b      	uxth	r3, r3
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009130:	b29b      	uxth	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 808b 	beq.w	800924e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8086 	beq.w	800924e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	330c      	adds	r3, #12
 8009148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	330c      	adds	r3, #12
 8009162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009166:	647a      	str	r2, [r7, #68]	; 0x44
 8009168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800916c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e3      	bne.n	8009142 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3314      	adds	r3, #20
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	623b      	str	r3, [r7, #32]
   return(result);
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	f023 0301 	bic.w	r3, r3, #1
 8009190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3314      	adds	r3, #20
 800919a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800919e:	633a      	str	r2, [r7, #48]	; 0x30
 80091a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e3      	bne.n	800917a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f023 0310 	bic.w	r3, r3, #16
 80091d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	330c      	adds	r3, #12
 80091e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091e4:	61fa      	str	r2, [r7, #28]
 80091e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	69b9      	ldr	r1, [r7, #24]
 80091ea:	69fa      	ldr	r2, [r7, #28]
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	617b      	str	r3, [r7, #20]
   return(result);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e3      	bne.n	80091c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091fc:	4619      	mov	r1, r3
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f848 	bl	8009294 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009204:	e023      	b.n	800924e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800920a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920e:	2b00      	cmp	r3, #0
 8009210:	d009      	beq.n	8009226 <HAL_UART_IRQHandler+0x4ea>
 8009212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f988 	bl	8009534 <UART_Transmit_IT>
    return;
 8009224:	e014      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800922a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <HAL_UART_IRQHandler+0x514>
 8009232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d008      	beq.n	8009250 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9c8 	bl	80095d4 <UART_EndTransmit_IT>
    return;
 8009244:	e004      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
    return;
 8009246:	bf00      	nop
 8009248:	e002      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
      return;
 800924a:	bf00      	nop
 800924c:	e000      	b.n	8009250 <HAL_UART_IRQHandler+0x514>
      return;
 800924e:	bf00      	nop
  }
}
 8009250:	37e8      	adds	r7, #232	; 0xe8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b090      	sub	sp, #64	; 0x40
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d137      	bne.n	8009338 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80092c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ca:	2200      	movs	r2, #0
 80092cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3314      	adds	r3, #20
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	623b      	str	r3, [r7, #32]
   return(result);
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80092e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3314      	adds	r3, #20
 80092ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ee:	633a      	str	r2, [r7, #48]	; 0x30
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e5      	bne.n	80092ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	330c      	adds	r3, #12
 8009308:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	60fb      	str	r3, [r7, #12]
   return(result);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
 800931a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	330c      	adds	r3, #12
 8009320:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009322:	61fa      	str	r2, [r7, #28]
 8009324:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	69b9      	ldr	r1, [r7, #24]
 8009328:	69fa      	ldr	r2, [r7, #28]
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	617b      	str	r3, [r7, #20]
   return(result);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009336:	e002      	b.n	800933e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009338:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800933a:	f7f9 f9c5 	bl	80026c8 <HAL_UART_TxCpltCallback>
}
 800933e:	bf00      	nop
 8009340:	3740      	adds	r7, #64	; 0x40
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009352:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7ff ff7f 	bl	8009258 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}

08009362 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009372:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800937e:	2b80      	cmp	r3, #128	; 0x80
 8009380:	bf0c      	ite	eq
 8009382:	2301      	moveq	r3, #1
 8009384:	2300      	movne	r3, #0
 8009386:	b2db      	uxtb	r3, r3
 8009388:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b21      	cmp	r3, #33	; 0x21
 8009394:	d108      	bne.n	80093a8 <UART_DMAError+0x46>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2200      	movs	r2, #0
 80093a0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80093a2:	68b8      	ldr	r0, [r7, #8]
 80093a4:	f000 f827 	bl	80093f6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	bf0c      	ite	eq
 80093b6:	2301      	moveq	r3, #1
 80093b8:	2300      	movne	r3, #0
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b22      	cmp	r3, #34	; 0x22
 80093c8:	d108      	bne.n	80093dc <UART_DMAError+0x7a>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	2200      	movs	r2, #0
 80093d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80093d6:	68b8      	ldr	r0, [r7, #8]
 80093d8:	f000 f835 	bl	8009446 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e0:	f043 0210 	orr.w	r2, r3, #16
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093e8:	68b8      	ldr	r0, [r7, #8]
 80093ea:	f7ff ff49 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b089      	sub	sp, #36	; 0x24
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	330c      	adds	r3, #12
 8009404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	60bb      	str	r3, [r7, #8]
   return(result);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009414:	61fb      	str	r3, [r7, #28]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	330c      	adds	r3, #12
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	61ba      	str	r2, [r7, #24]
 8009420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6979      	ldr	r1, [r7, #20]
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	613b      	str	r3, [r7, #16]
   return(result);
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e5      	bne.n	80093fe <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800943a:	bf00      	nop
 800943c:	3724      	adds	r7, #36	; 0x24
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009446:	b480      	push	{r7}
 8009448:	b095      	sub	sp, #84	; 0x54
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	330c      	adds	r3, #12
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	330c      	adds	r3, #12
 800946c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800946e:	643a      	str	r2, [r7, #64]	; 0x40
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e5      	bne.n	800944e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3314      	adds	r3, #20
 8009488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	61fb      	str	r3, [r7, #28]
   return(result);
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	64bb      	str	r3, [r7, #72]	; 0x48
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3314      	adds	r3, #20
 80094a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e5      	bne.n	8009482 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d119      	bne.n	80094f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	330c      	adds	r3, #12
 80094c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	f023 0310 	bic.w	r3, r3, #16
 80094d4:	647b      	str	r3, [r7, #68]	; 0x44
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	330c      	adds	r3, #12
 80094dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094de:	61ba      	str	r2, [r7, #24]
 80094e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	6979      	ldr	r1, [r7, #20]
 80094e4:	69ba      	ldr	r2, [r7, #24]
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	613b      	str	r3, [r7, #16]
   return(result);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e5      	bne.n	80094be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009500:	bf00      	nop
 8009502:	3754      	adds	r7, #84	; 0x54
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f7ff feaa 	bl	8009280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009534:	b480      	push	{r7}
 8009536:	b085      	sub	sp, #20
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b21      	cmp	r3, #33	; 0x21
 8009546:	d13e      	bne.n	80095c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009550:	d114      	bne.n	800957c <UART_Transmit_IT+0x48>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d110      	bne.n	800957c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800956e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a1b      	ldr	r3, [r3, #32]
 8009574:	1c9a      	adds	r2, r3, #2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]
 800957a:	e008      	b.n	800958e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	1c59      	adds	r1, r3, #1
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	6211      	str	r1, [r2, #32]
 8009586:	781a      	ldrb	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009592:	b29b      	uxth	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	b29b      	uxth	r3, r3
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	4619      	mov	r1, r3
 800959c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10f      	bne.n	80095c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e000      	b.n	80095c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80095c6:	2302      	movs	r3, #2
  }
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7f9 f867 	bl	80026c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08c      	sub	sp, #48	; 0x30
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b22      	cmp	r3, #34	; 0x22
 8009616:	f040 80ab 	bne.w	8009770 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009622:	d117      	bne.n	8009654 <UART_Receive_IT+0x50>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d113      	bne.n	8009654 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800962c:	2300      	movs	r3, #0
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	b29b      	uxth	r3, r3
 800963e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009642:	b29a      	uxth	r2, r3
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964c:	1c9a      	adds	r2, r3, #2
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	629a      	str	r2, [r3, #40]	; 0x28
 8009652:	e026      	b.n	80096a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009658:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009666:	d007      	beq.n	8009678 <UART_Receive_IT+0x74>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <UART_Receive_IT+0x82>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d106      	bne.n	8009686 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	b2da      	uxtb	r2, r3
 8009680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e008      	b.n	8009698 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009692:	b2da      	uxtb	r2, r3
 8009694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009696:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	4619      	mov	r1, r3
 80096b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d15a      	bne.n	800976c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0220 	bic.w	r2, r2, #32
 80096c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68da      	ldr	r2, [r3, #12]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	695a      	ldr	r2, [r3, #20]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2220      	movs	r2, #32
 80096ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d135      	bne.n	8009762 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	330c      	adds	r3, #12
 8009702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	613b      	str	r3, [r7, #16]
   return(result);
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f023 0310 	bic.w	r3, r3, #16
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	330c      	adds	r3, #12
 800971a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971c:	623a      	str	r2, [r7, #32]
 800971e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	69f9      	ldr	r1, [r7, #28]
 8009722:	6a3a      	ldr	r2, [r7, #32]
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	61bb      	str	r3, [r7, #24]
   return(result);
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e5      	bne.n	80096fc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b10      	cmp	r3, #16
 800973c:	d10a      	bne.n	8009754 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60fb      	str	r3, [r7, #12]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fd9a 	bl	8009294 <HAL_UARTEx_RxEventCallback>
 8009760:	e002      	b.n	8009768 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff fd82 	bl	800926c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	e002      	b.n	8009772 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	e000      	b.n	8009772 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009770:	2302      	movs	r3, #2
  }
}
 8009772:	4618      	mov	r0, r3
 8009774:	3730      	adds	r7, #48	; 0x30
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
	...

0800977c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	b09f      	sub	sp, #124	; 0x7c
 8009782:	af00      	add	r7, sp, #0
 8009784:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009792:	68d9      	ldr	r1, [r3, #12]
 8009794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	ea40 0301 	orr.w	r3, r0, r1
 800979c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800979e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a0:	689a      	ldr	r2, [r3, #8]
 80097a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	431a      	orrs	r2, r3
 80097ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80097b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80097c0:	f021 010c 	bic.w	r1, r1, #12
 80097c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097ca:	430b      	orrs	r3, r1
 80097cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80097d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097da:	6999      	ldr	r1, [r3, #24]
 80097dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	ea40 0301 	orr.w	r3, r0, r1
 80097e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	4bc5      	ldr	r3, [pc, #788]	; (8009b00 <UART_SetConfig+0x384>)
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d004      	beq.n	80097fa <UART_SetConfig+0x7e>
 80097f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	4bc3      	ldr	r3, [pc, #780]	; (8009b04 <UART_SetConfig+0x388>)
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d103      	bne.n	8009802 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097fa:	f7fd fb19 	bl	8006e30 <HAL_RCC_GetPCLK2Freq>
 80097fe:	6778      	str	r0, [r7, #116]	; 0x74
 8009800:	e002      	b.n	8009808 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009802:	f7fd fb01 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 8009806:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800980a:	69db      	ldr	r3, [r3, #28]
 800980c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009810:	f040 80b6 	bne.w	8009980 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009816:	461c      	mov	r4, r3
 8009818:	f04f 0500 	mov.w	r5, #0
 800981c:	4622      	mov	r2, r4
 800981e:	462b      	mov	r3, r5
 8009820:	1891      	adds	r1, r2, r2
 8009822:	6439      	str	r1, [r7, #64]	; 0x40
 8009824:	415b      	adcs	r3, r3
 8009826:	647b      	str	r3, [r7, #68]	; 0x44
 8009828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800982c:	1912      	adds	r2, r2, r4
 800982e:	eb45 0303 	adc.w	r3, r5, r3
 8009832:	f04f 0000 	mov.w	r0, #0
 8009836:	f04f 0100 	mov.w	r1, #0
 800983a:	00d9      	lsls	r1, r3, #3
 800983c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009840:	00d0      	lsls	r0, r2, #3
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	1911      	adds	r1, r2, r4
 8009848:	6639      	str	r1, [r7, #96]	; 0x60
 800984a:	416b      	adcs	r3, r5
 800984c:	667b      	str	r3, [r7, #100]	; 0x64
 800984e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	461a      	mov	r2, r3
 8009854:	f04f 0300 	mov.w	r3, #0
 8009858:	1891      	adds	r1, r2, r2
 800985a:	63b9      	str	r1, [r7, #56]	; 0x38
 800985c:	415b      	adcs	r3, r3
 800985e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009864:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009868:	f7f7 f918 	bl	8000a9c <__aeabi_uldivmod>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4ba5      	ldr	r3, [pc, #660]	; (8009b08 <UART_SetConfig+0x38c>)
 8009872:	fba3 2302 	umull	r2, r3, r3, r2
 8009876:	095b      	lsrs	r3, r3, #5
 8009878:	011e      	lsls	r6, r3, #4
 800987a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800987c:	461c      	mov	r4, r3
 800987e:	f04f 0500 	mov.w	r5, #0
 8009882:	4622      	mov	r2, r4
 8009884:	462b      	mov	r3, r5
 8009886:	1891      	adds	r1, r2, r2
 8009888:	6339      	str	r1, [r7, #48]	; 0x30
 800988a:	415b      	adcs	r3, r3
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
 800988e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009892:	1912      	adds	r2, r2, r4
 8009894:	eb45 0303 	adc.w	r3, r5, r3
 8009898:	f04f 0000 	mov.w	r0, #0
 800989c:	f04f 0100 	mov.w	r1, #0
 80098a0:	00d9      	lsls	r1, r3, #3
 80098a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098a6:	00d0      	lsls	r0, r2, #3
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	1911      	adds	r1, r2, r4
 80098ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80098b0:	416b      	adcs	r3, r5
 80098b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	461a      	mov	r2, r3
 80098ba:	f04f 0300 	mov.w	r3, #0
 80098be:	1891      	adds	r1, r2, r2
 80098c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80098c2:	415b      	adcs	r3, r3
 80098c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80098ce:	f7f7 f8e5 	bl	8000a9c <__aeabi_uldivmod>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4b8c      	ldr	r3, [pc, #560]	; (8009b08 <UART_SetConfig+0x38c>)
 80098d8:	fba3 1302 	umull	r1, r3, r3, r2
 80098dc:	095b      	lsrs	r3, r3, #5
 80098de:	2164      	movs	r1, #100	; 0x64
 80098e0:	fb01 f303 	mul.w	r3, r1, r3
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	3332      	adds	r3, #50	; 0x32
 80098ea:	4a87      	ldr	r2, [pc, #540]	; (8009b08 <UART_SetConfig+0x38c>)
 80098ec:	fba2 2303 	umull	r2, r3, r2, r3
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80098f8:	441e      	add	r6, r3
 80098fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098fc:	4618      	mov	r0, r3
 80098fe:	f04f 0100 	mov.w	r1, #0
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	1894      	adds	r4, r2, r2
 8009908:	623c      	str	r4, [r7, #32]
 800990a:	415b      	adcs	r3, r3
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
 800990e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009912:	1812      	adds	r2, r2, r0
 8009914:	eb41 0303 	adc.w	r3, r1, r3
 8009918:	f04f 0400 	mov.w	r4, #0
 800991c:	f04f 0500 	mov.w	r5, #0
 8009920:	00dd      	lsls	r5, r3, #3
 8009922:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009926:	00d4      	lsls	r4, r2, #3
 8009928:	4622      	mov	r2, r4
 800992a:	462b      	mov	r3, r5
 800992c:	1814      	adds	r4, r2, r0
 800992e:	653c      	str	r4, [r7, #80]	; 0x50
 8009930:	414b      	adcs	r3, r1
 8009932:	657b      	str	r3, [r7, #84]	; 0x54
 8009934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	461a      	mov	r2, r3
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	1891      	adds	r1, r2, r2
 8009940:	61b9      	str	r1, [r7, #24]
 8009942:	415b      	adcs	r3, r3
 8009944:	61fb      	str	r3, [r7, #28]
 8009946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800994a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800994e:	f7f7 f8a5 	bl	8000a9c <__aeabi_uldivmod>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4b6c      	ldr	r3, [pc, #432]	; (8009b08 <UART_SetConfig+0x38c>)
 8009958:	fba3 1302 	umull	r1, r3, r3, r2
 800995c:	095b      	lsrs	r3, r3, #5
 800995e:	2164      	movs	r1, #100	; 0x64
 8009960:	fb01 f303 	mul.w	r3, r1, r3
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	3332      	adds	r3, #50	; 0x32
 800996a:	4a67      	ldr	r2, [pc, #412]	; (8009b08 <UART_SetConfig+0x38c>)
 800996c:	fba2 2303 	umull	r2, r3, r2, r3
 8009970:	095b      	lsrs	r3, r3, #5
 8009972:	f003 0207 	and.w	r2, r3, #7
 8009976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4432      	add	r2, r6
 800997c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800997e:	e0b9      	b.n	8009af4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009980:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009982:	461c      	mov	r4, r3
 8009984:	f04f 0500 	mov.w	r5, #0
 8009988:	4622      	mov	r2, r4
 800998a:	462b      	mov	r3, r5
 800998c:	1891      	adds	r1, r2, r2
 800998e:	6139      	str	r1, [r7, #16]
 8009990:	415b      	adcs	r3, r3
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009998:	1912      	adds	r2, r2, r4
 800999a:	eb45 0303 	adc.w	r3, r5, r3
 800999e:	f04f 0000 	mov.w	r0, #0
 80099a2:	f04f 0100 	mov.w	r1, #0
 80099a6:	00d9      	lsls	r1, r3, #3
 80099a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099ac:	00d0      	lsls	r0, r2, #3
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	eb12 0804 	adds.w	r8, r2, r4
 80099b6:	eb43 0905 	adc.w	r9, r3, r5
 80099ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	4618      	mov	r0, r3
 80099c0:	f04f 0100 	mov.w	r1, #0
 80099c4:	f04f 0200 	mov.w	r2, #0
 80099c8:	f04f 0300 	mov.w	r3, #0
 80099cc:	008b      	lsls	r3, r1, #2
 80099ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099d2:	0082      	lsls	r2, r0, #2
 80099d4:	4640      	mov	r0, r8
 80099d6:	4649      	mov	r1, r9
 80099d8:	f7f7 f860 	bl	8000a9c <__aeabi_uldivmod>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4b49      	ldr	r3, [pc, #292]	; (8009b08 <UART_SetConfig+0x38c>)
 80099e2:	fba3 2302 	umull	r2, r3, r3, r2
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	011e      	lsls	r6, r3, #4
 80099ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099ec:	4618      	mov	r0, r3
 80099ee:	f04f 0100 	mov.w	r1, #0
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	1894      	adds	r4, r2, r2
 80099f8:	60bc      	str	r4, [r7, #8]
 80099fa:	415b      	adcs	r3, r3
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a02:	1812      	adds	r2, r2, r0
 8009a04:	eb41 0303 	adc.w	r3, r1, r3
 8009a08:	f04f 0400 	mov.w	r4, #0
 8009a0c:	f04f 0500 	mov.w	r5, #0
 8009a10:	00dd      	lsls	r5, r3, #3
 8009a12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a16:	00d4      	lsls	r4, r2, #3
 8009a18:	4622      	mov	r2, r4
 8009a1a:	462b      	mov	r3, r5
 8009a1c:	1814      	adds	r4, r2, r0
 8009a1e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009a20:	414b      	adcs	r3, r1
 8009a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f04f 0100 	mov.w	r1, #0
 8009a2e:	f04f 0200 	mov.w	r2, #0
 8009a32:	f04f 0300 	mov.w	r3, #0
 8009a36:	008b      	lsls	r3, r1, #2
 8009a38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a3c:	0082      	lsls	r2, r0, #2
 8009a3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009a42:	f7f7 f82b 	bl	8000a9c <__aeabi_uldivmod>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <UART_SetConfig+0x38c>)
 8009a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a50:	095b      	lsrs	r3, r3, #5
 8009a52:	2164      	movs	r1, #100	; 0x64
 8009a54:	fb01 f303 	mul.w	r3, r1, r3
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	011b      	lsls	r3, r3, #4
 8009a5c:	3332      	adds	r3, #50	; 0x32
 8009a5e:	4a2a      	ldr	r2, [pc, #168]	; (8009b08 <UART_SetConfig+0x38c>)
 8009a60:	fba2 2303 	umull	r2, r3, r2, r3
 8009a64:	095b      	lsrs	r3, r3, #5
 8009a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a6a:	441e      	add	r6, r3
 8009a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f04f 0100 	mov.w	r1, #0
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	1894      	adds	r4, r2, r2
 8009a7a:	603c      	str	r4, [r7, #0]
 8009a7c:	415b      	adcs	r3, r3
 8009a7e:	607b      	str	r3, [r7, #4]
 8009a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a84:	1812      	adds	r2, r2, r0
 8009a86:	eb41 0303 	adc.w	r3, r1, r3
 8009a8a:	f04f 0400 	mov.w	r4, #0
 8009a8e:	f04f 0500 	mov.w	r5, #0
 8009a92:	00dd      	lsls	r5, r3, #3
 8009a94:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a98:	00d4      	lsls	r4, r2, #3
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	eb12 0a00 	adds.w	sl, r2, r0
 8009aa2:	eb43 0b01 	adc.w	fp, r3, r1
 8009aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f04f 0100 	mov.w	r1, #0
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	f04f 0300 	mov.w	r3, #0
 8009ab8:	008b      	lsls	r3, r1, #2
 8009aba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009abe:	0082      	lsls	r2, r0, #2
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	4659      	mov	r1, fp
 8009ac4:	f7f6 ffea 	bl	8000a9c <__aeabi_uldivmod>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	460b      	mov	r3, r1
 8009acc:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <UART_SetConfig+0x38c>)
 8009ace:	fba3 1302 	umull	r1, r3, r3, r2
 8009ad2:	095b      	lsrs	r3, r3, #5
 8009ad4:	2164      	movs	r1, #100	; 0x64
 8009ad6:	fb01 f303 	mul.w	r3, r1, r3
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	011b      	lsls	r3, r3, #4
 8009ade:	3332      	adds	r3, #50	; 0x32
 8009ae0:	4a09      	ldr	r2, [pc, #36]	; (8009b08 <UART_SetConfig+0x38c>)
 8009ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae6:	095b      	lsrs	r3, r3, #5
 8009ae8:	f003 020f 	and.w	r2, r3, #15
 8009aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4432      	add	r2, r6
 8009af2:	609a      	str	r2, [r3, #8]
}
 8009af4:	bf00      	nop
 8009af6:	377c      	adds	r7, #124	; 0x7c
 8009af8:	46bd      	mov	sp, r7
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	bf00      	nop
 8009b00:	40011000 	.word	0x40011000
 8009b04:	40011400 	.word	0x40011400
 8009b08:	51eb851f 	.word	0x51eb851f

08009b0c <__errno>:
 8009b0c:	4b01      	ldr	r3, [pc, #4]	; (8009b14 <__errno+0x8>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	2000005c 	.word	0x2000005c

08009b18 <__libc_init_array>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4d0d      	ldr	r5, [pc, #52]	; (8009b50 <__libc_init_array+0x38>)
 8009b1c:	4c0d      	ldr	r4, [pc, #52]	; (8009b54 <__libc_init_array+0x3c>)
 8009b1e:	1b64      	subs	r4, r4, r5
 8009b20:	10a4      	asrs	r4, r4, #2
 8009b22:	2600      	movs	r6, #0
 8009b24:	42a6      	cmp	r6, r4
 8009b26:	d109      	bne.n	8009b3c <__libc_init_array+0x24>
 8009b28:	4d0b      	ldr	r5, [pc, #44]	; (8009b58 <__libc_init_array+0x40>)
 8009b2a:	4c0c      	ldr	r4, [pc, #48]	; (8009b5c <__libc_init_array+0x44>)
 8009b2c:	f001 f822 	bl	800ab74 <_init>
 8009b30:	1b64      	subs	r4, r4, r5
 8009b32:	10a4      	asrs	r4, r4, #2
 8009b34:	2600      	movs	r6, #0
 8009b36:	42a6      	cmp	r6, r4
 8009b38:	d105      	bne.n	8009b46 <__libc_init_array+0x2e>
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b40:	4798      	blx	r3
 8009b42:	3601      	adds	r6, #1
 8009b44:	e7ee      	b.n	8009b24 <__libc_init_array+0xc>
 8009b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4a:	4798      	blx	r3
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7f2      	b.n	8009b36 <__libc_init_array+0x1e>
 8009b50:	0800ad18 	.word	0x0800ad18
 8009b54:	0800ad18 	.word	0x0800ad18
 8009b58:	0800ad18 	.word	0x0800ad18
 8009b5c:	0800ad1c 	.word	0x0800ad1c

08009b60 <memset>:
 8009b60:	4402      	add	r2, r0
 8009b62:	4603      	mov	r3, r0
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d100      	bne.n	8009b6a <memset+0xa>
 8009b68:	4770      	bx	lr
 8009b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b6e:	e7f9      	b.n	8009b64 <memset+0x4>

08009b70 <rand>:
 8009b70:	4b17      	ldr	r3, [pc, #92]	; (8009bd0 <rand+0x60>)
 8009b72:	b510      	push	{r4, lr}
 8009b74:	681c      	ldr	r4, [r3, #0]
 8009b76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b78:	b9b3      	cbnz	r3, 8009ba8 <rand+0x38>
 8009b7a:	2018      	movs	r0, #24
 8009b7c:	f000 f868 	bl	8009c50 <malloc>
 8009b80:	63a0      	str	r0, [r4, #56]	; 0x38
 8009b82:	b928      	cbnz	r0, 8009b90 <rand+0x20>
 8009b84:	4602      	mov	r2, r0
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <rand+0x64>)
 8009b88:	4813      	ldr	r0, [pc, #76]	; (8009bd8 <rand+0x68>)
 8009b8a:	214e      	movs	r1, #78	; 0x4e
 8009b8c:	f000 f830 	bl	8009bf0 <__assert_func>
 8009b90:	4a12      	ldr	r2, [pc, #72]	; (8009bdc <rand+0x6c>)
 8009b92:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <rand+0x70>)
 8009b94:	e9c0 2300 	strd	r2, r3, [r0]
 8009b98:	4b12      	ldr	r3, [pc, #72]	; (8009be4 <rand+0x74>)
 8009b9a:	6083      	str	r3, [r0, #8]
 8009b9c:	230b      	movs	r3, #11
 8009b9e:	8183      	strh	r3, [r0, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009ba8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009baa:	480f      	ldr	r0, [pc, #60]	; (8009be8 <rand+0x78>)
 8009bac:	690a      	ldr	r2, [r1, #16]
 8009bae:	694b      	ldr	r3, [r1, #20]
 8009bb0:	4c0e      	ldr	r4, [pc, #56]	; (8009bec <rand+0x7c>)
 8009bb2:	4350      	muls	r0, r2
 8009bb4:	fb04 0003 	mla	r0, r4, r3, r0
 8009bb8:	fba2 3404 	umull	r3, r4, r2, r4
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	4404      	add	r4, r0
 8009bc0:	f144 0000 	adc.w	r0, r4, #0
 8009bc4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009bc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	2000005c 	.word	0x2000005c
 8009bd4:	0800abc8 	.word	0x0800abc8
 8009bd8:	0800abdf 	.word	0x0800abdf
 8009bdc:	abcd330e 	.word	0xabcd330e
 8009be0:	e66d1234 	.word	0xe66d1234
 8009be4:	0005deec 	.word	0x0005deec
 8009be8:	5851f42d 	.word	0x5851f42d
 8009bec:	4c957f2d 	.word	0x4c957f2d

08009bf0 <__assert_func>:
 8009bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bf2:	4614      	mov	r4, r2
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	4b09      	ldr	r3, [pc, #36]	; (8009c1c <__assert_func+0x2c>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	68d8      	ldr	r0, [r3, #12]
 8009bfe:	b14c      	cbz	r4, 8009c14 <__assert_func+0x24>
 8009c00:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <__assert_func+0x30>)
 8009c02:	9100      	str	r1, [sp, #0]
 8009c04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c08:	4906      	ldr	r1, [pc, #24]	; (8009c24 <__assert_func+0x34>)
 8009c0a:	462b      	mov	r3, r5
 8009c0c:	f000 f80e 	bl	8009c2c <fiprintf>
 8009c10:	f000 fc8e 	bl	800a530 <abort>
 8009c14:	4b04      	ldr	r3, [pc, #16]	; (8009c28 <__assert_func+0x38>)
 8009c16:	461c      	mov	r4, r3
 8009c18:	e7f3      	b.n	8009c02 <__assert_func+0x12>
 8009c1a:	bf00      	nop
 8009c1c:	2000005c 	.word	0x2000005c
 8009c20:	0800ac3e 	.word	0x0800ac3e
 8009c24:	0800ac4b 	.word	0x0800ac4b
 8009c28:	0800ac79 	.word	0x0800ac79

08009c2c <fiprintf>:
 8009c2c:	b40e      	push	{r1, r2, r3}
 8009c2e:	b503      	push	{r0, r1, lr}
 8009c30:	4601      	mov	r1, r0
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	4805      	ldr	r0, [pc, #20]	; (8009c4c <fiprintf+0x20>)
 8009c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	f000 f8e3 	bl	8009e08 <_vfiprintf_r>
 8009c42:	b002      	add	sp, #8
 8009c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c48:	b003      	add	sp, #12
 8009c4a:	4770      	bx	lr
 8009c4c:	2000005c 	.word	0x2000005c

08009c50 <malloc>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <malloc+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f000 b853 	b.w	8009d00 <_malloc_r>
 8009c5a:	bf00      	nop
 8009c5c:	2000005c 	.word	0x2000005c

08009c60 <_free_r>:
 8009c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d048      	beq.n	8009cf8 <_free_r+0x98>
 8009c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c6a:	9001      	str	r0, [sp, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c72:	bfb8      	it	lt
 8009c74:	18e4      	addlt	r4, r4, r3
 8009c76:	f000 fe81 	bl	800a97c <__malloc_lock>
 8009c7a:	4a20      	ldr	r2, [pc, #128]	; (8009cfc <_free_r+0x9c>)
 8009c7c:	9801      	ldr	r0, [sp, #4]
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	4615      	mov	r5, r2
 8009c82:	b933      	cbnz	r3, 8009c92 <_free_r+0x32>
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	6014      	str	r4, [r2, #0]
 8009c88:	b003      	add	sp, #12
 8009c8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c8e:	f000 be7b 	b.w	800a988 <__malloc_unlock>
 8009c92:	42a3      	cmp	r3, r4
 8009c94:	d90b      	bls.n	8009cae <_free_r+0x4e>
 8009c96:	6821      	ldr	r1, [r4, #0]
 8009c98:	1862      	adds	r2, r4, r1
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	bf04      	itt	eq
 8009c9e:	681a      	ldreq	r2, [r3, #0]
 8009ca0:	685b      	ldreq	r3, [r3, #4]
 8009ca2:	6063      	str	r3, [r4, #4]
 8009ca4:	bf04      	itt	eq
 8009ca6:	1852      	addeq	r2, r2, r1
 8009ca8:	6022      	streq	r2, [r4, #0]
 8009caa:	602c      	str	r4, [r5, #0]
 8009cac:	e7ec      	b.n	8009c88 <_free_r+0x28>
 8009cae:	461a      	mov	r2, r3
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	b10b      	cbz	r3, 8009cb8 <_free_r+0x58>
 8009cb4:	42a3      	cmp	r3, r4
 8009cb6:	d9fa      	bls.n	8009cae <_free_r+0x4e>
 8009cb8:	6811      	ldr	r1, [r2, #0]
 8009cba:	1855      	adds	r5, r2, r1
 8009cbc:	42a5      	cmp	r5, r4
 8009cbe:	d10b      	bne.n	8009cd8 <_free_r+0x78>
 8009cc0:	6824      	ldr	r4, [r4, #0]
 8009cc2:	4421      	add	r1, r4
 8009cc4:	1854      	adds	r4, r2, r1
 8009cc6:	42a3      	cmp	r3, r4
 8009cc8:	6011      	str	r1, [r2, #0]
 8009cca:	d1dd      	bne.n	8009c88 <_free_r+0x28>
 8009ccc:	681c      	ldr	r4, [r3, #0]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	6053      	str	r3, [r2, #4]
 8009cd2:	4421      	add	r1, r4
 8009cd4:	6011      	str	r1, [r2, #0]
 8009cd6:	e7d7      	b.n	8009c88 <_free_r+0x28>
 8009cd8:	d902      	bls.n	8009ce0 <_free_r+0x80>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	6003      	str	r3, [r0, #0]
 8009cde:	e7d3      	b.n	8009c88 <_free_r+0x28>
 8009ce0:	6825      	ldr	r5, [r4, #0]
 8009ce2:	1961      	adds	r1, r4, r5
 8009ce4:	428b      	cmp	r3, r1
 8009ce6:	bf04      	itt	eq
 8009ce8:	6819      	ldreq	r1, [r3, #0]
 8009cea:	685b      	ldreq	r3, [r3, #4]
 8009cec:	6063      	str	r3, [r4, #4]
 8009cee:	bf04      	itt	eq
 8009cf0:	1949      	addeq	r1, r1, r5
 8009cf2:	6021      	streq	r1, [r4, #0]
 8009cf4:	6054      	str	r4, [r2, #4]
 8009cf6:	e7c7      	b.n	8009c88 <_free_r+0x28>
 8009cf8:	b003      	add	sp, #12
 8009cfa:	bd30      	pop	{r4, r5, pc}
 8009cfc:	20001a34 	.word	0x20001a34

08009d00 <_malloc_r>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	1ccd      	adds	r5, r1, #3
 8009d04:	f025 0503 	bic.w	r5, r5, #3
 8009d08:	3508      	adds	r5, #8
 8009d0a:	2d0c      	cmp	r5, #12
 8009d0c:	bf38      	it	cc
 8009d0e:	250c      	movcc	r5, #12
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	4606      	mov	r6, r0
 8009d14:	db01      	blt.n	8009d1a <_malloc_r+0x1a>
 8009d16:	42a9      	cmp	r1, r5
 8009d18:	d903      	bls.n	8009d22 <_malloc_r+0x22>
 8009d1a:	230c      	movs	r3, #12
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	2000      	movs	r0, #0
 8009d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d22:	f000 fe2b 	bl	800a97c <__malloc_lock>
 8009d26:	4921      	ldr	r1, [pc, #132]	; (8009dac <_malloc_r+0xac>)
 8009d28:	680a      	ldr	r2, [r1, #0]
 8009d2a:	4614      	mov	r4, r2
 8009d2c:	b99c      	cbnz	r4, 8009d56 <_malloc_r+0x56>
 8009d2e:	4f20      	ldr	r7, [pc, #128]	; (8009db0 <_malloc_r+0xb0>)
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	b923      	cbnz	r3, 8009d3e <_malloc_r+0x3e>
 8009d34:	4621      	mov	r1, r4
 8009d36:	4630      	mov	r0, r6
 8009d38:	f000 fb2a 	bl	800a390 <_sbrk_r>
 8009d3c:	6038      	str	r0, [r7, #0]
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 fb25 	bl	800a390 <_sbrk_r>
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	d123      	bne.n	8009d92 <_malloc_r+0x92>
 8009d4a:	230c      	movs	r3, #12
 8009d4c:	6033      	str	r3, [r6, #0]
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f000 fe1a 	bl	800a988 <__malloc_unlock>
 8009d54:	e7e3      	b.n	8009d1e <_malloc_r+0x1e>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	1b5b      	subs	r3, r3, r5
 8009d5a:	d417      	bmi.n	8009d8c <_malloc_r+0x8c>
 8009d5c:	2b0b      	cmp	r3, #11
 8009d5e:	d903      	bls.n	8009d68 <_malloc_r+0x68>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	441c      	add	r4, r3
 8009d64:	6025      	str	r5, [r4, #0]
 8009d66:	e004      	b.n	8009d72 <_malloc_r+0x72>
 8009d68:	6863      	ldr	r3, [r4, #4]
 8009d6a:	42a2      	cmp	r2, r4
 8009d6c:	bf0c      	ite	eq
 8009d6e:	600b      	streq	r3, [r1, #0]
 8009d70:	6053      	strne	r3, [r2, #4]
 8009d72:	4630      	mov	r0, r6
 8009d74:	f000 fe08 	bl	800a988 <__malloc_unlock>
 8009d78:	f104 000b 	add.w	r0, r4, #11
 8009d7c:	1d23      	adds	r3, r4, #4
 8009d7e:	f020 0007 	bic.w	r0, r0, #7
 8009d82:	1ac2      	subs	r2, r0, r3
 8009d84:	d0cc      	beq.n	8009d20 <_malloc_r+0x20>
 8009d86:	1a1b      	subs	r3, r3, r0
 8009d88:	50a3      	str	r3, [r4, r2]
 8009d8a:	e7c9      	b.n	8009d20 <_malloc_r+0x20>
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	6864      	ldr	r4, [r4, #4]
 8009d90:	e7cc      	b.n	8009d2c <_malloc_r+0x2c>
 8009d92:	1cc4      	adds	r4, r0, #3
 8009d94:	f024 0403 	bic.w	r4, r4, #3
 8009d98:	42a0      	cmp	r0, r4
 8009d9a:	d0e3      	beq.n	8009d64 <_malloc_r+0x64>
 8009d9c:	1a21      	subs	r1, r4, r0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f000 faf6 	bl	800a390 <_sbrk_r>
 8009da4:	3001      	adds	r0, #1
 8009da6:	d1dd      	bne.n	8009d64 <_malloc_r+0x64>
 8009da8:	e7cf      	b.n	8009d4a <_malloc_r+0x4a>
 8009daa:	bf00      	nop
 8009dac:	20001a34 	.word	0x20001a34
 8009db0:	20001a38 	.word	0x20001a38

08009db4 <__sfputc_r>:
 8009db4:	6893      	ldr	r3, [r2, #8]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	b410      	push	{r4}
 8009dbc:	6093      	str	r3, [r2, #8]
 8009dbe:	da08      	bge.n	8009dd2 <__sfputc_r+0x1e>
 8009dc0:	6994      	ldr	r4, [r2, #24]
 8009dc2:	42a3      	cmp	r3, r4
 8009dc4:	db01      	blt.n	8009dca <__sfputc_r+0x16>
 8009dc6:	290a      	cmp	r1, #10
 8009dc8:	d103      	bne.n	8009dd2 <__sfputc_r+0x1e>
 8009dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dce:	f000 baef 	b.w	800a3b0 <__swbuf_r>
 8009dd2:	6813      	ldr	r3, [r2, #0]
 8009dd4:	1c58      	adds	r0, r3, #1
 8009dd6:	6010      	str	r0, [r2, #0]
 8009dd8:	7019      	strb	r1, [r3, #0]
 8009dda:	4608      	mov	r0, r1
 8009ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <__sfputs_r>:
 8009de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	4614      	mov	r4, r2
 8009dea:	18d5      	adds	r5, r2, r3
 8009dec:	42ac      	cmp	r4, r5
 8009dee:	d101      	bne.n	8009df4 <__sfputs_r+0x12>
 8009df0:	2000      	movs	r0, #0
 8009df2:	e007      	b.n	8009e04 <__sfputs_r+0x22>
 8009df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009df8:	463a      	mov	r2, r7
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7ff ffda 	bl	8009db4 <__sfputc_r>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d1f3      	bne.n	8009dec <__sfputs_r+0xa>
 8009e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e08 <_vfiprintf_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	b09d      	sub	sp, #116	; 0x74
 8009e10:	4614      	mov	r4, r2
 8009e12:	4698      	mov	r8, r3
 8009e14:	4606      	mov	r6, r0
 8009e16:	b118      	cbz	r0, 8009e20 <_vfiprintf_r+0x18>
 8009e18:	6983      	ldr	r3, [r0, #24]
 8009e1a:	b90b      	cbnz	r3, 8009e20 <_vfiprintf_r+0x18>
 8009e1c:	f000 fcaa 	bl	800a774 <__sinit>
 8009e20:	4b89      	ldr	r3, [pc, #548]	; (800a048 <_vfiprintf_r+0x240>)
 8009e22:	429d      	cmp	r5, r3
 8009e24:	d11b      	bne.n	8009e5e <_vfiprintf_r+0x56>
 8009e26:	6875      	ldr	r5, [r6, #4]
 8009e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2a:	07d9      	lsls	r1, r3, #31
 8009e2c:	d405      	bmi.n	8009e3a <_vfiprintf_r+0x32>
 8009e2e:	89ab      	ldrh	r3, [r5, #12]
 8009e30:	059a      	lsls	r2, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_vfiprintf_r+0x32>
 8009e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e36:	f000 fd3b 	bl	800a8b0 <__retarget_lock_acquire_recursive>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	071b      	lsls	r3, r3, #28
 8009e3e:	d501      	bpl.n	8009e44 <_vfiprintf_r+0x3c>
 8009e40:	692b      	ldr	r3, [r5, #16]
 8009e42:	b9eb      	cbnz	r3, 8009e80 <_vfiprintf_r+0x78>
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f000 fb04 	bl	800a454 <__swsetup_r>
 8009e4c:	b1c0      	cbz	r0, 8009e80 <_vfiprintf_r+0x78>
 8009e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e50:	07dc      	lsls	r4, r3, #31
 8009e52:	d50e      	bpl.n	8009e72 <_vfiprintf_r+0x6a>
 8009e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e58:	b01d      	add	sp, #116	; 0x74
 8009e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5e:	4b7b      	ldr	r3, [pc, #492]	; (800a04c <_vfiprintf_r+0x244>)
 8009e60:	429d      	cmp	r5, r3
 8009e62:	d101      	bne.n	8009e68 <_vfiprintf_r+0x60>
 8009e64:	68b5      	ldr	r5, [r6, #8]
 8009e66:	e7df      	b.n	8009e28 <_vfiprintf_r+0x20>
 8009e68:	4b79      	ldr	r3, [pc, #484]	; (800a050 <_vfiprintf_r+0x248>)
 8009e6a:	429d      	cmp	r5, r3
 8009e6c:	bf08      	it	eq
 8009e6e:	68f5      	ldreq	r5, [r6, #12]
 8009e70:	e7da      	b.n	8009e28 <_vfiprintf_r+0x20>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	0598      	lsls	r0, r3, #22
 8009e76:	d4ed      	bmi.n	8009e54 <_vfiprintf_r+0x4c>
 8009e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e7a:	f000 fd1a 	bl	800a8b2 <__retarget_lock_release_recursive>
 8009e7e:	e7e9      	b.n	8009e54 <_vfiprintf_r+0x4c>
 8009e80:	2300      	movs	r3, #0
 8009e82:	9309      	str	r3, [sp, #36]	; 0x24
 8009e84:	2320      	movs	r3, #32
 8009e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e8e:	2330      	movs	r3, #48	; 0x30
 8009e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a054 <_vfiprintf_r+0x24c>
 8009e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e98:	f04f 0901 	mov.w	r9, #1
 8009e9c:	4623      	mov	r3, r4
 8009e9e:	469a      	mov	sl, r3
 8009ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ea4:	b10a      	cbz	r2, 8009eaa <_vfiprintf_r+0xa2>
 8009ea6:	2a25      	cmp	r2, #37	; 0x25
 8009ea8:	d1f9      	bne.n	8009e9e <_vfiprintf_r+0x96>
 8009eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8009eae:	d00b      	beq.n	8009ec8 <_vfiprintf_r+0xc0>
 8009eb0:	465b      	mov	r3, fp
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f7ff ff93 	bl	8009de2 <__sfputs_r>
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	f000 80aa 	beq.w	800a016 <_vfiprintf_r+0x20e>
 8009ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ec4:	445a      	add	r2, fp
 8009ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8009ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80a2 	beq.w	800a016 <_vfiprintf_r+0x20e>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009edc:	f10a 0a01 	add.w	sl, sl, #1
 8009ee0:	9304      	str	r3, [sp, #16]
 8009ee2:	9307      	str	r3, [sp, #28]
 8009ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8009eea:	4654      	mov	r4, sl
 8009eec:	2205      	movs	r2, #5
 8009eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef2:	4858      	ldr	r0, [pc, #352]	; (800a054 <_vfiprintf_r+0x24c>)
 8009ef4:	f7f6 f98c 	bl	8000210 <memchr>
 8009ef8:	9a04      	ldr	r2, [sp, #16]
 8009efa:	b9d8      	cbnz	r0, 8009f34 <_vfiprintf_r+0x12c>
 8009efc:	06d1      	lsls	r1, r2, #27
 8009efe:	bf44      	itt	mi
 8009f00:	2320      	movmi	r3, #32
 8009f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f06:	0713      	lsls	r3, r2, #28
 8009f08:	bf44      	itt	mi
 8009f0a:	232b      	movmi	r3, #43	; 0x2b
 8009f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f10:	f89a 3000 	ldrb.w	r3, [sl]
 8009f14:	2b2a      	cmp	r3, #42	; 0x2a
 8009f16:	d015      	beq.n	8009f44 <_vfiprintf_r+0x13c>
 8009f18:	9a07      	ldr	r2, [sp, #28]
 8009f1a:	4654      	mov	r4, sl
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	f04f 0c0a 	mov.w	ip, #10
 8009f22:	4621      	mov	r1, r4
 8009f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f28:	3b30      	subs	r3, #48	; 0x30
 8009f2a:	2b09      	cmp	r3, #9
 8009f2c:	d94e      	bls.n	8009fcc <_vfiprintf_r+0x1c4>
 8009f2e:	b1b0      	cbz	r0, 8009f5e <_vfiprintf_r+0x156>
 8009f30:	9207      	str	r2, [sp, #28]
 8009f32:	e014      	b.n	8009f5e <_vfiprintf_r+0x156>
 8009f34:	eba0 0308 	sub.w	r3, r0, r8
 8009f38:	fa09 f303 	lsl.w	r3, r9, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	9304      	str	r3, [sp, #16]
 8009f40:	46a2      	mov	sl, r4
 8009f42:	e7d2      	b.n	8009eea <_vfiprintf_r+0xe2>
 8009f44:	9b03      	ldr	r3, [sp, #12]
 8009f46:	1d19      	adds	r1, r3, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	9103      	str	r1, [sp, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	bfbb      	ittet	lt
 8009f50:	425b      	neglt	r3, r3
 8009f52:	f042 0202 	orrlt.w	r2, r2, #2
 8009f56:	9307      	strge	r3, [sp, #28]
 8009f58:	9307      	strlt	r3, [sp, #28]
 8009f5a:	bfb8      	it	lt
 8009f5c:	9204      	strlt	r2, [sp, #16]
 8009f5e:	7823      	ldrb	r3, [r4, #0]
 8009f60:	2b2e      	cmp	r3, #46	; 0x2e
 8009f62:	d10c      	bne.n	8009f7e <_vfiprintf_r+0x176>
 8009f64:	7863      	ldrb	r3, [r4, #1]
 8009f66:	2b2a      	cmp	r3, #42	; 0x2a
 8009f68:	d135      	bne.n	8009fd6 <_vfiprintf_r+0x1ce>
 8009f6a:	9b03      	ldr	r3, [sp, #12]
 8009f6c:	1d1a      	adds	r2, r3, #4
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	9203      	str	r2, [sp, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	bfb8      	it	lt
 8009f76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f7a:	3402      	adds	r4, #2
 8009f7c:	9305      	str	r3, [sp, #20]
 8009f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a064 <_vfiprintf_r+0x25c>
 8009f82:	7821      	ldrb	r1, [r4, #0]
 8009f84:	2203      	movs	r2, #3
 8009f86:	4650      	mov	r0, sl
 8009f88:	f7f6 f942 	bl	8000210 <memchr>
 8009f8c:	b140      	cbz	r0, 8009fa0 <_vfiprintf_r+0x198>
 8009f8e:	2340      	movs	r3, #64	; 0x40
 8009f90:	eba0 000a 	sub.w	r0, r0, sl
 8009f94:	fa03 f000 	lsl.w	r0, r3, r0
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	4303      	orrs	r3, r0
 8009f9c:	3401      	adds	r4, #1
 8009f9e:	9304      	str	r3, [sp, #16]
 8009fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa4:	482c      	ldr	r0, [pc, #176]	; (800a058 <_vfiprintf_r+0x250>)
 8009fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009faa:	2206      	movs	r2, #6
 8009fac:	f7f6 f930 	bl	8000210 <memchr>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d03f      	beq.n	800a034 <_vfiprintf_r+0x22c>
 8009fb4:	4b29      	ldr	r3, [pc, #164]	; (800a05c <_vfiprintf_r+0x254>)
 8009fb6:	bb1b      	cbnz	r3, 800a000 <_vfiprintf_r+0x1f8>
 8009fb8:	9b03      	ldr	r3, [sp, #12]
 8009fba:	3307      	adds	r3, #7
 8009fbc:	f023 0307 	bic.w	r3, r3, #7
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	9303      	str	r3, [sp, #12]
 8009fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc6:	443b      	add	r3, r7
 8009fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fca:	e767      	b.n	8009e9c <_vfiprintf_r+0x94>
 8009fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	e7a5      	b.n	8009f22 <_vfiprintf_r+0x11a>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	f04f 0c0a 	mov.w	ip, #10
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fe8:	3a30      	subs	r2, #48	; 0x30
 8009fea:	2a09      	cmp	r2, #9
 8009fec:	d903      	bls.n	8009ff6 <_vfiprintf_r+0x1ee>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0c5      	beq.n	8009f7e <_vfiprintf_r+0x176>
 8009ff2:	9105      	str	r1, [sp, #20]
 8009ff4:	e7c3      	b.n	8009f7e <_vfiprintf_r+0x176>
 8009ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e7f0      	b.n	8009fe2 <_vfiprintf_r+0x1da>
 800a000:	ab03      	add	r3, sp, #12
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	462a      	mov	r2, r5
 800a006:	4b16      	ldr	r3, [pc, #88]	; (800a060 <_vfiprintf_r+0x258>)
 800a008:	a904      	add	r1, sp, #16
 800a00a:	4630      	mov	r0, r6
 800a00c:	f3af 8000 	nop.w
 800a010:	4607      	mov	r7, r0
 800a012:	1c78      	adds	r0, r7, #1
 800a014:	d1d6      	bne.n	8009fc4 <_vfiprintf_r+0x1bc>
 800a016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a018:	07d9      	lsls	r1, r3, #31
 800a01a:	d405      	bmi.n	800a028 <_vfiprintf_r+0x220>
 800a01c:	89ab      	ldrh	r3, [r5, #12]
 800a01e:	059a      	lsls	r2, r3, #22
 800a020:	d402      	bmi.n	800a028 <_vfiprintf_r+0x220>
 800a022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a024:	f000 fc45 	bl	800a8b2 <__retarget_lock_release_recursive>
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	065b      	lsls	r3, r3, #25
 800a02c:	f53f af12 	bmi.w	8009e54 <_vfiprintf_r+0x4c>
 800a030:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a032:	e711      	b.n	8009e58 <_vfiprintf_r+0x50>
 800a034:	ab03      	add	r3, sp, #12
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	462a      	mov	r2, r5
 800a03a:	4b09      	ldr	r3, [pc, #36]	; (800a060 <_vfiprintf_r+0x258>)
 800a03c:	a904      	add	r1, sp, #16
 800a03e:	4630      	mov	r0, r6
 800a040:	f000 f880 	bl	800a144 <_printf_i>
 800a044:	e7e4      	b.n	800a010 <_vfiprintf_r+0x208>
 800a046:	bf00      	nop
 800a048:	0800acd0 	.word	0x0800acd0
 800a04c:	0800acf0 	.word	0x0800acf0
 800a050:	0800acb0 	.word	0x0800acb0
 800a054:	0800ac7a 	.word	0x0800ac7a
 800a058:	0800ac84 	.word	0x0800ac84
 800a05c:	00000000 	.word	0x00000000
 800a060:	08009de3 	.word	0x08009de3
 800a064:	0800ac80 	.word	0x0800ac80

0800a068 <_printf_common>:
 800a068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a06c:	4616      	mov	r6, r2
 800a06e:	4699      	mov	r9, r3
 800a070:	688a      	ldr	r2, [r1, #8]
 800a072:	690b      	ldr	r3, [r1, #16]
 800a074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a078:	4293      	cmp	r3, r2
 800a07a:	bfb8      	it	lt
 800a07c:	4613      	movlt	r3, r2
 800a07e:	6033      	str	r3, [r6, #0]
 800a080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a084:	4607      	mov	r7, r0
 800a086:	460c      	mov	r4, r1
 800a088:	b10a      	cbz	r2, 800a08e <_printf_common+0x26>
 800a08a:	3301      	adds	r3, #1
 800a08c:	6033      	str	r3, [r6, #0]
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	0699      	lsls	r1, r3, #26
 800a092:	bf42      	ittt	mi
 800a094:	6833      	ldrmi	r3, [r6, #0]
 800a096:	3302      	addmi	r3, #2
 800a098:	6033      	strmi	r3, [r6, #0]
 800a09a:	6825      	ldr	r5, [r4, #0]
 800a09c:	f015 0506 	ands.w	r5, r5, #6
 800a0a0:	d106      	bne.n	800a0b0 <_printf_common+0x48>
 800a0a2:	f104 0a19 	add.w	sl, r4, #25
 800a0a6:	68e3      	ldr	r3, [r4, #12]
 800a0a8:	6832      	ldr	r2, [r6, #0]
 800a0aa:	1a9b      	subs	r3, r3, r2
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dc26      	bgt.n	800a0fe <_printf_common+0x96>
 800a0b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0b4:	1e13      	subs	r3, r2, #0
 800a0b6:	6822      	ldr	r2, [r4, #0]
 800a0b8:	bf18      	it	ne
 800a0ba:	2301      	movne	r3, #1
 800a0bc:	0692      	lsls	r2, r2, #26
 800a0be:	d42b      	bmi.n	800a118 <_printf_common+0xb0>
 800a0c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0c4:	4649      	mov	r1, r9
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	47c0      	blx	r8
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	d01e      	beq.n	800a10c <_printf_common+0xa4>
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	68e5      	ldr	r5, [r4, #12]
 800a0d2:	6832      	ldr	r2, [r6, #0]
 800a0d4:	f003 0306 	and.w	r3, r3, #6
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	bf08      	it	eq
 800a0dc:	1aad      	subeq	r5, r5, r2
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	6922      	ldr	r2, [r4, #16]
 800a0e2:	bf0c      	ite	eq
 800a0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0e8:	2500      	movne	r5, #0
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	bfc4      	itt	gt
 800a0ee:	1a9b      	subgt	r3, r3, r2
 800a0f0:	18ed      	addgt	r5, r5, r3
 800a0f2:	2600      	movs	r6, #0
 800a0f4:	341a      	adds	r4, #26
 800a0f6:	42b5      	cmp	r5, r6
 800a0f8:	d11a      	bne.n	800a130 <_printf_common+0xc8>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	e008      	b.n	800a110 <_printf_common+0xa8>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4652      	mov	r2, sl
 800a102:	4649      	mov	r1, r9
 800a104:	4638      	mov	r0, r7
 800a106:	47c0      	blx	r8
 800a108:	3001      	adds	r0, #1
 800a10a:	d103      	bne.n	800a114 <_printf_common+0xac>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a114:	3501      	adds	r5, #1
 800a116:	e7c6      	b.n	800a0a6 <_printf_common+0x3e>
 800a118:	18e1      	adds	r1, r4, r3
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	2030      	movs	r0, #48	; 0x30
 800a11e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a122:	4422      	add	r2, r4
 800a124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a12c:	3302      	adds	r3, #2
 800a12e:	e7c7      	b.n	800a0c0 <_printf_common+0x58>
 800a130:	2301      	movs	r3, #1
 800a132:	4622      	mov	r2, r4
 800a134:	4649      	mov	r1, r9
 800a136:	4638      	mov	r0, r7
 800a138:	47c0      	blx	r8
 800a13a:	3001      	adds	r0, #1
 800a13c:	d0e6      	beq.n	800a10c <_printf_common+0xa4>
 800a13e:	3601      	adds	r6, #1
 800a140:	e7d9      	b.n	800a0f6 <_printf_common+0x8e>
	...

0800a144 <_printf_i>:
 800a144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a148:	460c      	mov	r4, r1
 800a14a:	4691      	mov	r9, r2
 800a14c:	7e27      	ldrb	r7, [r4, #24]
 800a14e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a150:	2f78      	cmp	r7, #120	; 0x78
 800a152:	4680      	mov	r8, r0
 800a154:	469a      	mov	sl, r3
 800a156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a15a:	d807      	bhi.n	800a16c <_printf_i+0x28>
 800a15c:	2f62      	cmp	r7, #98	; 0x62
 800a15e:	d80a      	bhi.n	800a176 <_printf_i+0x32>
 800a160:	2f00      	cmp	r7, #0
 800a162:	f000 80d8 	beq.w	800a316 <_printf_i+0x1d2>
 800a166:	2f58      	cmp	r7, #88	; 0x58
 800a168:	f000 80a3 	beq.w	800a2b2 <_printf_i+0x16e>
 800a16c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a174:	e03a      	b.n	800a1ec <_printf_i+0xa8>
 800a176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a17a:	2b15      	cmp	r3, #21
 800a17c:	d8f6      	bhi.n	800a16c <_printf_i+0x28>
 800a17e:	a001      	add	r0, pc, #4	; (adr r0, 800a184 <_printf_i+0x40>)
 800a180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a184:	0800a1dd 	.word	0x0800a1dd
 800a188:	0800a1f1 	.word	0x0800a1f1
 800a18c:	0800a16d 	.word	0x0800a16d
 800a190:	0800a16d 	.word	0x0800a16d
 800a194:	0800a16d 	.word	0x0800a16d
 800a198:	0800a16d 	.word	0x0800a16d
 800a19c:	0800a1f1 	.word	0x0800a1f1
 800a1a0:	0800a16d 	.word	0x0800a16d
 800a1a4:	0800a16d 	.word	0x0800a16d
 800a1a8:	0800a16d 	.word	0x0800a16d
 800a1ac:	0800a16d 	.word	0x0800a16d
 800a1b0:	0800a2fd 	.word	0x0800a2fd
 800a1b4:	0800a221 	.word	0x0800a221
 800a1b8:	0800a2df 	.word	0x0800a2df
 800a1bc:	0800a16d 	.word	0x0800a16d
 800a1c0:	0800a16d 	.word	0x0800a16d
 800a1c4:	0800a31f 	.word	0x0800a31f
 800a1c8:	0800a16d 	.word	0x0800a16d
 800a1cc:	0800a221 	.word	0x0800a221
 800a1d0:	0800a16d 	.word	0x0800a16d
 800a1d4:	0800a16d 	.word	0x0800a16d
 800a1d8:	0800a2e7 	.word	0x0800a2e7
 800a1dc:	680b      	ldr	r3, [r1, #0]
 800a1de:	1d1a      	adds	r2, r3, #4
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	600a      	str	r2, [r1, #0]
 800a1e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0a3      	b.n	800a338 <_printf_i+0x1f4>
 800a1f0:	6825      	ldr	r5, [r4, #0]
 800a1f2:	6808      	ldr	r0, [r1, #0]
 800a1f4:	062e      	lsls	r6, r5, #24
 800a1f6:	f100 0304 	add.w	r3, r0, #4
 800a1fa:	d50a      	bpl.n	800a212 <_printf_i+0xce>
 800a1fc:	6805      	ldr	r5, [r0, #0]
 800a1fe:	600b      	str	r3, [r1, #0]
 800a200:	2d00      	cmp	r5, #0
 800a202:	da03      	bge.n	800a20c <_printf_i+0xc8>
 800a204:	232d      	movs	r3, #45	; 0x2d
 800a206:	426d      	negs	r5, r5
 800a208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a20c:	485e      	ldr	r0, [pc, #376]	; (800a388 <_printf_i+0x244>)
 800a20e:	230a      	movs	r3, #10
 800a210:	e019      	b.n	800a246 <_printf_i+0x102>
 800a212:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a216:	6805      	ldr	r5, [r0, #0]
 800a218:	600b      	str	r3, [r1, #0]
 800a21a:	bf18      	it	ne
 800a21c:	b22d      	sxthne	r5, r5
 800a21e:	e7ef      	b.n	800a200 <_printf_i+0xbc>
 800a220:	680b      	ldr	r3, [r1, #0]
 800a222:	6825      	ldr	r5, [r4, #0]
 800a224:	1d18      	adds	r0, r3, #4
 800a226:	6008      	str	r0, [r1, #0]
 800a228:	0628      	lsls	r0, r5, #24
 800a22a:	d501      	bpl.n	800a230 <_printf_i+0xec>
 800a22c:	681d      	ldr	r5, [r3, #0]
 800a22e:	e002      	b.n	800a236 <_printf_i+0xf2>
 800a230:	0669      	lsls	r1, r5, #25
 800a232:	d5fb      	bpl.n	800a22c <_printf_i+0xe8>
 800a234:	881d      	ldrh	r5, [r3, #0]
 800a236:	4854      	ldr	r0, [pc, #336]	; (800a388 <_printf_i+0x244>)
 800a238:	2f6f      	cmp	r7, #111	; 0x6f
 800a23a:	bf0c      	ite	eq
 800a23c:	2308      	moveq	r3, #8
 800a23e:	230a      	movne	r3, #10
 800a240:	2100      	movs	r1, #0
 800a242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a246:	6866      	ldr	r6, [r4, #4]
 800a248:	60a6      	str	r6, [r4, #8]
 800a24a:	2e00      	cmp	r6, #0
 800a24c:	bfa2      	ittt	ge
 800a24e:	6821      	ldrge	r1, [r4, #0]
 800a250:	f021 0104 	bicge.w	r1, r1, #4
 800a254:	6021      	strge	r1, [r4, #0]
 800a256:	b90d      	cbnz	r5, 800a25c <_printf_i+0x118>
 800a258:	2e00      	cmp	r6, #0
 800a25a:	d04d      	beq.n	800a2f8 <_printf_i+0x1b4>
 800a25c:	4616      	mov	r6, r2
 800a25e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a262:	fb03 5711 	mls	r7, r3, r1, r5
 800a266:	5dc7      	ldrb	r7, [r0, r7]
 800a268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a26c:	462f      	mov	r7, r5
 800a26e:	42bb      	cmp	r3, r7
 800a270:	460d      	mov	r5, r1
 800a272:	d9f4      	bls.n	800a25e <_printf_i+0x11a>
 800a274:	2b08      	cmp	r3, #8
 800a276:	d10b      	bne.n	800a290 <_printf_i+0x14c>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	07df      	lsls	r7, r3, #31
 800a27c:	d508      	bpl.n	800a290 <_printf_i+0x14c>
 800a27e:	6923      	ldr	r3, [r4, #16]
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	4299      	cmp	r1, r3
 800a284:	bfde      	ittt	le
 800a286:	2330      	movle	r3, #48	; 0x30
 800a288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a28c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a290:	1b92      	subs	r2, r2, r6
 800a292:	6122      	str	r2, [r4, #16]
 800a294:	f8cd a000 	str.w	sl, [sp]
 800a298:	464b      	mov	r3, r9
 800a29a:	aa03      	add	r2, sp, #12
 800a29c:	4621      	mov	r1, r4
 800a29e:	4640      	mov	r0, r8
 800a2a0:	f7ff fee2 	bl	800a068 <_printf_common>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d14c      	bne.n	800a342 <_printf_i+0x1fe>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2ac:	b004      	add	sp, #16
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	4835      	ldr	r0, [pc, #212]	; (800a388 <_printf_i+0x244>)
 800a2b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	680e      	ldr	r6, [r1, #0]
 800a2bc:	061f      	lsls	r7, r3, #24
 800a2be:	f856 5b04 	ldr.w	r5, [r6], #4
 800a2c2:	600e      	str	r6, [r1, #0]
 800a2c4:	d514      	bpl.n	800a2f0 <_printf_i+0x1ac>
 800a2c6:	07d9      	lsls	r1, r3, #31
 800a2c8:	bf44      	itt	mi
 800a2ca:	f043 0320 	orrmi.w	r3, r3, #32
 800a2ce:	6023      	strmi	r3, [r4, #0]
 800a2d0:	b91d      	cbnz	r5, 800a2da <_printf_i+0x196>
 800a2d2:	6823      	ldr	r3, [r4, #0]
 800a2d4:	f023 0320 	bic.w	r3, r3, #32
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	2310      	movs	r3, #16
 800a2dc:	e7b0      	b.n	800a240 <_printf_i+0xfc>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	2378      	movs	r3, #120	; 0x78
 800a2e8:	4828      	ldr	r0, [pc, #160]	; (800a38c <_printf_i+0x248>)
 800a2ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a2ee:	e7e3      	b.n	800a2b8 <_printf_i+0x174>
 800a2f0:	065e      	lsls	r6, r3, #25
 800a2f2:	bf48      	it	mi
 800a2f4:	b2ad      	uxthmi	r5, r5
 800a2f6:	e7e6      	b.n	800a2c6 <_printf_i+0x182>
 800a2f8:	4616      	mov	r6, r2
 800a2fa:	e7bb      	b.n	800a274 <_printf_i+0x130>
 800a2fc:	680b      	ldr	r3, [r1, #0]
 800a2fe:	6826      	ldr	r6, [r4, #0]
 800a300:	6960      	ldr	r0, [r4, #20]
 800a302:	1d1d      	adds	r5, r3, #4
 800a304:	600d      	str	r5, [r1, #0]
 800a306:	0635      	lsls	r5, r6, #24
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	d501      	bpl.n	800a310 <_printf_i+0x1cc>
 800a30c:	6018      	str	r0, [r3, #0]
 800a30e:	e002      	b.n	800a316 <_printf_i+0x1d2>
 800a310:	0671      	lsls	r1, r6, #25
 800a312:	d5fb      	bpl.n	800a30c <_printf_i+0x1c8>
 800a314:	8018      	strh	r0, [r3, #0]
 800a316:	2300      	movs	r3, #0
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	4616      	mov	r6, r2
 800a31c:	e7ba      	b.n	800a294 <_printf_i+0x150>
 800a31e:	680b      	ldr	r3, [r1, #0]
 800a320:	1d1a      	adds	r2, r3, #4
 800a322:	600a      	str	r2, [r1, #0]
 800a324:	681e      	ldr	r6, [r3, #0]
 800a326:	6862      	ldr	r2, [r4, #4]
 800a328:	2100      	movs	r1, #0
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7f5 ff70 	bl	8000210 <memchr>
 800a330:	b108      	cbz	r0, 800a336 <_printf_i+0x1f2>
 800a332:	1b80      	subs	r0, r0, r6
 800a334:	6060      	str	r0, [r4, #4]
 800a336:	6863      	ldr	r3, [r4, #4]
 800a338:	6123      	str	r3, [r4, #16]
 800a33a:	2300      	movs	r3, #0
 800a33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a340:	e7a8      	b.n	800a294 <_printf_i+0x150>
 800a342:	6923      	ldr	r3, [r4, #16]
 800a344:	4632      	mov	r2, r6
 800a346:	4649      	mov	r1, r9
 800a348:	4640      	mov	r0, r8
 800a34a:	47d0      	blx	sl
 800a34c:	3001      	adds	r0, #1
 800a34e:	d0ab      	beq.n	800a2a8 <_printf_i+0x164>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	079b      	lsls	r3, r3, #30
 800a354:	d413      	bmi.n	800a37e <_printf_i+0x23a>
 800a356:	68e0      	ldr	r0, [r4, #12]
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	4298      	cmp	r0, r3
 800a35c:	bfb8      	it	lt
 800a35e:	4618      	movlt	r0, r3
 800a360:	e7a4      	b.n	800a2ac <_printf_i+0x168>
 800a362:	2301      	movs	r3, #1
 800a364:	4632      	mov	r2, r6
 800a366:	4649      	mov	r1, r9
 800a368:	4640      	mov	r0, r8
 800a36a:	47d0      	blx	sl
 800a36c:	3001      	adds	r0, #1
 800a36e:	d09b      	beq.n	800a2a8 <_printf_i+0x164>
 800a370:	3501      	adds	r5, #1
 800a372:	68e3      	ldr	r3, [r4, #12]
 800a374:	9903      	ldr	r1, [sp, #12]
 800a376:	1a5b      	subs	r3, r3, r1
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dcf2      	bgt.n	800a362 <_printf_i+0x21e>
 800a37c:	e7eb      	b.n	800a356 <_printf_i+0x212>
 800a37e:	2500      	movs	r5, #0
 800a380:	f104 0619 	add.w	r6, r4, #25
 800a384:	e7f5      	b.n	800a372 <_printf_i+0x22e>
 800a386:	bf00      	nop
 800a388:	0800ac8b 	.word	0x0800ac8b
 800a38c:	0800ac9c 	.word	0x0800ac9c

0800a390 <_sbrk_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d06      	ldr	r5, [pc, #24]	; (800a3ac <_sbrk_r+0x1c>)
 800a394:	2300      	movs	r3, #0
 800a396:	4604      	mov	r4, r0
 800a398:	4608      	mov	r0, r1
 800a39a:	602b      	str	r3, [r5, #0]
 800a39c:	f7f8 fe84 	bl	80030a8 <_sbrk>
 800a3a0:	1c43      	adds	r3, r0, #1
 800a3a2:	d102      	bne.n	800a3aa <_sbrk_r+0x1a>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	b103      	cbz	r3, 800a3aa <_sbrk_r+0x1a>
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	2000203c 	.word	0x2000203c

0800a3b0 <__swbuf_r>:
 800a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b2:	460e      	mov	r6, r1
 800a3b4:	4614      	mov	r4, r2
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	b118      	cbz	r0, 800a3c2 <__swbuf_r+0x12>
 800a3ba:	6983      	ldr	r3, [r0, #24]
 800a3bc:	b90b      	cbnz	r3, 800a3c2 <__swbuf_r+0x12>
 800a3be:	f000 f9d9 	bl	800a774 <__sinit>
 800a3c2:	4b21      	ldr	r3, [pc, #132]	; (800a448 <__swbuf_r+0x98>)
 800a3c4:	429c      	cmp	r4, r3
 800a3c6:	d12b      	bne.n	800a420 <__swbuf_r+0x70>
 800a3c8:	686c      	ldr	r4, [r5, #4]
 800a3ca:	69a3      	ldr	r3, [r4, #24]
 800a3cc:	60a3      	str	r3, [r4, #8]
 800a3ce:	89a3      	ldrh	r3, [r4, #12]
 800a3d0:	071a      	lsls	r2, r3, #28
 800a3d2:	d52f      	bpl.n	800a434 <__swbuf_r+0x84>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	b36b      	cbz	r3, 800a434 <__swbuf_r+0x84>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	6820      	ldr	r0, [r4, #0]
 800a3dc:	1ac0      	subs	r0, r0, r3
 800a3de:	6963      	ldr	r3, [r4, #20]
 800a3e0:	b2f6      	uxtb	r6, r6
 800a3e2:	4283      	cmp	r3, r0
 800a3e4:	4637      	mov	r7, r6
 800a3e6:	dc04      	bgt.n	800a3f2 <__swbuf_r+0x42>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f000 f92e 	bl	800a64c <_fflush_r>
 800a3f0:	bb30      	cbnz	r0, 800a440 <__swbuf_r+0x90>
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	60a3      	str	r3, [r4, #8]
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	6022      	str	r2, [r4, #0]
 800a3fe:	701e      	strb	r6, [r3, #0]
 800a400:	6963      	ldr	r3, [r4, #20]
 800a402:	3001      	adds	r0, #1
 800a404:	4283      	cmp	r3, r0
 800a406:	d004      	beq.n	800a412 <__swbuf_r+0x62>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	07db      	lsls	r3, r3, #31
 800a40c:	d506      	bpl.n	800a41c <__swbuf_r+0x6c>
 800a40e:	2e0a      	cmp	r6, #10
 800a410:	d104      	bne.n	800a41c <__swbuf_r+0x6c>
 800a412:	4621      	mov	r1, r4
 800a414:	4628      	mov	r0, r5
 800a416:	f000 f919 	bl	800a64c <_fflush_r>
 800a41a:	b988      	cbnz	r0, 800a440 <__swbuf_r+0x90>
 800a41c:	4638      	mov	r0, r7
 800a41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <__swbuf_r+0x9c>)
 800a422:	429c      	cmp	r4, r3
 800a424:	d101      	bne.n	800a42a <__swbuf_r+0x7a>
 800a426:	68ac      	ldr	r4, [r5, #8]
 800a428:	e7cf      	b.n	800a3ca <__swbuf_r+0x1a>
 800a42a:	4b09      	ldr	r3, [pc, #36]	; (800a450 <__swbuf_r+0xa0>)
 800a42c:	429c      	cmp	r4, r3
 800a42e:	bf08      	it	eq
 800a430:	68ec      	ldreq	r4, [r5, #12]
 800a432:	e7ca      	b.n	800a3ca <__swbuf_r+0x1a>
 800a434:	4621      	mov	r1, r4
 800a436:	4628      	mov	r0, r5
 800a438:	f000 f80c 	bl	800a454 <__swsetup_r>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d0cb      	beq.n	800a3d8 <__swbuf_r+0x28>
 800a440:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a444:	e7ea      	b.n	800a41c <__swbuf_r+0x6c>
 800a446:	bf00      	nop
 800a448:	0800acd0 	.word	0x0800acd0
 800a44c:	0800acf0 	.word	0x0800acf0
 800a450:	0800acb0 	.word	0x0800acb0

0800a454 <__swsetup_r>:
 800a454:	4b32      	ldr	r3, [pc, #200]	; (800a520 <__swsetup_r+0xcc>)
 800a456:	b570      	push	{r4, r5, r6, lr}
 800a458:	681d      	ldr	r5, [r3, #0]
 800a45a:	4606      	mov	r6, r0
 800a45c:	460c      	mov	r4, r1
 800a45e:	b125      	cbz	r5, 800a46a <__swsetup_r+0x16>
 800a460:	69ab      	ldr	r3, [r5, #24]
 800a462:	b913      	cbnz	r3, 800a46a <__swsetup_r+0x16>
 800a464:	4628      	mov	r0, r5
 800a466:	f000 f985 	bl	800a774 <__sinit>
 800a46a:	4b2e      	ldr	r3, [pc, #184]	; (800a524 <__swsetup_r+0xd0>)
 800a46c:	429c      	cmp	r4, r3
 800a46e:	d10f      	bne.n	800a490 <__swsetup_r+0x3c>
 800a470:	686c      	ldr	r4, [r5, #4]
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a478:	0719      	lsls	r1, r3, #28
 800a47a:	d42c      	bmi.n	800a4d6 <__swsetup_r+0x82>
 800a47c:	06dd      	lsls	r5, r3, #27
 800a47e:	d411      	bmi.n	800a4a4 <__swsetup_r+0x50>
 800a480:	2309      	movs	r3, #9
 800a482:	6033      	str	r3, [r6, #0]
 800a484:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a48e:	e03e      	b.n	800a50e <__swsetup_r+0xba>
 800a490:	4b25      	ldr	r3, [pc, #148]	; (800a528 <__swsetup_r+0xd4>)
 800a492:	429c      	cmp	r4, r3
 800a494:	d101      	bne.n	800a49a <__swsetup_r+0x46>
 800a496:	68ac      	ldr	r4, [r5, #8]
 800a498:	e7eb      	b.n	800a472 <__swsetup_r+0x1e>
 800a49a:	4b24      	ldr	r3, [pc, #144]	; (800a52c <__swsetup_r+0xd8>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	bf08      	it	eq
 800a4a0:	68ec      	ldreq	r4, [r5, #12]
 800a4a2:	e7e6      	b.n	800a472 <__swsetup_r+0x1e>
 800a4a4:	0758      	lsls	r0, r3, #29
 800a4a6:	d512      	bpl.n	800a4ce <__swsetup_r+0x7a>
 800a4a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4aa:	b141      	cbz	r1, 800a4be <__swsetup_r+0x6a>
 800a4ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d002      	beq.n	800a4ba <__swsetup_r+0x66>
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff fbd3 	bl	8009c60 <_free_r>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a4be:	89a3      	ldrh	r3, [r4, #12]
 800a4c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	6023      	str	r3, [r4, #0]
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	f043 0308 	orr.w	r3, r3, #8
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	b94b      	cbnz	r3, 800a4ee <__swsetup_r+0x9a>
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e4:	d003      	beq.n	800a4ee <__swsetup_r+0x9a>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f000 fa07 	bl	800a8fc <__smakebuf_r>
 800a4ee:	89a0      	ldrh	r0, [r4, #12]
 800a4f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4f4:	f010 0301 	ands.w	r3, r0, #1
 800a4f8:	d00a      	beq.n	800a510 <__swsetup_r+0xbc>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60a3      	str	r3, [r4, #8]
 800a4fe:	6963      	ldr	r3, [r4, #20]
 800a500:	425b      	negs	r3, r3
 800a502:	61a3      	str	r3, [r4, #24]
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	b943      	cbnz	r3, 800a51a <__swsetup_r+0xc6>
 800a508:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a50c:	d1ba      	bne.n	800a484 <__swsetup_r+0x30>
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	0781      	lsls	r1, r0, #30
 800a512:	bf58      	it	pl
 800a514:	6963      	ldrpl	r3, [r4, #20]
 800a516:	60a3      	str	r3, [r4, #8]
 800a518:	e7f4      	b.n	800a504 <__swsetup_r+0xb0>
 800a51a:	2000      	movs	r0, #0
 800a51c:	e7f7      	b.n	800a50e <__swsetup_r+0xba>
 800a51e:	bf00      	nop
 800a520:	2000005c 	.word	0x2000005c
 800a524:	0800acd0 	.word	0x0800acd0
 800a528:	0800acf0 	.word	0x0800acf0
 800a52c:	0800acb0 	.word	0x0800acb0

0800a530 <abort>:
 800a530:	b508      	push	{r3, lr}
 800a532:	2006      	movs	r0, #6
 800a534:	f000 fa56 	bl	800a9e4 <raise>
 800a538:	2001      	movs	r0, #1
 800a53a:	f7f8 fd3d 	bl	8002fb8 <_exit>
	...

0800a540 <__sflush_r>:
 800a540:	898a      	ldrh	r2, [r1, #12]
 800a542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a546:	4605      	mov	r5, r0
 800a548:	0710      	lsls	r0, r2, #28
 800a54a:	460c      	mov	r4, r1
 800a54c:	d458      	bmi.n	800a600 <__sflush_r+0xc0>
 800a54e:	684b      	ldr	r3, [r1, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	dc05      	bgt.n	800a560 <__sflush_r+0x20>
 800a554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a556:	2b00      	cmp	r3, #0
 800a558:	dc02      	bgt.n	800a560 <__sflush_r+0x20>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a562:	2e00      	cmp	r6, #0
 800a564:	d0f9      	beq.n	800a55a <__sflush_r+0x1a>
 800a566:	2300      	movs	r3, #0
 800a568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a56c:	682f      	ldr	r7, [r5, #0]
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	d032      	beq.n	800a5d8 <__sflush_r+0x98>
 800a572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	075a      	lsls	r2, r3, #29
 800a578:	d505      	bpl.n	800a586 <__sflush_r+0x46>
 800a57a:	6863      	ldr	r3, [r4, #4]
 800a57c:	1ac0      	subs	r0, r0, r3
 800a57e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a580:	b10b      	cbz	r3, 800a586 <__sflush_r+0x46>
 800a582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a584:	1ac0      	subs	r0, r0, r3
 800a586:	2300      	movs	r3, #0
 800a588:	4602      	mov	r2, r0
 800a58a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a58c:	6a21      	ldr	r1, [r4, #32]
 800a58e:	4628      	mov	r0, r5
 800a590:	47b0      	blx	r6
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	d106      	bne.n	800a5a6 <__sflush_r+0x66>
 800a598:	6829      	ldr	r1, [r5, #0]
 800a59a:	291d      	cmp	r1, #29
 800a59c:	d82c      	bhi.n	800a5f8 <__sflush_r+0xb8>
 800a59e:	4a2a      	ldr	r2, [pc, #168]	; (800a648 <__sflush_r+0x108>)
 800a5a0:	40ca      	lsrs	r2, r1
 800a5a2:	07d6      	lsls	r6, r2, #31
 800a5a4:	d528      	bpl.n	800a5f8 <__sflush_r+0xb8>
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	6062      	str	r2, [r4, #4]
 800a5aa:	04d9      	lsls	r1, r3, #19
 800a5ac:	6922      	ldr	r2, [r4, #16]
 800a5ae:	6022      	str	r2, [r4, #0]
 800a5b0:	d504      	bpl.n	800a5bc <__sflush_r+0x7c>
 800a5b2:	1c42      	adds	r2, r0, #1
 800a5b4:	d101      	bne.n	800a5ba <__sflush_r+0x7a>
 800a5b6:	682b      	ldr	r3, [r5, #0]
 800a5b8:	b903      	cbnz	r3, 800a5bc <__sflush_r+0x7c>
 800a5ba:	6560      	str	r0, [r4, #84]	; 0x54
 800a5bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5be:	602f      	str	r7, [r5, #0]
 800a5c0:	2900      	cmp	r1, #0
 800a5c2:	d0ca      	beq.n	800a55a <__sflush_r+0x1a>
 800a5c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5c8:	4299      	cmp	r1, r3
 800a5ca:	d002      	beq.n	800a5d2 <__sflush_r+0x92>
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f7ff fb47 	bl	8009c60 <_free_r>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a5d6:	e7c1      	b.n	800a55c <__sflush_r+0x1c>
 800a5d8:	6a21      	ldr	r1, [r4, #32]
 800a5da:	2301      	movs	r3, #1
 800a5dc:	4628      	mov	r0, r5
 800a5de:	47b0      	blx	r6
 800a5e0:	1c41      	adds	r1, r0, #1
 800a5e2:	d1c7      	bne.n	800a574 <__sflush_r+0x34>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0c4      	beq.n	800a574 <__sflush_r+0x34>
 800a5ea:	2b1d      	cmp	r3, #29
 800a5ec:	d001      	beq.n	800a5f2 <__sflush_r+0xb2>
 800a5ee:	2b16      	cmp	r3, #22
 800a5f0:	d101      	bne.n	800a5f6 <__sflush_r+0xb6>
 800a5f2:	602f      	str	r7, [r5, #0]
 800a5f4:	e7b1      	b.n	800a55a <__sflush_r+0x1a>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	e7ad      	b.n	800a55c <__sflush_r+0x1c>
 800a600:	690f      	ldr	r7, [r1, #16]
 800a602:	2f00      	cmp	r7, #0
 800a604:	d0a9      	beq.n	800a55a <__sflush_r+0x1a>
 800a606:	0793      	lsls	r3, r2, #30
 800a608:	680e      	ldr	r6, [r1, #0]
 800a60a:	bf08      	it	eq
 800a60c:	694b      	ldreq	r3, [r1, #20]
 800a60e:	600f      	str	r7, [r1, #0]
 800a610:	bf18      	it	ne
 800a612:	2300      	movne	r3, #0
 800a614:	eba6 0807 	sub.w	r8, r6, r7
 800a618:	608b      	str	r3, [r1, #8]
 800a61a:	f1b8 0f00 	cmp.w	r8, #0
 800a61e:	dd9c      	ble.n	800a55a <__sflush_r+0x1a>
 800a620:	6a21      	ldr	r1, [r4, #32]
 800a622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a624:	4643      	mov	r3, r8
 800a626:	463a      	mov	r2, r7
 800a628:	4628      	mov	r0, r5
 800a62a:	47b0      	blx	r6
 800a62c:	2800      	cmp	r0, #0
 800a62e:	dc06      	bgt.n	800a63e <__sflush_r+0xfe>
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a636:	81a3      	strh	r3, [r4, #12]
 800a638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a63c:	e78e      	b.n	800a55c <__sflush_r+0x1c>
 800a63e:	4407      	add	r7, r0
 800a640:	eba8 0800 	sub.w	r8, r8, r0
 800a644:	e7e9      	b.n	800a61a <__sflush_r+0xda>
 800a646:	bf00      	nop
 800a648:	20400001 	.word	0x20400001

0800a64c <_fflush_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	690b      	ldr	r3, [r1, #16]
 800a650:	4605      	mov	r5, r0
 800a652:	460c      	mov	r4, r1
 800a654:	b913      	cbnz	r3, 800a65c <_fflush_r+0x10>
 800a656:	2500      	movs	r5, #0
 800a658:	4628      	mov	r0, r5
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	b118      	cbz	r0, 800a666 <_fflush_r+0x1a>
 800a65e:	6983      	ldr	r3, [r0, #24]
 800a660:	b90b      	cbnz	r3, 800a666 <_fflush_r+0x1a>
 800a662:	f000 f887 	bl	800a774 <__sinit>
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <_fflush_r+0x6c>)
 800a668:	429c      	cmp	r4, r3
 800a66a:	d11b      	bne.n	800a6a4 <_fflush_r+0x58>
 800a66c:	686c      	ldr	r4, [r5, #4]
 800a66e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0ef      	beq.n	800a656 <_fflush_r+0xa>
 800a676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a678:	07d0      	lsls	r0, r2, #31
 800a67a:	d404      	bmi.n	800a686 <_fflush_r+0x3a>
 800a67c:	0599      	lsls	r1, r3, #22
 800a67e:	d402      	bmi.n	800a686 <_fflush_r+0x3a>
 800a680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a682:	f000 f915 	bl	800a8b0 <__retarget_lock_acquire_recursive>
 800a686:	4628      	mov	r0, r5
 800a688:	4621      	mov	r1, r4
 800a68a:	f7ff ff59 	bl	800a540 <__sflush_r>
 800a68e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a690:	07da      	lsls	r2, r3, #31
 800a692:	4605      	mov	r5, r0
 800a694:	d4e0      	bmi.n	800a658 <_fflush_r+0xc>
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	059b      	lsls	r3, r3, #22
 800a69a:	d4dd      	bmi.n	800a658 <_fflush_r+0xc>
 800a69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a69e:	f000 f908 	bl	800a8b2 <__retarget_lock_release_recursive>
 800a6a2:	e7d9      	b.n	800a658 <_fflush_r+0xc>
 800a6a4:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <_fflush_r+0x70>)
 800a6a6:	429c      	cmp	r4, r3
 800a6a8:	d101      	bne.n	800a6ae <_fflush_r+0x62>
 800a6aa:	68ac      	ldr	r4, [r5, #8]
 800a6ac:	e7df      	b.n	800a66e <_fflush_r+0x22>
 800a6ae:	4b04      	ldr	r3, [pc, #16]	; (800a6c0 <_fflush_r+0x74>)
 800a6b0:	429c      	cmp	r4, r3
 800a6b2:	bf08      	it	eq
 800a6b4:	68ec      	ldreq	r4, [r5, #12]
 800a6b6:	e7da      	b.n	800a66e <_fflush_r+0x22>
 800a6b8:	0800acd0 	.word	0x0800acd0
 800a6bc:	0800acf0 	.word	0x0800acf0
 800a6c0:	0800acb0 	.word	0x0800acb0

0800a6c4 <std>:
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a6ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6d2:	6083      	str	r3, [r0, #8]
 800a6d4:	8181      	strh	r1, [r0, #12]
 800a6d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a6d8:	81c2      	strh	r2, [r0, #14]
 800a6da:	6183      	str	r3, [r0, #24]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	2208      	movs	r2, #8
 800a6e0:	305c      	adds	r0, #92	; 0x5c
 800a6e2:	f7ff fa3d 	bl	8009b60 <memset>
 800a6e6:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <std+0x38>)
 800a6e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a6ea:	4b05      	ldr	r3, [pc, #20]	; (800a700 <std+0x3c>)
 800a6ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6ee:	4b05      	ldr	r3, [pc, #20]	; (800a704 <std+0x40>)
 800a6f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6f2:	4b05      	ldr	r3, [pc, #20]	; (800a708 <std+0x44>)
 800a6f4:	6224      	str	r4, [r4, #32]
 800a6f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0800aa1d 	.word	0x0800aa1d
 800a700:	0800aa3f 	.word	0x0800aa3f
 800a704:	0800aa77 	.word	0x0800aa77
 800a708:	0800aa9b 	.word	0x0800aa9b

0800a70c <_cleanup_r>:
 800a70c:	4901      	ldr	r1, [pc, #4]	; (800a714 <_cleanup_r+0x8>)
 800a70e:	f000 b8af 	b.w	800a870 <_fwalk_reent>
 800a712:	bf00      	nop
 800a714:	0800a64d 	.word	0x0800a64d

0800a718 <__sfmoreglue>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	1e4a      	subs	r2, r1, #1
 800a71c:	2568      	movs	r5, #104	; 0x68
 800a71e:	4355      	muls	r5, r2
 800a720:	460e      	mov	r6, r1
 800a722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a726:	f7ff faeb 	bl	8009d00 <_malloc_r>
 800a72a:	4604      	mov	r4, r0
 800a72c:	b140      	cbz	r0, 800a740 <__sfmoreglue+0x28>
 800a72e:	2100      	movs	r1, #0
 800a730:	e9c0 1600 	strd	r1, r6, [r0]
 800a734:	300c      	adds	r0, #12
 800a736:	60a0      	str	r0, [r4, #8]
 800a738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a73c:	f7ff fa10 	bl	8009b60 <memset>
 800a740:	4620      	mov	r0, r4
 800a742:	bd70      	pop	{r4, r5, r6, pc}

0800a744 <__sfp_lock_acquire>:
 800a744:	4801      	ldr	r0, [pc, #4]	; (800a74c <__sfp_lock_acquire+0x8>)
 800a746:	f000 b8b3 	b.w	800a8b0 <__retarget_lock_acquire_recursive>
 800a74a:	bf00      	nop
 800a74c:	20002038 	.word	0x20002038

0800a750 <__sfp_lock_release>:
 800a750:	4801      	ldr	r0, [pc, #4]	; (800a758 <__sfp_lock_release+0x8>)
 800a752:	f000 b8ae 	b.w	800a8b2 <__retarget_lock_release_recursive>
 800a756:	bf00      	nop
 800a758:	20002038 	.word	0x20002038

0800a75c <__sinit_lock_acquire>:
 800a75c:	4801      	ldr	r0, [pc, #4]	; (800a764 <__sinit_lock_acquire+0x8>)
 800a75e:	f000 b8a7 	b.w	800a8b0 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	20002033 	.word	0x20002033

0800a768 <__sinit_lock_release>:
 800a768:	4801      	ldr	r0, [pc, #4]	; (800a770 <__sinit_lock_release+0x8>)
 800a76a:	f000 b8a2 	b.w	800a8b2 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	20002033 	.word	0x20002033

0800a774 <__sinit>:
 800a774:	b510      	push	{r4, lr}
 800a776:	4604      	mov	r4, r0
 800a778:	f7ff fff0 	bl	800a75c <__sinit_lock_acquire>
 800a77c:	69a3      	ldr	r3, [r4, #24]
 800a77e:	b11b      	cbz	r3, 800a788 <__sinit+0x14>
 800a780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a784:	f7ff bff0 	b.w	800a768 <__sinit_lock_release>
 800a788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a78c:	6523      	str	r3, [r4, #80]	; 0x50
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <__sinit+0x68>)
 800a790:	4a13      	ldr	r2, [pc, #76]	; (800a7e0 <__sinit+0x6c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	62a2      	str	r2, [r4, #40]	; 0x28
 800a796:	42a3      	cmp	r3, r4
 800a798:	bf04      	itt	eq
 800a79a:	2301      	moveq	r3, #1
 800a79c:	61a3      	streq	r3, [r4, #24]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f000 f820 	bl	800a7e4 <__sfp>
 800a7a4:	6060      	str	r0, [r4, #4]
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 f81c 	bl	800a7e4 <__sfp>
 800a7ac:	60a0      	str	r0, [r4, #8]
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 f818 	bl	800a7e4 <__sfp>
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	60e0      	str	r0, [r4, #12]
 800a7b8:	2104      	movs	r1, #4
 800a7ba:	6860      	ldr	r0, [r4, #4]
 800a7bc:	f7ff ff82 	bl	800a6c4 <std>
 800a7c0:	68a0      	ldr	r0, [r4, #8]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	2109      	movs	r1, #9
 800a7c6:	f7ff ff7d 	bl	800a6c4 <std>
 800a7ca:	68e0      	ldr	r0, [r4, #12]
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	2112      	movs	r1, #18
 800a7d0:	f7ff ff78 	bl	800a6c4 <std>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	61a3      	str	r3, [r4, #24]
 800a7d8:	e7d2      	b.n	800a780 <__sinit+0xc>
 800a7da:	bf00      	nop
 800a7dc:	0800abc4 	.word	0x0800abc4
 800a7e0:	0800a70d 	.word	0x0800a70d

0800a7e4 <__sfp>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	f7ff ffac 	bl	800a744 <__sfp_lock_acquire>
 800a7ec:	4b1e      	ldr	r3, [pc, #120]	; (800a868 <__sfp+0x84>)
 800a7ee:	681e      	ldr	r6, [r3, #0]
 800a7f0:	69b3      	ldr	r3, [r6, #24]
 800a7f2:	b913      	cbnz	r3, 800a7fa <__sfp+0x16>
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f7ff ffbd 	bl	800a774 <__sinit>
 800a7fa:	3648      	adds	r6, #72	; 0x48
 800a7fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a800:	3b01      	subs	r3, #1
 800a802:	d503      	bpl.n	800a80c <__sfp+0x28>
 800a804:	6833      	ldr	r3, [r6, #0]
 800a806:	b30b      	cbz	r3, 800a84c <__sfp+0x68>
 800a808:	6836      	ldr	r6, [r6, #0]
 800a80a:	e7f7      	b.n	800a7fc <__sfp+0x18>
 800a80c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a810:	b9d5      	cbnz	r5, 800a848 <__sfp+0x64>
 800a812:	4b16      	ldr	r3, [pc, #88]	; (800a86c <__sfp+0x88>)
 800a814:	60e3      	str	r3, [r4, #12]
 800a816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a81a:	6665      	str	r5, [r4, #100]	; 0x64
 800a81c:	f000 f847 	bl	800a8ae <__retarget_lock_init_recursive>
 800a820:	f7ff ff96 	bl	800a750 <__sfp_lock_release>
 800a824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a82c:	6025      	str	r5, [r4, #0]
 800a82e:	61a5      	str	r5, [r4, #24]
 800a830:	2208      	movs	r2, #8
 800a832:	4629      	mov	r1, r5
 800a834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a838:	f7ff f992 	bl	8009b60 <memset>
 800a83c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a844:	4620      	mov	r0, r4
 800a846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a848:	3468      	adds	r4, #104	; 0x68
 800a84a:	e7d9      	b.n	800a800 <__sfp+0x1c>
 800a84c:	2104      	movs	r1, #4
 800a84e:	4638      	mov	r0, r7
 800a850:	f7ff ff62 	bl	800a718 <__sfmoreglue>
 800a854:	4604      	mov	r4, r0
 800a856:	6030      	str	r0, [r6, #0]
 800a858:	2800      	cmp	r0, #0
 800a85a:	d1d5      	bne.n	800a808 <__sfp+0x24>
 800a85c:	f7ff ff78 	bl	800a750 <__sfp_lock_release>
 800a860:	230c      	movs	r3, #12
 800a862:	603b      	str	r3, [r7, #0]
 800a864:	e7ee      	b.n	800a844 <__sfp+0x60>
 800a866:	bf00      	nop
 800a868:	0800abc4 	.word	0x0800abc4
 800a86c:	ffff0001 	.word	0xffff0001

0800a870 <_fwalk_reent>:
 800a870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a874:	4606      	mov	r6, r0
 800a876:	4688      	mov	r8, r1
 800a878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a87c:	2700      	movs	r7, #0
 800a87e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a882:	f1b9 0901 	subs.w	r9, r9, #1
 800a886:	d505      	bpl.n	800a894 <_fwalk_reent+0x24>
 800a888:	6824      	ldr	r4, [r4, #0]
 800a88a:	2c00      	cmp	r4, #0
 800a88c:	d1f7      	bne.n	800a87e <_fwalk_reent+0xe>
 800a88e:	4638      	mov	r0, r7
 800a890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a894:	89ab      	ldrh	r3, [r5, #12]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d907      	bls.n	800a8aa <_fwalk_reent+0x3a>
 800a89a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	d003      	beq.n	800a8aa <_fwalk_reent+0x3a>
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	47c0      	blx	r8
 800a8a8:	4307      	orrs	r7, r0
 800a8aa:	3568      	adds	r5, #104	; 0x68
 800a8ac:	e7e9      	b.n	800a882 <_fwalk_reent+0x12>

0800a8ae <__retarget_lock_init_recursive>:
 800a8ae:	4770      	bx	lr

0800a8b0 <__retarget_lock_acquire_recursive>:
 800a8b0:	4770      	bx	lr

0800a8b2 <__retarget_lock_release_recursive>:
 800a8b2:	4770      	bx	lr

0800a8b4 <__swhatbuf_r>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	460e      	mov	r6, r1
 800a8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	b096      	sub	sp, #88	; 0x58
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	461d      	mov	r5, r3
 800a8c4:	da07      	bge.n	800a8d6 <__swhatbuf_r+0x22>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	602b      	str	r3, [r5, #0]
 800a8ca:	89b3      	ldrh	r3, [r6, #12]
 800a8cc:	061a      	lsls	r2, r3, #24
 800a8ce:	d410      	bmi.n	800a8f2 <__swhatbuf_r+0x3e>
 800a8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8d4:	e00e      	b.n	800a8f4 <__swhatbuf_r+0x40>
 800a8d6:	466a      	mov	r2, sp
 800a8d8:	f000 f906 	bl	800aae8 <_fstat_r>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	dbf2      	blt.n	800a8c6 <__swhatbuf_r+0x12>
 800a8e0:	9a01      	ldr	r2, [sp, #4]
 800a8e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8ea:	425a      	negs	r2, r3
 800a8ec:	415a      	adcs	r2, r3
 800a8ee:	602a      	str	r2, [r5, #0]
 800a8f0:	e7ee      	b.n	800a8d0 <__swhatbuf_r+0x1c>
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	b016      	add	sp, #88	; 0x58
 800a8fa:	bd70      	pop	{r4, r5, r6, pc}

0800a8fc <__smakebuf_r>:
 800a8fc:	898b      	ldrh	r3, [r1, #12]
 800a8fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a900:	079d      	lsls	r5, r3, #30
 800a902:	4606      	mov	r6, r0
 800a904:	460c      	mov	r4, r1
 800a906:	d507      	bpl.n	800a918 <__smakebuf_r+0x1c>
 800a908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	6123      	str	r3, [r4, #16]
 800a910:	2301      	movs	r3, #1
 800a912:	6163      	str	r3, [r4, #20]
 800a914:	b002      	add	sp, #8
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	ab01      	add	r3, sp, #4
 800a91a:	466a      	mov	r2, sp
 800a91c:	f7ff ffca 	bl	800a8b4 <__swhatbuf_r>
 800a920:	9900      	ldr	r1, [sp, #0]
 800a922:	4605      	mov	r5, r0
 800a924:	4630      	mov	r0, r6
 800a926:	f7ff f9eb 	bl	8009d00 <_malloc_r>
 800a92a:	b948      	cbnz	r0, 800a940 <__smakebuf_r+0x44>
 800a92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a930:	059a      	lsls	r2, r3, #22
 800a932:	d4ef      	bmi.n	800a914 <__smakebuf_r+0x18>
 800a934:	f023 0303 	bic.w	r3, r3, #3
 800a938:	f043 0302 	orr.w	r3, r3, #2
 800a93c:	81a3      	strh	r3, [r4, #12]
 800a93e:	e7e3      	b.n	800a908 <__smakebuf_r+0xc>
 800a940:	4b0d      	ldr	r3, [pc, #52]	; (800a978 <__smakebuf_r+0x7c>)
 800a942:	62b3      	str	r3, [r6, #40]	; 0x28
 800a944:	89a3      	ldrh	r3, [r4, #12]
 800a946:	6020      	str	r0, [r4, #0]
 800a948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a94c:	81a3      	strh	r3, [r4, #12]
 800a94e:	9b00      	ldr	r3, [sp, #0]
 800a950:	6163      	str	r3, [r4, #20]
 800a952:	9b01      	ldr	r3, [sp, #4]
 800a954:	6120      	str	r0, [r4, #16]
 800a956:	b15b      	cbz	r3, 800a970 <__smakebuf_r+0x74>
 800a958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a95c:	4630      	mov	r0, r6
 800a95e:	f000 f8d5 	bl	800ab0c <_isatty_r>
 800a962:	b128      	cbz	r0, 800a970 <__smakebuf_r+0x74>
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	f023 0303 	bic.w	r3, r3, #3
 800a96a:	f043 0301 	orr.w	r3, r3, #1
 800a96e:	81a3      	strh	r3, [r4, #12]
 800a970:	89a0      	ldrh	r0, [r4, #12]
 800a972:	4305      	orrs	r5, r0
 800a974:	81a5      	strh	r5, [r4, #12]
 800a976:	e7cd      	b.n	800a914 <__smakebuf_r+0x18>
 800a978:	0800a70d 	.word	0x0800a70d

0800a97c <__malloc_lock>:
 800a97c:	4801      	ldr	r0, [pc, #4]	; (800a984 <__malloc_lock+0x8>)
 800a97e:	f7ff bf97 	b.w	800a8b0 <__retarget_lock_acquire_recursive>
 800a982:	bf00      	nop
 800a984:	20002034 	.word	0x20002034

0800a988 <__malloc_unlock>:
 800a988:	4801      	ldr	r0, [pc, #4]	; (800a990 <__malloc_unlock+0x8>)
 800a98a:	f7ff bf92 	b.w	800a8b2 <__retarget_lock_release_recursive>
 800a98e:	bf00      	nop
 800a990:	20002034 	.word	0x20002034

0800a994 <_raise_r>:
 800a994:	291f      	cmp	r1, #31
 800a996:	b538      	push	{r3, r4, r5, lr}
 800a998:	4604      	mov	r4, r0
 800a99a:	460d      	mov	r5, r1
 800a99c:	d904      	bls.n	800a9a8 <_raise_r+0x14>
 800a99e:	2316      	movs	r3, #22
 800a9a0:	6003      	str	r3, [r0, #0]
 800a9a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9aa:	b112      	cbz	r2, 800a9b2 <_raise_r+0x1e>
 800a9ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9b0:	b94b      	cbnz	r3, 800a9c6 <_raise_r+0x32>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f830 	bl	800aa18 <_getpid_r>
 800a9b8:	462a      	mov	r2, r5
 800a9ba:	4601      	mov	r1, r0
 800a9bc:	4620      	mov	r0, r4
 800a9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9c2:	f000 b817 	b.w	800a9f4 <_kill_r>
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d00a      	beq.n	800a9e0 <_raise_r+0x4c>
 800a9ca:	1c59      	adds	r1, r3, #1
 800a9cc:	d103      	bne.n	800a9d6 <_raise_r+0x42>
 800a9ce:	2316      	movs	r3, #22
 800a9d0:	6003      	str	r3, [r0, #0]
 800a9d2:	2001      	movs	r0, #1
 800a9d4:	e7e7      	b.n	800a9a6 <_raise_r+0x12>
 800a9d6:	2400      	movs	r4, #0
 800a9d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9dc:	4628      	mov	r0, r5
 800a9de:	4798      	blx	r3
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	e7e0      	b.n	800a9a6 <_raise_r+0x12>

0800a9e4 <raise>:
 800a9e4:	4b02      	ldr	r3, [pc, #8]	; (800a9f0 <raise+0xc>)
 800a9e6:	4601      	mov	r1, r0
 800a9e8:	6818      	ldr	r0, [r3, #0]
 800a9ea:	f7ff bfd3 	b.w	800a994 <_raise_r>
 800a9ee:	bf00      	nop
 800a9f0:	2000005c 	.word	0x2000005c

0800a9f4 <_kill_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d07      	ldr	r5, [pc, #28]	; (800aa14 <_kill_r+0x20>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f7f8 fac9 	bl	8002f98 <_kill>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d102      	bne.n	800aa10 <_kill_r+0x1c>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	b103      	cbz	r3, 800aa10 <_kill_r+0x1c>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	2000203c 	.word	0x2000203c

0800aa18 <_getpid_r>:
 800aa18:	f7f8 bab6 	b.w	8002f88 <_getpid>

0800aa1c <__sread>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	460c      	mov	r4, r1
 800aa20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa24:	f000 f894 	bl	800ab50 <_read_r>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	bfab      	itete	ge
 800aa2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa2e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa30:	181b      	addge	r3, r3, r0
 800aa32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa36:	bfac      	ite	ge
 800aa38:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa3a:	81a3      	strhlt	r3, [r4, #12]
 800aa3c:	bd10      	pop	{r4, pc}

0800aa3e <__swrite>:
 800aa3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	461f      	mov	r7, r3
 800aa44:	898b      	ldrh	r3, [r1, #12]
 800aa46:	05db      	lsls	r3, r3, #23
 800aa48:	4605      	mov	r5, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	4616      	mov	r6, r2
 800aa4e:	d505      	bpl.n	800aa5c <__swrite+0x1e>
 800aa50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa54:	2302      	movs	r3, #2
 800aa56:	2200      	movs	r2, #0
 800aa58:	f000 f868 	bl	800ab2c <_lseek_r>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	4632      	mov	r2, r6
 800aa6a:	463b      	mov	r3, r7
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa72:	f000 b817 	b.w	800aaa4 <_write_r>

0800aa76 <__sseek>:
 800aa76:	b510      	push	{r4, lr}
 800aa78:	460c      	mov	r4, r1
 800aa7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7e:	f000 f855 	bl	800ab2c <_lseek_r>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	bf15      	itete	ne
 800aa88:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa92:	81a3      	strheq	r3, [r4, #12]
 800aa94:	bf18      	it	ne
 800aa96:	81a3      	strhne	r3, [r4, #12]
 800aa98:	bd10      	pop	{r4, pc}

0800aa9a <__sclose>:
 800aa9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa9e:	f000 b813 	b.w	800aac8 <_close_r>
	...

0800aaa4 <_write_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	; (800aac4 <_write_r+0x20>)
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4611      	mov	r1, r2
 800aaae:	2200      	movs	r2, #0
 800aab0:	602a      	str	r2, [r5, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	f7f8 faa7 	bl	8003006 <_write>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_write_r+0x1e>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_write_r+0x1e>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	2000203c 	.word	0x2000203c

0800aac8 <_close_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	; (800aae4 <_close_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f8 fab3 	bl	800303e <_close>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_close_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_close_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	2000203c 	.word	0x2000203c

0800aae8 <_fstat_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d07      	ldr	r5, [pc, #28]	; (800ab08 <_fstat_r+0x20>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	602b      	str	r3, [r5, #0]
 800aaf6:	f7f8 faae 	bl	8003056 <_fstat>
 800aafa:	1c43      	adds	r3, r0, #1
 800aafc:	d102      	bne.n	800ab04 <_fstat_r+0x1c>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	b103      	cbz	r3, 800ab04 <_fstat_r+0x1c>
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	bf00      	nop
 800ab08:	2000203c 	.word	0x2000203c

0800ab0c <_isatty_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4d06      	ldr	r5, [pc, #24]	; (800ab28 <_isatty_r+0x1c>)
 800ab10:	2300      	movs	r3, #0
 800ab12:	4604      	mov	r4, r0
 800ab14:	4608      	mov	r0, r1
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	f7f8 faad 	bl	8003076 <_isatty>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_isatty_r+0x1a>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_isatty_r+0x1a>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	2000203c 	.word	0x2000203c

0800ab2c <_lseek_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	; (800ab4c <_lseek_r+0x20>)
 800ab30:	4604      	mov	r4, r0
 800ab32:	4608      	mov	r0, r1
 800ab34:	4611      	mov	r1, r2
 800ab36:	2200      	movs	r2, #0
 800ab38:	602a      	str	r2, [r5, #0]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f7f8 faa6 	bl	800308c <_lseek>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_lseek_r+0x1e>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_lseek_r+0x1e>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	2000203c 	.word	0x2000203c

0800ab50 <_read_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d07      	ldr	r5, [pc, #28]	; (800ab70 <_read_r+0x20>)
 800ab54:	4604      	mov	r4, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	4611      	mov	r1, r2
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	602a      	str	r2, [r5, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	f7f8 fa34 	bl	8002fcc <_read>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d102      	bne.n	800ab6e <_read_r+0x1e>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	b103      	cbz	r3, 800ab6e <_read_r+0x1e>
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
 800ab70:	2000203c 	.word	0x2000203c

0800ab74 <_init>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_fini>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr
