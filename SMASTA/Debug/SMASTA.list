
SMASTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008cc0  08008cc0  00018cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf8  08008cf8  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08008cf8  08008cf8  00018cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d00  08008d00  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d00  08008d00  00018d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d04  08008d04  00018d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08008d08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f08  20000038  08008d40  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f40  08008d40  00021f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199fb  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db7  00000000  00000000  00039a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003d950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a78  00000000  00000000  0003e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017670  00000000  00000000  00062408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3a61  00000000  00000000  00079a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d4d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000498c  00000000  00000000  0014d52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000038 	.word	0x20000038
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008ca8 	.word	0x08008ca8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000003c 	.word	0x2000003c
 8000204:	08008ca8 	.word	0x08008ca8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b96e 	b.w	8000ce8 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8083 	bne.w	8000b3a <__udivmoddi4+0x116>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d947      	bls.n	8000aca <__udivmoddi4+0xa6>
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	b142      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	f1c2 0020 	rsb	r0, r2, #32
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbbc f6f8 	udiv	r6, ip, r8
 8000a5c:	fa1f fe87 	uxth.w	lr, r7
 8000a60:	fb08 c116 	mls	r1, r8, r6, ip
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f10e 	mul.w	r1, r6, lr
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a76:	f080 8119 	bcs.w	8000cac <__udivmoddi4+0x288>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8116 	bls.w	8000cac <__udivmoddi4+0x288>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	443b      	add	r3, r7
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	45a6      	cmp	lr, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa2:	f080 8105 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000aa6:	45a6      	cmp	lr, r4
 8000aa8:	f240 8102 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000aac:	3802      	subs	r0, #2
 8000aae:	443c      	add	r4, r7
 8000ab0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab4:	eba4 040e 	sub.w	r4, r4, lr
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xaa>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d150      	bne.n	8000b78 <__udivmoddi4+0x154>
 8000ad6:	1bcb      	subs	r3, r1, r7
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af0:	fb08 f30c 	mul.w	r3, r8, ip
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0xe2>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	f200 80e9 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x10c>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x10a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80d9 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e7bf      	b.n	8000aba <__udivmoddi4+0x96>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x12e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <__udivmoddi4+0x282>
 8000b44:	2600      	movs	r6, #0
 8000b46:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f683 	clz	r6, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d14a      	bne.n	8000bf0 <__udivmoddi4+0x1cc>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0x140>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80b8 	bhi.w	8000cd4 <__udivmoddi4+0x2b0>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0103 	sbc.w	r1, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0a8      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b80:	4097      	lsls	r7, r2
 8000b82:	fa01 f002 	lsl.w	r0, r1, r2
 8000b86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8a:	40d9      	lsrs	r1, r3
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0c03      	lsrs	r3, r0, #16
 8000b90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f108 	mul.w	r1, r6, r8
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	fa04 f402 	lsl.w	r4, r4, r2
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x19c>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bb2:	f080 808d 	bcs.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 808a 	bls.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b281      	uxth	r1, r0
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb00 f308 	mul.w	r3, r0, r8
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x1c4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bde:	d273      	bcs.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d971      	bls.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be4:	3802      	subs	r0, #2
 8000be6:	4439      	add	r1, r7
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bee:	e778      	b.n	8000ae2 <__udivmoddi4+0xbe>
 8000bf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c02:	fa01 f306 	lsl.w	r3, r1, r6
 8000c06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0c3b      	lsrs	r3, r7, #16
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fa1f f884 	uxth.w	r8, r4
 8000c1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c22:	fb09 fa08 	mul.w	sl, r9, r8
 8000c26:	458a      	cmp	sl, r1
 8000c28:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x220>
 8000c32:	1861      	adds	r1, r4, r1
 8000c34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c38:	d248      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	d946      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4421      	add	r1, r4
 8000c44:	eba1 010a 	sub.w	r1, r1, sl
 8000c48:	b2bf      	uxth	r7, r7
 8000c4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c56:	fb00 f808 	mul.w	r8, r0, r8
 8000c5a:	45b8      	cmp	r8, r7
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x24a>
 8000c5e:	19e7      	adds	r7, r4, r7
 8000c60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c64:	d22e      	bcs.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c66:	45b8      	cmp	r8, r7
 8000c68:	d92c      	bls.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4427      	add	r7, r4
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	eba7 0708 	sub.w	r7, r7, r8
 8000c76:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7a:	454f      	cmp	r7, r9
 8000c7c:	46c6      	mov	lr, r8
 8000c7e:	4649      	mov	r1, r9
 8000c80:	d31a      	bcc.n	8000cb8 <__udivmoddi4+0x294>
 8000c82:	d017      	beq.n	8000cb4 <__udivmoddi4+0x290>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x27a>
 8000c86:	ebb3 020e 	subs.w	r2, r3, lr
 8000c8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	ea4c 0202 	orr.w	r2, ip, r2
 8000c98:	40f7      	lsrs	r7, r6
 8000c9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e70b      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fd      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb4:	4543      	cmp	r3, r8
 8000cb6:	d2e5      	bcs.n	8000c84 <__udivmoddi4+0x260>
 8000cb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0x260>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e7d2      	b.n	8000c6e <__udivmoddi4+0x24a>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	e78d      	b.n	8000be8 <__udivmoddi4+0x1c4>
 8000ccc:	4681      	mov	r9, r0
 8000cce:	e7b9      	b.n	8000c44 <__udivmoddi4+0x220>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	e775      	b.n	8000bc0 <__udivmoddi4+0x19c>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e74a      	b.n	8000b6e <__udivmoddi4+0x14a>
 8000cd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cdc:	4439      	add	r1, r7
 8000cde:	e713      	b.n	8000b08 <__udivmoddi4+0xe4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	e724      	b.n	8000b30 <__udivmoddi4+0x10c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <appInit>:
static bool _bump2_wait_off = false;

static int Encoder_Process(void);
static void ArraySwap_Rainbow(int num);

int appInit(void){
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
	return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	0000      	movs	r0, r0
	...

08000d00 <appTask>:

int appTask(void){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
	DeltaTime = G_System_counter - Recent_System_counter;
 8000d06:	4ba0      	ldr	r3, [pc, #640]	; (8000f88 <appTask+0x288>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4ba0      	ldr	r3, [pc, #640]	; (8000f8c <appTask+0x28c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4a9f      	ldr	r2, [pc, #636]	; (8000f90 <appTask+0x290>)
 8000d12:	6013      	str	r3, [r2, #0]

	Encoder_Process();
 8000d14:	f000 fc70 	bl	80015f8 <Encoder_Process>

	if(IO_READ_USERBUTTON()){
 8000d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1c:	489d      	ldr	r0, [pc, #628]	; (8000f94 <appTask+0x294>)
 8000d1e:	f001 fee6 	bl	8002aee <D_GPIO_Read>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f083 0301 	eor.w	r3, r3, #1
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <appTask+0x3a>
		//IO_SET_USERLED();
		IO_SET_STAYKICKER();
 8000d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d32:	4899      	ldr	r0, [pc, #612]	; (8000f98 <appTask+0x298>)
 8000d34:	f001 febb 	bl	8002aae <D_GPIO_Set>
 8000d38:	e004      	b.n	8000d44 <appTask+0x44>
		//IO_RESET_USERLED();
		//for(int i=0; i<50; i++){
        //	D_LED_Set(i, 0, 0, 0);
      	//}
      	//D_LED_Send();
		IO_RESET_STAYKICKER();
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4896      	ldr	r0, [pc, #600]	; (8000f98 <appTask+0x298>)
 8000d40:	f001 fec5 	bl	8002ace <D_GPIO_Reset>
	}

	if(IO_READ_BUMP_1_HIT()==1 && !_bump1_is_on && !_bump1_wait_off){
 8000d44:	2110      	movs	r1, #16
 8000d46:	4895      	ldr	r0, [pc, #596]	; (8000f9c <appTask+0x29c>)
 8000d48:	f001 fed1 	bl	8002aee <D_GPIO_Read>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f083 0301 	eor.w	r3, r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d014      	beq.n	8000d82 <appTask+0x82>
 8000d58:	4b91      	ldr	r3, [pc, #580]	; (8000fa0 <appTask+0x2a0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	f083 0301 	eor.w	r3, r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d00d      	beq.n	8000d82 <appTask+0x82>
 8000d66:	4b8f      	ldr	r3, [pc, #572]	; (8000fa4 <appTask+0x2a4>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	f083 0301 	eor.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <appTask+0x82>
		_bump1_is_on = true;
 8000d74:	4b8a      	ldr	r3, [pc, #552]	; (8000fa0 <appTask+0x2a0>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
		IO_SET_BUMP_1();
 8000d7a:	2120      	movs	r1, #32
 8000d7c:	4886      	ldr	r0, [pc, #536]	; (8000f98 <appTask+0x298>)
 8000d7e:	f001 fe96 	bl	8002aae <D_GPIO_Set>
	}
	if(_bump1_is_on && IO_READ_BUMP_1_SOL()==1 && !_bump1_wait_off){
 8000d82:	4b87      	ldr	r3, [pc, #540]	; (8000fa0 <appTask+0x2a0>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d01a      	beq.n	8000dc0 <appTask+0xc0>
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	4882      	ldr	r0, [pc, #520]	; (8000f98 <appTask+0x298>)
 8000d8e:	f001 feae 	bl	8002aee <D_GPIO_Read>
 8000d92:	4603      	mov	r3, r0
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d010      	beq.n	8000dc0 <appTask+0xc0>
 8000d9e:	4b81      	ldr	r3, [pc, #516]	; (8000fa4 <appTask+0x2a4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	f083 0301 	eor.w	r3, r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d009      	beq.n	8000dc0 <appTask+0xc0>
		_bump1_is_on = false;
 8000dac:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <appTask+0x2a0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
		_bump1_wait_off = true;
 8000db2:	4b7c      	ldr	r3, [pc, #496]	; (8000fa4 <appTask+0x2a4>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
		IO_RESET_BUMP_1();
 8000db8:	2120      	movs	r1, #32
 8000dba:	4877      	ldr	r0, [pc, #476]	; (8000f98 <appTask+0x298>)
 8000dbc:	f001 fe87 	bl	8002ace <D_GPIO_Reset>
	}
	if(_bump1_wait_off && IO_READ_BUMP_1_SOL()==0 && IO_READ_BUMP_1_HIT()==0){
 8000dc0:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <appTask+0x2a4>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d010      	beq.n	8000dea <appTask+0xea>
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4873      	ldr	r0, [pc, #460]	; (8000f98 <appTask+0x298>)
 8000dcc:	f001 fe8f 	bl	8002aee <D_GPIO_Read>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d009      	beq.n	8000dea <appTask+0xea>
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4870      	ldr	r0, [pc, #448]	; (8000f9c <appTask+0x29c>)
 8000dda:	f001 fe88 	bl	8002aee <D_GPIO_Read>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <appTask+0xea>
		_bump1_wait_off = false;
 8000de4:	4b6f      	ldr	r3, [pc, #444]	; (8000fa4 <appTask+0x2a4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
	}
	if(IO_READ_BUMP_2_HIT()==1 && !_bump2_is_on && !_bump2_wait_off){
 8000dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dee:	4869      	ldr	r0, [pc, #420]	; (8000f94 <appTask+0x294>)
 8000df0:	f001 fe7d 	bl	8002aee <D_GPIO_Read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	f083 0301 	eor.w	r3, r3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d015      	beq.n	8000e2c <appTask+0x12c>
 8000e00:	4b69      	ldr	r3, [pc, #420]	; (8000fa8 <appTask+0x2a8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	f083 0301 	eor.w	r3, r3, #1
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00e      	beq.n	8000e2c <appTask+0x12c>
 8000e0e:	4b67      	ldr	r3, [pc, #412]	; (8000fac <appTask+0x2ac>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	f083 0301 	eor.w	r3, r3, #1
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <appTask+0x12c>
		_bump2_is_on = true;
 8000e1c:	4b62      	ldr	r3, [pc, #392]	; (8000fa8 <appTask+0x2a8>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]
		IO_SET_BUMP_2();
 8000e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e26:	485c      	ldr	r0, [pc, #368]	; (8000f98 <appTask+0x298>)
 8000e28:	f001 fe41 	bl	8002aae <D_GPIO_Set>
	}
	if(_bump2_is_on && IO_READ_BUMP_2_SOL()==1 && !_bump2_wait_off){
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <appTask+0x2a8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d01b      	beq.n	8000e6c <appTask+0x16c>
 8000e34:	2104      	movs	r1, #4
 8000e36:	485e      	ldr	r0, [pc, #376]	; (8000fb0 <appTask+0x2b0>)
 8000e38:	f001 fe59 	bl	8002aee <D_GPIO_Read>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	f083 0301 	eor.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d011      	beq.n	8000e6c <appTask+0x16c>
 8000e48:	4b58      	ldr	r3, [pc, #352]	; (8000fac <appTask+0x2ac>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	f083 0301 	eor.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00a      	beq.n	8000e6c <appTask+0x16c>
		_bump2_is_on = false;
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <appTask+0x2a8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
		_bump2_wait_off = true;
 8000e5c:	4b53      	ldr	r3, [pc, #332]	; (8000fac <appTask+0x2ac>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
		IO_RESET_BUMP_2();
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	484c      	ldr	r0, [pc, #304]	; (8000f98 <appTask+0x298>)
 8000e68:	f001 fe31 	bl	8002ace <D_GPIO_Reset>
	}
	if(_bump2_wait_off && IO_READ_BUMP_2_SOL()==0 && IO_READ_BUMP_2_HIT()==0){
 8000e6c:	4b4f      	ldr	r3, [pc, #316]	; (8000fac <appTask+0x2ac>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d011      	beq.n	8000e98 <appTask+0x198>
 8000e74:	2104      	movs	r1, #4
 8000e76:	484e      	ldr	r0, [pc, #312]	; (8000fb0 <appTask+0x2b0>)
 8000e78:	f001 fe39 	bl	8002aee <D_GPIO_Read>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <appTask+0x198>
 8000e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e86:	4843      	ldr	r0, [pc, #268]	; (8000f94 <appTask+0x294>)
 8000e88:	f001 fe31 	bl	8002aee <D_GPIO_Read>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <appTask+0x198>
		_bump2_wait_off = false;
 8000e92:	4b46      	ldr	r3, [pc, #280]	; (8000fac <appTask+0x2ac>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
	}

	RainbowTime += DeltaTime;
 8000e98:	4b46      	ldr	r3, [pc, #280]	; (8000fb4 <appTask+0x2b4>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <appTask+0x290>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <appTask+0x2b4>)
 8000ea4:	6013      	str	r3, [r2, #0]
	if(RainbowTime >= RAINBOW_FLOWTIME){
 8000ea6:	4b43      	ldr	r3, [pc, #268]	; (8000fb4 <appTask+0x2b4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b63      	cmp	r3, #99	; 0x63
 8000eac:	d90e      	bls.n	8000ecc <appTask+0x1cc>
		RainbowCount++;
 8000eae:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <appTask+0x2b8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <appTask+0x2b8>)
 8000eb6:	6013      	str	r3, [r2, #0]
		RainbowTime = 0;
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <appTask+0x2b4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
		if(RainbowCount >= 50){
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <appTask+0x2b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b31      	cmp	r3, #49	; 0x31
 8000ec4:	dd02      	ble.n	8000ecc <appTask+0x1cc>
			RainbowCount = 0;
 8000ec6:	4b3c      	ldr	r3, [pc, #240]	; (8000fb8 <appTask+0x2b8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
		}
	}
	GradationTime += DeltaTime;
 8000ecc:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <appTask+0x2bc>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <appTask+0x290>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a39      	ldr	r2, [pc, #228]	; (8000fbc <appTask+0x2bc>)
 8000ed8:	6013      	str	r3, [r2, #0]
	if(GradationTime >= (GRADATION_CYCLETIME/(LED_NUM*10))){
 8000eda:	4b38      	ldr	r3, [pc, #224]	; (8000fbc <appTask+0x2bc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b0d      	cmp	r3, #13
 8000ee0:	d91e      	bls.n	8000f20 <appTask+0x220>
		//GradationFadeCount++;
		GradationCount++;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <appTask+0x2c0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a35      	ldr	r2, [pc, #212]	; (8000fc0 <appTask+0x2c0>)
 8000eea:	6013      	str	r3, [r2, #0]
		GradationTime = 0;
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <appTask+0x2bc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
		//if(GradationFadeCount >= 10){
		//	GradationFadeCount = 0;
		//}
		if(GradationCount > 250*2){
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <appTask+0x2c0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000efa:	dd02      	ble.n	8000f02 <appTask+0x202>
			GradationCount = 0;
 8000efc:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <appTask+0x2c0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
		}
		GradationFadeCount = GradationCount%10;
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <appTask+0x2c0>)
 8000f04:	6819      	ldr	r1, [r3, #0]
 8000f06:	4b2f      	ldr	r3, [pc, #188]	; (8000fc4 <appTask+0x2c4>)
 8000f08:	fb83 2301 	smull	r2, r3, r3, r1
 8000f0c:	109a      	asrs	r2, r3, #2
 8000f0e:	17cb      	asrs	r3, r1, #31
 8000f10:	1ad2      	subs	r2, r2, r3
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	1aca      	subs	r2, r1, r3
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <appTask+0x2c8>)
 8000f1e:	601a      	str	r2, [r3, #0]
	//	GradationFadeTime = 0;
	//	if(GradationFadeCount >= LED_NUM){
	//		GradationFadeCount = 0;
	//	}
	//}
	BlinkTime += DeltaTime;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <appTask+0x2cc>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <appTask+0x290>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a28      	ldr	r2, [pc, #160]	; (8000fcc <appTask+0x2cc>)
 8000f2c:	6013      	str	r3, [r2, #0]
	if(BlinkTime >= BLINK_FLOWTIME){
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <appTask+0x2cc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d902      	bls.n	8000f40 <appTask+0x240>
		BlinkTime = 0;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <appTask+0x2cc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
	}
	if(BlinkTime <= 100){
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <appTask+0x2cc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b64      	cmp	r3, #100	; 0x64
 8000f46:	d807      	bhi.n	8000f58 <appTask+0x258>
		BlinkCoeff = 0.0;
 8000f48:	4921      	ldr	r1, [pc, #132]	; (8000fd0 <appTask+0x2d0>)
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	e9c1 2300 	strd	r2, r3, [r1]
 8000f56:	e04a      	b.n	8000fee <appTask+0x2ee>
	}else if(BlinkTime <= 250){
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <appTask+0x2cc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2bfa      	cmp	r3, #250	; 0xfa
 8000f5e:	d806      	bhi.n	8000f6e <appTask+0x26e>
		BlinkCoeff = 1.0;
 8000f60:	491b      	ldr	r1, [pc, #108]	; (8000fd0 <appTask+0x2d0>)
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <appTask+0x2d4>)
 8000f68:	e9c1 2300 	strd	r2, r3, [r1]
 8000f6c:	e03f      	b.n	8000fee <appTask+0x2ee>
	}else if(BlinkTime <= 350){
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <appTask+0x2cc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000f76:	d82f      	bhi.n	8000fd8 <appTask+0x2d8>
		BlinkCoeff = 0.0;
 8000f78:	4915      	ldr	r1, [pc, #84]	; (8000fd0 <appTask+0x2d0>)
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	e9c1 2300 	strd	r2, r3, [r1]
 8000f86:	e032      	b.n	8000fee <appTask+0x2ee>
 8000f88:	200001bc 	.word	0x200001bc
 8000f8c:	20000188 	.word	0x20000188
 8000f90:	2000018c 	.word	0x2000018c
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	200001a4 	.word	0x200001a4
 8000fa4:	200001a6 	.word	0x200001a6
 8000fa8:	200001a5 	.word	0x200001a5
 8000fac:	200001a7 	.word	0x200001a7
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	20000190 	.word	0x20000190
 8000fb8:	2000019c 	.word	0x2000019c
 8000fbc:	20000198 	.word	0x20000198
 8000fc0:	20000018 	.word	0x20000018
 8000fc4:	66666667 	.word	0x66666667
 8000fc8:	200001a0 	.word	0x200001a0
 8000fcc:	20000194 	.word	0x20000194
 8000fd0:	20000020 	.word	0x20000020
 8000fd4:	3ff00000 	.word	0x3ff00000
	}else if(BlinkTime <= 450){
 8000fd8:	4b87      	ldr	r3, [pc, #540]	; (80011f8 <appTask+0x4f8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000fe0:	d805      	bhi.n	8000fee <appTask+0x2ee>
		BlinkCoeff = 1.0;
 8000fe2:	4986      	ldr	r1, [pc, #536]	; (80011fc <appTask+0x4fc>)
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b85      	ldr	r3, [pc, #532]	; (8001200 <appTask+0x500>)
 8000fea:	e9c1 2300 	strd	r2, r3, [r1]
	}

	ArraySwap_Rainbow(RainbowCount);
 8000fee:	4b85      	ldr	r3, [pc, #532]	; (8001204 <appTask+0x504>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb88 	bl	8001708 <ArraySwap_Rainbow>
	for(int i=0; i<5; i++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ffc:	e229      	b.n	8001452 <appTask+0x752>
    	int r=0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    	int g=0;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    	int b=0;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
		double coeff = 1.0;
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	4b7c      	ldr	r3, [pc, #496]	; (8001200 <appTask+0x500>)
 8001010:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001016:	2b04      	cmp	r3, #4
 8001018:	d82f      	bhi.n	800107a <appTask+0x37a>
 800101a:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <appTask+0x320>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	08001035 	.word	0x08001035
 8001024:	08001043 	.word	0x08001043
 8001028:	08001051 	.word	0x08001051
 800102c:	0800105f 	.word	0x0800105f
 8001030:	0800106d 	.word	0x0800106d
    	switch (i)
    	{
    	case 0:
    	  	r=1;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
    	  	break;
 8001040:	e01b      	b.n	800107a <appTask+0x37a>

    	case 1:
    	  	r=1;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
    	  	break;
 800104e:	e014      	b.n	800107a <appTask+0x37a>

    	case 2:
    	  	r=0;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=1;
 8001054:	2301      	movs	r3, #1
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
    	  	break;
 800105c:	e00d      	b.n	800107a <appTask+0x37a>

    	case 3:
    	  	r=1;
 800105e:	2301      	movs	r3, #1
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=1;
 8001066:	2301      	movs	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
    	  	break;
 800106a:	e006      	b.n	800107a <appTask+0x37a>

    	case 4:
    	  	r=1;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=1;
 8001070:	2301      	movs	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
    	  	break;
 8001078:	bf00      	nop
    	}

		if(i==0 || i==2){
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <appTask+0x388>
 8001080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001082:	2b02      	cmp	r3, #2
 8001084:	f040 80a0 	bne.w	80011c8 <appTask+0x4c8>
			for(int j=0; j<10; j++){
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e097      	b.n	80011be <appTask+0x4be>
				if(j==0 || j==9){
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <appTask+0x39a>
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b09      	cmp	r3, #9
 8001098:	d106      	bne.n	80010a8 <appTask+0x3a8>
					coeff = 0.0;
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80010a6:	e004      	b.n	80010b2 <appTask+0x3b2>
				}else{
					coeff = 1.0;
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b54      	ldr	r3, [pc, #336]	; (8001200 <appTask+0x500>)
 80010ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				int index = ((int)(Encoder_Count/2.0) + i*10+j) % 50;
 80010b2:	4b55      	ldr	r3, [pc, #340]	; (8001208 <appTask+0x508>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9e8 	bl	800048c <__aeabi_ui2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c4:	f7ff fb86 	bl	80007d4 <__aeabi_ddiv>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fc68 	bl	80009a4 <__aeabi_d2iz>
 80010d4:	4601      	mov	r1, r0
 80010d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	18ca      	adds	r2, r1, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a49      	ldr	r2, [pc, #292]	; (800120c <appTask+0x50c>)
 80010e8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ec:	1111      	asrs	r1, r2, #4
 80010ee:	17da      	asrs	r2, r3, #31
 80010f0:	1a8a      	subs	r2, r1, r2
 80010f2:	2132      	movs	r1, #50	; 0x32
 80010f4:	fb01 f202 	mul.w	r2, r1, r2
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	607b      	str	r3, [r7, #4]
				LED_Temp[j][0] = (int)((double)LED_Temp_Rainbow[index][0]*coeff);
 80010fc:	4944      	ldr	r1, [pc, #272]	; (8001210 <appTask+0x510>)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	440b      	add	r3, r1
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9be 	bl	800048c <__aeabi_ui2d>
 8001110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001114:	f7ff fa34 	bl	8000580 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff fc40 	bl	80009a4 <__aeabi_d2iz>
 8001124:	4603      	mov	r3, r0
 8001126:	b2d8      	uxtb	r0, r3
 8001128:	493a      	ldr	r1, [pc, #232]	; (8001214 <appTask+0x514>)
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	440b      	add	r3, r1
 8001134:	4602      	mov	r2, r0
 8001136:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)LED_Temp_Rainbow[index][1]*coeff);
 8001138:	4935      	ldr	r1, [pc, #212]	; (8001210 <appTask+0x510>)
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	440b      	add	r3, r1
 8001144:	3301      	adds	r3, #1
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f99f 	bl	800048c <__aeabi_ui2d>
 800114e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001152:	f7ff fa15 	bl	8000580 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fc21 	bl	80009a4 <__aeabi_d2iz>
 8001162:	4603      	mov	r3, r0
 8001164:	b2d8      	uxtb	r0, r3
 8001166:	492b      	ldr	r1, [pc, #172]	; (8001214 <appTask+0x514>)
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	440b      	add	r3, r1
 8001172:	3301      	adds	r3, #1
 8001174:	4602      	mov	r2, r0
 8001176:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)LED_Temp_Rainbow[index][2]*coeff);
 8001178:	4925      	ldr	r1, [pc, #148]	; (8001210 <appTask+0x510>)
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	440b      	add	r3, r1
 8001184:	3302      	adds	r3, #2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f97f 	bl	800048c <__aeabi_ui2d>
 800118e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001192:	f7ff f9f5 	bl	8000580 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fc01 	bl	80009a4 <__aeabi_d2iz>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b2d8      	uxtb	r0, r3
 80011a6:	491b      	ldr	r1, [pc, #108]	; (8001214 <appTask+0x514>)
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	3302      	adds	r3, #2
 80011b4:	4602      	mov	r2, r0
 80011b6:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<10; j++){
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	f77f af64 	ble.w	800108e <appTask+0x38e>
 80011c6:	e13b      	b.n	8001440 <appTask+0x740>
			}
		}else if(i==3 || i==4){
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d003      	beq.n	80011d6 <appTask+0x4d6>
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	f040 80ab 	bne.w	800132c <appTask+0x62c>
			for(int j=0;j<10;j++){
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	e0a2      	b.n	8001322 <appTask+0x622>
				if(j==0 || j==9){
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <appTask+0x4e8>
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	2b09      	cmp	r3, #9
 80011e6:	d117      	bne.n	8001218 <appTask+0x518>
					coeff = 0.0;
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80011f4:	e015      	b.n	8001222 <appTask+0x522>
 80011f6:	bf00      	nop
 80011f8:	20000194 	.word	0x20000194
 80011fc:	20000020 	.word	0x20000020
 8001200:	3ff00000 	.word	0x3ff00000
 8001204:	2000019c 	.word	0x2000019c
 8001208:	20000054 	.word	0x20000054
 800120c:	51eb851f 	.word	0x51eb851f
 8001210:	200000f0 	.word	0x200000f0
 8001214:	20000058 	.word	0x20000058
				}else{
					coeff = 1.0;
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <appTask+0x658>)
 800121e:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				LED_Temp[j][0] = (int)((double)r*255.0*BlinkCoeff*coeff);
 8001222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001224:	f7ff f942 	bl	80004ac <__aeabi_i2d>
 8001228:	a349      	add	r3, pc, #292	; (adr r3, 8001350 <appTask+0x650>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f9a7 	bl	8000580 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	4b48      	ldr	r3, [pc, #288]	; (800135c <appTask+0x65c>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f99e 	bl	8000580 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001250:	f7ff f996 	bl	8000580 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fba2 	bl	80009a4 <__aeabi_d2iz>
 8001260:	4603      	mov	r3, r0
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	493e      	ldr	r1, [pc, #248]	; (8001360 <appTask+0x660>)
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	440b      	add	r3, r1
 8001270:	4602      	mov	r2, r0
 8001272:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)g*255.0*BlinkCoeff*coeff);
 8001274:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001276:	f7ff f919 	bl	80004ac <__aeabi_i2d>
 800127a:	a335      	add	r3, pc, #212	; (adr r3, 8001350 <appTask+0x650>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f97e 	bl	8000580 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	4b33      	ldr	r3, [pc, #204]	; (800135c <appTask+0x65c>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff f975 	bl	8000580 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012a2:	f7ff f96d 	bl	8000580 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fb79 	bl	80009a4 <__aeabi_d2iz>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b2d8      	uxtb	r0, r3
 80012b6:	492a      	ldr	r1, [pc, #168]	; (8001360 <appTask+0x660>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	3301      	adds	r3, #1
 80012c4:	4602      	mov	r2, r0
 80012c6:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)b*255.0*BlinkCoeff*coeff);
 80012c8:	6a38      	ldr	r0, [r7, #32]
 80012ca:	f7ff f8ef 	bl	80004ac <__aeabi_i2d>
 80012ce:	a320      	add	r3, pc, #128	; (adr r3, 8001350 <appTask+0x650>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f954 	bl	8000580 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <appTask+0x65c>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f94b 	bl	8000580 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012f6:	f7ff f943 	bl	8000580 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f7ff fb4f 	bl	80009a4 <__aeabi_d2iz>
 8001306:	4603      	mov	r3, r0
 8001308:	b2d8      	uxtb	r0, r3
 800130a:	4915      	ldr	r1, [pc, #84]	; (8001360 <appTask+0x660>)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	440b      	add	r3, r1
 8001316:	3302      	adds	r3, #2
 8001318:	4602      	mov	r2, r0
 800131a:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<10;j++){
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	3301      	adds	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	2b09      	cmp	r3, #9
 8001326:	f77f af59 	ble.w	80011dc <appTask+0x4dc>
 800132a:	e089      	b.n	8001440 <appTask+0x740>
			}
		}else{
			for(int j=0;j<10;j++){
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	e082      	b.n	8001438 <appTask+0x738>
				if(j==0 || j==9){
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <appTask+0x63e>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b09      	cmp	r3, #9
 800133c:	d112      	bne.n	8001364 <appTask+0x664>
					coeff = 0.0;
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800134a:	e010      	b.n	800136e <appTask+0x66e>
 800134c:	f3af 8000 	nop.w
 8001350:	00000000 	.word	0x00000000
 8001354:	406fe000 	.word	0x406fe000
 8001358:	3ff00000 	.word	0x3ff00000
 800135c:	20000020 	.word	0x20000020
 8001360:	20000058 	.word	0x20000058
				}else{
					coeff = 1.0;
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b95      	ldr	r3, [pc, #596]	; (80015c0 <appTask+0x8c0>)
 800136a:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				LED_Temp[j][0] = (int)((double)r*255.0*coeff);
 800136e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001370:	f7ff f89c 	bl	80004ac <__aeabi_i2d>
 8001374:	a390      	add	r3, pc, #576	; (adr r3, 80015b8 <appTask+0x8b8>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f901 	bl	8000580 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800138a:	f7ff f8f9 	bl	8000580 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fb05 	bl	80009a4 <__aeabi_d2iz>
 800139a:	4603      	mov	r3, r0
 800139c:	b2d8      	uxtb	r0, r3
 800139e:	4989      	ldr	r1, [pc, #548]	; (80015c4 <appTask+0x8c4>)
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	440b      	add	r3, r1
 80013aa:	4602      	mov	r2, r0
 80013ac:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)g*255.0*coeff);
 80013ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013b0:	f7ff f87c 	bl	80004ac <__aeabi_i2d>
 80013b4:	a380      	add	r3, pc, #512	; (adr r3, 80015b8 <appTask+0x8b8>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff f8e1 	bl	8000580 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ca:	f7ff f8d9 	bl	8000580 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fae5 	bl	80009a4 <__aeabi_d2iz>
 80013da:	4603      	mov	r3, r0
 80013dc:	b2d8      	uxtb	r0, r3
 80013de:	4979      	ldr	r1, [pc, #484]	; (80015c4 <appTask+0x8c4>)
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	3301      	adds	r3, #1
 80013ec:	4602      	mov	r2, r0
 80013ee:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)b*255.0*coeff);
 80013f0:	6a38      	ldr	r0, [r7, #32]
 80013f2:	f7ff f85b 	bl	80004ac <__aeabi_i2d>
 80013f6:	a370      	add	r3, pc, #448	; (adr r3, 80015b8 <appTask+0x8b8>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8c0 	bl	8000580 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140c:	f7ff f8b8 	bl	8000580 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fac4 	bl	80009a4 <__aeabi_d2iz>
 800141c:	4603      	mov	r3, r0
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	4968      	ldr	r1, [pc, #416]	; (80015c4 <appTask+0x8c4>)
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	440b      	add	r3, r1
 800142c:	3302      	adds	r3, #2
 800142e:	4602      	mov	r2, r0
 8001430:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<10;j++){
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b09      	cmp	r3, #9
 800143c:	f77f af79 	ble.w	8001332 <appTask+0x632>
			}
		}
		D_LED_Set_Circle(LED_Temp, i+1);
 8001440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001442:	3301      	adds	r3, #1
 8001444:	4619      	mov	r1, r3
 8001446:	485f      	ldr	r0, [pc, #380]	; (80015c4 <appTask+0x8c4>)
 8001448:	f001 fb66 	bl	8002b18 <D_LED_Set_Circle>
	for(int i=0; i<5; i++){
 800144c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144e:	3301      	adds	r3, #1
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	2b04      	cmp	r3, #4
 8001456:	f77f add2 	ble.w	8000ffe <appTask+0x2fe>
	//LED_Temp[GradationCount/10][0] = (double)LED_Temp[GradationCount/10][0]*((double)(10-GradationFadeCount)/10.0);
	//LED_Temp[GradationCount/10][1] = (double)LED_Temp[GradationCount/10][1]*((double)(10-GradationFadeCount)/10.0);
	//LED_Temp[GradationCount/10][2] = (double)LED_Temp[GradationCount/10][2]*((double)(10-GradationFadeCount)/10.0);
	
	//D_LED_Set_All(LED_Temp);
	D_LED_Rotate(-(int)(Encoder_Count/2.0) + LED_OFFSET);
 800145a:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <appTask+0x8c8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f814 	bl	800048c <__aeabi_ui2d>
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800146c:	f7ff f9b2 	bl	80007d4 <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fa94 	bl	80009a4 <__aeabi_d2iz>
 800147c:	4603      	mov	r3, r0
 800147e:	f1c3 0305 	rsb	r3, r3, #5
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fc2a 	bl	8002cdc <D_LED_Rotate>
    D_LED_Send();
 8001488:	f001 fbb4 	bl	8002bf4 <D_LED_Send>

	int16_t debug_bits = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_ENC_STEP() << 0);
 8001490:	2104      	movs	r1, #4
 8001492:	484e      	ldr	r0, [pc, #312]	; (80015cc <appTask+0x8cc>)
 8001494:	f001 fb2b 	bl	8002aee <D_GPIO_Read>
 8001498:	4603      	mov	r3, r0
 800149a:	b21a      	sxth	r2, r3
 800149c:	897b      	ldrh	r3, [r7, #10]
 800149e:	4313      	orrs	r3, r2
 80014a0:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_ENC_HOME() << 1);
 80014a2:	2108      	movs	r1, #8
 80014a4:	4849      	ldr	r0, [pc, #292]	; (80015cc <appTask+0x8cc>)
 80014a6:	f001 fb22 	bl	8002aee <D_GPIO_Read>
 80014aa:	4603      	mov	r3, r0
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_BUMP_1_HIT() << 2);
 80014b6:	2110      	movs	r1, #16
 80014b8:	4845      	ldr	r0, [pc, #276]	; (80015d0 <appTask+0x8d0>)
 80014ba:	f001 fb18 	bl	8002aee <D_GPIO_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	f083 0301 	eor.w	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_BUMP_1_SOL() << 3);
 80014d0:	2101      	movs	r1, #1
 80014d2:	4840      	ldr	r0, [pc, #256]	; (80015d4 <appTask+0x8d4>)
 80014d4:	f001 fb0b 	bl	8002aee <D_GPIO_Read>
 80014d8:	4603      	mov	r3, r0
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	897b      	ldrh	r3, [r7, #10]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_BUMP_2_HIT() << 4);
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	4837      	ldr	r0, [pc, #220]	; (80015cc <appTask+0x8cc>)
 80014f0:	f001 fafd 	bl	8002aee <D_GPIO_Read>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f083 0301 	eor.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	b21a      	sxth	r2, r3
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	4313      	orrs	r3, r2
 8001504:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_BUMP_2_SOL() << 5);
 8001506:	2104      	movs	r1, #4
 8001508:	4833      	ldr	r0, [pc, #204]	; (80015d8 <appTask+0x8d8>)
 800150a:	f001 faf0 	bl	8002aee <D_GPIO_Read>
 800150e:	4603      	mov	r3, r0
 8001510:	f083 0301 	eor.w	r3, r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	015b      	lsls	r3, r3, #5
 8001518:	b21a      	sxth	r2, r3
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	4313      	orrs	r3, r2
 800151e:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_BALL_DETECT() << 6);
 8001520:	2101      	movs	r1, #1
 8001522:	482a      	ldr	r0, [pc, #168]	; (80015cc <appTask+0x8cc>)
 8001524:	f001 fae3 	bl	8002aee <D_GPIO_Read>
 8001528:	4603      	mov	r3, r0
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	019b      	lsls	r3, r3, #6
 8001532:	b21a      	sxth	r2, r3
 8001534:	897b      	ldrh	r3, [r7, #10]
 8001536:	4313      	orrs	r3, r2
 8001538:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_KICKER_DOWN() << 7);
 800153a:	2102      	movs	r1, #2
 800153c:	4823      	ldr	r0, [pc, #140]	; (80015cc <appTask+0x8cc>)
 800153e:	f001 fad6 	bl	8002aee <D_GPIO_Read>
 8001542:	4603      	mov	r3, r0
 8001544:	f083 0301 	eor.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	01db      	lsls	r3, r3, #7
 800154c:	b21a      	sxth	r2, r3
 800154e:	897b      	ldrh	r3, [r7, #10]
 8001550:	4313      	orrs	r3, r2
 8001552:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_STAYKICKER_DOWN() << 8);
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	481f      	ldr	r0, [pc, #124]	; (80015d4 <appTask+0x8d4>)
 8001558:	f001 fac9 	bl	8002aee <D_GPIO_Read>
 800155c:	4603      	mov	r3, r0
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	897b      	ldrh	r3, [r7, #10]
 8001564:	4313      	orrs	r3, r2
 8001566:	817b      	strh	r3, [r7, #10]
	D_Mess_printf("\033[1;1H");
 8001568:	481c      	ldr	r0, [pc, #112]	; (80015dc <appTask+0x8dc>)
 800156a:	f001 fc4d 	bl	8002e08 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",G_System_counter);
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <appTask+0x8e0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4619      	mov	r1, r3
 8001574:	481b      	ldr	r0, [pc, #108]	; (80015e4 <appTask+0x8e4>)
 8001576:	f001 fc47 	bl	8002e08 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",Encoder_Count);
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <appTask+0x8c8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <appTask+0x8e4>)
 8001582:	f001 fc41 	bl	8002e08 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",RainbowTime);
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <appTask+0x8e8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	4815      	ldr	r0, [pc, #84]	; (80015e4 <appTask+0x8e4>)
 800158e:	f001 fc3b 	bl	8002e08 <D_Mess_printf>
	D_Mess_printf("%016b\n", debug_bits);
 8001592:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001596:	4619      	mov	r1, r3
 8001598:	4814      	ldr	r0, [pc, #80]	; (80015ec <appTask+0x8ec>)
 800159a:	f001 fc35 	bl	8002e08 <D_Mess_printf>


	Recent_System_counter = Recent_System_counter + DeltaTime;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <appTask+0x8f0>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <appTask+0x8f4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a11      	ldr	r2, [pc, #68]	; (80015f0 <appTask+0x8f0>)
 80015aa:	6013      	str	r3, [r2, #0]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3730      	adds	r7, #48	; 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	00000000 	.word	0x00000000
 80015bc:	406fe000 	.word	0x406fe000
 80015c0:	3ff00000 	.word	0x3ff00000
 80015c4:	20000058 	.word	0x20000058
 80015c8:	20000054 	.word	0x20000054
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	08008cc0 	.word	0x08008cc0
 80015e0:	200001bc 	.word	0x200001bc
 80015e4:	08008cc8 	.word	0x08008cc8
 80015e8:	20000190 	.word	0x20000190
 80015ec:	08008cd0 	.word	0x08008cd0
 80015f0:	20000188 	.word	0x20000188
 80015f4:	2000018c 	.word	0x2000018c

080015f8 <Encoder_Process>:

static int Encoder_Process(void){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	static bool reset = false;
	int enc_state = (int)IO_READ_ENC_STEP();
 80015fe:	2104      	movs	r1, #4
 8001600:	483a      	ldr	r0, [pc, #232]	; (80016ec <Encoder_Process+0xf4>)
 8001602:	f001 fa74 	bl	8002aee <D_GPIO_Read>
 8001606:	4603      	mov	r3, r0
 8001608:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_ENC_HOME();
 800160a:	2108      	movs	r1, #8
 800160c:	4837      	ldr	r0, [pc, #220]	; (80016ec <Encoder_Process+0xf4>)
 800160e:	f001 fa6e 	bl	8002aee <D_GPIO_Read>
 8001612:	4603      	mov	r3, r0
 8001614:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <Encoder_Process+0xf8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d005      	beq.n	800162c <Encoder_Process+0x34>
		enc_change_count++;
 8001620:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <Encoder_Process+0xfc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4a33      	ldr	r2, [pc, #204]	; (80016f4 <Encoder_Process+0xfc>)
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e002      	b.n	8001632 <Encoder_Process+0x3a>
	}else{
		enc_change_count = 0;
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <Encoder_Process+0xfc>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <Encoder_Process+0xfc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	dd10      	ble.n	800165c <Encoder_Process+0x64>
		recent_enc_state = enc_state;
 800163a:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <Encoder_Process+0xf8>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <Encoder_Process+0xfc>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
		if(enc_state == 0 || enc_state == 1){
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <Encoder_Process+0x5a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d104      	bne.n	800165c <Encoder_Process+0x64>
			Encoder_Count++;
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <Encoder_Process+0x100>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <Encoder_Process+0x100>)
 800165a:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <Encoder_Process+0x104>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d005      	beq.n	8001672 <Encoder_Process+0x7a>
		home_change_count++;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <Encoder_Process+0x108>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a24      	ldr	r2, [pc, #144]	; (8001700 <Encoder_Process+0x108>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e002      	b.n	8001678 <Encoder_Process+0x80>
	}else{
		home_change_count = 0;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <Encoder_Process+0x108>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5 && !reset){
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <Encoder_Process+0x108>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b04      	cmp	r3, #4
 800167e:	dd21      	ble.n	80016c4 <Encoder_Process+0xcc>
 8001680:	4b20      	ldr	r3, [pc, #128]	; (8001704 <Encoder_Process+0x10c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f083 0301 	eor.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d01a      	beq.n	80016c4 <Encoder_Process+0xcc>
		reset = true;
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <Encoder_Process+0x10c>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
		recent_home_state = home_state;
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <Encoder_Process+0x104>)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <Encoder_Process+0x108>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10e      	bne.n	80016c4 <Encoder_Process+0xcc>
			if(recent_enc_state == 0){
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <Encoder_Process+0xf8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <Encoder_Process+0xbe>
				Encoder_Count = 1;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <Encoder_Process+0x100>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e006      	b.n	80016c4 <Encoder_Process+0xcc>
			}else if(recent_enc_state == 1){
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <Encoder_Process+0xf8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d102      	bne.n	80016c4 <Encoder_Process+0xcc>
				Encoder_Count = 2;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <Encoder_Process+0x100>)
 80016c0:	2202      	movs	r2, #2
 80016c2:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if(Encoder_Count > 10){
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <Encoder_Process+0x100>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b0a      	cmp	r3, #10
 80016ca:	d902      	bls.n	80016d2 <Encoder_Process+0xda>
		reset = false;
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <Encoder_Process+0x10c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		//Encoder_Count = 0;
	}
	if(Encoder_Count > 100){
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <Encoder_Process+0x100>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b64      	cmp	r3, #100	; 0x64
 80016d8:	d902      	bls.n	80016e0 <Encoder_Process+0xe8>
		Encoder_Count = 1;
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <Encoder_Process+0x100>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
	}

	return 0;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020800 	.word	0x40020800
 80016f0:	200001a8 	.word	0x200001a8
 80016f4:	200001ac 	.word	0x200001ac
 80016f8:	20000054 	.word	0x20000054
 80016fc:	200001b0 	.word	0x200001b0
 8001700:	200001b4 	.word	0x200001b4
 8001704:	200001b8 	.word	0x200001b8

08001708 <ArraySwap_Rainbow>:

static void ArraySwap_Rainbow(int num){
 8001708:	b480      	push	{r7}
 800170a:	b0ad      	sub	sp, #180	; 0xb4
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	uint8_t arr_temp[LED_NUM][3];
	for(int i=0; i<LED_NUM; i++){
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001716:	e05c      	b.n	80017d2 <ArraySwap_Rainbow+0xca>
		LED_Temp_Rainbow[i][0] = Rainbow[i%7][0];
 8001718:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800171c:	4b86      	ldr	r3, [pc, #536]	; (8001938 <ArraySwap_Rainbow+0x230>)
 800171e:	fb83 1302 	smull	r1, r3, r3, r2
 8001722:	4413      	add	r3, r2
 8001724:	1099      	asrs	r1, r3, #2
 8001726:	17d3      	asrs	r3, r2, #31
 8001728:	1ac9      	subs	r1, r1, r3
 800172a:	460b      	mov	r3, r1
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	1a5b      	subs	r3, r3, r1
 8001730:	1ad1      	subs	r1, r2, r3
 8001732:	4a82      	ldr	r2, [pc, #520]	; (800193c <ArraySwap_Rainbow+0x234>)
 8001734:	460b      	mov	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	440b      	add	r3, r1
 800173a:	4413      	add	r3, r2
 800173c:	7818      	ldrb	r0, [r3, #0]
 800173e:	4980      	ldr	r1, [pc, #512]	; (8001940 <ArraySwap_Rainbow+0x238>)
 8001740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	440b      	add	r3, r1
 800174c:	4602      	mov	r2, r0
 800174e:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = Rainbow[i%7][1];
 8001750:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001754:	4b78      	ldr	r3, [pc, #480]	; (8001938 <ArraySwap_Rainbow+0x230>)
 8001756:	fb83 1302 	smull	r1, r3, r3, r2
 800175a:	4413      	add	r3, r2
 800175c:	1099      	asrs	r1, r3, #2
 800175e:	17d3      	asrs	r3, r2, #31
 8001760:	1ac9      	subs	r1, r1, r3
 8001762:	460b      	mov	r3, r1
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	1a5b      	subs	r3, r3, r1
 8001768:	1ad1      	subs	r1, r2, r3
 800176a:	4a74      	ldr	r2, [pc, #464]	; (800193c <ArraySwap_Rainbow+0x234>)
 800176c:	460b      	mov	r3, r1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	440b      	add	r3, r1
 8001772:	4413      	add	r3, r2
 8001774:	3301      	adds	r3, #1
 8001776:	7818      	ldrb	r0, [r3, #0]
 8001778:	4971      	ldr	r1, [pc, #452]	; (8001940 <ArraySwap_Rainbow+0x238>)
 800177a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	440b      	add	r3, r1
 8001786:	3301      	adds	r3, #1
 8001788:	4602      	mov	r2, r0
 800178a:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = Rainbow[i%7][2];
 800178c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001790:	4b69      	ldr	r3, [pc, #420]	; (8001938 <ArraySwap_Rainbow+0x230>)
 8001792:	fb83 1302 	smull	r1, r3, r3, r2
 8001796:	4413      	add	r3, r2
 8001798:	1099      	asrs	r1, r3, #2
 800179a:	17d3      	asrs	r3, r2, #31
 800179c:	1ac9      	subs	r1, r1, r3
 800179e:	460b      	mov	r3, r1
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	1a5b      	subs	r3, r3, r1
 80017a4:	1ad1      	subs	r1, r2, r3
 80017a6:	4a65      	ldr	r2, [pc, #404]	; (800193c <ArraySwap_Rainbow+0x234>)
 80017a8:	460b      	mov	r3, r1
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	440b      	add	r3, r1
 80017ae:	4413      	add	r3, r2
 80017b0:	3302      	adds	r3, #2
 80017b2:	7818      	ldrb	r0, [r3, #0]
 80017b4:	4962      	ldr	r1, [pc, #392]	; (8001940 <ArraySwap_Rainbow+0x238>)
 80017b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	3302      	adds	r3, #2
 80017c4:	4602      	mov	r2, r0
 80017c6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<LED_NUM; i++){
 80017c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017cc:	3301      	adds	r3, #1
 80017ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80017d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d6:	2b31      	cmp	r3, #49	; 0x31
 80017d8:	dd9e      	ble.n	8001718 <ArraySwap_Rainbow+0x10>
	}
	int indx;
	for(int i=0;i<LED_NUM; i++){
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80017e0:	e057      	b.n	8001892 <ArraySwap_Rainbow+0x18a>
		indx = i + num;
 80017e2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		if(indx >= LED_NUM){
 80017ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017f2:	2b31      	cmp	r3, #49	; 0x31
 80017f4:	dd04      	ble.n	8001800 <ArraySwap_Rainbow+0xf8>
			indx -= LED_NUM;
 80017f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017fa:	3b32      	subs	r3, #50	; 0x32
 80017fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		if(indx < 0){
 8001800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001804:	2b00      	cmp	r3, #0
 8001806:	da04      	bge.n	8001812 <ArraySwap_Rainbow+0x10a>
			indx += LED_NUM;
 8001808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800180c:	3332      	adds	r3, #50	; 0x32
 800180e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		arr_temp[i][0] = LED_Temp_Rainbow[indx][0];
 8001812:	494b      	ldr	r1, [pc, #300]	; (8001940 <ArraySwap_Rainbow+0x238>)
 8001814:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	440b      	add	r3, r1
 8001820:	7819      	ldrb	r1, [r3, #0]
 8001822:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001830:	4413      	add	r3, r2
 8001832:	3ba8      	subs	r3, #168	; 0xa8
 8001834:	460a      	mov	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
		arr_temp[i][1] = LED_Temp_Rainbow[indx][1];
 8001838:	4941      	ldr	r1, [pc, #260]	; (8001940 <ArraySwap_Rainbow+0x238>)
 800183a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	440b      	add	r3, r1
 8001846:	3301      	adds	r3, #1
 8001848:	7819      	ldrb	r1, [r3, #0]
 800184a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001858:	4413      	add	r3, r2
 800185a:	3ba7      	subs	r3, #167	; 0xa7
 800185c:	460a      	mov	r2, r1
 800185e:	701a      	strb	r2, [r3, #0]
		arr_temp[i][2] = LED_Temp_Rainbow[indx][2];
 8001860:	4937      	ldr	r1, [pc, #220]	; (8001940 <ArraySwap_Rainbow+0x238>)
 8001862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001866:	4613      	mov	r3, r2
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4413      	add	r3, r2
 800186c:	440b      	add	r3, r1
 800186e:	3302      	adds	r3, #2
 8001870:	7819      	ldrb	r1, [r3, #0]
 8001872:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001880:	4413      	add	r3, r2
 8001882:	3ba6      	subs	r3, #166	; 0xa6
 8001884:	460a      	mov	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 8001888:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800188c:	3301      	adds	r3, #1
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001896:	2b31      	cmp	r3, #49	; 0x31
 8001898:	dda3      	ble.n	80017e2 <ArraySwap_Rainbow+0xda>
	}
	for(int i=0;i<LED_NUM; i++){
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80018a0:	e03f      	b.n	8001922 <ArraySwap_Rainbow+0x21a>
		LED_Temp_Rainbow[i][0] = arr_temp[i][0];
 80018a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80018b0:	4413      	add	r3, r2
 80018b2:	3ba8      	subs	r3, #168	; 0xa8
 80018b4:	7818      	ldrb	r0, [r3, #0]
 80018b6:	4922      	ldr	r1, [pc, #136]	; (8001940 <ArraySwap_Rainbow+0x238>)
 80018b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	4602      	mov	r2, r0
 80018c6:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = arr_temp[i][1];
 80018c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80018d6:	4413      	add	r3, r2
 80018d8:	3ba7      	subs	r3, #167	; 0xa7
 80018da:	7818      	ldrb	r0, [r3, #0]
 80018dc:	4918      	ldr	r1, [pc, #96]	; (8001940 <ArraySwap_Rainbow+0x238>)
 80018de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	440b      	add	r3, r1
 80018ea:	3301      	adds	r3, #1
 80018ec:	4602      	mov	r2, r0
 80018ee:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = arr_temp[i][2];
 80018f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80018fe:	4413      	add	r3, r2
 8001900:	3ba6      	subs	r3, #166	; 0xa6
 8001902:	7818      	ldrb	r0, [r3, #0]
 8001904:	490e      	ldr	r1, [pc, #56]	; (8001940 <ArraySwap_Rainbow+0x238>)
 8001906:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	440b      	add	r3, r1
 8001912:	3302      	adds	r3, #2
 8001914:	4602      	mov	r2, r0
 8001916:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 8001918:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800191c:	3301      	adds	r3, #1
 800191e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001926:	2b31      	cmp	r3, #49	; 0x31
 8001928:	ddbb      	ble.n	80018a2 <ArraySwap_Rainbow+0x19a>
	}
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	37b4      	adds	r7, #180	; 0xb4
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	92492493 	.word	0x92492493
 800193c:	20000000 	.word	0x20000000
 8001940:	200000f0 	.word	0x200000f0

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001948:	f001 fc9e 	bl	8003288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194c:	f000 f820 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001950:	f000 fb38 	bl	8001fc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001954:	f000 fad8 	bl	8001f08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001958:	f000 fa82 	bl	8001e60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800195c:	f000 faaa 	bl	8001eb4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001960:	f000 f882 	bl	8001a68 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001964:	f000 f8ae 	bl	8001ac4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001968:	f000 f94c 	bl	8001c04 <MX_TIM2_Init>
  MX_TIM3_Init();
 800196c:	f000 f9e0 	bl	8001d30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  
  D_PWM_Init();
 8001970:	f001 fc62 	bl	8003238 <D_PWM_Init>
  appInit();
 8001974:	f7ff f9ba 	bl	8000cec <appInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 8001978:	f7ff f9c2 	bl	8000d00 <appTask>
    if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 800197c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001980:	4802      	ldr	r0, [pc, #8]	; (800198c <main+0x48>)
 8001982:	f002 fba9 	bl	80040d8 <HAL_GPIO_ReadPin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 8001986:	f001 fa5f 	bl	8002e48 <D_Mess_flush>
	  appTask();
 800198a:	e7f5      	b.n	8001978 <main+0x34>
 800198c:	40020800 	.word	0x40020800

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	; 0x50
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	2234      	movs	r2, #52	; 0x34
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f007 f97a 	bl	8008c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <SystemClock_Config+0xd0>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <SystemClock_Config+0xd0>)
 80019be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <SystemClock_Config+0xd0>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019d0:	2300      	movs	r3, #0
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <SystemClock_Config+0xd4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <SystemClock_Config+0xd4>)
 80019de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <SystemClock_Config+0xd4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f8:	2310      	movs	r3, #16
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fc:	2302      	movs	r3, #2
 80019fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a04:	2308      	movs	r3, #8
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001a08:	2350      	movs	r3, #80	; 0x50
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a10:	2302      	movs	r3, #2
 8001a12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 fc6f 	bl	8006300 <HAL_RCC_OscConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a28:	f000 fbc2 	bl	80021b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a30:	2302      	movs	r3, #2
 8001a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	2102      	movs	r1, #2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 f98d 	bl	8005d68 <HAL_RCC_ClockConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a54:	f000 fbac 	bl	80021b0 <Error_Handler>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3750      	adds	r7, #80	; 0x50
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40007000 	.word	0x40007000

08001a68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <MX_I2C1_Init+0x54>)
 8001a70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <MX_I2C1_Init+0x58>)
 8001a76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a80:	2220      	movs	r2, #32
 8001a82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_I2C1_Init+0x50>)
 8001aa6:	f002 fb49 	bl	800413c <HAL_I2C_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ab0:	f000 fb7e 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20001a6c 	.word	0x20001a6c
 8001abc:	40005400 	.word	0x40005400
 8001ac0:	000186a0 	.word	0x000186a0

08001ac4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b096      	sub	sp, #88	; 0x58
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2220      	movs	r2, #32
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f007 f8cb 	bl	8008c98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b02:	4b3e      	ldr	r3, [pc, #248]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b04:	4a3e      	ldr	r2, [pc, #248]	; (8001c00 <MX_TIM1_Init+0x13c>)
 8001b06:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8001b08:	4b3c      	ldr	r3, [pc, #240]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b16:	2218      	movs	r2, #24
 8001b18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b20:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b2c:	4833      	ldr	r0, [pc, #204]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b2e:	f004 fe85 	bl	800683c <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001b38:	f000 fb3a 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b46:	4619      	mov	r1, r3
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b4a:	f005 fb43 	bl	80071d4 <HAL_TIM_ConfigClockSource>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001b54:	f000 fb2c 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b5a:	f004 febe 	bl	80068da <HAL_TIM_PWM_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b64:	f000 fb24 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b74:	4619      	mov	r1, r3
 8001b76:	4821      	ldr	r0, [pc, #132]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001b78:	f005 ffe8 	bl	8007b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001b82:	f000 fb15 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b86:	2360      	movs	r3, #96	; 0x60
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001bac:	f005 fa50 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001bb6:	f000 fafb 	bl	80021b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001bde:	f006 f831 	bl	8007c44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001be8:	f000 fae2 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <MX_TIM1_Init+0x138>)
 8001bee:	f000 fc49 	bl	8002484 <HAL_TIM_MspPostInit>

}
 8001bf2:	bf00      	nop
 8001bf4:	3758      	adds	r7, #88	; 0x58
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20001c6c 	.word	0x20001c6c
 8001c00:	40010000 	.word	0x40010000

08001c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	615a      	str	r2, [r3, #20]
 8001c32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001c3c:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c3e:	224f      	movs	r2, #79	; 0x4f
 8001c40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8001c48:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c4a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c5c:	4833      	ldr	r0, [pc, #204]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c5e:	f004 fded 	bl	800683c <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c68:	f000 faa2 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c76:	4619      	mov	r1, r3
 8001c78:	482c      	ldr	r0, [pc, #176]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c7a:	f005 faab 	bl	80071d4 <HAL_TIM_ConfigClockSource>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c84:	f000 fa94 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c88:	4828      	ldr	r0, [pc, #160]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001c8a:	f004 fe26 	bl	80068da <HAL_TIM_PWM_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c94:	f000 fa8c 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4821      	ldr	r0, [pc, #132]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001ca8:	f005 ff50 	bl	8007b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001cb2:	f000 fa7d 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cb6:	2360      	movs	r3, #96	; 0x60
 8001cb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4817      	ldr	r0, [pc, #92]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001cce:	f005 f9bf 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001cd8:	f000 fa6a 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4812      	ldr	r0, [pc, #72]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001ce4:	f005 f9b4 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001cee:	f000 fa5f 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001cfa:	f005 f9a9 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001d04:	f000 fa54 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4807      	ldr	r0, [pc, #28]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001d10:	f005 f99e 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001d1a:	f000 fa49 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_TIM2_Init+0x128>)
 8001d20:	f000 fbb0 	bl	8002484 <HAL_TIM_MspPostInit>

}
 8001d24:	bf00      	nop
 8001d26:	3738      	adds	r7, #56	; 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20001d14 	.word	0x20001d14

08001d30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08e      	sub	sp, #56	; 0x38
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4e:	1d3b      	adds	r3, r7, #4
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	615a      	str	r2, [r3, #20]
 8001d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001d62:	4a3e      	ldr	r2, [pc, #248]	; (8001e5c <MX_TIM3_Init+0x12c>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001d66:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001d68:	224f      	movs	r2, #79	; 0x4f
 8001d6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001d72:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001d74:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d86:	4834      	ldr	r0, [pc, #208]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001d88:	f004 fd58 	bl	800683c <HAL_TIM_Base_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001d92:	f000 fa0d 	bl	80021b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da0:	4619      	mov	r1, r3
 8001da2:	482d      	ldr	r0, [pc, #180]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001da4:	f005 fa16 	bl	80071d4 <HAL_TIM_ConfigClockSource>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dae:	f000 f9ff 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001db2:	4829      	ldr	r0, [pc, #164]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001db4:	f004 fd91 	bl	80068da <HAL_TIM_PWM_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001dbe:	f000 f9f7 	bl	80021b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4821      	ldr	r0, [pc, #132]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001dd2:	f005 febb 	bl	8007b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ddc:	f000 f9e8 	bl	80021b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001de0:	2360      	movs	r3, #96	; 0x60
 8001de2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	4619      	mov	r1, r3
 8001df6:	4818      	ldr	r0, [pc, #96]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001df8:	f005 f92a 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e02:	f000 f9d5 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4812      	ldr	r0, [pc, #72]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001e0e:	f005 f91f 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e18:	f000 f9ca 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2208      	movs	r2, #8
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001e24:	f005 f914 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001e2e:	f000 f9bf 	bl	80021b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	220c      	movs	r2, #12
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001e3a:	f005 f909 	bl	8007050 <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001e44:	f000 f9b4 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_TIM3_Init+0x128>)
 8001e4a:	f000 fb1b 	bl	8002484 <HAL_TIM_MspPostInit>

}
 8001e4e:	bf00      	nop
 8001e50:	3738      	adds	r7, #56	; 0x38
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20001ac0 	.word	0x20001ac0
 8001e5c:	40000400 	.word	0x40000400

08001e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <MX_USART1_UART_Init+0x50>)
 8001e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e86:	220c      	movs	r2, #12
 8001e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_USART1_UART_Init+0x4c>)
 8001e98:	f005 ff26 	bl	8007ce8 <HAL_UART_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ea2:	f000 f985 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001c28 	.word	0x20001c28
 8001eb0:	40011000 	.word	0x40011000

08001eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_USART2_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART2_UART_Init+0x4c>)
 8001eec:	f005 fefc 	bl	8007ce8 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ef6:	f000 f95b 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20001d5c 	.word	0x20001d5c
 8001f04:	40004400 	.word	0x40004400

08001f08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <MX_DMA_Init+0xb8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <MX_DMA_Init+0xb8>)
 8001f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <MX_DMA_Init+0xb8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <MX_DMA_Init+0xb8>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <MX_DMA_Init+0xb8>)
 8001f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <MX_DMA_Init+0xb8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	200b      	movs	r0, #11
 8001f4c:	f001 fae9 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001f50:	200b      	movs	r0, #11
 8001f52:	f001 fb02 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2010      	movs	r0, #16
 8001f5c:	f001 fae1 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001f60:	2010      	movs	r0, #16
 8001f62:	f001 fafa 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2011      	movs	r0, #17
 8001f6c:	f001 fad9 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f70:	2011      	movs	r0, #17
 8001f72:	f001 faf2 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	202f      	movs	r0, #47	; 0x2f
 8001f7c:	f001 fad1 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001f80:	202f      	movs	r0, #47	; 0x2f
 8001f82:	f001 faea 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2039      	movs	r0, #57	; 0x39
 8001f8c:	f001 fac9 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001f90:	2039      	movs	r0, #57	; 0x39
 8001f92:	f001 fae2 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	203a      	movs	r0, #58	; 0x3a
 8001f9c:	f001 fac1 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001fa0:	203a      	movs	r0, #58	; 0x3a
 8001fa2:	f001 fada 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2046      	movs	r0, #70	; 0x46
 8001fac:	f001 fab9 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001fb0:	2046      	movs	r0, #70	; 0x46
 8001fb2:	f001 fad2 	bl	800355a <HAL_NVIC_EnableIRQ>

}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b61      	ldr	r3, [pc, #388]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a60      	ldr	r2, [pc, #384]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b5a      	ldr	r3, [pc, #360]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a59      	ldr	r2, [pc, #356]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b57      	ldr	r3, [pc, #348]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	4b53      	ldr	r3, [pc, #332]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a52      	ldr	r2, [pc, #328]	; (8002164 <MX_GPIO_Init+0x1a0>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b50      	ldr	r3, [pc, #320]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b4c      	ldr	r3, [pc, #304]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b49      	ldr	r3, [pc, #292]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4b45      	ldr	r3, [pc, #276]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a44      	ldr	r2, [pc, #272]	; (8002164 <MX_GPIO_Init+0x1a0>)
 8002054:	f043 0308 	orr.w	r3, r3, #8
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b42      	ldr	r3, [pc, #264]	; (8002164 <MX_GPIO_Init+0x1a0>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	2120      	movs	r1, #32
 800206a:	483f      	ldr	r0, [pc, #252]	; (8002168 <MX_GPIO_Init+0x1a4>)
 800206c:	f002 f84c 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2110      	movs	r1, #16
 8002074:	483d      	ldr	r0, [pc, #244]	; (800216c <MX_GPIO_Init+0x1a8>)
 8002076:	f002 f847 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f24e 0120 	movw	r1, #57376	; 0xe020
 8002080:	483b      	ldr	r0, [pc, #236]	; (8002170 <MX_GPIO_Init+0x1ac>)
 8002082:	f002 f841 	bl	8004108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800208a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800208c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4833      	ldr	r0, [pc, #204]	; (800216c <MX_GPIO_Init+0x1a8>)
 800209e:	f001 fe87 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80020a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	482d      	ldr	r0, [pc, #180]	; (800216c <MX_GPIO_Init+0x1a8>)
 80020b8:	f001 fe7a 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020bc:	2310      	movs	r3, #16
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4826      	ldr	r0, [pc, #152]	; (8002168 <MX_GPIO_Init+0x1a4>)
 80020d0:	f001 fe6e 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020d4:	2320      	movs	r3, #32
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	481f      	ldr	r0, [pc, #124]	; (8002168 <MX_GPIO_Init+0x1a4>)
 80020ec:	f001 fe60 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020f0:	2310      	movs	r3, #16
 80020f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4819      	ldr	r0, [pc, #100]	; (800216c <MX_GPIO_Init+0x1a8>)
 8002108:	f001 fe52 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 800210c:	2381      	movs	r3, #129	; 0x81
 800210e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002114:	2301      	movs	r3, #1
 8002116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4814      	ldr	r0, [pc, #80]	; (8002170 <MX_GPIO_Init+0x1ac>)
 8002120:	f001 fe46 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8002124:	f24e 0320 	movw	r3, #57376	; 0xe020
 8002128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <MX_GPIO_Init+0x1ac>)
 800213e:	f001 fe37 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002142:	2304      	movs	r3, #4
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214a:	2301      	movs	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214e:	f107 0314 	add.w	r3, r7, #20
 8002152:	4619      	mov	r1, r3
 8002154:	4807      	ldr	r0, [pc, #28]	; (8002174 <MX_GPIO_Init+0x1b0>)
 8002156:	f001 fe2b 	bl	8003db0 <HAL_GPIO_Init>

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020800 	.word	0x40020800
 8002170:	40020400 	.word	0x40020400
 8002174:	40020c00 	.word	0x40020c00

08002178 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_UART_TxCpltCallback+0x20>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 800218a:	f000 fe8f 	bl	8002eac <D_Mess_TransitionCompletedCallBack>
  }
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40004400 	.word	0x40004400

0800219c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  //busy = false;
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
  //HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	//datasentflag=1;
  D_LED_Callback();
 80021a4:	f000 fe20 	bl	8002de8 <D_LED_Callback>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b4:	b672      	cpsid	i
}
 80021b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <Error_Handler+0x8>
	...

080021bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <HAL_MspInit+0x4c>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a0f      	ldr	r2, [pc, #60]	; (8002208 <HAL_MspInit+0x4c>)
 80021cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_MspInit+0x4c>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_MspInit+0x4c>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021fa:	2007      	movs	r0, #7
 80021fc:	f001 f986 	bl	800350c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_I2C_MspInit+0x160>)
 800222a:	4293      	cmp	r3, r2
 800222c:	f040 8099 	bne.w	8002362 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <HAL_I2C_MspInit+0x164>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a4d      	ldr	r2, [pc, #308]	; (8002370 <HAL_I2C_MspInit+0x164>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b4b      	ldr	r3, [pc, #300]	; (8002370 <HAL_I2C_MspInit+0x164>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800224c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002252:	2312      	movs	r3, #18
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800225e:	2304      	movs	r3, #4
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	4842      	ldr	r0, [pc, #264]	; (8002374 <HAL_I2C_MspInit+0x168>)
 800226a:	f001 fda1 	bl	8003db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_I2C_MspInit+0x164>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <HAL_I2C_MspInit+0x164>)
 8002278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <HAL_I2C_MspInit+0x164>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800228a:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 800228c:	4a3b      	ldr	r2, [pc, #236]	; (800237c <HAL_I2C_MspInit+0x170>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002290:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 8002292:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002296:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002298:	4b37      	ldr	r3, [pc, #220]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ac:	4b32      	ldr	r3, [pc, #200]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80022ca:	482b      	ldr	r0, [pc, #172]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022cc:	f001 f960 	bl	8003590 <HAL_DMA_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80022d6:	f7ff ff6b 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
 80022e0:	4a25      	ldr	r2, [pc, #148]	; (8002378 <HAL_I2C_MspInit+0x16c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <HAL_I2C_MspInit+0x174>)
 80022e8:	4a26      	ldr	r2, [pc, #152]	; (8002384 <HAL_I2C_MspInit+0x178>)
 80022ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_I2C_MspInit+0x174>)
 80022ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022f4:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_I2C_MspInit+0x174>)
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fa:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_I2C_MspInit+0x174>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_I2C_MspInit+0x174>)
 8002302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002306:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_I2C_MspInit+0x174>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_I2C_MspInit+0x174>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_I2C_MspInit+0x174>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_I2C_MspInit+0x174>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002320:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_I2C_MspInit+0x174>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002326:	4816      	ldr	r0, [pc, #88]	; (8002380 <HAL_I2C_MspInit+0x174>)
 8002328:	f001 f932 	bl	8003590 <HAL_DMA_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002332:	f7ff ff3d 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a11      	ldr	r2, [pc, #68]	; (8002380 <HAL_I2C_MspInit+0x174>)
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
 800233c:	4a10      	ldr	r2, [pc, #64]	; (8002380 <HAL_I2C_MspInit+0x174>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	201f      	movs	r0, #31
 8002348:	f001 f8eb 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800234c:	201f      	movs	r0, #31
 800234e:	f001 f904 	bl	800355a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2020      	movs	r0, #32
 8002358:	f001 f8e3 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800235c:	2020      	movs	r0, #32
 800235e:	f001 f8fc 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40005400 	.word	0x40005400
 8002370:	40023800 	.word	0x40023800
 8002374:	40020400 	.word	0x40020400
 8002378:	20001cb4 	.word	0x20001cb4
 800237c:	40026010 	.word	0x40026010
 8002380:	20001a0c 	.word	0x20001a0c
 8002384:	400260b8 	.word	0x400260b8

08002388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a36      	ldr	r2, [pc, #216]	; (8002470 <HAL_TIM_Base_MspInit+0xe8>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d13e      	bne.n	8002418 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a34      	ldr	r2, [pc, #208]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80023b6:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023b8:	4a30      	ldr	r2, [pc, #192]	; (800247c <HAL_TIM_Base_MspInit+0xf4>)
 80023ba:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80023bc:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023be:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80023c2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023c4:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ca:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023d0:	4b29      	ldr	r3, [pc, #164]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023de:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80023e8:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80023fa:	481f      	ldr	r0, [pc, #124]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 80023fc:	f001 f8c8 	bl	8003590 <HAL_DMA_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002406:	f7ff fed3 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_TIM_Base_MspInit+0xf0>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002416:	e026      	b.n	8002466 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d10e      	bne.n	8002440 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
}
 800243e:	e012      	b.n	8002466 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <HAL_TIM_Base_MspInit+0xf8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10d      	bne.n	8002466 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_TIM_Base_MspInit+0xec>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40010000 	.word	0x40010000
 8002474:	40023800 	.word	0x40023800
 8002478:	2000194c 	.word	0x2000194c
 800247c:	40026428 	.word	0x40026428
 8002480:	40000400 	.word	0x40000400

08002484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08e      	sub	sp, #56	; 0x38
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a64      	ldr	r2, [pc, #400]	; (8002634 <HAL_TIM_MspPostInit+0x1b0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d11f      	bne.n	80024e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a62      	ldr	r2, [pc, #392]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b60      	ldr	r3, [pc, #384]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	4857      	ldr	r0, [pc, #348]	; (800263c <HAL_TIM_MspPostInit+0x1b8>)
 80024e0:	f001 fc66 	bl	8003db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024e4:	e0a2      	b.n	800262c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ee:	d13d      	bne.n	800256c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	4b50      	ldr	r3, [pc, #320]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	4a4f      	ldr	r2, [pc, #316]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	4b49      	ldr	r3, [pc, #292]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	6313      	str	r3, [r2, #48]	; 0x30
 800251c:	4b46      	ldr	r3, [pc, #280]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002528:	2303      	movs	r3, #3
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002538:	2301      	movs	r3, #1
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002540:	4619      	mov	r1, r3
 8002542:	483e      	ldr	r0, [pc, #248]	; (800263c <HAL_TIM_MspPostInit+0x1b8>)
 8002544:	f001 fc34 	bl	8003db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8002548:	f240 4304 	movw	r3, #1028	; 0x404
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	2302      	movs	r3, #2
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800255a:	2301      	movs	r3, #1
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002562:	4619      	mov	r1, r3
 8002564:	4836      	ldr	r0, [pc, #216]	; (8002640 <HAL_TIM_MspPostInit+0x1bc>)
 8002566:	f001 fc23 	bl	8003db0 <HAL_GPIO_Init>
}
 800256a:	e05f      	b.n	800262c <HAL_TIM_MspPostInit+0x1a8>
  else if(htim->Instance==TIM3)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a34      	ldr	r2, [pc, #208]	; (8002644 <HAL_TIM_MspPostInit+0x1c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d15a      	bne.n	800262c <HAL_TIM_MspPostInit+0x1a8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257e:	4a2e      	ldr	r2, [pc, #184]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6313      	str	r3, [r2, #48]	; 0x30
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	4b28      	ldr	r3, [pc, #160]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a27      	ldr	r2, [pc, #156]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	4a20      	ldr	r2, [pc, #128]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6313      	str	r3, [r2, #48]	; 0x30
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_TIM_MspPostInit+0x1b4>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025ca:	23c0      	movs	r3, #192	; 0xc0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025da:	2302      	movs	r3, #2
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e2:	4619      	mov	r1, r3
 80025e4:	4815      	ldr	r0, [pc, #84]	; (800263c <HAL_TIM_MspPostInit+0x1b8>)
 80025e6:	f001 fbe3 	bl	8003db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025ea:	2302      	movs	r3, #2
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025fa:	2302      	movs	r3, #2
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	480e      	ldr	r0, [pc, #56]	; (8002640 <HAL_TIM_MspPostInit+0x1bc>)
 8002606:	f001 fbd3 	bl	8003db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800260a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800261c:	2302      	movs	r3, #2
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002624:	4619      	mov	r1, r3
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <HAL_TIM_MspPostInit+0x1c4>)
 8002628:	f001 fbc2 	bl	8003db0 <HAL_GPIO_Init>
}
 800262c:	bf00      	nop
 800262e:	3738      	adds	r7, #56	; 0x38
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40010000 	.word	0x40010000
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000
 8002640:	40020400 	.word	0x40020400
 8002644:	40000400 	.word	0x40000400
 8002648:	40020800 	.word	0x40020800

0800264c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a97      	ldr	r2, [pc, #604]	; (80028c8 <HAL_UART_MspInit+0x27c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	f040 8092 	bne.w	8002794 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
 8002674:	4b95      	ldr	r3, [pc, #596]	; (80028cc <HAL_UART_MspInit+0x280>)
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	4a94      	ldr	r2, [pc, #592]	; (80028cc <HAL_UART_MspInit+0x280>)
 800267a:	f043 0310 	orr.w	r3, r3, #16
 800267e:	6453      	str	r3, [r2, #68]	; 0x44
 8002680:	4b92      	ldr	r3, [pc, #584]	; (80028cc <HAL_UART_MspInit+0x280>)
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	4b8e      	ldr	r3, [pc, #568]	; (80028cc <HAL_UART_MspInit+0x280>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	4a8d      	ldr	r2, [pc, #564]	; (80028cc <HAL_UART_MspInit+0x280>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6313      	str	r3, [r2, #48]	; 0x30
 800269c:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_UART_MspInit+0x280>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026ba:	2307      	movs	r3, #7
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 031c 	add.w	r3, r7, #28
 80026c2:	4619      	mov	r1, r3
 80026c4:	4882      	ldr	r0, [pc, #520]	; (80028d0 <HAL_UART_MspInit+0x284>)
 80026c6:	f001 fb73 	bl	8003db0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80026ca:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026cc:	4a82      	ldr	r2, [pc, #520]	; (80028d8 <HAL_UART_MspInit+0x28c>)
 80026ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80026d0:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d8:	4b7e      	ldr	r3, [pc, #504]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026de:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ec:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f2:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80026f8:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_UART_MspInit+0x288>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026fe:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_UART_MspInit+0x288>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <HAL_UART_MspInit+0x288>)
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800270a:	4872      	ldr	r0, [pc, #456]	; (80028d4 <HAL_UART_MspInit+0x288>)
 800270c:	f000 ff40 	bl	8003590 <HAL_DMA_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002716:	f7ff fd4b 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a6d      	ldr	r2, [pc, #436]	; (80028d4 <HAL_UART_MspInit+0x288>)
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
 8002720:	4a6c      	ldr	r2, [pc, #432]	; (80028d4 <HAL_UART_MspInit+0x288>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002726:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <HAL_UART_MspInit+0x290>)
 8002728:	4a6d      	ldr	r2, [pc, #436]	; (80028e0 <HAL_UART_MspInit+0x294>)
 800272a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800272c:	4b6b      	ldr	r3, [pc, #428]	; (80028dc <HAL_UART_MspInit+0x290>)
 800272e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002732:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002734:	4b69      	ldr	r3, [pc, #420]	; (80028dc <HAL_UART_MspInit+0x290>)
 8002736:	2240      	movs	r2, #64	; 0x40
 8002738:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273a:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_UART_MspInit+0x290>)
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <HAL_UART_MspInit+0x290>)
 8002742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002746:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002748:	4b64      	ldr	r3, [pc, #400]	; (80028dc <HAL_UART_MspInit+0x290>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800274e:	4b63      	ldr	r3, [pc, #396]	; (80028dc <HAL_UART_MspInit+0x290>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002754:	4b61      	ldr	r3, [pc, #388]	; (80028dc <HAL_UART_MspInit+0x290>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <HAL_UART_MspInit+0x290>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002760:	4b5e      	ldr	r3, [pc, #376]	; (80028dc <HAL_UART_MspInit+0x290>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002766:	485d      	ldr	r0, [pc, #372]	; (80028dc <HAL_UART_MspInit+0x290>)
 8002768:	f000 ff12 	bl	8003590 <HAL_DMA_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002772:	f7ff fd1d 	bl	80021b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_UART_MspInit+0x290>)
 800277a:	635a      	str	r2, [r3, #52]	; 0x34
 800277c:	4a57      	ldr	r2, [pc, #348]	; (80028dc <HAL_UART_MspInit+0x290>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	2025      	movs	r0, #37	; 0x25
 8002788:	f000 fecb 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800278c:	2025      	movs	r0, #37	; 0x25
 800278e:	f000 fee4 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002792:	e095      	b.n	80028c0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_UART_MspInit+0x298>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f040 8090 	bne.w	80028c0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	4b49      	ldr	r3, [pc, #292]	; (80028cc <HAL_UART_MspInit+0x280>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_UART_MspInit+0x280>)
 80027aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_UART_MspInit+0x280>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <HAL_UART_MspInit+0x280>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_UART_MspInit+0x280>)
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	6313      	str	r3, [r2, #48]	; 0x30
 80027cc:	4b3f      	ldr	r3, [pc, #252]	; (80028cc <HAL_UART_MspInit+0x280>)
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027d8:	230c      	movs	r3, #12
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e8:	2307      	movs	r3, #7
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 031c 	add.w	r3, r7, #28
 80027f0:	4619      	mov	r1, r3
 80027f2:	4837      	ldr	r0, [pc, #220]	; (80028d0 <HAL_UART_MspInit+0x284>)
 80027f4:	f001 fadc 	bl	8003db0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 80027fa:	4a3c      	ldr	r2, [pc, #240]	; (80028ec <HAL_UART_MspInit+0x2a0>)
 80027fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 8002800:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002804:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800280c:	4b36      	ldr	r3, [pc, #216]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 8002814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002818:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800281a:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 800281c:	2200      	movs	r2, #0
 800281e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800282c:	4b2e      	ldr	r3, [pc, #184]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 800282e:	2200      	movs	r2, #0
 8002830:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002832:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002838:	482b      	ldr	r0, [pc, #172]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 800283a:	f000 fea9 	bl	8003590 <HAL_DMA_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002844:	f7ff fcb4 	bl	80021b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 800284c:	639a      	str	r2, [r3, #56]	; 0x38
 800284e:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <HAL_UART_MspInit+0x29c>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 8002856:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <HAL_UART_MspInit+0x2a8>)
 8002858:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 800285c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002860:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002862:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 8002864:	2240      	movs	r2, #64	; 0x40
 8002866:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 8002870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002874:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002882:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 8002884:	2200      	movs	r2, #0
 8002886:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 800288a:	2200      	movs	r2, #0
 800288c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 8002890:	2200      	movs	r2, #0
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002894:	4816      	ldr	r0, [pc, #88]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 8002896:	f000 fe7b 	bl	8003590 <HAL_DMA_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80028a0:	f7ff fc86 	bl	80021b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <HAL_UART_MspInit+0x2a4>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2026      	movs	r0, #38	; 0x26
 80028b6:	f000 fe34 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028ba:	2026      	movs	r0, #38	; 0x26
 80028bc:	f000 fe4d 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 80028c0:	bf00      	nop
 80028c2:	3730      	adds	r7, #48	; 0x30
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	20001b68 	.word	0x20001b68
 80028d8:	40026440 	.word	0x40026440
 80028dc:	20001b08 	.word	0x20001b08
 80028e0:	400264b8 	.word	0x400264b8
 80028e4:	40004400 	.word	0x40004400
 80028e8:	200019ac 	.word	0x200019ac
 80028ec:	40026088 	.word	0x40026088
 80028f0:	20001bc8 	.word	0x20001bc8
 80028f4:	400260a0 	.word	0x400260a0

080028f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <NMI_Handler+0x4>

080028fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002902:	e7fe      	b.n	8002902 <HardFault_Handler+0x4>

08002904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <MemManage_Handler+0x4>

0800290a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800290e:	e7fe      	b.n	800290e <BusFault_Handler+0x4>

08002910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <UsageFault_Handler+0x4>

08002916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002944:	f000 fcf2 	bl	800332c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8002948:	4b03      	ldr	r3, [pc, #12]	; (8002958 <SysTick_Handler+0x18>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	4a02      	ldr	r2, [pc, #8]	; (8002958 <SysTick_Handler+0x18>)
 8002950:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	200001bc 	.word	0x200001bc

0800295c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <DMA1_Stream0_IRQHandler+0x10>)
 8002962:	f000 ffad 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20001cb4 	.word	0x20001cb4

08002970 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002974:	4802      	ldr	r0, [pc, #8]	; (8002980 <DMA1_Stream5_IRQHandler+0x10>)
 8002976:	f000 ffa3 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200019ac 	.word	0x200019ac

08002984 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <DMA1_Stream6_IRQHandler+0x10>)
 800298a:	f000 ff99 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20001bc8 	.word	0x20001bc8

08002998 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <I2C1_EV_IRQHandler+0x10>)
 800299e:	f001 fd11 	bl	80043c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20001a6c 	.word	0x20001a6c

080029ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <I2C1_ER_IRQHandler+0x10>)
 80029b2:	f001 fe78 	bl	80046a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20001a6c 	.word	0x20001a6c

080029c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <USART1_IRQHandler+0x10>)
 80029c6:	f005 fa5b 	bl	8007e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20001c28 	.word	0x20001c28

080029d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <USART2_IRQHandler+0x10>)
 80029da:	f005 fa51 	bl	8007e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20001d5c 	.word	0x20001d5c

080029e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <DMA1_Stream7_IRQHandler+0x10>)
 80029ee:	f000 ff67 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20001a0c 	.word	0x20001a0c

080029fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <DMA2_Stream1_IRQHandler+0x10>)
 8002a02:	f000 ff5d 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000194c 	.word	0x2000194c

08002a10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <DMA2_Stream2_IRQHandler+0x10>)
 8002a16:	f000 ff53 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20001b68 	.word	0x20001b68

08002a24 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <DMA2_Stream7_IRQHandler+0x10>)
 8002a2a:	f000 ff49 	bl	80038c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20001b08 	.word	0x20001b08

08002a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SystemInit+0x20>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <SystemInit+0x20>)
 8002a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a62:	490e      	ldr	r1, [pc, #56]	; (8002a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a78:	4c0b      	ldr	r4, [pc, #44]	; (8002aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a86:	f7ff ffd7 	bl	8002a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f006 f8e1 	bl	8008c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7fe ff59 	bl	8001944 <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8002aa0:	08008d08 	.word	0x08008d08
  ldr r2, =_sbss
 8002aa4:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8002aa8:	20001f40 	.word	0x20001f40

08002aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC_IRQHandler>

08002aae <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f001 fb21 	bl	8004108 <HAL_GPIO_WritePin>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	2200      	movs	r2, #0
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f001 fb11 	bl	8004108 <HAL_GPIO_WritePin>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8002afa:	887b      	ldrh	r3, [r7, #2]
 8002afc:	4619      	mov	r1, r3
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f001 faea 	bl	80040d8 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <D_LED_Set_Circle>:
		LED_Data[i][2] = LED[i][0];
		LED_Data[i][3] = LED[i][2];
	}
}

void D_LED_Set_Circle(uint8_t LED[][3], int num){
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
	for(int i=0; i<10; i++){
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e059      	b.n	8002bdc <D_LED_Set_Circle+0xc4>
		LED_Data[(num-1)*10 + i][0] = (num-1)*10 + i;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	b2d8      	uxtb	r0, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	b2d9      	uxtb	r1, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	1842      	adds	r2, r0, r1
 8002b50:	b2d1      	uxtb	r1, r2
 8002b52:	4a27      	ldr	r2, [pc, #156]	; (8002bf0 <D_LED_Set_Circle+0xd8>)
 8002b54:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[(num-1)*10 + i][1] = LED[i][1];
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	18d1      	adds	r1, r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	1e5a      	subs	r2, r3, #1
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	461a      	mov	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	7849      	ldrb	r1, [r1, #1]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <D_LED_Set_Circle+0xd8>)
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	460a      	mov	r2, r1
 8002b80:	705a      	strb	r2, [r3, #1]
		LED_Data[(num-1)*10 + i][2] = LED[i][0];
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	18d1      	adds	r1, r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	7809      	ldrb	r1, [r1, #0]
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <D_LED_Set_Circle+0xd8>)
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	460a      	mov	r2, r1
 8002baa:	709a      	strb	r2, [r3, #2]
		LED_Data[(num-1)*10 + i][3] = LED[i][2];
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	18d1      	adds	r1, r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4413      	add	r3, r2
 8002bca:	7889      	ldrb	r1, [r1, #2]
 8002bcc:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <D_LED_Set_Circle+0xd8>)
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	460a      	mov	r2, r1
 8002bd4:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<10; i++){
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b09      	cmp	r3, #9
 8002be0:	dda2      	ble.n	8002b28 <D_LED_Set_Circle+0x10>
	}
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20001da0 	.word	0x20001da0

08002bf4 <D_LED_Send>:

void D_LED_Send(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int j= 0; j<LED_NUM; j++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e036      	b.n	8002c72 <D_LED_Send+0x7e>
	{
		color = ((LED_Data[j][1]<<16) | (LED_Data[j][2]<<8) | (LED_Data[j][3]));
 8002c04:	4a31      	ldr	r2, [pc, #196]	; (8002ccc <D_LED_Send+0xd8>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	041a      	lsls	r2, r3, #16
 8002c10:	492e      	ldr	r1, [pc, #184]	; (8002ccc <D_LED_Send+0xd8>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	789b      	ldrb	r3, [r3, #2]
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	492b      	ldr	r1, [pc, #172]	; (8002ccc <D_LED_Send+0xd8>)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	78db      	ldrb	r3, [r3, #3]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	607b      	str	r3, [r7, #4]
		for (int i=23; i>=0; i--)
 8002c2c:	2317      	movs	r3, #23
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e019      	b.n	8002c66 <D_LED_Send+0x72>
		{
			if (color&(1<<i))
 8002c32:	2201      	movs	r2, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <D_LED_Send+0x5c>
			{
				pwmData[indx] = 15;  // 2/3 of 25
 8002c44:	4a22      	ldr	r2, [pc, #136]	; (8002cd0 <D_LED_Send+0xdc>)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	210f      	movs	r1, #15
 8002c4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002c4e:	e004      	b.n	8002c5a <D_LED_Send+0x66>
			}
			else pwmData[indx] = 7;  // 1/3 of 25
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <D_LED_Send+0xdc>)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2107      	movs	r1, #7
 8002c56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			indx++;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	dae2      	bge.n	8002c32 <D_LED_Send+0x3e>
	for (int j= 0; j<LED_NUM; j++)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b31      	cmp	r3, #49	; 0x31
 8002c76:	ddc5      	ble.n	8002c04 <D_LED_Send+0x10>
		}
	}

	for (int i=0; i<50; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	e00a      	b.n	8002c94 <D_LED_Send+0xa0>
	{
		pwmData[indx] = 0;
 8002c7e:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <D_LED_Send+0xdc>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2100      	movs	r1, #0
 8002c84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3301      	adds	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b31      	cmp	r3, #49	; 0x31
 8002c98:	ddf1      	ble.n	8002c7e <D_LED_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx*2);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <D_LED_Send+0xdc>)
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	480b      	ldr	r0, [pc, #44]	; (8002cd4 <D_LED_Send+0xe0>)
 8002ca8:	f003 ff38 	bl	8006b1c <HAL_TIM_PWM_Start_DMA>
	while (!_dataSent){};
 8002cac:	bf00      	nop
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <D_LED_Send+0xe4>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f7      	bne.n	8002cae <D_LED_Send+0xba>
	_dataSent = false;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <D_LED_Send+0xe4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20001da0 	.word	0x20001da0
 8002cd0:	200001c4 	.word	0x200001c4
 8002cd4:	20001c6c 	.word	0x20001c6c
 8002cd8:	200001c0 	.word	0x200001c0

08002cdc <D_LED_Rotate>:

void D_LED_Rotate(int num){
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	int indx = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
	for(int i=0;i<LED_NUM; i++){
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	e03b      	b.n	8002d66 <D_LED_Rotate+0x8a>
		indx = i + num;
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]
		if(indx >= LED_NUM){
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b31      	cmp	r3, #49	; 0x31
 8002cfa:	dd02      	ble.n	8002d02 <D_LED_Rotate+0x26>
			indx -= 50;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3b32      	subs	r3, #50	; 0x32
 8002d00:	617b      	str	r3, [r7, #20]
		}
		if(indx < 0){
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da02      	bge.n	8002d0e <D_LED_Rotate+0x32>
			indx += 50;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3332      	adds	r3, #50	; 0x32
 8002d0c:	617b      	str	r3, [r7, #20]
		}
		LED_Temp[i][0] = LED_Data[indx][0];
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <D_LED_Rotate+0x104>)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002d16:	4a33      	ldr	r2, [pc, #204]	; (8002de4 <D_LED_Rotate+0x108>)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Temp[i][1] = LED_Data[indx][1];
 8002d1e:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <D_LED_Rotate+0x104>)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	7859      	ldrb	r1, [r3, #1]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <D_LED_Rotate+0x108>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	460a      	mov	r2, r1
 8002d32:	705a      	strb	r2, [r3, #1]
		LED_Temp[i][2] = LED_Data[indx][2];
 8002d34:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <D_LED_Rotate+0x104>)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	7899      	ldrb	r1, [r3, #2]
 8002d3e:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <D_LED_Rotate+0x108>)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	460a      	mov	r2, r1
 8002d48:	709a      	strb	r2, [r3, #2]
		LED_Temp[i][3] = LED_Data[indx][3];
 8002d4a:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <D_LED_Rotate+0x104>)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	78d9      	ldrb	r1, [r3, #3]
 8002d54:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <D_LED_Rotate+0x108>)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	3301      	adds	r3, #1
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b31      	cmp	r3, #49	; 0x31
 8002d6a:	ddc0      	ble.n	8002cee <D_LED_Rotate+0x12>
	}
	for(int i=0;i<LED_NUM; i++){
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	e02b      	b.n	8002dca <D_LED_Rotate+0xee>
		LED_Data[i][0] = LED_Temp[i][0];
 8002d72:	4a1c      	ldr	r2, [pc, #112]	; (8002de4 <D_LED_Rotate+0x108>)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <D_LED_Rotate+0x104>)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = LED_Temp[i][1];
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <D_LED_Rotate+0x108>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	7859      	ldrb	r1, [r3, #1]
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <D_LED_Rotate+0x104>)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	460a      	mov	r2, r1
 8002d96:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = LED_Temp[i][2];
 8002d98:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <D_LED_Rotate+0x108>)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	7899      	ldrb	r1, [r3, #2]
 8002da2:	4a0f      	ldr	r2, [pc, #60]	; (8002de0 <D_LED_Rotate+0x104>)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	460a      	mov	r2, r1
 8002dac:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = LED_Temp[i][3];
 8002dae:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <D_LED_Rotate+0x108>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	78d9      	ldrb	r1, [r3, #3]
 8002db8:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <D_LED_Rotate+0x104>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b31      	cmp	r3, #49	; 0x31
 8002dce:	ddd0      	ble.n	8002d72 <D_LED_Rotate+0x96>
	}
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	371c      	adds	r7, #28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20001da0 	.word	0x20001da0
 8002de4:	20001e68 	.word	0x20001e68

08002de8 <D_LED_Callback>:

void D_LED_Callback(void){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8002dec:	2100      	movs	r1, #0
 8002dee:	4804      	ldr	r0, [pc, #16]	; (8002e00 <D_LED_Callback+0x18>)
 8002df0:	f004 f85c 	bl	8006eac <HAL_TIM_PWM_Stop_DMA>
    _dataSent = true;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <D_LED_Callback+0x1c>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20001c6c 	.word	0x20001c6c
 8002e04:	200001c0 	.word	0x200001c0

08002e08 <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 8002e08:	b40f      	push	{r0, r1, r2, r3}
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	6938      	ldr	r0, [r7, #16]
 8002e1a:	f000 f891 	bl	8002f40 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 8002e1e:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <D_Mess_printf+0x38>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a08      	ldr	r2, [pc, #32]	; (8002e44 <D_Mess_printf+0x3c>)
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002e2a:	dd01      	ble.n	8002e30 <D_Mess_printf+0x28>
	  D_Mess_flush();
 8002e2c:	f000 f80c 	bl	8002e48 <D_Mess_flush>
  }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e3a:	b004      	add	sp, #16
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20001f38 	.word	0x20001f38
 8002e44:	2000154c 	.word	0x2000154c

08002e48 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <D_Mess_flush+0x54>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f083 0301 	eor.w	r3, r3, #1
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <D_Mess_flush+0x1c>
		outptr = buff;
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <D_Mess_flush+0x58>)
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <D_Mess_flush+0x5c>)
 8002e60:	601a      	str	r2, [r3, #0]
		return;
 8002e62:	e01a      	b.n	8002e9a <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <D_Mess_flush+0x58>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d013      	beq.n	8002e94 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <D_Mess_flush+0x58>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	490b      	ldr	r1, [pc, #44]	; (8002ea0 <D_Mess_flush+0x58>)
 8002e74:	600a      	str	r2, [r1, #0]
 8002e76:	220a      	movs	r2, #10
 8002e78:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <D_Mess_flush+0x58>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <D_Mess_flush+0x5c>)
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <D_Mess_flush+0x5c>)
 8002e88:	4807      	ldr	r0, [pc, #28]	; (8002ea8 <D_Mess_flush+0x60>)
 8002e8a:	f004 ff7b 	bl	8007d84 <HAL_UART_Transmit_DMA>
		had_completed = false;
 8002e8e:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <D_Mess_flush+0x54>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <D_Mess_flush+0x58>)
 8002e96:	4a03      	ldr	r2, [pc, #12]	; (8002ea4 <D_Mess_flush+0x5c>)
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2000002c 	.word	0x2000002c
 8002ea0:	20001f38 	.word	0x20001f38
 8002ea4:	2000154c 	.word	0x2000154c
 8002ea8:	20001d5c 	.word	0x20001d5c

08002eac <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  had_completed = true;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <D_Mess_TransitionCompletedCallBack+0x14>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	2000002c 	.word	0x2000002c

08002ec4 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b0a      	cmp	r3, #10
 8002ed2:	d102      	bne.n	8002eda <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8002ed4:	200d      	movs	r0, #13
 8002ed6:	f7ff fff5 	bl	8002ec4 <xputc>
  }
  if( outptr ){
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <xputc+0x48>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <xputc+0x48>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	4908      	ldr	r1, [pc, #32]	; (8002f0c <xputc+0x48>)
 8002eea:	600a      	str	r2, [r1, #0]
 8002eec:	79fa      	ldrb	r2, [r7, #7]
 8002eee:	701a      	strb	r2, [r3, #0]
    return;
 8002ef0:	e008      	b.n	8002f04 <xputc+0x40>
  }

  if( xfunc_out ){
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <xputc+0x4c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <xputc+0x40>
    xfunc_out((unsigned char)c);
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <xputc+0x4c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	79fa      	ldrb	r2, [r7, #7]
 8002f00:	4610      	mov	r0, r2
 8002f02:	4798      	blx	r3
  }
}
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20001f38 	.word	0x20001f38
 8002f10:	20001f34 	.word	0x20001f34

08002f14 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  while( *str ){
 8002f1c:	e006      	b.n	8002f2c <xputs+0x18>
    xputc(*str++);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ffcc 	bl	8002ec4 <xputc>
  while( *str ){
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f4      	bne.n	8002f1e <xputs+0xa>
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08e      	sub	sp, #56	; 0x38
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 8002f54:	7ffb      	ldrb	r3, [r7, #31]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8167 	beq.w	800322a <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	2b25      	cmp	r3, #37	; 0x25
 8002f60:	d004      	beq.n	8002f6c <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ffad 	bl	8002ec4 <xputc>
 8002f6a:	e15d      	b.n	8003228 <xvprintf+0x2e8>
    }
    f = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 8002f7a:	7ffb      	ldrb	r3, [r7, #31]
 8002f7c:	2b30      	cmp	r3, #48	; 0x30
 8002f7e:	d107      	bne.n	8002f90 <xvprintf+0x50>
      f = 1; c = *fmt++;
 8002f80:	2301      	movs	r3, #1
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e009      	b.n	8002fa4 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	2b2d      	cmp	r3, #45	; 0x2d
 8002f94:	d106      	bne.n	8002fa4 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 8002f96:	2302      	movs	r3, #2
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa8:	e00e      	b.n	8002fc8 <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 8002faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	4413      	add	r3, r2
 8002fba:	3b30      	subs	r3, #48	; 0x30
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
 8002fca:	2b2f      	cmp	r3, #47	; 0x2f
 8002fcc:	d902      	bls.n	8002fd4 <xvprintf+0x94>
 8002fce:	7ffb      	ldrb	r3, [r7, #31]
 8002fd0:	2b39      	cmp	r3, #57	; 0x39
 8002fd2:	d9ea      	bls.n	8002faa <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	2b6c      	cmp	r3, #108	; 0x6c
 8002fd8:	d002      	beq.n	8002fe0 <xvprintf+0xa0>
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
 8002fdc:	2b4c      	cmp	r3, #76	; 0x4c
 8002fde:	d108      	bne.n	8002ff2 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 811a 	beq.w	800322e <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 8002ffa:	7ffb      	ldrb	r3, [r7, #31]
 8002ffc:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 8002ffe:	7fbb      	ldrb	r3, [r7, #30]
 8003000:	2b60      	cmp	r3, #96	; 0x60
 8003002:	d902      	bls.n	800300a <xvprintf+0xca>
      d -= 0x20;
 8003004:	7fbb      	ldrb	r3, [r7, #30]
 8003006:	3b20      	subs	r3, #32
 8003008:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 800300a:	7fbb      	ldrb	r3, [r7, #30]
 800300c:	3b42      	subs	r3, #66	; 0x42
 800300e:	2b16      	cmp	r3, #22
 8003010:	d873      	bhi.n	80030fa <xvprintf+0x1ba>
 8003012:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <xvprintf+0xd8>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	080030e3 	.word	0x080030e3
 800301c:	080030d1 	.word	0x080030d1
 8003020:	080030ef 	.word	0x080030ef
 8003024:	080030fb 	.word	0x080030fb
 8003028:	080030fb 	.word	0x080030fb
 800302c:	080030fb 	.word	0x080030fb
 8003030:	080030fb 	.word	0x080030fb
 8003034:	080030fb 	.word	0x080030fb
 8003038:	080030fb 	.word	0x080030fb
 800303c:	080030fb 	.word	0x080030fb
 8003040:	080030fb 	.word	0x080030fb
 8003044:	080030fb 	.word	0x080030fb
 8003048:	080030fb 	.word	0x080030fb
 800304c:	080030e9 	.word	0x080030e9
 8003050:	080030fb 	.word	0x080030fb
 8003054:	080030fb 	.word	0x080030fb
 8003058:	080030fb 	.word	0x080030fb
 800305c:	08003075 	.word	0x08003075
 8003060:	080030fb 	.word	0x080030fb
 8003064:	080030ef 	.word	0x080030ef
 8003068:	080030fb 	.word	0x080030fb
 800306c:	080030fb 	.word	0x080030fb
 8003070:	080030f5 	.word	0x080030f5
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	1d1a      	adds	r2, r3, #4
 8003078:	603a      	str	r2, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003082:	e002      	b.n	800308a <xvprintf+0x14a>
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	3301      	adds	r3, #1
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f6      	bne.n	8003084 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 8003096:	e002      	b.n	800309e <xvprintf+0x15e>
        xputc(' ');
 8003098:	2020      	movs	r0, #32
 800309a:	f7ff ff13 	bl	8002ec4 <xputc>
      while( !( f & 2 ) && j++ < w ){
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <xvprintf+0x174>
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d8f1      	bhi.n	8003098 <xvprintf+0x158>
      }
      xputs(p);
 80030b4:	69b8      	ldr	r0, [r7, #24]
 80030b6:	f7ff ff2d 	bl	8002f14 <xputs>
      while( j++ < w ){
 80030ba:	e002      	b.n	80030c2 <xvprintf+0x182>
        xputc(' ');
 80030bc:	2020      	movs	r0, #32
 80030be:	f7ff ff01 	bl	8002ec4 <xputc>
      while( j++ < w ){
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d8f6      	bhi.n	80030bc <xvprintf+0x17c>
      }
      continue;
 80030ce:	e0ab      	b.n	8003228 <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	1d1a      	adds	r2, r3, #4
 80030d4:	603a      	str	r2, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fef2 	bl	8002ec4 <xputc>
 80030e0:	e0a2      	b.n	8003228 <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 80030e2:	2302      	movs	r3, #2
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
 80030e6:	e00d      	b.n	8003104 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 80030e8:	2308      	movs	r3, #8
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
 80030ec:	e00a      	b.n	8003104 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 80030ee:	230a      	movs	r3, #10
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
 80030f2:	e007      	b.n	8003104 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 80030f4:	2310      	movs	r3, #16
 80030f6:	637b      	str	r3, [r7, #52]	; 0x34
 80030f8:	e004      	b.n	8003104 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fee1 	bl	8002ec4 <xputc>
 8003102:	e091      	b.n	8003228 <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <xvprintf+0x1d8>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	1d1a      	adds	r2, r3, #4
 8003112:	603a      	str	r2, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	e00b      	b.n	8003130 <xvprintf+0x1f0>
 8003118:	7fbb      	ldrb	r3, [r7, #30]
 800311a:	2b44      	cmp	r3, #68	; 0x44
 800311c:	d104      	bne.n	8003128 <xvprintf+0x1e8>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	1d1a      	adds	r2, r3, #4
 8003122:	603a      	str	r2, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	e003      	b.n	8003130 <xvprintf+0x1f0>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	1d1a      	adds	r2, r3, #4
 800312c:	603a      	str	r2, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8003132:	7fbb      	ldrb	r3, [r7, #30]
 8003134:	2b44      	cmp	r3, #68	; 0x44
 8003136:	d109      	bne.n	800314c <xvprintf+0x20c>
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	da06      	bge.n	800314c <xvprintf+0x20c>
      v = 0 - v;
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	425b      	negs	r3, r3
 8003142:	623b      	str	r3, [r7, #32]
      f |= 8;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003154:	fbb3 f2f2 	udiv	r2, r3, r2
 8003158:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800315a:	fb01 f202 	mul.w	r2, r1, r2
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	77bb      	strb	r3, [r7, #30]
 8003162:	6a3a      	ldr	r2, [r7, #32]
 8003164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 800316c:	7fbb      	ldrb	r3, [r7, #30]
 800316e:	2b09      	cmp	r3, #9
 8003170:	d908      	bls.n	8003184 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	2b78      	cmp	r3, #120	; 0x78
 8003176:	d101      	bne.n	800317c <xvprintf+0x23c>
 8003178:	2227      	movs	r2, #39	; 0x27
 800317a:	e000      	b.n	800317e <xvprintf+0x23e>
 800317c:	2207      	movs	r2, #7
 800317e:	7fbb      	ldrb	r3, [r7, #30]
 8003180:	4413      	add	r3, r2
 8003182:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	633a      	str	r2, [r7, #48]	; 0x30
 800318a:	7fba      	ldrb	r2, [r7, #30]
 800318c:	3230      	adds	r2, #48	; 0x30
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003194:	440b      	add	r3, r1
 8003196:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <xvprintf+0x266>
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	d9d4      	bls.n	8003150 <xvprintf+0x210>
    if( f & 8 ){
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <xvprintf+0x282>
      s[i++] = '-';
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	633a      	str	r2, [r7, #48]	; 0x30
 80031b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031ba:	4413      	add	r3, r2
 80031bc:	222d      	movs	r2, #45	; 0x2d
 80031be:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <xvprintf+0x294>
 80031d0:	2330      	movs	r3, #48	; 0x30
 80031d2:	e000      	b.n	80031d6 <xvprintf+0x296>
 80031d4:	2320      	movs	r3, #32
 80031d6:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 80031d8:	e003      	b.n	80031e2 <xvprintf+0x2a2>
      xputc(d);
 80031da:	7fbb      	ldrb	r3, [r7, #30]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe71 	bl	8002ec4 <xputc>
    while( !( f & 2 ) && j++ < w ){
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <xvprintf+0x2b8>
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d8f0      	bhi.n	80031da <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	3b01      	subs	r3, #1
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
 80031fe:	f107 0208 	add.w	r2, r7, #8
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	4413      	add	r3, r2
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fe5b 	bl	8002ec4 <xputc>
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f1      	bne.n	80031f8 <xvprintf+0x2b8>
    while( j++ < w ){
 8003214:	e002      	b.n	800321c <xvprintf+0x2dc>
      xputc(' ');
 8003216:	2020      	movs	r0, #32
 8003218:	f7ff fe54 	bl	8002ec4 <xputc>
    while( j++ < w ){
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	1c5a      	adds	r2, r3, #1
 8003220:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003224:	429a      	cmp	r2, r3
 8003226:	d8f6      	bhi.n	8003216 <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8003228:	e68f      	b.n	8002f4a <xvprintf+0xa>
      break;                                            /* End of format? */
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 800322e:	bf00      	nop
    }
  }
} /* xvprintf */
 8003230:	bf00      	nop
 8003232:	3738      	adds	r7, #56	; 0x38
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800323c:	2100      	movs	r1, #0
 800323e:	4810      	ldr	r0, [pc, #64]	; (8003280 <D_PWM_Init+0x48>)
 8003240:	f003 fba4 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8003244:	2104      	movs	r1, #4
 8003246:	480e      	ldr	r0, [pc, #56]	; (8003280 <D_PWM_Init+0x48>)
 8003248:	f003 fba0 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800324c:	2108      	movs	r1, #8
 800324e:	480c      	ldr	r0, [pc, #48]	; (8003280 <D_PWM_Init+0x48>)
 8003250:	f003 fb9c 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8003254:	210c      	movs	r1, #12
 8003256:	480a      	ldr	r0, [pc, #40]	; (8003280 <D_PWM_Init+0x48>)
 8003258:	f003 fb98 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800325c:	2100      	movs	r1, #0
 800325e:	4809      	ldr	r0, [pc, #36]	; (8003284 <D_PWM_Init+0x4c>)
 8003260:	f003 fb94 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003264:	2104      	movs	r1, #4
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <D_PWM_Init+0x4c>)
 8003268:	f003 fb90 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800326c:	2108      	movs	r1, #8
 800326e:	4805      	ldr	r0, [pc, #20]	; (8003284 <D_PWM_Init+0x4c>)
 8003270:	f003 fb8c 	bl	800698c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003274:	210c      	movs	r1, #12
 8003276:	4803      	ldr	r0, [pc, #12]	; (8003284 <D_PWM_Init+0x4c>)
 8003278:	f003 fb88 	bl	800698c <HAL_TIM_PWM_Start>
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20001d14 	.word	0x20001d14
 8003284:	20001ac0 	.word	0x20001ac0

08003288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_Init+0x40>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0d      	ldr	r2, [pc, #52]	; (80032c8 <HAL_Init+0x40>)
 8003292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <HAL_Init+0x40>)
 800329e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <HAL_Init+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <HAL_Init+0x40>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032b0:	2003      	movs	r0, #3
 80032b2:	f000 f92b 	bl	800350c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 f808 	bl	80032cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032bc:	f7fe ff7e 	bl	80021bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023c00 	.word	0x40023c00

080032cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_InitTick+0x54>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_InitTick+0x58>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f943 	bl	8003576 <HAL_SYSTICK_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e00e      	b.n	8003318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d80a      	bhi.n	8003316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003300:	2200      	movs	r2, #0
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003308:	f000 f90b 	bl	8003522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800330c:	4a06      	ldr	r2, [pc, #24]	; (8003328 <HAL_InitTick+0x5c>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000028 	.word	0x20000028
 8003324:	20000034 	.word	0x20000034
 8003328:	20000030 	.word	0x20000030

0800332c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003330:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_IncTick+0x20>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_IncTick+0x24>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4413      	add	r3, r2
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <HAL_IncTick+0x24>)
 800333e:	6013      	str	r3, [r2, #0]
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000034 	.word	0x20000034
 8003350:	20001f3c 	.word	0x20001f3c

08003354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return uwTick;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_GetTick+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20001f3c 	.word	0x20001f3c

0800336c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <__NVIC_SetPriorityGrouping+0x44>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003388:	4013      	ands	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339e:	4a04      	ldr	r2, [pc, #16]	; (80033b0 <__NVIC_SetPriorityGrouping+0x44>)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	60d3      	str	r3, [r2, #12]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <__NVIC_GetPriorityGrouping+0x18>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	f003 0307 	and.w	r3, r3, #7
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	db0b      	blt.n	80033fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	4907      	ldr	r1, [pc, #28]	; (8003408 <__NVIC_EnableIRQ+0x38>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2001      	movs	r0, #1
 80033f2:	fa00 f202 	lsl.w	r2, r0, r2
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000e100 	.word	0xe000e100

0800340c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	; (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	; (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf28      	it	cs
 800347e:	2304      	movcs	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3304      	adds	r3, #4
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <NVIC_EncodePriority+0x30>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3b03      	subs	r3, #3
 800348e:	e000      	b.n	8003492 <NVIC_EncodePriority+0x32>
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	4313      	orrs	r3, r2
         );
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d8:	d301      	bcc.n	80034de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <SysTick_Config+0x40>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e6:	210f      	movs	r1, #15
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034ec:	f7ff ff8e 	bl	800340c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SysTick_Config+0x40>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <SysTick_Config+0x40>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000e010 	.word	0xe000e010

0800350c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff29 	bl	800336c <__NVIC_SetPriorityGrouping>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff3e 	bl	80033b4 <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff8e 	bl	8003460 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5d 	bl	800340c <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff31 	bl	80033d0 <__NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ffa2 	bl	80034c8 <SysTick_Config>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800359c:	f7ff feda 	bl	8003354 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e099      	b.n	80036e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035cc:	e00f      	b.n	80035ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ce:	f7ff fec1 	bl	8003354 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b05      	cmp	r3, #5
 80035da:	d908      	bls.n	80035ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2203      	movs	r2, #3
 80035e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e078      	b.n	80036e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e8      	bne.n	80035ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_DMA_Init+0x158>)
 8003608:	4013      	ands	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	2b04      	cmp	r3, #4
 8003646:	d107      	bne.n	8003658 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	4313      	orrs	r3, r2
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f023 0307 	bic.w	r3, r3, #7
 800366e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2b04      	cmp	r3, #4
 8003680:	d117      	bne.n	80036b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb0f 	bl	8003cb8 <DMA_CheckFifoParam>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036ae:	2301      	movs	r3, #1
 80036b0:	e016      	b.n	80036e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fac6 	bl	8003c4c <DMA_CalcBaseAndBitshift>
 80036c0:	4603      	mov	r3, r0
 80036c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	223f      	movs	r2, #63	; 0x3f
 80036ca:	409a      	lsls	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	f010803f 	.word	0xf010803f

080036ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_DMA_Start_IT+0x26>
 800370e:	2302      	movs	r3, #2
 8003710:	e040      	b.n	8003794 <HAL_DMA_Start_IT+0xa8>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d12f      	bne.n	8003786 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2202      	movs	r2, #2
 800372a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa58 	bl	8003bf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	223f      	movs	r2, #63	; 0x3f
 8003746:	409a      	lsls	r2, r3
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0216 	orr.w	r2, r2, #22
 800375a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0208 	orr.w	r2, r2, #8
 8003772:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e005      	b.n	8003792 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037aa:	f7ff fdd3 	bl	8003354 <HAL_GetTick>
 80037ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d008      	beq.n	80037ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e052      	b.n	8003874 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0216 	bic.w	r2, r2, #22
 80037dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_DMA_Abort+0x62>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800381e:	e013      	b.n	8003848 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003820:	f7ff fd98 	bl	8003354 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b05      	cmp	r3, #5
 800382c:	d90c      	bls.n	8003848 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2203      	movs	r2, #3
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e015      	b.n	8003874 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e4      	bne.n	8003820 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	223f      	movs	r2, #63	; 0x3f
 800385c:	409a      	lsls	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d004      	beq.n	800389a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2280      	movs	r2, #128	; 0x80
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e00c      	b.n	80038b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2205      	movs	r2, #5
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038cc:	4b92      	ldr	r3, [pc, #584]	; (8003b18 <HAL_DMA_IRQHandler+0x258>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a92      	ldr	r2, [pc, #584]	; (8003b1c <HAL_DMA_IRQHandler+0x25c>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	2208      	movs	r2, #8
 80038ec:	409a      	lsls	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d01a      	beq.n	800392c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0204 	bic.w	r2, r2, #4
 8003912:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	2208      	movs	r2, #8
 800391a:	409a      	lsls	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003924:	f043 0201 	orr.w	r2, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2201      	movs	r2, #1
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00b      	beq.n	8003962 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	2201      	movs	r2, #1
 8003950:	409a      	lsls	r2, r3
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f043 0202 	orr.w	r2, r3, #2
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2204      	movs	r2, #4
 8003968:	409a      	lsls	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00b      	beq.n	8003998 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	2204      	movs	r2, #4
 8003986:	409a      	lsls	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f043 0204 	orr.w	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	2210      	movs	r2, #16
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d043      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d03c      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ba:	2210      	movs	r2, #16
 80039bc:	409a      	lsls	r2, r3
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d018      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d108      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d024      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	e01f      	b.n	8003a30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01b      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
 8003a00:	e016      	b.n	8003a30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0208 	bic.w	r2, r2, #8
 8003a1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2220      	movs	r2, #32
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 808e 	beq.w	8003b5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8086 	beq.w	8003b5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	2220      	movs	r2, #32
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d136      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0216 	bic.w	r2, r2, #22
 8003a78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d103      	bne.n	8003a9a <HAL_DMA_IRQHandler+0x1da>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0208 	bic.w	r2, r2, #8
 8003aa8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	223f      	movs	r2, #63	; 0x3f
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d07d      	beq.n	8003bca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
        }
        return;
 8003ad6:	e078      	b.n	8003bca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01c      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d108      	bne.n	8003b06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d030      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
 8003b04:	e02b      	b.n	8003b5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e022      	b.n	8003b5e <HAL_DMA_IRQHandler+0x29e>
 8003b18:	20000028 	.word	0x20000028
 8003b1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0210 	bic.w	r2, r2, #16
 8003b3c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d032      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d022      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2205      	movs	r2, #5
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d307      	bcc.n	8003ba6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f2      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x2ca>
 8003ba4:	e000      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ba6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
 8003bc8:	e000      	b.n	8003bcc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bca:	bf00      	nop
    }
  }
}
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be2:	b2db      	uxtb	r3, r3
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d108      	bne.n	8003c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c2e:	e007      	b.n	8003c40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	3b10      	subs	r3, #16
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c66:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d909      	bls.n	8003c8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	1d1a      	adds	r2, r3, #4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8c:	e007      	b.n	8003c9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	aaaaaaab 	.word	0xaaaaaaab
 8003cb4:	08008cf0 	.word	0x08008cf0

08003cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11f      	bne.n	8003d12 <DMA_CheckFifoParam+0x5a>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d856      	bhi.n	8003d86 <DMA_CheckFifoParam+0xce>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <DMA_CheckFifoParam+0x28>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf1 	.word	0x08003cf1
 8003ce4:	08003d03 	.word	0x08003d03
 8003ce8:	08003cf1 	.word	0x08003cf1
 8003cec:	08003d87 	.word	0x08003d87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d046      	beq.n	8003d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d00:	e043      	b.n	8003d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d0a:	d140      	bne.n	8003d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e03d      	b.n	8003d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	d121      	bne.n	8003d60 <DMA_CheckFifoParam+0xa8>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d837      	bhi.n	8003d92 <DMA_CheckFifoParam+0xda>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <DMA_CheckFifoParam+0x70>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d39 	.word	0x08003d39
 8003d2c:	08003d3f 	.word	0x08003d3f
 8003d30:	08003d39 	.word	0x08003d39
 8003d34:	08003d51 	.word	0x08003d51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3c:	e030      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d025      	beq.n	8003d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4e:	e022      	b.n	8003d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d58:	d11f      	bne.n	8003d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d5e:	e01c      	b.n	8003d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d903      	bls.n	8003d6e <DMA_CheckFifoParam+0xb6>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d6c:	e018      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
      break;
 8003d72:	e015      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00e      	beq.n	8003d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
      break;
 8003d84:	e00b      	b.n	8003d9e <DMA_CheckFifoParam+0xe6>
      break;
 8003d86:	bf00      	nop
 8003d88:	e00a      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e008      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e006      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e004      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
 8003d98:	e002      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <DMA_CheckFifoParam+0xe8>
      break;
 8003d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop

08003db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e165      	b.n	8004098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dcc:	2201      	movs	r2, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	f040 8154 	bne.w	8004092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d005      	beq.n	8003e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d130      	bne.n	8003e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 0201 	and.w	r2, r3, #1
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d017      	beq.n	8003ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d123      	bne.n	8003ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	08da      	lsrs	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3208      	adds	r2, #8
 8003eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	220f      	movs	r2, #15
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	69b9      	ldr	r1, [r7, #24]
 8003ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0203 	and.w	r2, r3, #3
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80ae 	beq.w	8004092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	4b5d      	ldr	r3, [pc, #372]	; (80040b0 <HAL_GPIO_Init+0x300>)
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	4a5c      	ldr	r2, [pc, #368]	; (80040b0 <HAL_GPIO_Init+0x300>)
 8003f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f44:	6453      	str	r3, [r2, #68]	; 0x44
 8003f46:	4b5a      	ldr	r3, [pc, #360]	; (80040b0 <HAL_GPIO_Init+0x300>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f52:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	3302      	adds	r3, #2
 8003f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	220f      	movs	r2, #15
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4013      	ands	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4f      	ldr	r2, [pc, #316]	; (80040b8 <HAL_GPIO_Init+0x308>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d025      	beq.n	8003fca <HAL_GPIO_Init+0x21a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4e      	ldr	r2, [pc, #312]	; (80040bc <HAL_GPIO_Init+0x30c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01f      	beq.n	8003fc6 <HAL_GPIO_Init+0x216>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4d      	ldr	r2, [pc, #308]	; (80040c0 <HAL_GPIO_Init+0x310>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d019      	beq.n	8003fc2 <HAL_GPIO_Init+0x212>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4c      	ldr	r2, [pc, #304]	; (80040c4 <HAL_GPIO_Init+0x314>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_GPIO_Init+0x20e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4b      	ldr	r2, [pc, #300]	; (80040c8 <HAL_GPIO_Init+0x318>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00d      	beq.n	8003fba <HAL_GPIO_Init+0x20a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4a      	ldr	r2, [pc, #296]	; (80040cc <HAL_GPIO_Init+0x31c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <HAL_GPIO_Init+0x206>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a49      	ldr	r2, [pc, #292]	; (80040d0 <HAL_GPIO_Init+0x320>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_GPIO_Init+0x202>
 8003fae:	2306      	movs	r3, #6
 8003fb0:	e00c      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fb2:	2307      	movs	r3, #7
 8003fb4:	e00a      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fb6:	2305      	movs	r3, #5
 8003fb8:	e008      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fba:	2304      	movs	r3, #4
 8003fbc:	e006      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e004      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e002      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <HAL_GPIO_Init+0x21c>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	f002 0203 	and.w	r2, r2, #3
 8003fd2:	0092      	lsls	r2, r2, #2
 8003fd4:	4093      	lsls	r3, r2
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fdc:	4935      	ldr	r1, [pc, #212]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fea:	4b3a      	ldr	r3, [pc, #232]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800400e:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004014:	4b2f      	ldr	r3, [pc, #188]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004038:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <HAL_GPIO_Init+0x324>)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403e:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_GPIO_Init+0x324>)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <HAL_GPIO_Init+0x324>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800408c:	4a11      	ldr	r2, [pc, #68]	; (80040d4 <HAL_GPIO_Init+0x324>)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3301      	adds	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	f67f ae96 	bls.w	8003dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	40013800 	.word	0x40013800
 80040b8:	40020000 	.word	0x40020000
 80040bc:	40020400 	.word	0x40020400
 80040c0:	40020800 	.word	0x40020800
 80040c4:	40020c00 	.word	0x40020c00
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40021400 	.word	0x40021400
 80040d0:	40021800 	.word	0x40021800
 80040d4:	40013c00 	.word	0x40013c00

080040d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	e001      	b.n	80040fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
 8004114:	4613      	mov	r3, r2
 8004116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004118:	787b      	ldrb	r3, [r7, #1]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004124:	e003      	b.n	800412e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	041a      	lsls	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	619a      	str	r2, [r3, #24]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e12b      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe f852 	bl	800220c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2224      	movs	r2, #36	; 0x24
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800419e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041a0:	f001 fed4 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 80041a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a81      	ldr	r2, [pc, #516]	; (80043b0 <HAL_I2C_Init+0x274>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d807      	bhi.n	80041c0 <HAL_I2C_Init+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a80      	ldr	r2, [pc, #512]	; (80043b4 <HAL_I2C_Init+0x278>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bf94      	ite	ls
 80041b8:	2301      	movls	r3, #1
 80041ba:	2300      	movhi	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e006      	b.n	80041ce <HAL_I2C_Init+0x92>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a7d      	ldr	r2, [pc, #500]	; (80043b8 <HAL_I2C_Init+0x27c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bf94      	ite	ls
 80041c8:	2301      	movls	r3, #1
 80041ca:	2300      	movhi	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0e7      	b.n	80043a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a78      	ldr	r2, [pc, #480]	; (80043bc <HAL_I2C_Init+0x280>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	0c9b      	lsrs	r3, r3, #18
 80041e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a6a      	ldr	r2, [pc, #424]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d802      	bhi.n	8004210 <HAL_I2C_Init+0xd4>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	e009      	b.n	8004224 <HAL_I2C_Init+0xe8>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	4a69      	ldr	r2, [pc, #420]	; (80043c0 <HAL_I2C_Init+0x284>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	099b      	lsrs	r3, r3, #6
 8004222:	3301      	adds	r3, #1
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	495c      	ldr	r1, [pc, #368]	; (80043b0 <HAL_I2C_Init+0x274>)
 8004240:	428b      	cmp	r3, r1
 8004242:	d819      	bhi.n	8004278 <HAL_I2C_Init+0x13c>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e59      	subs	r1, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004258:	400b      	ands	r3, r1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_I2C_Init+0x138>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1e59      	subs	r1, r3, #1
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fbb1 f3f3 	udiv	r3, r1, r3
 800426c:	3301      	adds	r3, #1
 800426e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004272:	e051      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004274:	2304      	movs	r3, #4
 8004276:	e04f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d111      	bne.n	80042a4 <HAL_I2C_Init+0x168>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1e58      	subs	r0, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	440b      	add	r3, r1
 800428e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004292:	3301      	adds	r3, #1
 8004294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf0c      	ite	eq
 800429c:	2301      	moveq	r3, #1
 800429e:	2300      	movne	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e012      	b.n	80042ca <HAL_I2C_Init+0x18e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1e58      	subs	r0, r3, #1
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	0099      	lsls	r1, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ba:	3301      	adds	r3, #1
 80042bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Init+0x196>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e022      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10e      	bne.n	80042f8 <HAL_I2C_Init+0x1bc>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e58      	subs	r0, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6859      	ldr	r1, [r3, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	440b      	add	r3, r1
 80042e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ec:	3301      	adds	r3, #1
 80042ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f6:	e00f      	b.n	8004318 <HAL_I2C_Init+0x1dc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	0099      	lsls	r1, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	6809      	ldr	r1, [r1, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6911      	ldr	r1, [r2, #16]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68d2      	ldr	r2, [r2, #12]
 8004352:	4311      	orrs	r1, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	000186a0 	.word	0x000186a0
 80043b4:	001e847f 	.word	0x001e847f
 80043b8:	003d08ff 	.word	0x003d08ff
 80043bc:	431bde83 	.word	0x431bde83
 80043c0:	10624dd3 	.word	0x10624dd3

080043c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d003      	beq.n	80043fc <HAL_I2C_EV_IRQHandler+0x38>
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	f040 80c1 	bne.w	800457e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <HAL_I2C_EV_IRQHandler+0x6e>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800441c:	d003      	beq.n	8004426 <HAL_I2C_EV_IRQHandler+0x62>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004424:	d101      	bne.n	800442a <HAL_I2C_EV_IRQHandler+0x66>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_I2C_EV_IRQHandler+0x68>
 800442a:	2300      	movs	r3, #0
 800442c:	2b01      	cmp	r3, #1
 800442e:	f000 8132 	beq.w	8004696 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00c      	beq.n	8004456 <HAL_I2C_EV_IRQHandler+0x92>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	0a5b      	lsrs	r3, r3, #9
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d006      	beq.n	8004456 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f001 fc71 	bl	8005d30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fd79 	bl	8004f46 <I2C_Master_SB>
 8004454:	e092      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	08db      	lsrs	r3, r3, #3
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_I2C_EV_IRQHandler+0xb2>
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	0a5b      	lsrs	r3, r3, #9
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fdef 	bl	8005052 <I2C_Master_ADD10>
 8004474:	e082      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d009      	beq.n	8004496 <HAL_I2C_EV_IRQHandler+0xd2>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	0a5b      	lsrs	r3, r3, #9
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fe09 	bl	80050a6 <I2C_Master_ADDR>
 8004494:	e072      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d03b      	beq.n	800451a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	f000 80f3 	beq.w	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	09db      	lsrs	r3, r3, #7
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00f      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x11c>
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	089b      	lsrs	r3, r3, #2
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d103      	bne.n	80044e0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f9f3 	bl	80048c4 <I2C_MasterTransmit_TXE>
 80044de:	e04d      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80d6 	beq.w	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	0a5b      	lsrs	r3, r3, #9
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80cf 	beq.w	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044fc:	7bbb      	ldrb	r3, [r7, #14]
 80044fe:	2b21      	cmp	r3, #33	; 0x21
 8004500:	d103      	bne.n	800450a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fa7a 	bl	80049fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004508:	e0c7      	b.n	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b40      	cmp	r3, #64	; 0x40
 800450e:	f040 80c4 	bne.w	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fae8 	bl	8004ae8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004518:	e0bf      	b.n	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004528:	f000 80b7 	beq.w	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	099b      	lsrs	r3, r3, #6
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00f      	beq.n	8004558 <HAL_I2C_EV_IRQHandler+0x194>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	0a9b      	lsrs	r3, r3, #10
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_I2C_EV_IRQHandler+0x194>
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d103      	bne.n	8004558 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 fb5d 	bl	8004c10 <I2C_MasterReceive_RXNE>
 8004556:	e011      	b.n	800457c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	089b      	lsrs	r3, r3, #2
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 809a 	beq.w	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	0a5b      	lsrs	r3, r3, #9
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8093 	beq.w	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fbfc 	bl	8004d72 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800457a:	e08e      	b.n	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
 800457c:	e08d      	b.n	800469a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	e007      	b.n	80045a0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d012      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x20e>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	0a5b      	lsrs	r3, r3, #9
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00c      	beq.n	80045d2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 ffba 	bl	8005544 <I2C_Slave_ADDR>
 80045d0:	e066      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0x22e>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	0a5b      	lsrs	r3, r3, #9
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fff4 	bl	80055d8 <I2C_Slave_STOPF>
 80045f0:	e056      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045f2:	7bbb      	ldrb	r3, [r7, #14]
 80045f4:	2b21      	cmp	r3, #33	; 0x21
 80045f6:	d002      	beq.n	80045fe <HAL_I2C_EV_IRQHandler+0x23a>
 80045f8:	7bbb      	ldrb	r3, [r7, #14]
 80045fa:	2b29      	cmp	r3, #41	; 0x29
 80045fc:	d125      	bne.n	800464a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	09db      	lsrs	r3, r3, #7
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00f      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0x266>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	0a9b      	lsrs	r3, r3, #10
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0x266>
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fed0 	bl	80053c8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004628:	e039      	b.n	800469e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d033      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x2da>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	0a5b      	lsrs	r3, r3, #9
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02d      	beq.n	800469e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fefd 	bl	8005442 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004648:	e029      	b.n	800469e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00f      	beq.n	8004676 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	0a9b      	lsrs	r3, r3, #10
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	089b      	lsrs	r3, r3, #2
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 ff08 	bl	8005484 <I2C_SlaveReceive_RXNE>
 8004674:	e014      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00e      	beq.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	0a5b      	lsrs	r3, r3, #9
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 ff36 	bl	8005500 <I2C_SlaveReceive_BTF>
 8004694:	e004      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004696:	bf00      	nop
 8004698:	e002      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800469a:	bf00      	nop
 800469c:	e000      	b.n	80046a0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800469e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b08a      	sub	sp, #40	; 0x28
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	0a1b      	lsrs	r3, r3, #8
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00e      	beq.n	80046f4 <HAL_I2C_ER_IRQHandler+0x4e>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	0a1b      	lsrs	r3, r3, #8
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	0a5b      	lsrs	r3, r3, #9
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <HAL_I2C_ER_IRQHandler+0x78>
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800471c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	0a9b      	lsrs	r3, r3, #10
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03f      	beq.n	80047aa <HAL_I2C_ER_IRQHandler+0x104>
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d039      	beq.n	80047aa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004736:	7efb      	ldrb	r3, [r7, #27]
 8004738:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004750:	7ebb      	ldrb	r3, [r7, #26]
 8004752:	2b20      	cmp	r3, #32
 8004754:	d112      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xd6>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10f      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xd6>
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	2b21      	cmp	r3, #33	; 0x21
 8004760:	d008      	beq.n	8004774 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b29      	cmp	r3, #41	; 0x29
 8004766:	d005      	beq.n	8004774 <HAL_I2C_ER_IRQHandler+0xce>
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b28      	cmp	r3, #40	; 0x28
 800476c:	d106      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b21      	cmp	r3, #33	; 0x21
 8004772:	d103      	bne.n	800477c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 f85f 	bl	8005838 <I2C_Slave_AF>
 800477a:	e016      	b.n	80047aa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004784:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800478e:	7efb      	ldrb	r3, [r7, #27]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d002      	beq.n	800479a <HAL_I2C_ER_IRQHandler+0xf4>
 8004794:	7efb      	ldrb	r3, [r7, #27]
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d107      	bne.n	80047aa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	0adb      	lsrs	r3, r3, #11
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <HAL_I2C_ER_IRQHandler+0x12e>
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	f043 0308 	orr.w	r3, r3, #8
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80047d2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d008      	beq.n	80047ec <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 f896 	bl	8005918 <I2C_ITError>
  }
}
 80047ec:	bf00      	nop
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
 8004850:	4613      	mov	r3, r2
 8004852:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d150      	bne.n	800498c <I2C_MasterTransmit_TXE+0xc8>
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b21      	cmp	r3, #33	; 0x21
 80048ee:	d14d      	bne.n	800498c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d01d      	beq.n	8004932 <I2C_MasterTransmit_TXE+0x6e>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d01a      	beq.n	8004932 <I2C_MasterTransmit_TXE+0x6e>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004902:	d016      	beq.n	8004932 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004912:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2211      	movs	r2, #17
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ff62 	bl	80047f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004930:	e060      	b.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004940:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004950:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d107      	bne.n	800497c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff ff7d 	bl	8004874 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800497a:	e03b      	b.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7ff ff35 	bl	80047f4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800498a:	e033      	b.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b21      	cmp	r3, #33	; 0x21
 8004990:	d005      	beq.n	800499e <I2C_MasterTransmit_TXE+0xda>
 8004992:	7bbb      	ldrb	r3, [r7, #14]
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d12d      	bne.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b22      	cmp	r3, #34	; 0x22
 800499c:	d12a      	bne.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d108      	bne.n	80049ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049b8:	e01c      	b.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d103      	bne.n	80049ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f88e 	bl	8004ae8 <I2C_MemoryTransmit_TXE_BTF>
}
 80049cc:	e012      	b.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	781a      	ldrb	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049f2:	e7ff      	b.n	80049f4 <I2C_MasterTransmit_TXE+0x130>
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b21      	cmp	r3, #33	; 0x21
 8004a14:	d164      	bne.n	8004ae0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d012      	beq.n	8004a46 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a44:	e04c      	b.n	8004ae0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d01d      	beq.n	8004a88 <I2C_MasterTransmit_BTF+0x8c>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d01a      	beq.n	8004a88 <I2C_MasterTransmit_BTF+0x8c>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a58:	d016      	beq.n	8004a88 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a68:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2211      	movs	r2, #17
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff feb7 	bl	80047f4 <HAL_I2C_MasterTxCpltCallback>
}
 8004a86:	e02b      	b.n	8004ae0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a96:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d107      	bne.n	8004ad2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fed2 	bl	8004874 <HAL_I2C_MemTxCpltCallback>
}
 8004ad0:	e006      	b.n	8004ae0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fe8a 	bl	80047f4 <HAL_I2C_MasterTxCpltCallback>
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11d      	bne.n	8004b3c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10b      	bne.n	8004b20 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	1c9a      	adds	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b1e:	e073      	b.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	121b      	asrs	r3, r3, #8
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b3a:	e065      	b.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10b      	bne.n	8004b5c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b5a:	e055      	b.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d151      	bne.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b22      	cmp	r3, #34	; 0x22
 8004b68:	d10d      	bne.n	8004b86 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b78:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b84:	e040      	b.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b21      	cmp	r3, #33	; 0x21
 8004b94:	d112      	bne.n	8004bbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	781a      	ldrb	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bba:	e025      	b.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d120      	bne.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b21      	cmp	r3, #33	; 0x21
 8004bca:	d11d      	bne.n	8004c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bda:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fe36 	bl	8004874 <HAL_I2C_MemTxCpltCallback>
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b22      	cmp	r3, #34	; 0x22
 8004c22:	f040 80a2 	bne.w	8004d6a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d921      	bls.n	8004c78 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	f040 8082 	bne.w	8004d6a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004c76:	e078      	b.n	8004d6a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d074      	beq.n	8004d6a <I2C_MasterReceive_RXNE+0x15a>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d002      	beq.n	8004c8c <I2C_MasterReceive_RXNE+0x7c>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d16e      	bne.n	8004d6a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 f81d 	bl	8005ccc <I2C_WaitOnSTOPRequestThroughIT>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d142      	bne.n	8004d1e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ca6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d10a      	bne.n	8004d08 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fdc1 	bl	8004888 <HAL_I2C_MemRxCpltCallback>
}
 8004d06:	e030      	b.n	8004d6a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2212      	movs	r2, #18
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fd76 	bl	8004808 <HAL_I2C_MasterRxCpltCallback>
}
 8004d1c:	e025      	b.n	8004d6a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fd99 	bl	800489c <HAL_I2C_ErrorCallback>
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d11b      	bne.n	8004dc2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d98:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004dc0:	e0bd      	b.n	8004f3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d129      	bne.n	8004e20 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dda:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d00a      	beq.n	8004df8 <I2C_MasterReceive_BTF+0x86>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d007      	beq.n	8004df8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e1e:	e08e      	b.n	8004f3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d176      	bne.n	8004f18 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d002      	beq.n	8004e36 <I2C_MasterReceive_BTF+0xc4>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d108      	bne.n	8004e48 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e019      	b.n	8004e7c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d002      	beq.n	8004e54 <I2C_MasterReceive_BTF+0xe2>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d108      	bne.n	8004e66 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e00a      	b.n	8004e7c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d007      	beq.n	8004e7c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ed6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d10a      	bne.n	8004f02 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fcc4 	bl	8004888 <HAL_I2C_MemRxCpltCallback>
}
 8004f00:	e01d      	b.n	8004f3e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2212      	movs	r2, #18
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fc79 	bl	8004808 <HAL_I2C_MasterRxCpltCallback>
}
 8004f16:	e012      	b.n	8004f3e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d117      	bne.n	8004f8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004f74:	e067      	b.n	8005046 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	611a      	str	r2, [r3, #16]
}
 8004f88:	e05d      	b.n	8005046 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f92:	d133      	bne.n	8004ffc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b21      	cmp	r3, #33	; 0x21
 8004f9e:	d109      	bne.n	8004fb4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fb0:	611a      	str	r2, [r3, #16]
 8004fb2:	e008      	b.n	8004fc6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d004      	beq.n	8004fd8 <I2C_Master_SB+0x92>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d032      	beq.n	8005046 <I2C_Master_SB+0x100>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d02d      	beq.n	8005046 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff8:	605a      	str	r2, [r3, #4]
}
 8004ffa:	e024      	b.n	8005046 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10e      	bne.n	8005022 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005008:	b29b      	uxth	r3, r3
 800500a:	11db      	asrs	r3, r3, #7
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f003 0306 	and.w	r3, r3, #6
 8005012:	b2db      	uxtb	r3, r3
 8005014:	f063 030f 	orn	r3, r3, #15
 8005018:	b2da      	uxtb	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]
}
 8005020:	e011      	b.n	8005046 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10d      	bne.n	8005046 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502e:	b29b      	uxth	r3, r3
 8005030:	11db      	asrs	r3, r3, #7
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0306 	and.w	r3, r3, #6
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f063 030e 	orn	r3, r3, #14
 800503e:	b2da      	uxtb	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	611a      	str	r2, [r3, #16]
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	b2da      	uxtb	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	2b00      	cmp	r3, #0
 800506c:	d004      	beq.n	8005078 <I2C_Master_ADD10+0x26>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d108      	bne.n	800508a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00c      	beq.n	800509a <I2C_Master_ADD10+0x48>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005098:	605a      	str	r2, [r3, #4]
  }
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b091      	sub	sp, #68	; 0x44
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b22      	cmp	r3, #34	; 0x22
 80050ce:	f040 8169 	bne.w	80053a4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <I2C_Master_ADDR+0x54>
 80050da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d10b      	bne.n	80050fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e2:	2300      	movs	r3, #0
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	633b      	str	r3, [r7, #48]	; 0x30
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	633b      	str	r3, [r7, #48]	; 0x30
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	e160      	b.n	80053bc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d11d      	bne.n	800513e <I2C_Master_ADDR+0x98>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800510a:	d118      	bne.n	800513e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510c:	2300      	movs	r3, #0
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005130:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	651a      	str	r2, [r3, #80]	; 0x50
 800513c:	e13e      	b.n	80053bc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d113      	bne.n	8005170 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005148:	2300      	movs	r3, #0
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	62bb      	str	r3, [r7, #40]	; 0x28
 800515c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e115      	b.n	800539c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	f040 808a 	bne.w	8005290 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005182:	d137      	bne.n	80051f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005192:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800519e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a2:	d113      	bne.n	80051cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b4:	2300      	movs	r3, #0
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	e0e7      	b.n	800539c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051cc:	2300      	movs	r3, #0
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	623b      	str	r3, [r7, #32]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	623b      	str	r3, [r7, #32]
 80051e0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e0d3      	b.n	800539c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d02e      	beq.n	8005258 <I2C_Master_ADDR+0x1b2>
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d02b      	beq.n	8005258 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	2b12      	cmp	r3, #18
 8005204:	d102      	bne.n	800520c <I2C_Master_ADDR+0x166>
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b01      	cmp	r3, #1
 800520a:	d125      	bne.n	8005258 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	2b04      	cmp	r3, #4
 8005210:	d00e      	beq.n	8005230 <I2C_Master_ADDR+0x18a>
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2b02      	cmp	r3, #2
 8005216:	d00b      	beq.n	8005230 <I2C_Master_ADDR+0x18a>
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	2b10      	cmp	r3, #16
 800521c:	d008      	beq.n	8005230 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e007      	b.n	8005240 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800523e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	e0a1      	b.n	800539c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005266:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005268:	2300      	movs	r3, #0
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	61bb      	str	r3, [r7, #24]
 800527c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e085      	b.n	800539c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d14d      	bne.n	8005336 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2b04      	cmp	r3, #4
 800529e:	d016      	beq.n	80052ce <I2C_Master_ADDR+0x228>
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d013      	beq.n	80052ce <I2C_Master_ADDR+0x228>
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d010      	beq.n	80052ce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e007      	b.n	80052de <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052dc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ec:	d117      	bne.n	800531e <I2C_Master_ADDR+0x278>
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f4:	d00b      	beq.n	800530e <I2C_Master_ADDR+0x268>
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d008      	beq.n	800530e <I2C_Master_ADDR+0x268>
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d005      	beq.n	800530e <I2C_Master_ADDR+0x268>
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	2b10      	cmp	r3, #16
 8005306:	d002      	beq.n	800530e <I2C_Master_ADDR+0x268>
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	2b20      	cmp	r3, #32
 800530c:	d107      	bne.n	800531e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800531c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	e032      	b.n	800539c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005344:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005354:	d117      	bne.n	8005386 <I2C_Master_ADDR+0x2e0>
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800535c:	d00b      	beq.n	8005376 <I2C_Master_ADDR+0x2d0>
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	2b01      	cmp	r3, #1
 8005362:	d008      	beq.n	8005376 <I2C_Master_ADDR+0x2d0>
 8005364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005366:	2b08      	cmp	r3, #8
 8005368:	d005      	beq.n	8005376 <I2C_Master_ADDR+0x2d0>
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b10      	cmp	r3, #16
 800536e:	d002      	beq.n	8005376 <I2C_Master_ADDR+0x2d0>
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	2b20      	cmp	r3, #32
 8005374:	d107      	bne.n	8005386 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005384:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053a2:	e00b      	b.n	80053bc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	e7ff      	b.n	80053bc <I2C_Master_ADDR+0x316>
 80053bc:	bf00      	nop
 80053be:	3744      	adds	r7, #68	; 0x44
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d02b      	beq.n	800543a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	781a      	ldrb	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d114      	bne.n	800543a <I2C_SlaveTransmit_TXE+0x72>
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b29      	cmp	r3, #41	; 0x29
 8005414:	d111      	bne.n	800543a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005424:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2221      	movs	r2, #33	; 0x21
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2228      	movs	r2, #40	; 0x28
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff f9f1 	bl	800481c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d011      	beq.n	8005478 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d02c      	beq.n	80054f8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d114      	bne.n	80054f8 <I2C_SlaveReceive_RXNE+0x74>
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	2b2a      	cmp	r3, #42	; 0x2a
 80054d2:	d111      	bne.n	80054f8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2222      	movs	r2, #34	; 0x22
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2228      	movs	r2, #40	; 0x28
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff f99c 	bl	8004830 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d012      	beq.n	8005538 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	1c5a      	adds	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800555e:	2b28      	cmp	r3, #40	; 0x28
 8005560:	d127      	bne.n	80055b2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005570:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	089b      	lsrs	r3, r3, #2
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800557e:	2301      	movs	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	09db      	lsrs	r3, r3, #7
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	81bb      	strh	r3, [r7, #12]
 8005594:	e002      	b.n	800559c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055a4:	89ba      	ldrh	r2, [r7, #12]
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff f94a 	bl	8004844 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055b0:	e00e      	b.n	80055d0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	60bb      	str	r3, [r7, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80055f8:	2300      	movs	r3, #0
 80055fa:	60bb      	str	r3, [r7, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005624:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005634:	d172      	bne.n	800571c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b22      	cmp	r3, #34	; 0x22
 800563a:	d002      	beq.n	8005642 <I2C_Slave_STOPF+0x6a>
 800563c:	7bfb      	ldrb	r3, [r7, #15]
 800563e:	2b2a      	cmp	r3, #42	; 0x2a
 8005640:	d135      	bne.n	80056ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	b29a      	uxth	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f043 0204 	orr.w	r2, r3, #4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005674:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe faaa 	bl	8003bd4 <HAL_DMA_GetState>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d049      	beq.n	800571a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	4a69      	ldr	r2, [pc, #420]	; (8005830 <I2C_Slave_STOPF+0x258>)
 800568c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe f8f2 	bl	800387c <HAL_DMA_Abort_IT>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d03d      	beq.n	800571a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056a8:	4610      	mov	r0, r2
 80056aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ac:	e035      	b.n	800571a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0204 	orr.w	r2, r3, #4
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fa74 	bl	8003bd4 <HAL_DMA_GetState>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d014      	beq.n	800571c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	4a4e      	ldr	r2, [pc, #312]	; (8005830 <I2C_Slave_STOPF+0x258>)
 80056f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe f8bc 	bl	800387c <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
 8005718:	e000      	b.n	800571c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800571a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d03e      	beq.n	80057a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b04      	cmp	r3, #4
 8005732:	d112      	bne.n	800575a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691a      	ldr	r2, [r3, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005764:	2b40      	cmp	r3, #64	; 0x40
 8005766:	d112      	bne.n	800578e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0204 	orr.w	r2, r3, #4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8b3 	bl	8005918 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057b2:	e039      	b.n	8005828 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	2b2a      	cmp	r3, #42	; 0x2a
 80057b8:	d109      	bne.n	80057ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2228      	movs	r2, #40	; 0x28
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff f831 	bl	8004830 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b28      	cmp	r3, #40	; 0x28
 80057d8:	d111      	bne.n	80057fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <I2C_Slave_STOPF+0x25c>)
 80057de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff f832 	bl	8004860 <HAL_I2C_ListenCpltCallback>
}
 80057fc:	e014      	b.n	8005828 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	2b22      	cmp	r3, #34	; 0x22
 8005804:	d002      	beq.n	800580c <I2C_Slave_STOPF+0x234>
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b22      	cmp	r3, #34	; 0x22
 800580a:	d10d      	bne.n	8005828 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff f804 	bl	8004830 <HAL_I2C_SlaveRxCpltCallback>
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	08005b7d 	.word	0x08005b7d
 8005834:	ffff0000 	.word	0xffff0000

08005838 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005846:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d002      	beq.n	800585a <I2C_Slave_AF+0x22>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b20      	cmp	r3, #32
 8005858:	d129      	bne.n	80058ae <I2C_Slave_AF+0x76>
 800585a:	7bfb      	ldrb	r3, [r7, #15]
 800585c:	2b28      	cmp	r3, #40	; 0x28
 800585e:	d126      	bne.n	80058ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a2c      	ldr	r2, [pc, #176]	; (8005914 <I2C_Slave_AF+0xdc>)
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005874:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800587e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fe ffda 	bl	8004860 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058ac:	e02e      	b.n	800590c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b21      	cmp	r3, #33	; 0x21
 80058b2:	d126      	bne.n	8005902 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a17      	ldr	r2, [pc, #92]	; (8005914 <I2C_Slave_AF+0xdc>)
 80058b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2221      	movs	r2, #33	; 0x21
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fe ff8e 	bl	800481c <HAL_I2C_SlaveTxCpltCallback>
}
 8005900:	e004      	b.n	800590c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800590a:	615a      	str	r2, [r3, #20]
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	ffff0000 	.word	0xffff0000

08005918 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005926:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005930:	7bbb      	ldrb	r3, [r7, #14]
 8005932:	2b10      	cmp	r3, #16
 8005934:	d002      	beq.n	800593c <I2C_ITError+0x24>
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d10a      	bne.n	8005952 <I2C_ITError+0x3a>
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b22      	cmp	r3, #34	; 0x22
 8005940:	d107      	bne.n	8005952 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005950:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005958:	2b28      	cmp	r3, #40	; 0x28
 800595a:	d107      	bne.n	800596c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2228      	movs	r2, #40	; 0x28
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800596a:	e015      	b.n	8005998 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597a:	d00a      	beq.n	8005992 <I2C_ITError+0x7a>
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b60      	cmp	r3, #96	; 0x60
 8005980:	d007      	beq.n	8005992 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a6:	d162      	bne.n	8005a6e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d020      	beq.n	8005a08 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	4a6a      	ldr	r2, [pc, #424]	; (8005b74 <I2C_ITError+0x25c>)
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fd ff52 	bl	800387c <HAL_DMA_Abort_IT>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 8089 	beq.w	8005af2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a02:	4610      	mov	r0, r2
 8005a04:	4798      	blx	r3
 8005a06:	e074      	b.n	8005af2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	4a59      	ldr	r2, [pc, #356]	; (8005b74 <I2C_ITError+0x25c>)
 8005a0e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fd ff31 	bl	800387c <HAL_DMA_Abort_IT>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d068      	beq.n	8005af2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b40      	cmp	r3, #64	; 0x40
 8005a2c:	d10b      	bne.n	8005a46 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691a      	ldr	r2, [r3, #16]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2220      	movs	r2, #32
 8005a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	e041      	b.n	8005af2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b60      	cmp	r3, #96	; 0x60
 8005a78:	d125      	bne.n	8005ac6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d10b      	bne.n	8005aae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fe fef6 	bl	80048b0 <HAL_I2C_AbortCpltCallback>
 8005ac4:	e015      	b.n	8005af2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d10b      	bne.n	8005aec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fe fed5 	bl	800489c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10e      	bne.n	8005b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b2e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d113      	bne.n	8005b6c <I2C_ITError+0x254>
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b28      	cmp	r3, #40	; 0x28
 8005b48:	d110      	bne.n	8005b6c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <I2C_ITError+0x260>)
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fe fe7a 	bl	8004860 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08005b7d 	.word	0x08005b7d
 8005b78:	ffff0000 	.word	0xffff0000

08005b7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b94:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b96:	4b4b      	ldr	r3, [pc, #300]	; (8005cc4 <I2C_DMAAbort+0x148>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	4a4a      	ldr	r2, [pc, #296]	; (8005cc8 <I2C_DMAAbort+0x14c>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0a1a      	lsrs	r2, r3, #8
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	00da      	lsls	r2, r3, #3
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005bc2:	e00a      	b.n	8005bda <I2C_DMAAbort+0x5e>
    }
    count--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd8:	d0ea      	beq.n	8005bb0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be6:	2200      	movs	r2, #0
 8005be8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c08:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d10e      	bne.n	8005c6a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c62:	6978      	ldr	r0, [r7, #20]
 8005c64:	f7fe fe24 	bl	80048b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c68:	e027      	b.n	8005cba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c70:	2b28      	cmp	r3, #40	; 0x28
 8005c72:	d117      	bne.n	8005ca4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2228      	movs	r2, #40	; 0x28
 8005c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ca2:	e007      	b.n	8005cb4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005cb4:	6978      	ldr	r0, [r7, #20]
 8005cb6:	f7fe fdf1 	bl	800489c <HAL_I2C_ErrorCallback>
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000028 	.word	0x20000028
 8005cc8:	14f8b589 	.word	0x14f8b589

08005ccc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cd8:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	08db      	lsrs	r3, r3, #3
 8005cde:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce4:	0a1a      	lsrs	r2, r3, #8
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e008      	b.n	8005d1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d18:	d0e9      	beq.n	8005cee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	20000028 	.word	0x20000028
 8005d2c:	14f8b589 	.word	0x14f8b589

08005d30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005d40:	d103      	bne.n	8005d4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d48:	e007      	b.n	8005d5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005d52:	d102      	bne.n	8005d5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2208      	movs	r2, #8
 8005d58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0cc      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b68      	ldr	r3, [pc, #416]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 030f 	and.w	r3, r3, #15
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d90c      	bls.n	8005da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b65      	ldr	r3, [pc, #404]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d92:	4b63      	ldr	r3, [pc, #396]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d001      	beq.n	8005da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0b8      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d020      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dbc:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4a58      	ldr	r2, [pc, #352]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dd4:	4b53      	ldr	r3, [pc, #332]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	4a52      	ldr	r2, [pc, #328]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de0:	4b50      	ldr	r3, [pc, #320]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	494d      	ldr	r1, [pc, #308]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d044      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d107      	bne.n	8005e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e06:	4b47      	ldr	r3, [pc, #284]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d119      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e07f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d003      	beq.n	8005e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e26:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e06f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e36:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e067      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e46:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f023 0203 	bic.w	r2, r3, #3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4934      	ldr	r1, [pc, #208]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e58:	f7fd fa7c 	bl	8003354 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e60:	f7fd fa78 	bl	8003354 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e04f      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	4b2b      	ldr	r3, [pc, #172]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 020c 	and.w	r2, r3, #12
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d1eb      	bne.n	8005e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d20c      	bcs.n	8005eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e96:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9e:	4b20      	ldr	r3, [pc, #128]	; (8005f20 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 030f 	and.w	r3, r3, #15
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d001      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e032      	b.n	8005f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0304 	and.w	r3, r3, #4
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d008      	beq.n	8005ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ebc:	4b19      	ldr	r3, [pc, #100]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4916      	ldr	r1, [pc, #88]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d009      	beq.n	8005eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eda:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	490e      	ldr	r1, [pc, #56]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eee:	f000 f855 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	490a      	ldr	r1, [pc, #40]	; (8005f28 <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	5ccb      	ldrb	r3, [r1, r3]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <HAL_RCC_ClockConfig+0x1c4>)
 8005f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <HAL_RCC_ClockConfig+0x1c8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd f9dc 	bl	80032cc <HAL_InitTick>

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40023c00 	.word	0x40023c00
 8005f24:	40023800 	.word	0x40023800
 8005f28:	08008cd8 	.word	0x08008cd8
 8005f2c:	20000028 	.word	0x20000028
 8005f30:	20000030 	.word	0x20000030

08005f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	20000028 	.word	0x20000028

08005f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f50:	f7ff fff0 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f54:	4602      	mov	r2, r0
 8005f56:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	0a9b      	lsrs	r3, r3, #10
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	4903      	ldr	r1, [pc, #12]	; (8005f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f62:	5ccb      	ldrb	r3, [r1, r3]
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	08008ce8 	.word	0x08008ce8

08005f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f78:	f7ff ffdc 	bl	8005f34 <HAL_RCC_GetHCLKFreq>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	0b5b      	lsrs	r3, r3, #13
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	4903      	ldr	r1, [pc, #12]	; (8005f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f8a:	5ccb      	ldrb	r3, [r1, r3]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40023800 	.word	0x40023800
 8005f98:	08008ce8 	.word	0x08008ce8

08005f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa0:	b088      	sub	sp, #32
 8005fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fb8:	4bce      	ldr	r3, [pc, #824]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f003 030c 	and.w	r3, r3, #12
 8005fc0:	2b0c      	cmp	r3, #12
 8005fc2:	f200 818d 	bhi.w	80062e0 <HAL_RCC_GetSysClockFreq+0x344>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <HAL_RCC_GetSysClockFreq+0x30>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	08006001 	.word	0x08006001
 8005fd0:	080062e1 	.word	0x080062e1
 8005fd4:	080062e1 	.word	0x080062e1
 8005fd8:	080062e1 	.word	0x080062e1
 8005fdc:	08006007 	.word	0x08006007
 8005fe0:	080062e1 	.word	0x080062e1
 8005fe4:	080062e1 	.word	0x080062e1
 8005fe8:	080062e1 	.word	0x080062e1
 8005fec:	0800600d 	.word	0x0800600d
 8005ff0:	080062e1 	.word	0x080062e1
 8005ff4:	080062e1 	.word	0x080062e1
 8005ff8:	080062e1 	.word	0x080062e1
 8005ffc:	08006181 	.word	0x08006181
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006000:	4bbd      	ldr	r3, [pc, #756]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006002:	61bb      	str	r3, [r7, #24]
       break;
 8006004:	e16f      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006006:	4bbd      	ldr	r3, [pc, #756]	; (80062fc <HAL_RCC_GetSysClockFreq+0x360>)
 8006008:	61bb      	str	r3, [r7, #24]
      break;
 800600a:	e16c      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800600c:	4bb9      	ldr	r3, [pc, #740]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006014:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006016:	4bb7      	ldr	r3, [pc, #732]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d053      	beq.n	80060ca <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006022:	4bb4      	ldr	r3, [pc, #720]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	099b      	lsrs	r3, r3, #6
 8006028:	461a      	mov	r2, r3
 800602a:	f04f 0300 	mov.w	r3, #0
 800602e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006032:	f04f 0100 	mov.w	r1, #0
 8006036:	ea02 0400 	and.w	r4, r2, r0
 800603a:	603c      	str	r4, [r7, #0]
 800603c:	400b      	ands	r3, r1
 800603e:	607b      	str	r3, [r7, #4]
 8006040:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006044:	4620      	mov	r0, r4
 8006046:	4629      	mov	r1, r5
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	014b      	lsls	r3, r1, #5
 8006052:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006056:	0142      	lsls	r2, r0, #5
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	4623      	mov	r3, r4
 800605e:	1ac0      	subs	r0, r0, r3
 8006060:	462b      	mov	r3, r5
 8006062:	eb61 0103 	sbc.w	r1, r1, r3
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	018b      	lsls	r3, r1, #6
 8006070:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006074:	0182      	lsls	r2, r0, #6
 8006076:	1a12      	subs	r2, r2, r0
 8006078:	eb63 0301 	sbc.w	r3, r3, r1
 800607c:	f04f 0000 	mov.w	r0, #0
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	00d9      	lsls	r1, r3, #3
 8006086:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800608a:	00d0      	lsls	r0, r2, #3
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4621      	mov	r1, r4
 8006092:	1852      	adds	r2, r2, r1
 8006094:	4629      	mov	r1, r5
 8006096:	eb43 0101 	adc.w	r1, r3, r1
 800609a:	460b      	mov	r3, r1
 800609c:	f04f 0000 	mov.w	r0, #0
 80060a0:	f04f 0100 	mov.w	r1, #0
 80060a4:	0259      	lsls	r1, r3, #9
 80060a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80060aa:	0250      	lsls	r0, r2, #9
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4610      	mov	r0, r2
 80060b2:	4619      	mov	r1, r3
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	f7fa fc9a 	bl	80009f4 <__aeabi_uldivmod>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4613      	mov	r3, r2
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	e04c      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ca:	4b8a      	ldr	r3, [pc, #552]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	099b      	lsrs	r3, r3, #6
 80060d0:	461a      	mov	r2, r3
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	ea02 0a00 	and.w	sl, r2, r0
 80060e2:	ea03 0b01 	and.w	fp, r3, r1
 80060e6:	4650      	mov	r0, sl
 80060e8:	4659      	mov	r1, fp
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	014b      	lsls	r3, r1, #5
 80060f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060f8:	0142      	lsls	r2, r0, #5
 80060fa:	4610      	mov	r0, r2
 80060fc:	4619      	mov	r1, r3
 80060fe:	ebb0 000a 	subs.w	r0, r0, sl
 8006102:	eb61 010b 	sbc.w	r1, r1, fp
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	018b      	lsls	r3, r1, #6
 8006110:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006114:	0182      	lsls	r2, r0, #6
 8006116:	1a12      	subs	r2, r2, r0
 8006118:	eb63 0301 	sbc.w	r3, r3, r1
 800611c:	f04f 0000 	mov.w	r0, #0
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	00d9      	lsls	r1, r3, #3
 8006126:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800612a:	00d0      	lsls	r0, r2, #3
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	eb12 020a 	adds.w	r2, r2, sl
 8006134:	eb43 030b 	adc.w	r3, r3, fp
 8006138:	f04f 0000 	mov.w	r0, #0
 800613c:	f04f 0100 	mov.w	r1, #0
 8006140:	0299      	lsls	r1, r3, #10
 8006142:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006146:	0290      	lsls	r0, r2, #10
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4610      	mov	r0, r2
 800614e:	4619      	mov	r1, r3
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	461a      	mov	r2, r3
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	f7fa fc4c 	bl	80009f4 <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4613      	mov	r3, r2
 8006162:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006164:	4b63      	ldr	r3, [pc, #396]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	3301      	adds	r3, #1
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	61bb      	str	r3, [r7, #24]
      break;
 800617e:	e0b2      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006180:	4b5c      	ldr	r3, [pc, #368]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006188:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800618a:	4b5a      	ldr	r3, [pc, #360]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d04d      	beq.n	8006232 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006196:	4b57      	ldr	r3, [pc, #348]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	099b      	lsrs	r3, r3, #6
 800619c:	461a      	mov	r2, r3
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061a6:	f04f 0100 	mov.w	r1, #0
 80061aa:	ea02 0800 	and.w	r8, r2, r0
 80061ae:	ea03 0901 	and.w	r9, r3, r1
 80061b2:	4640      	mov	r0, r8
 80061b4:	4649      	mov	r1, r9
 80061b6:	f04f 0200 	mov.w	r2, #0
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	014b      	lsls	r3, r1, #5
 80061c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061c4:	0142      	lsls	r2, r0, #5
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	ebb0 0008 	subs.w	r0, r0, r8
 80061ce:	eb61 0109 	sbc.w	r1, r1, r9
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	018b      	lsls	r3, r1, #6
 80061dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061e0:	0182      	lsls	r2, r0, #6
 80061e2:	1a12      	subs	r2, r2, r0
 80061e4:	eb63 0301 	sbc.w	r3, r3, r1
 80061e8:	f04f 0000 	mov.w	r0, #0
 80061ec:	f04f 0100 	mov.w	r1, #0
 80061f0:	00d9      	lsls	r1, r3, #3
 80061f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061f6:	00d0      	lsls	r0, r2, #3
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	eb12 0208 	adds.w	r2, r2, r8
 8006200:	eb43 0309 	adc.w	r3, r3, r9
 8006204:	f04f 0000 	mov.w	r0, #0
 8006208:	f04f 0100 	mov.w	r1, #0
 800620c:	0259      	lsls	r1, r3, #9
 800620e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006212:	0250      	lsls	r0, r2, #9
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4610      	mov	r0, r2
 800621a:	4619      	mov	r1, r3
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	461a      	mov	r2, r3
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	f7fa fbe6 	bl	80009f4 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4613      	mov	r3, r2
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e04a      	b.n	80062c8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006232:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	099b      	lsrs	r3, r3, #6
 8006238:	461a      	mov	r2, r3
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006242:	f04f 0100 	mov.w	r1, #0
 8006246:	ea02 0400 	and.w	r4, r2, r0
 800624a:	ea03 0501 	and.w	r5, r3, r1
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	014b      	lsls	r3, r1, #5
 800625c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006260:	0142      	lsls	r2, r0, #5
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	1b00      	subs	r0, r0, r4
 8006268:	eb61 0105 	sbc.w	r1, r1, r5
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	018b      	lsls	r3, r1, #6
 8006276:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800627a:	0182      	lsls	r2, r0, #6
 800627c:	1a12      	subs	r2, r2, r0
 800627e:	eb63 0301 	sbc.w	r3, r3, r1
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f04f 0100 	mov.w	r1, #0
 800628a:	00d9      	lsls	r1, r3, #3
 800628c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006290:	00d0      	lsls	r0, r2, #3
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	1912      	adds	r2, r2, r4
 8006298:	eb45 0303 	adc.w	r3, r5, r3
 800629c:	f04f 0000 	mov.w	r0, #0
 80062a0:	f04f 0100 	mov.w	r1, #0
 80062a4:	0299      	lsls	r1, r3, #10
 80062a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062aa:	0290      	lsls	r0, r2, #10
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	f7fa fb9a 	bl	80009f4 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4613      	mov	r3, r2
 80062c6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062c8:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <HAL_RCC_GetSysClockFreq+0x358>)
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	0f1b      	lsrs	r3, r3, #28
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	61bb      	str	r3, [r7, #24]
      break;
 80062de:	e002      	b.n	80062e6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80062e2:	61bb      	str	r3, [r7, #24]
      break;
 80062e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062e6:	69bb      	ldr	r3, [r7, #24]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062f2:	bf00      	nop
 80062f4:	40023800 	.word	0x40023800
 80062f8:	00f42400 	.word	0x00f42400
 80062fc:	007a1200 	.word	0x007a1200

08006300 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e28d      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 8083 	beq.w	8006426 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006320:	4b94      	ldr	r3, [pc, #592]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	2b04      	cmp	r3, #4
 800632a:	d019      	beq.n	8006360 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800632c:	4b91      	ldr	r3, [pc, #580]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006334:	2b08      	cmp	r3, #8
 8006336:	d106      	bne.n	8006346 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006338:	4b8e      	ldr	r3, [pc, #568]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006344:	d00c      	beq.n	8006360 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006346:	4b8b      	ldr	r3, [pc, #556]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800634e:	2b0c      	cmp	r3, #12
 8006350:	d112      	bne.n	8006378 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006352:	4b88      	ldr	r3, [pc, #544]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800635a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800635e:	d10b      	bne.n	8006378 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006360:	4b84      	ldr	r3, [pc, #528]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d05b      	beq.n	8006424 <HAL_RCC_OscConfig+0x124>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d157      	bne.n	8006424 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e25a      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d106      	bne.n	8006390 <HAL_RCC_OscConfig+0x90>
 8006382:	4b7c      	ldr	r3, [pc, #496]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7b      	ldr	r2, [pc, #492]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e01d      	b.n	80063cc <HAL_RCC_OscConfig+0xcc>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006398:	d10c      	bne.n	80063b4 <HAL_RCC_OscConfig+0xb4>
 800639a:	4b76      	ldr	r3, [pc, #472]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	4b73      	ldr	r3, [pc, #460]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a72      	ldr	r2, [pc, #456]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e00b      	b.n	80063cc <HAL_RCC_OscConfig+0xcc>
 80063b4:	4b6f      	ldr	r3, [pc, #444]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a6e      	ldr	r2, [pc, #440]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	4b6c      	ldr	r3, [pc, #432]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a6b      	ldr	r2, [pc, #428]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d013      	beq.n	80063fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fc ffbe 	bl	8003354 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063dc:	f7fc ffba 	bl	8003354 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	; 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e21f      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	4b61      	ldr	r3, [pc, #388]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0xdc>
 80063fa:	e014      	b.n	8006426 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063fc:	f7fc ffaa 	bl	8003354 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006404:	f7fc ffa6 	bl	8003354 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b64      	cmp	r3, #100	; 0x64
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e20b      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006416:	4b57      	ldr	r3, [pc, #348]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1f0      	bne.n	8006404 <HAL_RCC_OscConfig+0x104>
 8006422:	e000      	b.n	8006426 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d06f      	beq.n	8006512 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006432:	4b50      	ldr	r3, [pc, #320]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	2b00      	cmp	r3, #0
 800643c:	d017      	beq.n	800646e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800643e:	4b4d      	ldr	r3, [pc, #308]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006446:	2b08      	cmp	r3, #8
 8006448:	d105      	bne.n	8006456 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800644a:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006456:	4b47      	ldr	r3, [pc, #284]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800645e:	2b0c      	cmp	r3, #12
 8006460:	d11c      	bne.n	800649c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006462:	4b44      	ldr	r3, [pc, #272]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d116      	bne.n	800649c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646e:	4b41      	ldr	r3, [pc, #260]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_RCC_OscConfig+0x186>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d001      	beq.n	8006486 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e1d3      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006486:	4b3b      	ldr	r3, [pc, #236]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4937      	ldr	r1, [pc, #220]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649a:	e03a      	b.n	8006512 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d020      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a4:	4b34      	ldr	r3, [pc, #208]	; (8006578 <HAL_RCC_OscConfig+0x278>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064aa:	f7fc ff53 	bl	8003354 <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064b2:	f7fc ff4f 	bl	8003354 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1b4      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c4:	4b2b      	ldr	r3, [pc, #172]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d0:	4b28      	ldr	r3, [pc, #160]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4925      	ldr	r1, [pc, #148]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]
 80064e4:	e015      	b.n	8006512 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e6:	4b24      	ldr	r3, [pc, #144]	; (8006578 <HAL_RCC_OscConfig+0x278>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fc ff32 	bl	8003354 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f4:	f7fc ff2e 	bl	8003354 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e193      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d036      	beq.n	800658c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006526:	4b15      	ldr	r3, [pc, #84]	; (800657c <HAL_RCC_OscConfig+0x27c>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fc ff12 	bl	8003354 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006534:	f7fc ff0e 	bl	8003354 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e173      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <HAL_RCC_OscConfig+0x274>)
 8006548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x234>
 8006552:	e01b      	b.n	800658c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006554:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_RCC_OscConfig+0x27c>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800655a:	f7fc fefb 	bl	8003354 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006560:	e00e      	b.n	8006580 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006562:	f7fc fef7 	bl	8003354 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d907      	bls.n	8006580 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e15c      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
 8006574:	40023800 	.word	0x40023800
 8006578:	42470000 	.word	0x42470000
 800657c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006580:	4b8a      	ldr	r3, [pc, #552]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ea      	bne.n	8006562 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8097 	beq.w	80066c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800659e:	4b83      	ldr	r3, [pc, #524]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	4b7f      	ldr	r3, [pc, #508]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	4a7e      	ldr	r2, [pc, #504]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ba:	4b7c      	ldr	r3, [pc, #496]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ca:	4b79      	ldr	r3, [pc, #484]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d118      	bne.n	8006608 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065d6:	4b76      	ldr	r3, [pc, #472]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a75      	ldr	r2, [pc, #468]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e2:	f7fc feb7 	bl	8003354 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ea:	f7fc feb3 	bl	8003354 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e118      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b6c      	ldr	r3, [pc, #432]	; (80067b0 <HAL_RCC_OscConfig+0x4b0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x31e>
 8006610:	4b66      	ldr	r3, [pc, #408]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	4a65      	ldr	r2, [pc, #404]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6713      	str	r3, [r2, #112]	; 0x70
 800661c:	e01c      	b.n	8006658 <HAL_RCC_OscConfig+0x358>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b05      	cmp	r3, #5
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x340>
 8006626:	4b61      	ldr	r3, [pc, #388]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662a:	4a60      	ldr	r2, [pc, #384]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 800662c:	f043 0304 	orr.w	r3, r3, #4
 8006630:	6713      	str	r3, [r2, #112]	; 0x70
 8006632:	4b5e      	ldr	r3, [pc, #376]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a5d      	ldr	r2, [pc, #372]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
 800663e:	e00b      	b.n	8006658 <HAL_RCC_OscConfig+0x358>
 8006640:	4b5a      	ldr	r3, [pc, #360]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006644:	4a59      	ldr	r2, [pc, #356]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6713      	str	r3, [r2, #112]	; 0x70
 800664c:	4b57      	ldr	r3, [pc, #348]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	4a56      	ldr	r2, [pc, #344]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006652:	f023 0304 	bic.w	r3, r3, #4
 8006656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fc fe78 	bl	8003354 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	e00a      	b.n	800667e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fc fe74 	bl	8003354 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	; 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e0d7      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	4b4b      	ldr	r3, [pc, #300]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0ee      	beq.n	8006668 <HAL_RCC_OscConfig+0x368>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668c:	f7fc fe62 	bl	8003354 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006692:	e00a      	b.n	80066aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006694:	f7fc fe5e 	bl	8003354 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e0c1      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066aa:	4b40      	ldr	r3, [pc, #256]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ee      	bne.n	8006694 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066bc:	4b3b      	ldr	r3, [pc, #236]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	4a3a      	ldr	r2, [pc, #232]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80ad 	beq.w	800682c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066d2:	4b36      	ldr	r3, [pc, #216]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d060      	beq.n	80067a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d145      	bne.n	8006772 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e6:	4b33      	ldr	r3, [pc, #204]	; (80067b4 <HAL_RCC_OscConfig+0x4b4>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ec:	f7fc fe32 	bl	8003354 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f4:	f7fc fe2e 	bl	8003354 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e093      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006706:	4b29      	ldr	r3, [pc, #164]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f0      	bne.n	80066f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69da      	ldr	r2, [r3, #28]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	019b      	lsls	r3, r3, #6
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	3b01      	subs	r3, #1
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	061b      	lsls	r3, r3, #24
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	071b      	lsls	r3, r3, #28
 800673e:	491b      	ldr	r1, [pc, #108]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006740:	4313      	orrs	r3, r2
 8006742:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <HAL_RCC_OscConfig+0x4b4>)
 8006746:	2201      	movs	r2, #1
 8006748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fc fe03 	bl	8003354 <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006752:	f7fc fdff 	bl	8003354 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e064      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006764:	4b11      	ldr	r3, [pc, #68]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <HAL_RCC_OscConfig+0x452>
 8006770:	e05c      	b.n	800682c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <HAL_RCC_OscConfig+0x4b4>)
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006778:	f7fc fdec 	bl	8003354 <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800677e:	e008      	b.n	8006792 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006780:	f7fc fde8 	bl	8003354 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e04d      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <HAL_RCC_OscConfig+0x4ac>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f0      	bne.n	8006780 <HAL_RCC_OscConfig+0x480>
 800679e:	e045      	b.n	800682c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e040      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
 80067ac:	40023800 	.word	0x40023800
 80067b0:	40007000 	.word	0x40007000
 80067b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067b8:	4b1f      	ldr	r3, [pc, #124]	; (8006838 <HAL_RCC_OscConfig+0x538>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d030      	beq.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d129      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067de:	429a      	cmp	r2, r3
 80067e0:	d122      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067e8:	4013      	ands	r3, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d119      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	3b01      	subs	r3, #1
 8006802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d10f      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006814:	429a      	cmp	r2, r3
 8006816:	d107      	bne.n	8006828 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800

0800683c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e041      	b.n	80068d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb fd90 	bl	8002388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f000 fe56 	bl	800752c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e041      	b.n	8006970 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f839 	bl	8006978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f000 fe07 	bl	800752c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_TIM_PWM_Start+0x24>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	e022      	b.n	80069f6 <HAL_TIM_PWM_Start+0x6a>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d109      	bne.n	80069ca <HAL_TIM_PWM_Start+0x3e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	bf14      	ite	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	2300      	moveq	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	e015      	b.n	80069f6 <HAL_TIM_PWM_Start+0x6a>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d109      	bne.n	80069e4 <HAL_TIM_PWM_Start+0x58>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e008      	b.n	80069f6 <HAL_TIM_PWM_Start+0x6a>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	bf14      	ite	ne
 80069f0:	2301      	movne	r3, #1
 80069f2:	2300      	moveq	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e07c      	b.n	8006af8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_PWM_Start+0x82>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a0c:	e013      	b.n	8006a36 <HAL_TIM_PWM_Start+0xaa>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_PWM_Start+0x92>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a1c:	e00b      	b.n	8006a36 <HAL_TIM_PWM_Start+0xaa>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0xa2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a2c:	e003      	b.n	8006a36 <HAL_TIM_PWM_Start+0xaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 f85e 	bl	8007b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2d      	ldr	r2, [pc, #180]	; (8006b00 <HAL_TIM_PWM_Start+0x174>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIM_PWM_Start+0xcc>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <HAL_TIM_PWM_Start+0x178>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d101      	bne.n	8006a5c <HAL_TIM_PWM_Start+0xd0>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_TIM_PWM_Start+0xd2>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <HAL_TIM_PWM_Start+0x174>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d022      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a84:	d01d      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_TIM_PWM_Start+0x17c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d018      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <HAL_TIM_PWM_Start+0x180>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_TIM_PWM_Start+0x184>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d00e      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIM_PWM_Start+0x178>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d009      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a18      	ldr	r2, [pc, #96]	; (8006b14 <HAL_TIM_PWM_Start+0x188>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d004      	beq.n	8006ac2 <HAL_TIM_PWM_Start+0x136>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a16      	ldr	r2, [pc, #88]	; (8006b18 <HAL_TIM_PWM_Start+0x18c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d111      	bne.n	8006ae6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b06      	cmp	r3, #6
 8006ad2:	d010      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae4:	e007      	b.n	8006af6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40000400 	.word	0x40000400
 8006b0c:	40000800 	.word	0x40000800
 8006b10:	40000c00 	.word	0x40000c00
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40001800 	.word	0x40001800

08006b1c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d109      	bne.n	8006b48 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	bf0c      	ite	eq
 8006b40:	2301      	moveq	r3, #1
 8006b42:	2300      	movne	r3, #0
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	e022      	b.n	8006b8e <HAL_TIM_PWM_Start_DMA+0x72>
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d109      	bne.n	8006b62 <HAL_TIM_PWM_Start_DMA+0x46>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	bf0c      	ite	eq
 8006b5a:	2301      	moveq	r3, #1
 8006b5c:	2300      	movne	r3, #0
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	e015      	b.n	8006b8e <HAL_TIM_PWM_Start_DMA+0x72>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d109      	bne.n	8006b7c <HAL_TIM_PWM_Start_DMA+0x60>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	bf0c      	ite	eq
 8006b74:	2301      	moveq	r3, #1
 8006b76:	2300      	movne	r3, #0
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	e008      	b.n	8006b8e <HAL_TIM_PWM_Start_DMA+0x72>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
 8006b94:	e171      	b.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <HAL_TIM_PWM_Start_DMA+0x94>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	e022      	b.n	8006bf6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d109      	bne.n	8006bca <HAL_TIM_PWM_Start_DMA+0xae>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	e015      	b.n	8006bf6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d109      	bne.n	8006be4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e008      	b.n	8006bf6 <HAL_TIM_PWM_Start_DMA+0xda>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	bf0c      	ite	eq
 8006bf0:	2301      	moveq	r3, #1
 8006bf2:	2300      	movne	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d024      	beq.n	8006c44 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <HAL_TIM_PWM_Start_DMA+0xee>
 8006c00:	887b      	ldrh	r3, [r7, #2]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e137      	b.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_TIM_PWM_Start_DMA+0xfe>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c18:	e016      	b.n	8006c48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_PWM_Start_DMA+0x10e>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2202      	movs	r2, #2
 8006c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c28:	e00e      	b.n	8006c48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d104      	bne.n	8006c3a <HAL_TIM_PWM_Start_DMA+0x11e>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c38:	e006      	b.n	8006c48 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c42:	e001      	b.n	8006c48 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e118      	b.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x35e>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2b0c      	cmp	r3, #12
 8006c4c:	f200 80ae 	bhi.w	8006dac <HAL_TIM_PWM_Start_DMA+0x290>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c8d 	.word	0x08006c8d
 8006c5c:	08006dad 	.word	0x08006dad
 8006c60:	08006dad 	.word	0x08006dad
 8006c64:	08006dad 	.word	0x08006dad
 8006c68:	08006cd5 	.word	0x08006cd5
 8006c6c:	08006dad 	.word	0x08006dad
 8006c70:	08006dad 	.word	0x08006dad
 8006c74:	08006dad 	.word	0x08006dad
 8006c78:	08006d1d 	.word	0x08006d1d
 8006c7c:	08006dad 	.word	0x08006dad
 8006c80:	08006dad 	.word	0x08006dad
 8006c84:	08006dad 	.word	0x08006dad
 8006c88:	08006d65 	.word	0x08006d65
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	4a7c      	ldr	r2, [pc, #496]	; (8006e84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006c92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	4a7b      	ldr	r2, [pc, #492]	; (8006e88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	4a7a      	ldr	r2, [pc, #488]	; (8006e8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8006ca2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3334      	adds	r3, #52	; 0x34
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	887b      	ldrh	r3, [r7, #2]
 8006cb4:	f7fc fd1a 	bl	80036ec <HAL_DMA_Start_IT>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e0db      	b.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd0:	60da      	str	r2, [r3, #12]
      break;
 8006cd2:	e06e      	b.n	8006db2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd8:	4a6a      	ldr	r2, [pc, #424]	; (8006e84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006cda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	4a69      	ldr	r2, [pc, #420]	; (8006e88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	4a68      	ldr	r2, [pc, #416]	; (8006e8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8006cea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3338      	adds	r3, #56	; 0x38
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	887b      	ldrh	r3, [r7, #2]
 8006cfc:	f7fc fcf6 	bl	80036ec <HAL_DMA_Start_IT>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e0b7      	b.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d18:	60da      	str	r2, [r3, #12]
      break;
 8006d1a:	e04a      	b.n	8006db2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a58      	ldr	r2, [pc, #352]	; (8006e84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006d22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a57      	ldr	r2, [pc, #348]	; (8006e88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	4a56      	ldr	r2, [pc, #344]	; (8006e8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8006d32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	333c      	adds	r3, #60	; 0x3c
 8006d40:	461a      	mov	r2, r3
 8006d42:	887b      	ldrh	r3, [r7, #2]
 8006d44:	f7fc fcd2 	bl	80036ec <HAL_DMA_Start_IT>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e093      	b.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d60:	60da      	str	r2, [r3, #12]
      break;
 8006d62:	e026      	b.n	8006db2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	4a46      	ldr	r2, [pc, #280]	; (8006e84 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006d6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	4a45      	ldr	r2, [pc, #276]	; (8006e88 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	4a44      	ldr	r2, [pc, #272]	; (8006e8c <HAL_TIM_PWM_Start_DMA+0x370>)
 8006d7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3340      	adds	r3, #64	; 0x40
 8006d88:	461a      	mov	r2, r3
 8006d8a:	887b      	ldrh	r3, [r7, #2]
 8006d8c:	f7fc fcae 	bl	80036ec <HAL_DMA_Start_IT>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e06f      	b.n	8006e7a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006da8:	60da      	str	r2, [r3, #12]
      break;
 8006daa:	e002      	b.n	8006db2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	75fb      	strb	r3, [r7, #23]
      break;
 8006db0:	bf00      	nop
  }

  if (status == HAL_OK)
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d15f      	bne.n	8006e78 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f000 fe9d 	bl	8007b00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a31      	ldr	r2, [pc, #196]	; (8006e90 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_TIM_PWM_Start_DMA+0x2be>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2f      	ldr	r2, [pc, #188]	; (8006e94 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d101      	bne.n	8006dde <HAL_TIM_PWM_Start_DMA+0x2c2>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006df2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a25      	ldr	r2, [pc, #148]	; (8006e90 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d022      	beq.n	8006e44 <HAL_TIM_PWM_Start_DMA+0x328>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e06:	d01d      	beq.n	8006e44 <HAL_TIM_PWM_Start_DMA+0x328>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a22      	ldr	r2, [pc, #136]	; (8006e98 <HAL_TIM_PWM_Start_DMA+0x37c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d018      	beq.n	8006e44 <HAL_TIM_PWM_Start_DMA+0x328>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <HAL_TIM_PWM_Start_DMA+0x380>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d013      	beq.n	8006e44 <HAL_TIM_PWM_Start_DMA+0x328>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1f      	ldr	r2, [pc, #124]	; (8006ea0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00e      	beq.n	8006e44 <HAL_TIM_PWM_Start_DMA+0x328>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d009      	beq.n	8006e44 <HAL_TIM_PWM_Start_DMA+0x328>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_TIM_PWM_Start_DMA+0x328>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d111      	bne.n	8006e68 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2b06      	cmp	r3, #6
 8006e54:	d010      	beq.n	8006e78 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e66:	e007      	b.n	8006e78 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	0800741d 	.word	0x0800741d
 8006e88:	080074c5 	.word	0x080074c5
 8006e8c:	0800738b 	.word	0x0800738b
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40010400 	.word	0x40010400
 8006e98:	40000400 	.word	0x40000400
 8006e9c:	40000800 	.word	0x40000800
 8006ea0:	40000c00 	.word	0x40000c00
 8006ea4:	40014000 	.word	0x40014000
 8006ea8:	40001800 	.word	0x40001800

08006eac <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	d855      	bhi.n	8006f6c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006f6d 	.word	0x08006f6d
 8006ed0:	08006f6d 	.word	0x08006f6d
 8006ed4:	08006f6d 	.word	0x08006f6d
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f6d 	.word	0x08006f6d
 8006ee0:	08006f6d 	.word	0x08006f6d
 8006ee4:	08006f6d 	.word	0x08006f6d
 8006ee8:	08006f35 	.word	0x08006f35
 8006eec:	08006f6d 	.word	0x08006f6d
 8006ef0:	08006f6d 	.word	0x08006f6d
 8006ef4:	08006f6d 	.word	0x08006f6d
 8006ef8:	08006f51 	.word	0x08006f51
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fc fcb3 	bl	800387c <HAL_DMA_Abort_IT>
      break;
 8006f16:	e02c      	b.n	8006f72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fc fca5 	bl	800387c <HAL_DMA_Abort_IT>
      break;
 8006f32:	e01e      	b.n	8006f72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fc fc97 	bl	800387c <HAL_DMA_Abort_IT>
      break;
 8006f4e:	e010      	b.n	8006f72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fc fc89 	bl	800387c <HAL_DMA_Abort_IT>
      break;
 8006f6a:	e002      	b.n	8006f72 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f70:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d161      	bne.n	800703c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fdbd 	bl	8007b00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2f      	ldr	r2, [pc, #188]	; (8007048 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <HAL_TIM_PWM_Stop_DMA+0xee>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a2d      	ldr	r2, [pc, #180]	; (800704c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <HAL_TIM_PWM_Stop_DMA+0xf2>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d017      	beq.n	8006fd4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6a1a      	ldr	r2, [r3, #32]
 8006faa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10f      	bne.n	8006fd4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	f240 4344 	movw	r3, #1092	; 0x444
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d107      	bne.n	8006fd4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fd2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10f      	bne.n	8007004 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6a1a      	ldr	r2, [r3, #32]
 8006fea:	f240 4344 	movw	r3, #1092	; 0x444
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_PWM_Stop_DMA+0x158>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0201 	bic.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d104      	bne.n	8007014 <HAL_TIM_PWM_Stop_DMA+0x168>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007012:	e013      	b.n	800703c <HAL_TIM_PWM_Stop_DMA+0x190>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b04      	cmp	r3, #4
 8007018:	d104      	bne.n	8007024 <HAL_TIM_PWM_Stop_DMA+0x178>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007022:	e00b      	b.n	800703c <HAL_TIM_PWM_Stop_DMA+0x190>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b08      	cmp	r3, #8
 8007028:	d104      	bne.n	8007034 <HAL_TIM_PWM_Stop_DMA+0x188>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007032:	e003      	b.n	800703c <HAL_TIM_PWM_Stop_DMA+0x190>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400

08007050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800706a:	2302      	movs	r3, #2
 800706c:	e0ae      	b.n	80071cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b0c      	cmp	r3, #12
 800707a:	f200 809f 	bhi.w	80071bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800707e:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070b9 	.word	0x080070b9
 8007088:	080071bd 	.word	0x080071bd
 800708c:	080071bd 	.word	0x080071bd
 8007090:	080071bd 	.word	0x080071bd
 8007094:	080070f9 	.word	0x080070f9
 8007098:	080071bd 	.word	0x080071bd
 800709c:	080071bd 	.word	0x080071bd
 80070a0:	080071bd 	.word	0x080071bd
 80070a4:	0800713b 	.word	0x0800713b
 80070a8:	080071bd 	.word	0x080071bd
 80070ac:	080071bd 	.word	0x080071bd
 80070b0:	080071bd 	.word	0x080071bd
 80070b4:	0800717b 	.word	0x0800717b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fad4 	bl	800766c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0208 	orr.w	r2, r2, #8
 80070d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0204 	bic.w	r2, r2, #4
 80070e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6999      	ldr	r1, [r3, #24]
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	691a      	ldr	r2, [r3, #16]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	619a      	str	r2, [r3, #24]
      break;
 80070f6:	e064      	b.n	80071c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fb24 	bl	800774c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6999      	ldr	r1, [r3, #24]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	021a      	lsls	r2, r3, #8
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	619a      	str	r2, [r3, #24]
      break;
 8007138:	e043      	b.n	80071c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fb79 	bl	8007838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0208 	orr.w	r2, r2, #8
 8007154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69da      	ldr	r2, [r3, #28]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0204 	bic.w	r2, r2, #4
 8007164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69d9      	ldr	r1, [r3, #28]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	61da      	str	r2, [r3, #28]
      break;
 8007178:	e023      	b.n	80071c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68b9      	ldr	r1, [r7, #8]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fbcd 	bl	8007920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69d9      	ldr	r1, [r3, #28]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	021a      	lsls	r2, r3, #8
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	61da      	str	r2, [r3, #28]
      break;
 80071ba:	e002      	b.n	80071c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
      break;
 80071c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_TIM_ConfigClockSource+0x1c>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e0b4      	b.n	800735a <HAL_TIM_ConfigClockSource+0x186>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800720e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007228:	d03e      	beq.n	80072a8 <HAL_TIM_ConfigClockSource+0xd4>
 800722a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800722e:	f200 8087 	bhi.w	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007236:	f000 8086 	beq.w	8007346 <HAL_TIM_ConfigClockSource+0x172>
 800723a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723e:	d87f      	bhi.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007240:	2b70      	cmp	r3, #112	; 0x70
 8007242:	d01a      	beq.n	800727a <HAL_TIM_ConfigClockSource+0xa6>
 8007244:	2b70      	cmp	r3, #112	; 0x70
 8007246:	d87b      	bhi.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007248:	2b60      	cmp	r3, #96	; 0x60
 800724a:	d050      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x11a>
 800724c:	2b60      	cmp	r3, #96	; 0x60
 800724e:	d877      	bhi.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007250:	2b50      	cmp	r3, #80	; 0x50
 8007252:	d03c      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0xfa>
 8007254:	2b50      	cmp	r3, #80	; 0x50
 8007256:	d873      	bhi.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d058      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x13a>
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d86f      	bhi.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	d064      	beq.n	800732e <HAL_TIM_ConfigClockSource+0x15a>
 8007264:	2b30      	cmp	r3, #48	; 0x30
 8007266:	d86b      	bhi.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007268:	2b20      	cmp	r3, #32
 800726a:	d060      	beq.n	800732e <HAL_TIM_ConfigClockSource+0x15a>
 800726c:	2b20      	cmp	r3, #32
 800726e:	d867      	bhi.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007270:	2b00      	cmp	r3, #0
 8007272:	d05c      	beq.n	800732e <HAL_TIM_ConfigClockSource+0x15a>
 8007274:	2b10      	cmp	r3, #16
 8007276:	d05a      	beq.n	800732e <HAL_TIM_ConfigClockSource+0x15a>
 8007278:	e062      	b.n	8007340 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6899      	ldr	r1, [r3, #8]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f000 fc19 	bl	8007ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800729c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	609a      	str	r2, [r3, #8]
      break;
 80072a6:	e04f      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6818      	ldr	r0, [r3, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6899      	ldr	r1, [r3, #8]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f000 fc02 	bl	8007ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ca:	609a      	str	r2, [r3, #8]
      break;
 80072cc:	e03c      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6859      	ldr	r1, [r3, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	461a      	mov	r2, r3
 80072dc:	f000 fb76 	bl	80079cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2150      	movs	r1, #80	; 0x50
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fbcf 	bl	8007a8a <TIM_ITRx_SetConfig>
      break;
 80072ec:	e02c      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6859      	ldr	r1, [r3, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f000 fb95 	bl	8007a2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2160      	movs	r1, #96	; 0x60
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fbbf 	bl	8007a8a <TIM_ITRx_SetConfig>
      break;
 800730c:	e01c      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6859      	ldr	r1, [r3, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	461a      	mov	r2, r3
 800731c:	f000 fb56 	bl	80079cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2140      	movs	r1, #64	; 0x40
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fbaf 	bl	8007a8a <TIM_ITRx_SetConfig>
      break;
 800732c:	e00c      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f000 fba6 	bl	8007a8a <TIM_ITRx_SetConfig>
      break;
 800733e:	e003      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	73fb      	strb	r3, [r7, #15]
      break;
 8007344:	e000      	b.n	8007348 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d107      	bne.n	80073b2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073b0:	e02a      	b.n	8007408 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d107      	bne.n	80073cc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2202      	movs	r2, #2
 80073c0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ca:	e01d      	b.n	8007408 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d107      	bne.n	80073e6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2204      	movs	r2, #4
 80073da:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e4:	e010      	b.n	8007408 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d107      	bne.n	8007400 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2208      	movs	r2, #8
 80073f4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073fe:	e003      	b.n	8007408 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f7ff ffb4 	bl	8007376 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	771a      	strb	r2, [r3, #28]
}
 8007414:	bf00      	nop
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d10b      	bne.n	800744c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2201      	movs	r2, #1
 8007438:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d136      	bne.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800744a:	e031      	b.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	d10b      	bne.n	800746e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2202      	movs	r2, #2
 800745a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d125      	bne.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800746c:	e020      	b.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d10b      	bne.n	8007490 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2204      	movs	r2, #4
 800747c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d114      	bne.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800748e:	e00f      	b.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	429a      	cmp	r2, r3
 8007498:	d10a      	bne.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2208      	movs	r2, #8
 800749e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7fa fe73 	bl	800219c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	771a      	strb	r2, [r3, #28]
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d103      	bne.n	80074e4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	771a      	strb	r2, [r3, #28]
 80074e2:	e019      	b.n	8007518 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d103      	bne.n	80074f6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2202      	movs	r2, #2
 80074f2:	771a      	strb	r2, [r3, #28]
 80074f4:	e010      	b.n	8007518 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d103      	bne.n	8007508 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2204      	movs	r2, #4
 8007504:	771a      	strb	r2, [r3, #28]
 8007506:	e007      	b.n	8007518 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d102      	bne.n	8007518 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2208      	movs	r2, #8
 8007516:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff ff22 	bl	8007362 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
}
 8007524:	bf00      	nop
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a40      	ldr	r2, [pc, #256]	; (8007640 <TIM_Base_SetConfig+0x114>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d013      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754a:	d00f      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a3d      	ldr	r2, [pc, #244]	; (8007644 <TIM_Base_SetConfig+0x118>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d00b      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a3c      	ldr	r2, [pc, #240]	; (8007648 <TIM_Base_SetConfig+0x11c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d007      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a3b      	ldr	r2, [pc, #236]	; (800764c <TIM_Base_SetConfig+0x120>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a3a      	ldr	r2, [pc, #232]	; (8007650 <TIM_Base_SetConfig+0x124>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d108      	bne.n	800757e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a2f      	ldr	r2, [pc, #188]	; (8007640 <TIM_Base_SetConfig+0x114>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d02b      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d027      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a2c      	ldr	r2, [pc, #176]	; (8007644 <TIM_Base_SetConfig+0x118>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d023      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2b      	ldr	r2, [pc, #172]	; (8007648 <TIM_Base_SetConfig+0x11c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01f      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a2a      	ldr	r2, [pc, #168]	; (800764c <TIM_Base_SetConfig+0x120>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d01b      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a29      	ldr	r2, [pc, #164]	; (8007650 <TIM_Base_SetConfig+0x124>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d017      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a28      	ldr	r2, [pc, #160]	; (8007654 <TIM_Base_SetConfig+0x128>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a27      	ldr	r2, [pc, #156]	; (8007658 <TIM_Base_SetConfig+0x12c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00f      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a26      	ldr	r2, [pc, #152]	; (800765c <TIM_Base_SetConfig+0x130>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00b      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a25      	ldr	r2, [pc, #148]	; (8007660 <TIM_Base_SetConfig+0x134>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a24      	ldr	r2, [pc, #144]	; (8007664 <TIM_Base_SetConfig+0x138>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d003      	beq.n	80075de <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a23      	ldr	r2, [pc, #140]	; (8007668 <TIM_Base_SetConfig+0x13c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d108      	bne.n	80075f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <TIM_Base_SetConfig+0x114>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d003      	beq.n	8007624 <TIM_Base_SetConfig+0xf8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a0c      	ldr	r2, [pc, #48]	; (8007650 <TIM_Base_SetConfig+0x124>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d103      	bne.n	800762c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	615a      	str	r2, [r3, #20]
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40010000 	.word	0x40010000
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00
 8007650:	40010400 	.word	0x40010400
 8007654:	40014000 	.word	0x40014000
 8007658:	40014400 	.word	0x40014400
 800765c:	40014800 	.word	0x40014800
 8007660:	40001800 	.word	0x40001800
 8007664:	40001c00 	.word	0x40001c00
 8007668:	40002000 	.word	0x40002000

0800766c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f023 0201 	bic.w	r2, r3, #1
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f023 0302 	bic.w	r3, r3, #2
 80076b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	4313      	orrs	r3, r2
 80076be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a20      	ldr	r2, [pc, #128]	; (8007744 <TIM_OC1_SetConfig+0xd8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_OC1_SetConfig+0x64>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a1f      	ldr	r2, [pc, #124]	; (8007748 <TIM_OC1_SetConfig+0xdc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10c      	bne.n	80076ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f023 0308 	bic.w	r3, r3, #8
 80076d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f023 0304 	bic.w	r3, r3, #4
 80076e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a15      	ldr	r2, [pc, #84]	; (8007744 <TIM_OC1_SetConfig+0xd8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d003      	beq.n	80076fa <TIM_OC1_SetConfig+0x8e>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a14      	ldr	r2, [pc, #80]	; (8007748 <TIM_OC1_SetConfig+0xdc>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d111      	bne.n	800771e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	4313      	orrs	r3, r2
 8007712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	621a      	str	r2, [r3, #32]
}
 8007738:	bf00      	nop
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	40010000 	.word	0x40010000
 8007748:	40010400 	.word	0x40010400

0800774c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	f023 0210 	bic.w	r2, r3, #16
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f023 0320 	bic.w	r3, r3, #32
 8007796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a22      	ldr	r2, [pc, #136]	; (8007830 <TIM_OC2_SetConfig+0xe4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d003      	beq.n	80077b4 <TIM_OC2_SetConfig+0x68>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a21      	ldr	r2, [pc, #132]	; (8007834 <TIM_OC2_SetConfig+0xe8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d10d      	bne.n	80077d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a17      	ldr	r2, [pc, #92]	; (8007830 <TIM_OC2_SetConfig+0xe4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d003      	beq.n	80077e0 <TIM_OC2_SetConfig+0x94>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a16      	ldr	r2, [pc, #88]	; (8007834 <TIM_OC2_SetConfig+0xe8>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d113      	bne.n	8007808 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	621a      	str	r2, [r3, #32]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40010000 	.word	0x40010000
 8007834:	40010400 	.word	0x40010400

08007838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0303 	bic.w	r3, r3, #3
 800786e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a21      	ldr	r2, [pc, #132]	; (8007918 <TIM_OC3_SetConfig+0xe0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d003      	beq.n	800789e <TIM_OC3_SetConfig+0x66>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a20      	ldr	r2, [pc, #128]	; (800791c <TIM_OC3_SetConfig+0xe4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d10d      	bne.n	80078ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	021b      	lsls	r3, r3, #8
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a16      	ldr	r2, [pc, #88]	; (8007918 <TIM_OC3_SetConfig+0xe0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d003      	beq.n	80078ca <TIM_OC3_SetConfig+0x92>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a15      	ldr	r2, [pc, #84]	; (800791c <TIM_OC3_SetConfig+0xe4>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d113      	bne.n	80078f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	621a      	str	r2, [r3, #32]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	40010000 	.word	0x40010000
 800791c:	40010400 	.word	0x40010400

08007920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a1b      	ldr	r3, [r3, #32]
 800793a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800796a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	031b      	lsls	r3, r3, #12
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a12      	ldr	r2, [pc, #72]	; (80079c4 <TIM_OC4_SetConfig+0xa4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_OC4_SetConfig+0x68>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <TIM_OC4_SetConfig+0xa8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d109      	bne.n	800799c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800798e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	019b      	lsls	r3, r3, #6
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400

080079cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	f023 0201 	bic.w	r2, r3, #1
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f023 030a 	bic.w	r3, r3, #10
 8007a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f023 0210 	bic.w	r2, r3, #16
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	031b      	lsls	r3, r3, #12
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	f043 0307 	orr.w	r3, r3, #7
 8007aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	609a      	str	r2, [r3, #8]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	021a      	lsls	r2, r3, #8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	609a      	str	r2, [r3, #8]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	2201      	movs	r2, #1
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a1a      	ldr	r2, [r3, #32]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	401a      	ands	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1a      	ldr	r2, [r3, #32]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f003 031f 	and.w	r3, r3, #31
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	fa01 f303 	lsl.w	r3, r1, r3
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	621a      	str	r2, [r3, #32]
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
	...

08007b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e05a      	b.n	8007c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a21      	ldr	r2, [pc, #132]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d022      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb0:	d01d      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a1d      	ldr	r2, [pc, #116]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d018      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a1a      	ldr	r2, [pc, #104]	; (8007c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d00e      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a18      	ldr	r2, [pc, #96]	; (8007c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d009      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a17      	ldr	r2, [pc, #92]	; (8007c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a15      	ldr	r2, [pc, #84]	; (8007c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d10c      	bne.n	8007c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40000400 	.word	0x40000400
 8007c30:	40000800 	.word	0x40000800
 8007c34:	40000c00 	.word	0x40000c00
 8007c38:	40010400 	.word	0x40010400
 8007c3c:	40014000 	.word	0x40014000
 8007c40:	40001800 	.word	0x40001800

08007c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e03d      	b.n	8007cdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e03f      	b.n	8007d7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7fa fc9c 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2224      	movs	r2, #36	; 0x24
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68da      	ldr	r2, [r3, #12]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fdc7 	bl	80088c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695a      	ldr	r2, [r3, #20]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2220      	movs	r2, #32
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08c      	sub	sp, #48	; 0x30
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d165      	bne.n	8007e6a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <HAL_UART_Transmit_DMA+0x26>
 8007da4:	88fb      	ldrh	r3, [r7, #6]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e05e      	b.n	8007e6c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <HAL_UART_Transmit_DMA+0x38>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e057      	b.n	8007e6c <HAL_UART_Transmit_DMA+0xe8>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	88fa      	ldrh	r2, [r7, #6]
 8007dce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	88fa      	ldrh	r2, [r7, #6]
 8007dd4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2221      	movs	r2, #33	; 0x21
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de8:	4a22      	ldr	r2, [pc, #136]	; (8007e74 <HAL_UART_Transmit_DMA+0xf0>)
 8007dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df0:	4a21      	ldr	r2, [pc, #132]	; (8007e78 <HAL_UART_Transmit_DMA+0xf4>)
 8007df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df8:	4a20      	ldr	r2, [pc, #128]	; (8007e7c <HAL_UART_Transmit_DMA+0xf8>)
 8007dfa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e00:	2200      	movs	r2, #0
 8007e02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007e04:	f107 0308 	add.w	r3, r7, #8
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	6819      	ldr	r1, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3304      	adds	r3, #4
 8007e18:	461a      	mov	r2, r3
 8007e1a:	88fb      	ldrh	r3, [r7, #6]
 8007e1c:	f7fb fc66 	bl	80036ec <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e28:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3314      	adds	r3, #20
 8007e38:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	617b      	str	r3, [r7, #20]
   return(result);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e52:	627a      	str	r2, [r7, #36]	; 0x24
 8007e54:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6a39      	ldr	r1, [r7, #32]
 8007e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	e000      	b.n	8007e6c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007e6a:	2302      	movs	r3, #2
  }
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3730      	adds	r7, #48	; 0x30
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	080083f1 	.word	0x080083f1
 8007e78:	0800848b 	.word	0x0800848b
 8007e7c:	080084a7 	.word	0x080084a7

08007e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b0ba      	sub	sp, #232	; 0xe8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10f      	bne.n	8007ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x66>
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fc32 	bl	8008748 <UART_Receive_IT>
      return;
 8007ee4:	e256      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80de 	beq.w	80080ac <HAL_UART_IRQHandler+0x22c>
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80d1 	beq.w	80080ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <HAL_UART_IRQHandler+0xae>
 8007f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f043 0201 	orr.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <HAL_UART_IRQHandler+0xd2>
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f043 0202 	orr.w	r2, r3, #2
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <HAL_UART_IRQHandler+0xf6>
 8007f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f043 0204 	orr.w	r2, r3, #4
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d011      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x126>
 8007f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d105      	bne.n	8007f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f043 0208 	orr.w	r2, r3, #8
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 81ed 	beq.w	800838a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb4:	f003 0320 	and.w	r3, r3, #32
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <HAL_UART_IRQHandler+0x14e>
 8007fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fbbd 	bl	8008748 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd8:	2b40      	cmp	r3, #64	; 0x40
 8007fda:	bf0c      	ite	eq
 8007fdc:	2301      	moveq	r3, #1
 8007fde:	2300      	movne	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <HAL_UART_IRQHandler+0x17a>
 8007ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d04f      	beq.n	800809a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fac5 	bl	800858a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d141      	bne.n	8008092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3314      	adds	r3, #20
 8008014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3314      	adds	r3, #20
 8008036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800803a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800803e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1d9      	bne.n	800800e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	2b00      	cmp	r3, #0
 8008060:	d013      	beq.n	800808a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	4a7d      	ldr	r2, [pc, #500]	; (800825c <HAL_UART_IRQHandler+0x3dc>)
 8008068:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	4618      	mov	r0, r3
 8008070:	f7fb fc04 	bl	800387c <HAL_DMA_Abort_IT>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d016      	beq.n	80080a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	e00e      	b.n	80080a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f99a 	bl	80083c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008090:	e00a      	b.n	80080a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f996 	bl	80083c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008098:	e006      	b.n	80080a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f992 	bl	80083c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80080a6:	e170      	b.n	800838a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a8:	bf00      	nop
    return;
 80080aa:	e16e      	b.n	800838a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	f040 814a 	bne.w	800834a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8143 	beq.w	800834a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 813c 	beq.w	800834a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080d2:	2300      	movs	r3, #0
 80080d4:	60bb      	str	r3, [r7, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	f040 80b4 	bne.w	8008260 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 8140 	beq.w	800838e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008116:	429a      	cmp	r2, r3
 8008118:	f080 8139 	bcs.w	800838e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008122:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812e:	f000 8088 	beq.w	8008242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	330c      	adds	r3, #12
 8008138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800814c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800815e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800816a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1d9      	bne.n	8008132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3314      	adds	r3, #20
 8008184:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800818e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e1      	bne.n	800817e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3314      	adds	r3, #20
 80081c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e3      	bne.n	80081ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008212:	f023 0310 	bic.w	r3, r3, #16
 8008216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008224:	65ba      	str	r2, [r7, #88]	; 0x58
 8008226:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800822a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e3      	bne.n	8008200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	4618      	mov	r0, r3
 800823e:	f7fb faad 	bl	800379c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800824a:	b29b      	uxth	r3, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	b29b      	uxth	r3, r3
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8c0 	bl	80083d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008258:	e099      	b.n	800838e <HAL_UART_IRQHandler+0x50e>
 800825a:	bf00      	nop
 800825c:	08008651 	.word	0x08008651
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008268:	b29b      	uxth	r3, r3
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 808b 	beq.w	8008392 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800827c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8086 	beq.w	8008392 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800829c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80082aa:	647a      	str	r2, [r7, #68]	; 0x44
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e3      	bne.n	8008286 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3314      	adds	r3, #20
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	623b      	str	r3, [r7, #32]
   return(result);
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3314      	adds	r3, #20
 80082de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082e2:	633a      	str	r2, [r7, #48]	; 0x30
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e3      	bne.n	80082be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	330c      	adds	r3, #12
 800830a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	60fb      	str	r3, [r7, #12]
   return(result);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0310 	bic.w	r3, r3, #16
 800831a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	330c      	adds	r3, #12
 8008324:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008328:	61fa      	str	r2, [r7, #28]
 800832a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	617b      	str	r3, [r7, #20]
   return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e3      	bne.n	8008304 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800833c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f848 	bl	80083d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008348:	e023      	b.n	8008392 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <HAL_UART_IRQHandler+0x4ea>
 8008356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f988 	bl	8008678 <UART_Transmit_IT>
    return;
 8008368:	e014      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800836a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00e      	beq.n	8008394 <HAL_UART_IRQHandler+0x514>
 8008376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f9c8 	bl	8008718 <UART_EndTransmit_IT>
    return;
 8008388:	e004      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
    return;
 800838a:	bf00      	nop
 800838c:	e002      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
      return;
 800838e:	bf00      	nop
 8008390:	e000      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
      return;
 8008392:	bf00      	nop
  }
}
 8008394:	37e8      	adds	r7, #232	; 0xe8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop

0800839c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b090      	sub	sp, #64	; 0x40
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d137      	bne.n	800847c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	2200      	movs	r2, #0
 8008410:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	623b      	str	r3, [r7, #32]
   return(result);
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008428:	63bb      	str	r3, [r7, #56]	; 0x38
 800842a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008432:	633a      	str	r2, [r7, #48]	; 0x30
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	60fb      	str	r3, [r7, #12]
   return(result);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800845c:	637b      	str	r3, [r7, #52]	; 0x34
 800845e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008466:	61fa      	str	r2, [r7, #28]
 8008468:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	69b9      	ldr	r1, [r7, #24]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	617b      	str	r3, [r7, #20]
   return(result);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800847a:	e002      	b.n	8008482 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800847c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800847e:	f7f9 fe7b 	bl	8002178 <HAL_UART_TxCpltCallback>
}
 8008482:	bf00      	nop
 8008484:	3740      	adds	r7, #64	; 0x40
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f7ff ff7f 	bl	800839c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	bf0c      	ite	eq
 80084c6:	2301      	moveq	r3, #1
 80084c8:	2300      	movne	r3, #0
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b21      	cmp	r3, #33	; 0x21
 80084d8:	d108      	bne.n	80084ec <UART_DMAError+0x46>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80084e6:	68b8      	ldr	r0, [r7, #8]
 80084e8:	f000 f827 	bl	800853a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f6:	2b40      	cmp	r3, #64	; 0x40
 80084f8:	bf0c      	ite	eq
 80084fa:	2301      	moveq	r3, #1
 80084fc:	2300      	movne	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b22      	cmp	r3, #34	; 0x22
 800850c:	d108      	bne.n	8008520 <UART_DMAError+0x7a>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800851a:	68b8      	ldr	r0, [r7, #8]
 800851c:	f000 f835 	bl	800858a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008524:	f043 0210 	orr.w	r2, r3, #16
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800852c:	68b8      	ldr	r0, [r7, #8]
 800852e:	f7ff ff49 	bl	80083c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800853a:	b480      	push	{r7}
 800853c:	b089      	sub	sp, #36	; 0x24
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	330c      	adds	r3, #12
 8008548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	60bb      	str	r3, [r7, #8]
   return(result);
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	330c      	adds	r3, #12
 8008560:	69fa      	ldr	r2, [r7, #28]
 8008562:	61ba      	str	r2, [r7, #24]
 8008564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6979      	ldr	r1, [r7, #20]
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	613b      	str	r3, [r7, #16]
   return(result);
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e5      	bne.n	8008542 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800857e:	bf00      	nop
 8008580:	3724      	adds	r7, #36	; 0x24
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800858a:	b480      	push	{r7}
 800858c:	b095      	sub	sp, #84	; 0x54
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	330c      	adds	r3, #12
 8008598:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	330c      	adds	r3, #12
 80085b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085b2:	643a      	str	r2, [r7, #64]	; 0x40
 80085b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3314      	adds	r3, #20
 80085cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	e853 3f00 	ldrex	r3, [r3]
 80085d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	f023 0301 	bic.w	r3, r3, #1
 80085dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3314      	adds	r3, #20
 80085e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e5      	bne.n	80085c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d119      	bne.n	8008636 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	330c      	adds	r3, #12
 8008608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	60bb      	str	r3, [r7, #8]
   return(result);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f023 0310 	bic.w	r3, r3, #16
 8008618:	647b      	str	r3, [r7, #68]	; 0x44
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	330c      	adds	r3, #12
 8008620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008622:	61ba      	str	r2, [r7, #24]
 8008624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6979      	ldr	r1, [r7, #20]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	613b      	str	r3, [r7, #16]
   return(result);
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e5      	bne.n	8008602 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008644:	bf00      	nop
 8008646:	3754      	adds	r7, #84	; 0x54
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f7ff feaa 	bl	80083c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008670:	bf00      	nop
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008686:	b2db      	uxtb	r3, r3
 8008688:	2b21      	cmp	r3, #33	; 0x21
 800868a:	d13e      	bne.n	800870a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008694:	d114      	bne.n	80086c0 <UART_Transmit_IT+0x48>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d110      	bne.n	80086c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	461a      	mov	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	1c9a      	adds	r2, r3, #2
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	621a      	str	r2, [r3, #32]
 80086be:	e008      	b.n	80086d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	1c59      	adds	r1, r3, #1
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	6211      	str	r1, [r2, #32]
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	3b01      	subs	r3, #1
 80086da:	b29b      	uxth	r3, r3
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	4619      	mov	r1, r3
 80086e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10f      	bne.n	8008706 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68da      	ldr	r2, [r3, #12]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008704:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	e000      	b.n	800870c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800870a:	2302      	movs	r3, #2
  }
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800872e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7f9 fd1d 	bl	8002178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08c      	sub	sp, #48	; 0x30
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b22      	cmp	r3, #34	; 0x22
 800875a:	f040 80ab 	bne.w	80088b4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008766:	d117      	bne.n	8008798 <UART_Receive_IT+0x50>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d113      	bne.n	8008798 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008770:	2300      	movs	r3, #0
 8008772:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	b29b      	uxth	r3, r3
 8008782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008786:	b29a      	uxth	r2, r3
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	1c9a      	adds	r2, r3, #2
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	629a      	str	r2, [r3, #40]	; 0x28
 8008796:	e026      	b.n	80087e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087aa:	d007      	beq.n	80087bc <UART_Receive_IT+0x74>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <UART_Receive_IT+0x82>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d106      	bne.n	80087ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	e008      	b.n	80087dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	3b01      	subs	r3, #1
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	4619      	mov	r1, r3
 80087f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d15a      	bne.n	80088b0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68da      	ldr	r2, [r3, #12]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0220 	bic.w	r2, r2, #32
 8008808:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008818:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695a      	ldr	r2, [r3, #20]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0201 	bic.w	r2, r2, #1
 8008828:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	2b01      	cmp	r3, #1
 8008838:	d135      	bne.n	80088a6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	613b      	str	r3, [r7, #16]
   return(result);
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f023 0310 	bic.w	r3, r3, #16
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	330c      	adds	r3, #12
 800885e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008860:	623a      	str	r2, [r7, #32]
 8008862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	69f9      	ldr	r1, [r7, #28]
 8008866:	6a3a      	ldr	r2, [r7, #32]
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	61bb      	str	r3, [r7, #24]
   return(result);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e5      	bne.n	8008840 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b10      	cmp	r3, #16
 8008880:	d10a      	bne.n	8008898 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff fd9a 	bl	80083d8 <HAL_UARTEx_RxEventCallback>
 80088a4:	e002      	b.n	80088ac <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fd82 	bl	80083b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	e002      	b.n	80088b6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	e000      	b.n	80088b6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80088b4:	2302      	movs	r3, #2
  }
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3730      	adds	r7, #48	; 0x30
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	b09f      	sub	sp, #124	; 0x7c
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d6:	68d9      	ldr	r1, [r3, #12]
 80088d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	ea40 0301 	orr.w	r3, r0, r1
 80088e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	431a      	orrs	r2, r3
 80088ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	431a      	orrs	r2, r3
 80088f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f4:	69db      	ldr	r3, [r3, #28]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80088fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008904:	f021 010c 	bic.w	r1, r1, #12
 8008908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800890e:	430b      	orrs	r3, r1
 8008910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800891c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891e:	6999      	ldr	r1, [r3, #24]
 8008920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	ea40 0301 	orr.w	r3, r0, r1
 8008928:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800892a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4bc5      	ldr	r3, [pc, #788]	; (8008c44 <UART_SetConfig+0x384>)
 8008930:	429a      	cmp	r2, r3
 8008932:	d004      	beq.n	800893e <UART_SetConfig+0x7e>
 8008934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	4bc3      	ldr	r3, [pc, #780]	; (8008c48 <UART_SetConfig+0x388>)
 800893a:	429a      	cmp	r2, r3
 800893c:	d103      	bne.n	8008946 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800893e:	f7fd fb19 	bl	8005f74 <HAL_RCC_GetPCLK2Freq>
 8008942:	6778      	str	r0, [r7, #116]	; 0x74
 8008944:	e002      	b.n	800894c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008946:	f7fd fb01 	bl	8005f4c <HAL_RCC_GetPCLK1Freq>
 800894a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800894c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008954:	f040 80b6 	bne.w	8008ac4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800895a:	461c      	mov	r4, r3
 800895c:	f04f 0500 	mov.w	r5, #0
 8008960:	4622      	mov	r2, r4
 8008962:	462b      	mov	r3, r5
 8008964:	1891      	adds	r1, r2, r2
 8008966:	6439      	str	r1, [r7, #64]	; 0x40
 8008968:	415b      	adcs	r3, r3
 800896a:	647b      	str	r3, [r7, #68]	; 0x44
 800896c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008970:	1912      	adds	r2, r2, r4
 8008972:	eb45 0303 	adc.w	r3, r5, r3
 8008976:	f04f 0000 	mov.w	r0, #0
 800897a:	f04f 0100 	mov.w	r1, #0
 800897e:	00d9      	lsls	r1, r3, #3
 8008980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008984:	00d0      	lsls	r0, r2, #3
 8008986:	4602      	mov	r2, r0
 8008988:	460b      	mov	r3, r1
 800898a:	1911      	adds	r1, r2, r4
 800898c:	6639      	str	r1, [r7, #96]	; 0x60
 800898e:	416b      	adcs	r3, r5
 8008990:	667b      	str	r3, [r7, #100]	; 0x64
 8008992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	461a      	mov	r2, r3
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	1891      	adds	r1, r2, r2
 800899e:	63b9      	str	r1, [r7, #56]	; 0x38
 80089a0:	415b      	adcs	r3, r3
 80089a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80089ac:	f7f8 f822 	bl	80009f4 <__aeabi_uldivmod>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4ba5      	ldr	r3, [pc, #660]	; (8008c4c <UART_SetConfig+0x38c>)
 80089b6:	fba3 2302 	umull	r2, r3, r3, r2
 80089ba:	095b      	lsrs	r3, r3, #5
 80089bc:	011e      	lsls	r6, r3, #4
 80089be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089c0:	461c      	mov	r4, r3
 80089c2:	f04f 0500 	mov.w	r5, #0
 80089c6:	4622      	mov	r2, r4
 80089c8:	462b      	mov	r3, r5
 80089ca:	1891      	adds	r1, r2, r2
 80089cc:	6339      	str	r1, [r7, #48]	; 0x30
 80089ce:	415b      	adcs	r3, r3
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
 80089d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089d6:	1912      	adds	r2, r2, r4
 80089d8:	eb45 0303 	adc.w	r3, r5, r3
 80089dc:	f04f 0000 	mov.w	r0, #0
 80089e0:	f04f 0100 	mov.w	r1, #0
 80089e4:	00d9      	lsls	r1, r3, #3
 80089e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089ea:	00d0      	lsls	r0, r2, #3
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	1911      	adds	r1, r2, r4
 80089f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80089f4:	416b      	adcs	r3, r5
 80089f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	461a      	mov	r2, r3
 80089fe:	f04f 0300 	mov.w	r3, #0
 8008a02:	1891      	adds	r1, r2, r2
 8008a04:	62b9      	str	r1, [r7, #40]	; 0x28
 8008a06:	415b      	adcs	r3, r3
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a12:	f7f7 ffef 	bl	80009f4 <__aeabi_uldivmod>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4b8c      	ldr	r3, [pc, #560]	; (8008c4c <UART_SetConfig+0x38c>)
 8008a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a20:	095b      	lsrs	r3, r3, #5
 8008a22:	2164      	movs	r1, #100	; 0x64
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	3332      	adds	r3, #50	; 0x32
 8008a2e:	4a87      	ldr	r2, [pc, #540]	; (8008c4c <UART_SetConfig+0x38c>)
 8008a30:	fba2 2303 	umull	r2, r3, r2, r3
 8008a34:	095b      	lsrs	r3, r3, #5
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a3c:	441e      	add	r6, r3
 8008a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a40:	4618      	mov	r0, r3
 8008a42:	f04f 0100 	mov.w	r1, #0
 8008a46:	4602      	mov	r2, r0
 8008a48:	460b      	mov	r3, r1
 8008a4a:	1894      	adds	r4, r2, r2
 8008a4c:	623c      	str	r4, [r7, #32]
 8008a4e:	415b      	adcs	r3, r3
 8008a50:	627b      	str	r3, [r7, #36]	; 0x24
 8008a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a56:	1812      	adds	r2, r2, r0
 8008a58:	eb41 0303 	adc.w	r3, r1, r3
 8008a5c:	f04f 0400 	mov.w	r4, #0
 8008a60:	f04f 0500 	mov.w	r5, #0
 8008a64:	00dd      	lsls	r5, r3, #3
 8008a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a6a:	00d4      	lsls	r4, r2, #3
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	462b      	mov	r3, r5
 8008a70:	1814      	adds	r4, r2, r0
 8008a72:	653c      	str	r4, [r7, #80]	; 0x50
 8008a74:	414b      	adcs	r3, r1
 8008a76:	657b      	str	r3, [r7, #84]	; 0x54
 8008a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	1891      	adds	r1, r2, r2
 8008a84:	61b9      	str	r1, [r7, #24]
 8008a86:	415b      	adcs	r3, r3
 8008a88:	61fb      	str	r3, [r7, #28]
 8008a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008a92:	f7f7 ffaf 	bl	80009f4 <__aeabi_uldivmod>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4b6c      	ldr	r3, [pc, #432]	; (8008c4c <UART_SetConfig+0x38c>)
 8008a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008aa0:	095b      	lsrs	r3, r3, #5
 8008aa2:	2164      	movs	r1, #100	; 0x64
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	3332      	adds	r3, #50	; 0x32
 8008aae:	4a67      	ldr	r2, [pc, #412]	; (8008c4c <UART_SetConfig+0x38c>)
 8008ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	f003 0207 	and.w	r2, r3, #7
 8008aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4432      	add	r2, r6
 8008ac0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ac2:	e0b9      	b.n	8008c38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac6:	461c      	mov	r4, r3
 8008ac8:	f04f 0500 	mov.w	r5, #0
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	1891      	adds	r1, r2, r2
 8008ad2:	6139      	str	r1, [r7, #16]
 8008ad4:	415b      	adcs	r3, r3
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008adc:	1912      	adds	r2, r2, r4
 8008ade:	eb45 0303 	adc.w	r3, r5, r3
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f04f 0100 	mov.w	r1, #0
 8008aea:	00d9      	lsls	r1, r3, #3
 8008aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008af0:	00d0      	lsls	r0, r2, #3
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	eb12 0804 	adds.w	r8, r2, r4
 8008afa:	eb43 0905 	adc.w	r9, r3, r5
 8008afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f04f 0100 	mov.w	r1, #0
 8008b08:	f04f 0200 	mov.w	r2, #0
 8008b0c:	f04f 0300 	mov.w	r3, #0
 8008b10:	008b      	lsls	r3, r1, #2
 8008b12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b16:	0082      	lsls	r2, r0, #2
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	f7f7 ff6a 	bl	80009f4 <__aeabi_uldivmod>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4b49      	ldr	r3, [pc, #292]	; (8008c4c <UART_SetConfig+0x38c>)
 8008b26:	fba3 2302 	umull	r2, r3, r3, r2
 8008b2a:	095b      	lsrs	r3, r3, #5
 8008b2c:	011e      	lsls	r6, r3, #4
 8008b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b30:	4618      	mov	r0, r3
 8008b32:	f04f 0100 	mov.w	r1, #0
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	1894      	adds	r4, r2, r2
 8008b3c:	60bc      	str	r4, [r7, #8]
 8008b3e:	415b      	adcs	r3, r3
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b46:	1812      	adds	r2, r2, r0
 8008b48:	eb41 0303 	adc.w	r3, r1, r3
 8008b4c:	f04f 0400 	mov.w	r4, #0
 8008b50:	f04f 0500 	mov.w	r5, #0
 8008b54:	00dd      	lsls	r5, r3, #3
 8008b56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b5a:	00d4      	lsls	r4, r2, #3
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	462b      	mov	r3, r5
 8008b60:	1814      	adds	r4, r2, r0
 8008b62:	64bc      	str	r4, [r7, #72]	; 0x48
 8008b64:	414b      	adcs	r3, r1
 8008b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f04f 0100 	mov.w	r1, #0
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	008b      	lsls	r3, r1, #2
 8008b7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b80:	0082      	lsls	r2, r0, #2
 8008b82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b86:	f7f7 ff35 	bl	80009f4 <__aeabi_uldivmod>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4b2f      	ldr	r3, [pc, #188]	; (8008c4c <UART_SetConfig+0x38c>)
 8008b90:	fba3 1302 	umull	r1, r3, r3, r2
 8008b94:	095b      	lsrs	r3, r3, #5
 8008b96:	2164      	movs	r1, #100	; 0x64
 8008b98:	fb01 f303 	mul.w	r3, r1, r3
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	3332      	adds	r3, #50	; 0x32
 8008ba2:	4a2a      	ldr	r2, [pc, #168]	; (8008c4c <UART_SetConfig+0x38c>)
 8008ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba8:	095b      	lsrs	r3, r3, #5
 8008baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bae:	441e      	add	r6, r3
 8008bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f04f 0100 	mov.w	r1, #0
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	1894      	adds	r4, r2, r2
 8008bbe:	603c      	str	r4, [r7, #0]
 8008bc0:	415b      	adcs	r3, r3
 8008bc2:	607b      	str	r3, [r7, #4]
 8008bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc8:	1812      	adds	r2, r2, r0
 8008bca:	eb41 0303 	adc.w	r3, r1, r3
 8008bce:	f04f 0400 	mov.w	r4, #0
 8008bd2:	f04f 0500 	mov.w	r5, #0
 8008bd6:	00dd      	lsls	r5, r3, #3
 8008bd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bdc:	00d4      	lsls	r4, r2, #3
 8008bde:	4622      	mov	r2, r4
 8008be0:	462b      	mov	r3, r5
 8008be2:	eb12 0a00 	adds.w	sl, r2, r0
 8008be6:	eb43 0b01 	adc.w	fp, r3, r1
 8008bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f04f 0100 	mov.w	r1, #0
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	008b      	lsls	r3, r1, #2
 8008bfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008c02:	0082      	lsls	r2, r0, #2
 8008c04:	4650      	mov	r0, sl
 8008c06:	4659      	mov	r1, fp
 8008c08:	f7f7 fef4 	bl	80009f4 <__aeabi_uldivmod>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4b0e      	ldr	r3, [pc, #56]	; (8008c4c <UART_SetConfig+0x38c>)
 8008c12:	fba3 1302 	umull	r1, r3, r3, r2
 8008c16:	095b      	lsrs	r3, r3, #5
 8008c18:	2164      	movs	r1, #100	; 0x64
 8008c1a:	fb01 f303 	mul.w	r3, r1, r3
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	3332      	adds	r3, #50	; 0x32
 8008c24:	4a09      	ldr	r2, [pc, #36]	; (8008c4c <UART_SetConfig+0x38c>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	095b      	lsrs	r3, r3, #5
 8008c2c:	f003 020f 	and.w	r2, r3, #15
 8008c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4432      	add	r2, r6
 8008c36:	609a      	str	r2, [r3, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	377c      	adds	r7, #124	; 0x7c
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	bf00      	nop
 8008c44:	40011000 	.word	0x40011000
 8008c48:	40011400 	.word	0x40011400
 8008c4c:	51eb851f 	.word	0x51eb851f

08008c50 <__libc_init_array>:
 8008c50:	b570      	push	{r4, r5, r6, lr}
 8008c52:	4d0d      	ldr	r5, [pc, #52]	; (8008c88 <__libc_init_array+0x38>)
 8008c54:	4c0d      	ldr	r4, [pc, #52]	; (8008c8c <__libc_init_array+0x3c>)
 8008c56:	1b64      	subs	r4, r4, r5
 8008c58:	10a4      	asrs	r4, r4, #2
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	42a6      	cmp	r6, r4
 8008c5e:	d109      	bne.n	8008c74 <__libc_init_array+0x24>
 8008c60:	4d0b      	ldr	r5, [pc, #44]	; (8008c90 <__libc_init_array+0x40>)
 8008c62:	4c0c      	ldr	r4, [pc, #48]	; (8008c94 <__libc_init_array+0x44>)
 8008c64:	f000 f820 	bl	8008ca8 <_init>
 8008c68:	1b64      	subs	r4, r4, r5
 8008c6a:	10a4      	asrs	r4, r4, #2
 8008c6c:	2600      	movs	r6, #0
 8008c6e:	42a6      	cmp	r6, r4
 8008c70:	d105      	bne.n	8008c7e <__libc_init_array+0x2e>
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c78:	4798      	blx	r3
 8008c7a:	3601      	adds	r6, #1
 8008c7c:	e7ee      	b.n	8008c5c <__libc_init_array+0xc>
 8008c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c82:	4798      	blx	r3
 8008c84:	3601      	adds	r6, #1
 8008c86:	e7f2      	b.n	8008c6e <__libc_init_array+0x1e>
 8008c88:	08008d00 	.word	0x08008d00
 8008c8c:	08008d00 	.word	0x08008d00
 8008c90:	08008d00 	.word	0x08008d00
 8008c94:	08008d04 	.word	0x08008d04

08008c98 <memset>:
 8008c98:	4402      	add	r2, r0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d100      	bne.n	8008ca2 <memset+0xa>
 8008ca0:	4770      	bx	lr
 8008ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ca6:	e7f9      	b.n	8008c9c <memset+0x4>

08008ca8 <_init>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	bf00      	nop
 8008cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cae:	bc08      	pop	{r3}
 8008cb0:	469e      	mov	lr, r3
 8008cb2:	4770      	bx	lr

08008cb4 <_fini>:
 8008cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb6:	bf00      	nop
 8008cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cba:	bc08      	pop	{r3}
 8008cbc:	469e      	mov	lr, r3
 8008cbe:	4770      	bx	lr
