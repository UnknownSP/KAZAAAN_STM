
SMASTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007588  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800774c  0800774c  0001774c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007784  08007784  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007784  08007784  00017784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800778c  0800778c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d70  20000010  080077a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d80  080077a4  00021d80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195a3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d5f  00000000  00000000  000395e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  0003c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a00  00000000  00000000  0003e478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f74  00000000  00000000  00061e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d356d  00000000  00000000  00078dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014c359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  0014c3ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007734 	.word	0x08007734

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08007734 	.word	0x08007734

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <appInit>:

static uint32_t Encoder_Count = 0;

static int Encoder_Process(void);

int appInit(void){
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	return 0;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <appTask>:

int appTask(void){
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
	Encoder_Process();
 8000512:	f000 f8bf 	bl	8000694 <Encoder_Process>

	//if(IO_READ_USERBUTTON()){
		//IO_SET_USERLED();
		for(int i=0; i<5; i++){
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e06d      	b.n	80005f8 <appTask+0xec>
        	int r=0;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
        	int g=0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
        	int b=0;
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	2b04      	cmp	r3, #4
 800052c:	d82f      	bhi.n	800058e <appTask+0x82>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <appTask+0x28>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000549 	.word	0x08000549
 8000538:	08000557 	.word	0x08000557
 800053c:	08000565 	.word	0x08000565
 8000540:	08000573 	.word	0x08000573
 8000544:	08000581 	.word	0x08000581
        	switch (i)
        	{
        	case 0:
        	  	r=1;
 8000548:	2301      	movs	r3, #1
 800054a:	613b      	str	r3, [r7, #16]
        	  	g=0;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
        	  	b=0;
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
        	  	break;
 8000554:	e01b      	b.n	800058e <appTask+0x82>
	
        	case 1:
        	  	r=0;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
        	  	g=1;
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
        	  	b=0;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
        	  	break;
 8000562:	e014      	b.n	800058e <appTask+0x82>
	
        	case 2:
        	  	r=0;
 8000564:	2300      	movs	r3, #0
 8000566:	613b      	str	r3, [r7, #16]
        	  	g=0;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
        	  	b=1;
 800056c:	2301      	movs	r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
        	  	break;
 8000570:	e00d      	b.n	800058e <appTask+0x82>
	
        	case 3:
        	  	r=1;
 8000572:	2301      	movs	r3, #1
 8000574:	613b      	str	r3, [r7, #16]
        	  	g=1;
 8000576:	2301      	movs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
        	  	b=0;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
        	  	break;
 800057e:	e006      	b.n	800058e <appTask+0x82>
	
        	case 4:
        	  	r=1;
 8000580:	2301      	movs	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
        	  	g=0;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
        	  	b=1;
 8000588:	2301      	movs	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
        	  	break;
 800058c:	bf00      	nop
        	}
        	for(int j=0;j<10;j++){
 800058e:	2300      	movs	r3, #0
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	e02b      	b.n	80005ec <appTask+0xe0>
				D_LED_Set(i*10+j, (j+1)*25*r, (j+1)*25*g, (j+1)*25*b);
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	4613      	mov	r3, r2
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	4413      	add	r3, r2
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	18d0      	adds	r0, r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	fb02 f203 	mul.w	r2, r2, r3
 80005ae:	4613      	mov	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4413      	add	r3, r2
 80005b4:	009a      	lsls	r2, r3, #2
 80005b6:	1899      	adds	r1, r3, r2
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3301      	adds	r3, #1
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	fb02 f203 	mul.w	r2, r2, r3
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	009a      	lsls	r2, r3, #2
 80005ca:	189c      	adds	r4, r3, r2
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3301      	adds	r3, #1
 80005d0:	68ba      	ldr	r2, [r7, #8]
 80005d2:	fb02 f203 	mul.w	r2, r2, r3
 80005d6:	4613      	mov	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4413      	add	r3, r2
 80005dc:	009a      	lsls	r2, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	4622      	mov	r2, r4
 80005e2:	f001 f831 	bl	8001648 <D_LED_Set>
        	for(int j=0;j<10;j++){
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b09      	cmp	r3, #9
 80005f0:	ddd0      	ble.n	8000594 <appTask+0x88>
		for(int i=0; i<5; i++){
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	dd8e      	ble.n	800051c <appTask+0x10>
        	}
      	}
		D_LED_Rotate(-Encoder_Count + LED_OFFSET);
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <appTask+0x170>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f1c3 0304 	rsb	r3, r3, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f8c0 	bl	800178c <D_LED_Rotate>
      	D_LED_Send();
 800060c:	f001 f84a 	bl	80016a4 <D_LED_Send>
    //    	D_LED_Set(i, 0, 0, 0);
    //  	}
    //  	D_LED_Send();
	//}

	int16_t debug_bits = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	807b      	strh	r3, [r7, #2]
	debug_bits |= ((int)IO_READ_ENC_HOME() << 1);
 8000614:	2120      	movs	r1, #32
 8000616:	481a      	ldr	r0, [pc, #104]	; (8000680 <appTask+0x174>)
 8000618:	f001 f801 	bl	800161e <D_GPIO_Read>
 800061c:	4603      	mov	r3, r0
 800061e:	f083 0301 	eor.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	b21a      	sxth	r2, r3
 8000628:	887b      	ldrh	r3, [r7, #2]
 800062a:	4313      	orrs	r3, r2
 800062c:	807b      	strh	r3, [r7, #2]
	debug_bits |= ((int)IO_READ_ENC_STEP() << 0);
 800062e:	2110      	movs	r1, #16
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <appTask+0x174>)
 8000632:	f000 fff4 	bl	800161e <D_GPIO_Read>
 8000636:	4603      	mov	r3, r0
 8000638:	f083 0301 	eor.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	b21a      	sxth	r2, r3
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	4313      	orrs	r3, r2
 8000644:	807b      	strh	r3, [r7, #2]
	D_Mess_printf("\033[1;1H");
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <appTask+0x178>)
 8000648:	f001 f936 	bl	80018b8 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",G_System_counter);
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <appTask+0x17c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <appTask+0x180>)
 8000654:	f001 f930 	bl	80018b8 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",Encoder_Count);
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <appTask+0x170>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4619      	mov	r1, r3
 800065e:	480b      	ldr	r0, [pc, #44]	; (800068c <appTask+0x180>)
 8000660:	f001 f92a 	bl	80018b8 <D_Mess_printf>
	D_Mess_printf("%016b\n", debug_bits);
 8000664:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000668:	4619      	mov	r1, r3
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <appTask+0x184>)
 800066c:	f001 f924 	bl	80018b8 <D_Mess_printf>


	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	371c      	adds	r7, #28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd90      	pop	{r4, r7, pc}
 800067a:	bf00      	nop
 800067c:	2000002c 	.word	0x2000002c
 8000680:	40020400 	.word	0x40020400
 8000684:	0800774c 	.word	0x0800774c
 8000688:	20000044 	.word	0x20000044
 800068c:	08007754 	.word	0x08007754
 8000690:	0800775c 	.word	0x0800775c

08000694 <Encoder_Process>:

static int Encoder_Process(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	static bool reset = false;
	int enc_state = (int)IO_READ_ENC_STEP();
 800069a:	2110      	movs	r1, #16
 800069c:	4835      	ldr	r0, [pc, #212]	; (8000774 <Encoder_Process+0xe0>)
 800069e:	f000 ffbe 	bl	800161e <D_GPIO_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	f083 0301 	eor.w	r3, r3, #1
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_ENC_HOME();
 80006ac:	2120      	movs	r1, #32
 80006ae:	4831      	ldr	r0, [pc, #196]	; (8000774 <Encoder_Process+0xe0>)
 80006b0:	f000 ffb5 	bl	800161e <D_GPIO_Read>
 80006b4:	4603      	mov	r3, r0
 80006b6:	f083 0301 	eor.w	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <Encoder_Process+0xe4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d005      	beq.n	80006d4 <Encoder_Process+0x40>
		enc_change_count++;
 80006c8:	4b2c      	ldr	r3, [pc, #176]	; (800077c <Encoder_Process+0xe8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a2b      	ldr	r2, [pc, #172]	; (800077c <Encoder_Process+0xe8>)
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	e002      	b.n	80006da <Encoder_Process+0x46>
	}else{
		enc_change_count = 0;
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <Encoder_Process+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 80006da:	4b28      	ldr	r3, [pc, #160]	; (800077c <Encoder_Process+0xe8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b04      	cmp	r3, #4
 80006e0:	dd0d      	ble.n	80006fe <Encoder_Process+0x6a>
		recent_enc_state = enc_state;
 80006e2:	4a25      	ldr	r2, [pc, #148]	; (8000778 <Encoder_Process+0xe4>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <Encoder_Process+0xe8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d104      	bne.n	80006fe <Encoder_Process+0x6a>
			Encoder_Count++;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <Encoder_Process+0xec>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <Encoder_Process+0xec>)
 80006fc:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <Encoder_Process+0xf0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	d005      	beq.n	8000714 <Encoder_Process+0x80>
		home_change_count++;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <Encoder_Process+0xf4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a1e      	ldr	r2, [pc, #120]	; (8000788 <Encoder_Process+0xf4>)
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e002      	b.n	800071a <Encoder_Process+0x86>
	}else{
		home_change_count = 0;
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <Encoder_Process+0xf4>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5 && !reset){
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <Encoder_Process+0xf4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b04      	cmp	r3, #4
 8000720:	dd15      	ble.n	800074e <Encoder_Process+0xba>
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <Encoder_Process+0xf8>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00e      	beq.n	800074e <Encoder_Process+0xba>
		reset = true;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <Encoder_Process+0xf8>)
 8000732:	2201      	movs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
		recent_home_state = home_state;
 8000736:	4a13      	ldr	r2, [pc, #76]	; (8000784 <Encoder_Process+0xf0>)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <Encoder_Process+0xf4>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d102      	bne.n	800074e <Encoder_Process+0xba>
			Encoder_Count = 1;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <Encoder_Process+0xec>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Count > 10){
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <Encoder_Process+0xec>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d902      	bls.n	800075c <Encoder_Process+0xc8>
		reset = false;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <Encoder_Process+0xf8>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		//Encoder_Count = 0;
	}
	if(Encoder_Count > 50){
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <Encoder_Process+0xec>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b32      	cmp	r3, #50	; 0x32
 8000762:	d902      	bls.n	800076a <Encoder_Process+0xd6>
		Encoder_Count = 1;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <Encoder_Process+0xec>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
	}

	return 0;
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40020400 	.word	0x40020400
 8000778:	20000030 	.word	0x20000030
 800077c:	20000034 	.word	0x20000034
 8000780:	2000002c 	.word	0x2000002c
 8000784:	20000038 	.word	0x20000038
 8000788:	2000003c 	.word	0x2000003c
 800078c:	20000040 	.word	0x20000040

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000794:	f001 fabe 	bl	8001d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000798:	f000 f81e 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079c:	f000 faa0 	bl	8000ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007a0:	f000 fa40 	bl	8000c24 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007a4:	f000 f9ea 	bl	8000b7c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007a8:	f000 fa12 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007ac:	f000 f880 	bl	80008b0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80007b0:	f000 f94c 	bl	8000a4c <MX_TIM3_Init>
  MX_TIM1_Init();
 80007b4:	f000 f8aa 	bl	800090c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  
  D_PWM_Init();
 80007b8:	f001 fa96 	bl	8001ce8 <D_PWM_Init>
  appInit();
 80007bc:	f7ff fe9e 	bl	80004fc <appInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 80007c0:	f7ff fea4 	bl	800050c <appTask>
    if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <main+0x44>)
 80007ca:	f002 f9cb 	bl	8002b64 <HAL_GPIO_ReadPin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 80007ce:	f001 f893 	bl	80018f8 <D_Mess_flush>
	  appTask();
 80007d2:	e7f5      	b.n	80007c0 <main+0x30>
 80007d4:	40020800 	.word	0x40020800

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2234      	movs	r2, #52	; 0x34
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 ff9c 	bl	8007724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SystemClock_Config+0xd0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a28      	ldr	r2, [pc, #160]	; (80008a8 <SystemClock_Config+0xd0>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <SystemClock_Config+0xd0>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <SystemClock_Config+0xd4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000824:	4a21      	ldr	r2, [pc, #132]	; (80008ac <SystemClock_Config+0xd4>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <SystemClock_Config+0xd4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800084c:	2308      	movs	r3, #8
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000850:	2350      	movs	r3, #80	; 0x50
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4618      	mov	r0, r3
 8000866:	f004 fa91 	bl	8004d8c <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000870:	f000 face 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2302      	movs	r3, #2
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2102      	movs	r1, #2
 8000890:	4618      	mov	r0, r3
 8000892:	f003 ffaf 	bl	80047f4 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800089c:	f000 fab8 	bl	8000e10 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3750      	adds	r7, #80	; 0x50
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_I2C1_Init+0x50>)
 80008b6:	4a13      	ldr	r2, [pc, #76]	; (8000904 <MX_I2C1_Init+0x54>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_I2C1_Init+0x50>)
 80008bc:	4a12      	ldr	r2, [pc, #72]	; (8000908 <MX_I2C1_Init+0x58>)
 80008be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_I2C1_Init+0x50>)
 80008c8:	2220      	movs	r2, #32
 80008ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_I2C1_Init+0x50>)
 80008ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_I2C1_Init+0x50>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_I2C1_Init+0x50>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_I2C1_Init+0x50>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_I2C1_Init+0x50>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_I2C1_Init+0x50>)
 80008ee:	f002 f96b 	bl	8002bc8 <HAL_I2C_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f8:	f000 fa8a 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200018f4 	.word	0x200018f4
 8000904:	40005400 	.word	0x40005400
 8000908:	000186a0 	.word	0x000186a0

0800090c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	; 0x58
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2220      	movs	r2, #32
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f006 feed 	bl	8007724 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <MX_TIM1_Init+0x138>)
 800094c:	4a3e      	ldr	r2, [pc, #248]	; (8000a48 <MX_TIM1_Init+0x13c>)
 800094e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8000950:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000952:	2203      	movs	r2, #3
 8000954:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <MX_TIM1_Init+0x138>)
 800095e:	2218      	movs	r2, #24
 8000960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000968:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <MX_TIM1_Init+0x138>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b35      	ldr	r3, [pc, #212]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000974:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000976:	f004 fca7 	bl	80052c8 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000980:	f000 fa46 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800098e:	4619      	mov	r1, r3
 8000990:	482c      	ldr	r0, [pc, #176]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000992:	f005 f965 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800099c:	f000 fa38 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a0:	4828      	ldr	r0, [pc, #160]	; (8000a44 <MX_TIM1_Init+0x138>)
 80009a2:	f004 fce0 	bl	8005366 <HAL_TIM_PWM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80009ac:	f000 fa30 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009bc:	4619      	mov	r1, r3
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_TIM1_Init+0x138>)
 80009c0:	f005 fe0a 	bl	80065d8 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80009ca:	f000 fa21 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ce:	2360      	movs	r3, #96	; 0x60
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4814      	ldr	r0, [pc, #80]	; (8000a44 <MX_TIM1_Init+0x138>)
 80009f4:	f005 f872 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80009fe:	f000 fa07 	bl	8000e10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000a26:	f005 fe53 	bl	80066d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000a30:	f000 f9ee 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM1_Init+0x138>)
 8000a36:	f000 fb41 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000a3a:	bf00      	nop
 8000a3c:	3758      	adds	r7, #88	; 0x58
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20001af4 	.word	0x20001af4
 8000a48:	40010000 	.word	0x40010000

08000a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
 8000a78:	615a      	str	r2, [r3, #20]
 8000a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000a7e:	4a3e      	ldr	r2, [pc, #248]	; (8000b78 <MX_TIM3_Init+0x12c>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000a82:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000a84:	224f      	movs	r2, #79	; 0x4f
 8000a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000a90:	f241 3287 	movw	r2, #4999	; 0x1387
 8000a94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aa2:	4834      	ldr	r0, [pc, #208]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000aa4:	f004 fc10 	bl	80052c8 <HAL_TIM_Base_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000aae:	f000 f9af 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abc:	4619      	mov	r1, r3
 8000abe:	482d      	ldr	r0, [pc, #180]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000ac0:	f005 f8ce 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000aca:	f000 f9a1 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ace:	4829      	ldr	r0, [pc, #164]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000ad0:	f004 fc49 	bl	8005366 <HAL_TIM_PWM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ada:	f000 f999 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	4619      	mov	r1, r3
 8000aec:	4821      	ldr	r0, [pc, #132]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000aee:	f005 fd73 	bl	80065d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000af8:	f000 f98a 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afc:	2360      	movs	r3, #96	; 0x60
 8000afe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000b14:	f004 ffe2 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b1e:	f000 f977 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2204      	movs	r2, #4
 8000b26:	4619      	mov	r1, r3
 8000b28:	4812      	ldr	r0, [pc, #72]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000b2a:	f004 ffd7 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000b34:	f000 f96c 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000b40:	f004 ffcc 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000b4a:	f000 f961 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	220c      	movs	r2, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000b56:	f004 ffc1 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000b60:	f000 f956 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <MX_TIM3_Init+0x128>)
 8000b66:	f000 faa9 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000b6a:	bf00      	nop
 8000b6c:	3738      	adds	r7, #56	; 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20001948 	.word	0x20001948
 8000b78:	40000400 	.word	0x40000400

08000b7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART1_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	f005 fdde 	bl	8006774 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f927 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20001ab0 	.word	0x20001ab0
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <MX_USART2_UART_Init+0x50>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c08:	f005 fdb4 	bl	8006774 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c12:	f000 f8fd 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20001b9c 	.word	0x20001b9c
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_DMA_Init+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <MX_DMA_Init+0xb8>)
 8000c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_DMA_Init+0xb8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <MX_DMA_Init+0xb8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <MX_DMA_Init+0xb8>)
 8000c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_DMA_Init+0xb8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	200b      	movs	r0, #11
 8000c68:	f001 f9a1 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c6c:	200b      	movs	r0, #11
 8000c6e:	f001 f9ba 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2010      	movs	r0, #16
 8000c78:	f001 f999 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c7c:	2010      	movs	r0, #16
 8000c7e:	f001 f9b2 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2011      	movs	r0, #17
 8000c88:	f001 f991 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c8c:	2011      	movs	r0, #17
 8000c8e:	f001 f9aa 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	202f      	movs	r0, #47	; 0x2f
 8000c98:	f001 f989 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c9c:	202f      	movs	r0, #47	; 0x2f
 8000c9e:	f001 f9a2 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2039      	movs	r0, #57	; 0x39
 8000ca8:	f001 f981 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cac:	2039      	movs	r0, #57	; 0x39
 8000cae:	f001 f99a 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	203a      	movs	r0, #58	; 0x3a
 8000cb8:	f001 f979 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cbc:	203a      	movs	r0, #58	; 0x3a
 8000cbe:	f001 f992 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2046      	movs	r0, #70	; 0x46
 8000cc8:	f001 f971 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ccc:	2046      	movs	r0, #70	; 0x46
 8000cce:	f001 f98a 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b33      	ldr	r3, [pc, #204]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a32      	ldr	r2, [pc, #200]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a2b      	ldr	r2, [pc, #172]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_GPIO_Init+0xe8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2120      	movs	r1, #32
 8000d6a:	4818      	ldr	r0, [pc, #96]	; (8000dcc <MX_GPIO_Init+0xec>)
 8000d6c:	f001 ff12 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_GPIO_Init+0xf0>)
 8000d88:	f001 fd58 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d8c:	2320      	movs	r3, #32
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	480a      	ldr	r0, [pc, #40]	; (8000dcc <MX_GPIO_Init+0xec>)
 8000da4:	f001 fd4a 	bl	800283c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000da8:	2330      	movs	r3, #48	; 0x30
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <MX_GPIO_Init+0xf4>)
 8000dbc:	f001 fd3e 	bl	800283c <HAL_GPIO_Init>

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_UART_TxCpltCallback+0x20>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8000dea:	f000 fdb7 	bl	800195c <D_Mess_TransitionCompletedCallBack>
  }
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400

08000dfc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  //busy = false;
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
  //HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	//datasentflag=1;
  D_LED_Callback();
 8000e04:	f000 fd48 	bl	8001898 <D_LED_Callback>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f001 f89c 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a50      	ldr	r2, [pc, #320]	; (8000fcc <HAL_I2C_MspInit+0x160>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	f040 8099 	bne.w	8000fc2 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	4b4e      	ldr	r3, [pc, #312]	; (8000fd0 <HAL_I2C_MspInit+0x164>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <HAL_I2C_MspInit+0x164>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <HAL_I2C_MspInit+0x164>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb2:	2312      	movs	r3, #18
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4842      	ldr	r0, [pc, #264]	; (8000fd4 <HAL_I2C_MspInit+0x168>)
 8000eca:	f001 fcb7 	bl	800283c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b3f      	ldr	r3, [pc, #252]	; (8000fd0 <HAL_I2C_MspInit+0x164>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	4a3e      	ldr	r2, [pc, #248]	; (8000fd0 <HAL_I2C_MspInit+0x164>)
 8000ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000edc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ede:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <HAL_I2C_MspInit+0x164>)
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000eea:	4b3b      	ldr	r3, [pc, #236]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000eec:	4a3b      	ldr	r2, [pc, #236]	; (8000fdc <HAL_I2C_MspInit+0x170>)
 8000eee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ef0:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ef6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef8:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f04:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f18:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f2a:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f2c:	f001 f876 	bl	800201c <HAL_DMA_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000f36:	f7ff ff6b 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f40:	4a25      	ldr	r2, [pc, #148]	; (8000fd8 <HAL_I2C_MspInit+0x16c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <HAL_I2C_MspInit+0x178>)
 8000f4a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f52:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f54:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f66:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f86:	4816      	ldr	r0, [pc, #88]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f88:	f001 f848 	bl	800201c <HAL_DMA_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000f92:	f7ff ff3d 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9c:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <HAL_I2C_MspInit+0x174>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201f      	movs	r0, #31
 8000fa8:	f001 f801 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fac:	201f      	movs	r0, #31
 8000fae:	f001 f81a 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2020      	movs	r0, #32
 8000fb8:	f000 fff9 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fbc:	2020      	movs	r0, #32
 8000fbe:	f001 f812 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	20001b3c 	.word	0x20001b3c
 8000fdc:	40026010 	.word	0x40026010
 8000fe0:	20001894 	.word	0x20001894
 8000fe4:	400260b8 	.word	0x400260b8

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_TIM_Base_MspInit+0xc0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d13e      	bne.n	8001078 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	; (80010ac <HAL_TIM_Base_MspInit+0xc4>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <HAL_TIM_Base_MspInit+0xc4>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <HAL_TIM_Base_MspInit+0xc4>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001016:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001018:	4a26      	ldr	r2, [pc, #152]	; (80010b4 <HAL_TIM_Base_MspInit+0xcc>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 800101e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001022:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001036:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 800103a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800103e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001046:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800105a:	4815      	ldr	r0, [pc, #84]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 800105c:	f000 ffde 	bl	800201c <HAL_DMA_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001066:	f7ff fed3 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
 8001070:	4a0f      	ldr	r2, [pc, #60]	; (80010b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001076:	e012      	b.n	800109e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_TIM_Base_MspInit+0xd0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10d      	bne.n	800109e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_TIM_Base_MspInit+0xc4>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_TIM_Base_MspInit+0xc4>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_TIM_Base_MspInit+0xc4>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	200017d4 	.word	0x200017d4
 80010b4:	40026428 	.word	0x40026428
 80010b8:	40000400 	.word	0x40000400

080010bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <HAL_TIM_MspPostInit+0xec>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d11f      	bne.n	800111e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800110c:	2301      	movs	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <HAL_TIM_MspPostInit+0xf4>)
 8001118:	f001 fb90 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800111c:	e040      	b.n	80011a0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a24      	ldr	r2, [pc, #144]	; (80011b4 <HAL_TIM_MspPostInit+0xf8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d13b      	bne.n	80011a0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_TIM_MspPostInit+0xf0>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001160:	23c0      	movs	r3, #192	; 0xc0
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001170:	2302      	movs	r3, #2
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <HAL_TIM_MspPostInit+0xf4>)
 800117c:	f001 fb5e 	bl	800283c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001180:	2303      	movs	r3, #3
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001190:	2302      	movs	r3, #2
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <HAL_TIM_MspPostInit+0xfc>)
 800119c:	f001 fb4e 	bl	800283c <HAL_GPIO_Init>
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40000400 	.word	0x40000400
 80011b8:	40020400 	.word	0x40020400

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a97      	ldr	r2, [pc, #604]	; (8001438 <HAL_UART_MspInit+0x27c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	f040 8092 	bne.w	8001304 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	4b95      	ldr	r3, [pc, #596]	; (800143c <HAL_UART_MspInit+0x280>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	4a94      	ldr	r2, [pc, #592]	; (800143c <HAL_UART_MspInit+0x280>)
 80011ea:	f043 0310 	orr.w	r3, r3, #16
 80011ee:	6453      	str	r3, [r2, #68]	; 0x44
 80011f0:	4b92      	ldr	r3, [pc, #584]	; (800143c <HAL_UART_MspInit+0x280>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f003 0310 	and.w	r3, r3, #16
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	4b8e      	ldr	r3, [pc, #568]	; (800143c <HAL_UART_MspInit+0x280>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a8d      	ldr	r2, [pc, #564]	; (800143c <HAL_UART_MspInit+0x280>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b8b      	ldr	r3, [pc, #556]	; (800143c <HAL_UART_MspInit+0x280>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001218:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800122a:	2307      	movs	r3, #7
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4882      	ldr	r0, [pc, #520]	; (8001440 <HAL_UART_MspInit+0x284>)
 8001236:	f001 fb01 	bl	800283c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800123a:	4b82      	ldr	r3, [pc, #520]	; (8001444 <HAL_UART_MspInit+0x288>)
 800123c:	4a82      	ldr	r2, [pc, #520]	; (8001448 <HAL_UART_MspInit+0x28c>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001240:	4b80      	ldr	r3, [pc, #512]	; (8001444 <HAL_UART_MspInit+0x288>)
 8001242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001246:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <HAL_UART_MspInit+0x288>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <HAL_UART_MspInit+0x288>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b7b      	ldr	r3, [pc, #492]	; (8001444 <HAL_UART_MspInit+0x288>)
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125c:	4b79      	ldr	r3, [pc, #484]	; (8001444 <HAL_UART_MspInit+0x288>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001262:	4b78      	ldr	r3, [pc, #480]	; (8001444 <HAL_UART_MspInit+0x288>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001268:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_UART_MspInit+0x288>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b75      	ldr	r3, [pc, #468]	; (8001444 <HAL_UART_MspInit+0x288>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_UART_MspInit+0x288>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800127a:	4872      	ldr	r0, [pc, #456]	; (8001444 <HAL_UART_MspInit+0x288>)
 800127c:	f000 fece 	bl	800201c <HAL_DMA_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001286:	f7ff fdc3 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a6d      	ldr	r2, [pc, #436]	; (8001444 <HAL_UART_MspInit+0x288>)
 800128e:	639a      	str	r2, [r3, #56]	; 0x38
 8001290:	4a6c      	ldr	r2, [pc, #432]	; (8001444 <HAL_UART_MspInit+0x288>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001296:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_UART_MspInit+0x290>)
 8001298:	4a6d      	ldr	r2, [pc, #436]	; (8001450 <HAL_UART_MspInit+0x294>)
 800129a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800129c:	4b6b      	ldr	r3, [pc, #428]	; (800144c <HAL_UART_MspInit+0x290>)
 800129e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a4:	4b69      	ldr	r3, [pc, #420]	; (800144c <HAL_UART_MspInit+0x290>)
 80012a6:	2240      	movs	r2, #64	; 0x40
 80012a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012aa:	4b68      	ldr	r3, [pc, #416]	; (800144c <HAL_UART_MspInit+0x290>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <HAL_UART_MspInit+0x290>)
 80012b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b8:	4b64      	ldr	r3, [pc, #400]	; (800144c <HAL_UART_MspInit+0x290>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012be:	4b63      	ldr	r3, [pc, #396]	; (800144c <HAL_UART_MspInit+0x290>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012c4:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_UART_MspInit+0x290>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012ca:	4b60      	ldr	r3, [pc, #384]	; (800144c <HAL_UART_MspInit+0x290>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d0:	4b5e      	ldr	r3, [pc, #376]	; (800144c <HAL_UART_MspInit+0x290>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012d6:	485d      	ldr	r0, [pc, #372]	; (800144c <HAL_UART_MspInit+0x290>)
 80012d8:	f000 fea0 	bl	800201c <HAL_DMA_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80012e2:	f7ff fd95 	bl	8000e10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a58      	ldr	r2, [pc, #352]	; (800144c <HAL_UART_MspInit+0x290>)
 80012ea:	635a      	str	r2, [r3, #52]	; 0x34
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_UART_MspInit+0x290>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2025      	movs	r0, #37	; 0x25
 80012f8:	f000 fe59 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fc:	2025      	movs	r0, #37	; 0x25
 80012fe:	f000 fe72 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001302:	e095      	b.n	8001430 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a52      	ldr	r2, [pc, #328]	; (8001454 <HAL_UART_MspInit+0x298>)
 800130a:	4293      	cmp	r3, r2
 800130c:	f040 8090 	bne.w	8001430 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	4b49      	ldr	r3, [pc, #292]	; (800143c <HAL_UART_MspInit+0x280>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_UART_MspInit+0x280>)
 800131a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b46      	ldr	r3, [pc, #280]	; (800143c <HAL_UART_MspInit+0x280>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b42      	ldr	r3, [pc, #264]	; (800143c <HAL_UART_MspInit+0x280>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a41      	ldr	r2, [pc, #260]	; (800143c <HAL_UART_MspInit+0x280>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b3f      	ldr	r3, [pc, #252]	; (800143c <HAL_UART_MspInit+0x280>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001348:	230c      	movs	r3, #12
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001358:	2307      	movs	r3, #7
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4837      	ldr	r0, [pc, #220]	; (8001440 <HAL_UART_MspInit+0x284>)
 8001364:	f001 fa6a 	bl	800283c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001368:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_UART_MspInit+0x29c>)
 800136a:	4a3c      	ldr	r2, [pc, #240]	; (800145c <HAL_UART_MspInit+0x2a0>)
 800136c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_UART_MspInit+0x29c>)
 8001370:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001374:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_UART_MspInit+0x29c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_UART_MspInit+0x29c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_UART_MspInit+0x29c>)
 8001384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001388:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_UART_MspInit+0x29c>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_UART_MspInit+0x29c>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_UART_MspInit+0x29c>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_UART_MspInit+0x29c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_UART_MspInit+0x29c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013a8:	482b      	ldr	r0, [pc, #172]	; (8001458 <HAL_UART_MspInit+0x29c>)
 80013aa:	f000 fe37 	bl	800201c <HAL_DMA_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80013b4:	f7ff fd2c 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a27      	ldr	r2, [pc, #156]	; (8001458 <HAL_UART_MspInit+0x29c>)
 80013bc:	639a      	str	r2, [r3, #56]	; 0x38
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <HAL_UART_MspInit+0x29c>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013c6:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_UART_MspInit+0x2a8>)
 80013c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80013ca:	4b25      	ldr	r3, [pc, #148]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001404:	4816      	ldr	r0, [pc, #88]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 8001406:	f000 fe09 	bl	800201c <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001410:	f7ff fcfe 	bl	8000e10 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 8001418:	635a      	str	r2, [r3, #52]	; 0x34
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_UART_MspInit+0x2a4>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	2026      	movs	r0, #38	; 0x26
 8001426:	f000 fdc2 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800142a:	2026      	movs	r0, #38	; 0x26
 800142c:	f000 fddb 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
}
 8001430:	bf00      	nop
 8001432:	3730      	adds	r7, #48	; 0x30
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40011000 	.word	0x40011000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000
 8001444:	200019f0 	.word	0x200019f0
 8001448:	40026440 	.word	0x40026440
 800144c:	20001990 	.word	0x20001990
 8001450:	400264b8 	.word	0x400264b8
 8001454:	40004400 	.word	0x40004400
 8001458:	20001834 	.word	0x20001834
 800145c:	40026088 	.word	0x40026088
 8001460:	20001a50 	.word	0x20001a50
 8001464:	400260a0 	.word	0x400260a0

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 fc80 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <SysTick_Handler+0x18>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a02      	ldr	r2, [pc, #8]	; (80014c8 <SysTick_Handler+0x18>)
 80014c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000044 	.word	0x20000044

080014cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <DMA1_Stream0_IRQHandler+0x10>)
 80014d2:	f000 ff3b 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20001b3c 	.word	0x20001b3c

080014e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <DMA1_Stream5_IRQHandler+0x10>)
 80014e6:	f000 ff31 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20001834 	.word	0x20001834

080014f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA1_Stream6_IRQHandler+0x10>)
 80014fa:	f000 ff27 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20001a50 	.word	0x20001a50

08001508 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <I2C1_EV_IRQHandler+0x10>)
 800150e:	f001 fc9f 	bl	8002e50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200018f4 	.word	0x200018f4

0800151c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <I2C1_ER_IRQHandler+0x10>)
 8001522:	f001 fe06 	bl	8003132 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200018f4 	.word	0x200018f4

08001530 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <USART1_IRQHandler+0x10>)
 8001536:	f005 f9e9 	bl	800690c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20001ab0 	.word	0x20001ab0

08001544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <USART2_IRQHandler+0x10>)
 800154a:	f005 f9df 	bl	800690c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20001b9c 	.word	0x20001b9c

08001558 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DMA1_Stream7_IRQHandler+0x10>)
 800155e:	f000 fef5 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20001894 	.word	0x20001894

0800156c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <DMA2_Stream1_IRQHandler+0x10>)
 8001572:	f000 feeb 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200017d4 	.word	0x200017d4

08001580 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA2_Stream2_IRQHandler+0x10>)
 8001586:	f000 fee1 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200019f0 	.word	0x200019f0

08001594 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <DMA2_Stream7_IRQHandler+0x10>)
 800159a:	f000 fed7 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20001990 	.word	0x20001990

080015a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <SystemInit+0x20>)
 80015ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <SystemInit+0x20>)
 80015b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015f6:	f7ff ffd7 	bl	80015a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f006 f86f 	bl	80076dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff f8c7 	bl	8000790 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001610:	08007794 	.word	0x08007794
  ldr r2, =_sbss
 8001614:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001618:	20001d80 	.word	0x20001d80

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>

0800161e <D_GPIO_Read>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
}

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 fa98 	bl	8002b64 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <D_LED_Set>:
uint8_t LED_Temp[LED_NUM][4];
volatile bool _dataSent= false;
static uint32_t pwmData[(24*LED_NUM)+50];

void D_LED_Set(int LEDnum, int Red, int Green, int Blue)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	b2d9      	uxtb	r1, r3
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <D_LED_Set+0x58>)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	b2d9      	uxtb	r1, r3
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <D_LED_Set+0x58>)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	460a      	mov	r2, r1
 8001670:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	b2d9      	uxtb	r1, r3
 8001676:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <D_LED_Set+0x58>)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	460a      	mov	r2, r1
 8001680:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2d9      	uxtb	r1, r3
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <D_LED_Set+0x58>)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	460a      	mov	r2, r1
 8001690:	70da      	strb	r2, [r3, #3]
}
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20001be0 	.word	0x20001be0

080016a4 <D_LED_Send>:

void D_LED_Send(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int j= 0; j<LED_NUM; j++)
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	e036      	b.n	8001722 <D_LED_Send+0x7e>
	{
		color = ((LED_Data[j][1]<<16) | (LED_Data[j][2]<<8) | (LED_Data[j][3]));
 80016b4:	4a31      	ldr	r2, [pc, #196]	; (800177c <D_LED_Send+0xd8>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	041a      	lsls	r2, r3, #16
 80016c0:	492e      	ldr	r1, [pc, #184]	; (800177c <D_LED_Send+0xd8>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	789b      	ldrb	r3, [r3, #2]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	431a      	orrs	r2, r3
 80016ce:	492b      	ldr	r1, [pc, #172]	; (800177c <D_LED_Send+0xd8>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	78db      	ldrb	r3, [r3, #3]
 80016d8:	4313      	orrs	r3, r2
 80016da:	607b      	str	r3, [r7, #4]
		for (int i=23; i>=0; i--)
 80016dc:	2317      	movs	r3, #23
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e019      	b.n	8001716 <D_LED_Send+0x72>
		{
			if (color&(1<<i))
 80016e2:	2201      	movs	r2, #1
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	461a      	mov	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <D_LED_Send+0x5c>
			{
				pwmData[indx] = 15;  // 2/3 of 25
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <D_LED_Send+0xdc>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	210f      	movs	r1, #15
 80016fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016fe:	e004      	b.n	800170a <D_LED_Send+0x66>
			}
			else pwmData[indx] = 7;  // 1/3 of 25
 8001700:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <D_LED_Send+0xdc>)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2107      	movs	r1, #7
 8001706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			indx++;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	3b01      	subs	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dae2      	bge.n	80016e2 <D_LED_Send+0x3e>
	for (int j= 0; j<LED_NUM; j++)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3301      	adds	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2b31      	cmp	r3, #49	; 0x31
 8001726:	ddc5      	ble.n	80016b4 <D_LED_Send+0x10>
		}
	}

	for (int i=0; i<50; i++)
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	e00a      	b.n	8001744 <D_LED_Send+0xa0>
	{
		pwmData[indx] = 0;
 800172e:	4a14      	ldr	r2, [pc, #80]	; (8001780 <D_LED_Send+0xdc>)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2100      	movs	r1, #0
 8001734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	3301      	adds	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b31      	cmp	r3, #49	; 0x31
 8001748:	ddf1      	ble.n	800172e <D_LED_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx*2);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	b29b      	uxth	r3, r3
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	b29b      	uxth	r3, r3
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <D_LED_Send+0xdc>)
 8001754:	2100      	movs	r1, #0
 8001756:	480b      	ldr	r0, [pc, #44]	; (8001784 <D_LED_Send+0xe0>)
 8001758:	f003 ff26 	bl	80055a8 <HAL_TIM_PWM_Start_DMA>
	while (!_dataSent){};
 800175c:	bf00      	nop
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <D_LED_Send+0xe4>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f083 0301 	eor.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f7      	bne.n	800175e <D_LED_Send+0xba>
	_dataSent = false;
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <D_LED_Send+0xe4>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20001be0 	.word	0x20001be0
 8001780:	2000004c 	.word	0x2000004c
 8001784:	20001af4 	.word	0x20001af4
 8001788:	20000048 	.word	0x20000048

0800178c <D_LED_Rotate>:

void D_LED_Rotate(int num){
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	int indx = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
	for(int i=0;i<LED_NUM; i++){
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	e03b      	b.n	8001816 <D_LED_Rotate+0x8a>
		indx = i + num;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
		if(indx >= LED_NUM){
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b31      	cmp	r3, #49	; 0x31
 80017aa:	dd02      	ble.n	80017b2 <D_LED_Rotate+0x26>
			indx -= 50;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3b32      	subs	r3, #50	; 0x32
 80017b0:	617b      	str	r3, [r7, #20]
		}
		if(indx < 0){
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da02      	bge.n	80017be <D_LED_Rotate+0x32>
			indx += 50;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3332      	adds	r3, #50	; 0x32
 80017bc:	617b      	str	r3, [r7, #20]
		}
		LED_Temp[i][0] = LED_Data[indx][0];
 80017be:	4a34      	ldr	r2, [pc, #208]	; (8001890 <D_LED_Rotate+0x104>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80017c6:	4a33      	ldr	r2, [pc, #204]	; (8001894 <D_LED_Rotate+0x108>)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Temp[i][1] = LED_Data[indx][1];
 80017ce:	4a30      	ldr	r2, [pc, #192]	; (8001890 <D_LED_Rotate+0x104>)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	7859      	ldrb	r1, [r3, #1]
 80017d8:	4a2e      	ldr	r2, [pc, #184]	; (8001894 <D_LED_Rotate+0x108>)
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	460a      	mov	r2, r1
 80017e2:	705a      	strb	r2, [r3, #1]
		LED_Temp[i][2] = LED_Data[indx][2];
 80017e4:	4a2a      	ldr	r2, [pc, #168]	; (8001890 <D_LED_Rotate+0x104>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	7899      	ldrb	r1, [r3, #2]
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <D_LED_Rotate+0x108>)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	460a      	mov	r2, r1
 80017f8:	709a      	strb	r2, [r3, #2]
		LED_Temp[i][3] = LED_Data[indx][3];
 80017fa:	4a25      	ldr	r2, [pc, #148]	; (8001890 <D_LED_Rotate+0x104>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	78d9      	ldrb	r1, [r3, #3]
 8001804:	4a23      	ldr	r2, [pc, #140]	; (8001894 <D_LED_Rotate+0x108>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	460a      	mov	r2, r1
 800180e:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3301      	adds	r3, #1
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b31      	cmp	r3, #49	; 0x31
 800181a:	ddc0      	ble.n	800179e <D_LED_Rotate+0x12>
	}
	for(int i=0;i<LED_NUM; i++){
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e02b      	b.n	800187a <D_LED_Rotate+0xee>
		LED_Data[i][0] = LED_Temp[i][0];
 8001822:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <D_LED_Rotate+0x108>)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 800182a:	4a19      	ldr	r2, [pc, #100]	; (8001890 <D_LED_Rotate+0x104>)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = LED_Temp[i][1];
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <D_LED_Rotate+0x108>)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	7859      	ldrb	r1, [r3, #1]
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <D_LED_Rotate+0x104>)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	460a      	mov	r2, r1
 8001846:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = LED_Temp[i][2];
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <D_LED_Rotate+0x108>)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	7899      	ldrb	r1, [r3, #2]
 8001852:	4a0f      	ldr	r2, [pc, #60]	; (8001890 <D_LED_Rotate+0x104>)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	460a      	mov	r2, r1
 800185c:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = LED_Temp[i][3];
 800185e:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <D_LED_Rotate+0x108>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	78d9      	ldrb	r1, [r3, #3]
 8001868:	4a09      	ldr	r2, [pc, #36]	; (8001890 <D_LED_Rotate+0x104>)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	460a      	mov	r2, r1
 8001872:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b31      	cmp	r3, #49	; 0x31
 800187e:	ddd0      	ble.n	8001822 <D_LED_Rotate+0x96>
	}
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20001be0 	.word	0x20001be0
 8001894:	20001ca8 	.word	0x20001ca8

08001898 <D_LED_Callback>:

void D_LED_Callback(void){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800189c:	2100      	movs	r1, #0
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <D_LED_Callback+0x18>)
 80018a0:	f004 f84a 	bl	8005938 <HAL_TIM_PWM_Stop_DMA>
    _dataSent = true;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <D_LED_Callback+0x1c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20001af4 	.word	0x20001af4
 80018b4:	20000048 	.word	0x20000048

080018b8 <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 80018b8:	b40f      	push	{r0, r1, r2, r3}
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	6938      	ldr	r0, [r7, #16]
 80018ca:	f000 f891 	bl	80019f0 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <D_Mess_printf+0x38>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <D_Mess_printf+0x3c>)
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80018da:	dd01      	ble.n	80018e0 <D_Mess_printf+0x28>
	  D_Mess_flush();
 80018dc:	f000 f80c 	bl	80018f8 <D_Mess_flush>
  }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018ea:	b004      	add	sp, #16
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20001d78 	.word	0x20001d78
 80018f4:	200013d4 	.word	0x200013d4

080018f8 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <D_Mess_flush+0x54>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f083 0301 	eor.w	r3, r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <D_Mess_flush+0x1c>
		outptr = buff;
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <D_Mess_flush+0x58>)
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <D_Mess_flush+0x5c>)
 8001910:	601a      	str	r2, [r3, #0]
		return;
 8001912:	e01a      	b.n	800194a <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <D_Mess_flush+0x58>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <D_Mess_flush+0x58>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	490b      	ldr	r1, [pc, #44]	; (8001950 <D_Mess_flush+0x58>)
 8001924:	600a      	str	r2, [r1, #0]
 8001926:	220a      	movs	r2, #10
 8001928:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <D_Mess_flush+0x58>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <D_Mess_flush+0x5c>)
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4907      	ldr	r1, [pc, #28]	; (8001954 <D_Mess_flush+0x5c>)
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <D_Mess_flush+0x60>)
 800193a:	f004 ff69 	bl	8006810 <HAL_UART_Transmit_DMA>
		had_completed = false;
 800193e:	4b03      	ldr	r3, [pc, #12]	; (800194c <D_Mess_flush+0x54>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <D_Mess_flush+0x58>)
 8001946:	4a03      	ldr	r2, [pc, #12]	; (8001954 <D_Mess_flush+0x5c>)
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000004 	.word	0x20000004
 8001950:	20001d78 	.word	0x20001d78
 8001954:	200013d4 	.word	0x200013d4
 8001958:	20001b9c 	.word	0x20001b9c

0800195c <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  had_completed = true;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <D_Mess_TransitionCompletedCallBack+0x14>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	20000004 	.word	0x20000004

08001974 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b0a      	cmp	r3, #10
 8001982:	d102      	bne.n	800198a <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 8001984:	200d      	movs	r0, #13
 8001986:	f7ff fff5 	bl	8001974 <xputc>
  }
  if( outptr ){
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <xputc+0x48>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <xputc+0x48>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	4908      	ldr	r1, [pc, #32]	; (80019bc <xputc+0x48>)
 800199a:	600a      	str	r2, [r1, #0]
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	701a      	strb	r2, [r3, #0]
    return;
 80019a0:	e008      	b.n	80019b4 <xputc+0x40>
  }

  if( xfunc_out ){
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <xputc+0x4c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <xputc+0x40>
    xfunc_out((unsigned char)c);
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <xputc+0x4c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	4610      	mov	r0, r2
 80019b2:	4798      	blx	r3
  }
}
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20001d78 	.word	0x20001d78
 80019c0:	20001d74 	.word	0x20001d74

080019c4 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  while( *str ){
 80019cc:	e006      	b.n	80019dc <xputs+0x18>
    xputc(*str++);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ffcc 	bl	8001974 <xputc>
  while( *str ){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f4      	bne.n	80019ce <xputs+0xa>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 8001a04:	7ffb      	ldrb	r3, [r7, #31]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8167 	beq.w	8001cda <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 8001a0c:	7ffb      	ldrb	r3, [r7, #31]
 8001a0e:	2b25      	cmp	r3, #37	; 0x25
 8001a10:	d004      	beq.n	8001a1c <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ffad 	bl	8001974 <xputc>
 8001a1a:	e15d      	b.n	8001cd8 <xvprintf+0x2e8>
    }
    f = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	2b30      	cmp	r3, #48	; 0x30
 8001a2e:	d107      	bne.n	8001a40 <xvprintf+0x50>
      f = 1; c = *fmt++;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	77fb      	strb	r3, [r7, #31]
 8001a3e:	e009      	b.n	8001a54 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 8001a40:	7ffb      	ldrb	r3, [r7, #31]
 8001a42:	2b2d      	cmp	r3, #45	; 0x2d
 8001a44:	d106      	bne.n	8001a54 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 8001a46:	2302      	movs	r3, #2
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	607a      	str	r2, [r7, #4]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a58:	e00e      	b.n	8001a78 <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 8001a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	461a      	mov	r2, r3
 8001a66:	7ffb      	ldrb	r3, [r7, #31]
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b30      	subs	r3, #48	; 0x30
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	77fb      	strb	r3, [r7, #31]
 8001a78:	7ffb      	ldrb	r3, [r7, #31]
 8001a7a:	2b2f      	cmp	r3, #47	; 0x2f
 8001a7c:	d902      	bls.n	8001a84 <xvprintf+0x94>
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	2b39      	cmp	r3, #57	; 0x39
 8001a82:	d9ea      	bls.n	8001a5a <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 8001a84:	7ffb      	ldrb	r3, [r7, #31]
 8001a86:	2b6c      	cmp	r3, #108	; 0x6c
 8001a88:	d002      	beq.n	8001a90 <xvprintf+0xa0>
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	2b4c      	cmp	r3, #76	; 0x4c
 8001a8e:	d108      	bne.n	8001aa2 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 8001aa2:	7ffb      	ldrb	r3, [r7, #31]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 811a 	beq.w	8001cde <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 8001aaa:	7ffb      	ldrb	r3, [r7, #31]
 8001aac:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 8001aae:	7fbb      	ldrb	r3, [r7, #30]
 8001ab0:	2b60      	cmp	r3, #96	; 0x60
 8001ab2:	d902      	bls.n	8001aba <xvprintf+0xca>
      d -= 0x20;
 8001ab4:	7fbb      	ldrb	r3, [r7, #30]
 8001ab6:	3b20      	subs	r3, #32
 8001ab8:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 8001aba:	7fbb      	ldrb	r3, [r7, #30]
 8001abc:	3b42      	subs	r3, #66	; 0x42
 8001abe:	2b16      	cmp	r3, #22
 8001ac0:	d873      	bhi.n	8001baa <xvprintf+0x1ba>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <xvprintf+0xd8>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001b93 	.word	0x08001b93
 8001acc:	08001b81 	.word	0x08001b81
 8001ad0:	08001b9f 	.word	0x08001b9f
 8001ad4:	08001bab 	.word	0x08001bab
 8001ad8:	08001bab 	.word	0x08001bab
 8001adc:	08001bab 	.word	0x08001bab
 8001ae0:	08001bab 	.word	0x08001bab
 8001ae4:	08001bab 	.word	0x08001bab
 8001ae8:	08001bab 	.word	0x08001bab
 8001aec:	08001bab 	.word	0x08001bab
 8001af0:	08001bab 	.word	0x08001bab
 8001af4:	08001bab 	.word	0x08001bab
 8001af8:	08001bab 	.word	0x08001bab
 8001afc:	08001b99 	.word	0x08001b99
 8001b00:	08001bab 	.word	0x08001bab
 8001b04:	08001bab 	.word	0x08001bab
 8001b08:	08001bab 	.word	0x08001bab
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001bab 	.word	0x08001bab
 8001b14:	08001b9f 	.word	0x08001b9f
 8001b18:	08001bab 	.word	0x08001bab
 8001b1c:	08001bab 	.word	0x08001bab
 8001b20:	08001ba5 	.word	0x08001ba5
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	1d1a      	adds	r2, r3, #4
 8001b28:	603a      	str	r2, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 8001b2e:	2300      	movs	r3, #0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b32:	e002      	b.n	8001b3a <xvprintf+0x14a>
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	3301      	adds	r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	4413      	add	r3, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f6      	bne.n	8001b34 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 8001b46:	e002      	b.n	8001b4e <xvprintf+0x15e>
        xputc(' ');
 8001b48:	2020      	movs	r0, #32
 8001b4a:	f7ff ff13 	bl	8001974 <xputc>
      while( !( f & 2 ) && j++ < w ){
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <xvprintf+0x174>
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f1      	bhi.n	8001b48 <xvprintf+0x158>
      }
      xputs(p);
 8001b64:	69b8      	ldr	r0, [r7, #24]
 8001b66:	f7ff ff2d 	bl	80019c4 <xputs>
      while( j++ < w ){
 8001b6a:	e002      	b.n	8001b72 <xvprintf+0x182>
        xputc(' ');
 8001b6c:	2020      	movs	r0, #32
 8001b6e:	f7ff ff01 	bl	8001974 <xputc>
      while( j++ < w ){
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d8f6      	bhi.n	8001b6c <xvprintf+0x17c>
      }
      continue;
 8001b7e:	e0ab      	b.n	8001cd8 <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	603a      	str	r2, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fef2 	bl	8001974 <xputc>
 8001b90:	e0a2      	b.n	8001cd8 <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 8001b92:	2302      	movs	r3, #2
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
 8001b96:	e00d      	b.n	8001bb4 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9c:	e00a      	b.n	8001bb4 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba2:	e007      	b.n	8001bb4 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba8:	e004      	b.n	8001bb4 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fee1 	bl	8001974 <xputc>
 8001bb2:	e091      	b.n	8001cd8 <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <xvprintf+0x1d8>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	603a      	str	r2, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e00b      	b.n	8001be0 <xvprintf+0x1f0>
 8001bc8:	7fbb      	ldrb	r3, [r7, #30]
 8001bca:	2b44      	cmp	r3, #68	; 0x44
 8001bcc:	d104      	bne.n	8001bd8 <xvprintf+0x1e8>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	1d1a      	adds	r2, r3, #4
 8001bd2:	603a      	str	r2, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	e003      	b.n	8001be0 <xvprintf+0x1f0>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	1d1a      	adds	r2, r3, #4
 8001bdc:	603a      	str	r2, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8001be2:	7fbb      	ldrb	r3, [r7, #30]
 8001be4:	2b44      	cmp	r3, #68	; 0x44
 8001be6:	d109      	bne.n	8001bfc <xvprintf+0x20c>
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da06      	bge.n	8001bfc <xvprintf+0x20c>
      v = 0 - v;
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	623b      	str	r3, [r7, #32]
      f |= 8;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c04:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c0a:	fb01 f202 	mul.w	r2, r1, r2
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	77bb      	strb	r3, [r7, #30]
 8001c12:	6a3a      	ldr	r2, [r7, #32]
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 8001c1c:	7fbb      	ldrb	r3, [r7, #30]
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	d908      	bls.n	8001c34 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8001c22:	7ffb      	ldrb	r3, [r7, #31]
 8001c24:	2b78      	cmp	r3, #120	; 0x78
 8001c26:	d101      	bne.n	8001c2c <xvprintf+0x23c>
 8001c28:	2227      	movs	r2, #39	; 0x27
 8001c2a:	e000      	b.n	8001c2e <xvprintf+0x23e>
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	7fbb      	ldrb	r3, [r7, #30]
 8001c30:	4413      	add	r3, r2
 8001c32:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	633a      	str	r2, [r7, #48]	; 0x30
 8001c3a:	7fba      	ldrb	r2, [r7, #30]
 8001c3c:	3230      	adds	r2, #48	; 0x30
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c44:	440b      	add	r3, r1
 8001c46:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <xvprintf+0x266>
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	2b0f      	cmp	r3, #15
 8001c54:	d9d4      	bls.n	8001c00 <xvprintf+0x210>
    if( f & 8 ){
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <xvprintf+0x282>
      s[i++] = '-';
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	633a      	str	r2, [r7, #48]	; 0x30
 8001c66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c6a:	4413      	add	r3, r2
 8001c6c:	222d      	movs	r2, #45	; 0x2d
 8001c6e:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 8001c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <xvprintf+0x294>
 8001c80:	2330      	movs	r3, #48	; 0x30
 8001c82:	e000      	b.n	8001c86 <xvprintf+0x296>
 8001c84:	2320      	movs	r3, #32
 8001c86:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8001c88:	e003      	b.n	8001c92 <xvprintf+0x2a2>
      xputc(d);
 8001c8a:	7fbb      	ldrb	r3, [r7, #30]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fe71 	bl	8001974 <xputc>
    while( !( f & 2 ) && j++ < w ){
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <xvprintf+0x2b8>
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f0      	bhi.n	8001c8a <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001caa:	3b01      	subs	r3, #1
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
 8001cae:	f107 0208 	add.w	r2, r7, #8
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fe5b 	bl	8001974 <xputc>
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f1      	bne.n	8001ca8 <xvprintf+0x2b8>
    while( j++ < w ){
 8001cc4:	e002      	b.n	8001ccc <xvprintf+0x2dc>
      xputc(' ');
 8001cc6:	2020      	movs	r0, #32
 8001cc8:	f7ff fe54 	bl	8001974 <xputc>
    while( j++ < w ){
 8001ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d8f6      	bhi.n	8001cc6 <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8001cd8:	e68f      	b.n	80019fa <xvprintf+0xa>
      break;                                            /* End of format? */
 8001cda:	bf00      	nop
 8001cdc:	e000      	b.n	8001ce0 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8001cde:	bf00      	nop
    }
  }
} /* xvprintf */
 8001ce0:	bf00      	nop
 8001ce2:	3738      	adds	r7, #56	; 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001cec:	2100      	movs	r1, #0
 8001cee:	4808      	ldr	r0, [pc, #32]	; (8001d10 <D_PWM_Init+0x28>)
 8001cf0:	f003 fb92 	bl	8005418 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <D_PWM_Init+0x28>)
 8001cf8:	f003 fb8e 	bl	8005418 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001cfc:	2108      	movs	r1, #8
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <D_PWM_Init+0x28>)
 8001d00:	f003 fb8a 	bl	8005418 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001d04:	210c      	movs	r1, #12
 8001d06:	4802      	ldr	r0, [pc, #8]	; (8001d10 <D_PWM_Init+0x28>)
 8001d08:	f003 fb86 	bl	8005418 <HAL_TIM_PWM_Start>
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20001948 	.word	0x20001948

08001d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d18:	4b0e      	ldr	r3, [pc, #56]	; (8001d54 <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0d      	ldr	r2, [pc, #52]	; (8001d54 <HAL_Init+0x40>)
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_Init+0x40>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_Init+0x40>)
 8001d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_Init+0x40>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_Init+0x40>)
 8001d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f000 f92b 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 f808 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d48:	f7ff f868 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x54>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x58>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f943 	bl	8002002 <HAL_SYSTICK_Config>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00e      	b.n	8001da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d80a      	bhi.n	8001da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d94:	f000 f90b 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d98:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <HAL_InitTick+0x5c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000000 	.word	0x20000000
 8001db0:	2000000c 	.word	0x2000000c
 8001db4:	20000008 	.word	0x20000008

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2000000c 	.word	0x2000000c
 8001ddc:	20001d7c 	.word	0x20001d7c

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20001d7c 	.word	0x20001d7c

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	; (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff3e 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff31 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff feda 	bl	8001de0 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e099      	b.n	800216c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002058:	e00f      	b.n	800207a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800205a:	f7ff fec1 	bl	8001de0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b05      	cmp	r3, #5
 8002066:	d908      	bls.n	800207a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2203      	movs	r2, #3
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e078      	b.n	800216c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e8      	bne.n	800205a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_DMA_Init+0x158>)
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d107      	bne.n	80020e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4313      	orrs	r3, r2
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0307 	bic.w	r3, r3, #7
 80020fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	2b04      	cmp	r3, #4
 800210c:	d117      	bne.n	800213e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fb0f 	bl	8002744 <DMA_CheckFifoParam>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800213a:	2301      	movs	r3, #1
 800213c:	e016      	b.n	800216c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fac6 	bl	80026d8 <DMA_CalcBaseAndBitshift>
 800214c:	4603      	mov	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	223f      	movs	r2, #63	; 0x3f
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	f010803f 	.word	0xf010803f

08002178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_DMA_Start_IT+0x26>
 800219a:	2302      	movs	r3, #2
 800219c:	e040      	b.n	8002220 <HAL_DMA_Start_IT+0xa8>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d12f      	bne.n	8002212 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa58 	bl	800267c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	223f      	movs	r2, #63	; 0x3f
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0216 	orr.w	r2, r2, #22
 80021e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002236:	f7ff fdd3 	bl	8001de0 <HAL_GetTick>
 800223a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e052      	b.n	8002300 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0216 	bic.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_DMA_Abort+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	e013      	b.n	80022d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ac:	f7ff fd98 	bl	8001de0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d90c      	bls.n	80022d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e015      	b.n	8002300 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e4      	bne.n	80022ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	223f      	movs	r2, #63	; 0x3f
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002358:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_DMA_IRQHandler+0x258>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_DMA_IRQHandler+0x25c>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2208      	movs	r2, #8
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2208      	movs	r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2210      	movs	r2, #16
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2210      	movs	r2, #16
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d018      	beq.n	800248e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e01f      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e016      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2220      	movs	r2, #32
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808e 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8086 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2220      	movs	r2, #32
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d136      	bne.n	8002564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x1da>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07d      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
        }
        return;
 8002562:	e078      	b.n	8002656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d108      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d030      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e02b      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d027      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e022      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
 80025a4:	20000000 	.word	0x20000000
 80025a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0210 	bic.w	r2, r2, #16
 80025c8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d032      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d022      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	429a      	cmp	r2, r3
 8002620:	d307      	bcc.n	8002632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_DMA_IRQHandler+0x2ca>
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002632:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e000      	b.n	8002658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002656:	bf00      	nop
    }
  }
}
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop

08002660 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800266e:	b2db      	uxtb	r3, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002698:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d108      	bne.n	80026bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ba:	e007      	b.n	80026cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	3b10      	subs	r3, #16
 80026e8:	4a14      	ldr	r2, [pc, #80]	; (800273c <DMA_CalcBaseAndBitshift+0x64>)
 80026ea:	fba2 2303 	umull	r2, r3, r2, r3
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <DMA_CalcBaseAndBitshift+0x68>)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d909      	bls.n	800271a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800270e:	f023 0303 	bic.w	r3, r3, #3
 8002712:	1d1a      	adds	r2, r3, #4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	659a      	str	r2, [r3, #88]	; 0x58
 8002718:	e007      	b.n	800272a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	aaaaaaab 	.word	0xaaaaaaab
 8002740:	0800777c 	.word	0x0800777c

08002744 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d11f      	bne.n	800279e <DMA_CheckFifoParam+0x5a>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d856      	bhi.n	8002812 <DMA_CheckFifoParam+0xce>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <DMA_CheckFifoParam+0x28>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	0800277d 	.word	0x0800277d
 8002770:	0800278f 	.word	0x0800278f
 8002774:	0800277d 	.word	0x0800277d
 8002778:	08002813 	.word	0x08002813
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d046      	beq.n	8002816 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278c:	e043      	b.n	8002816 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002796:	d140      	bne.n	800281a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800279c:	e03d      	b.n	800281a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a6:	d121      	bne.n	80027ec <DMA_CheckFifoParam+0xa8>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d837      	bhi.n	800281e <DMA_CheckFifoParam+0xda>
 80027ae:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <DMA_CheckFifoParam+0x70>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	080027c5 	.word	0x080027c5
 80027b8:	080027cb 	.word	0x080027cb
 80027bc:	080027c5 	.word	0x080027c5
 80027c0:	080027dd 	.word	0x080027dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e030      	b.n	800282c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d025      	beq.n	8002822 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027da:	e022      	b.n	8002822 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027e4:	d11f      	bne.n	8002826 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ea:	e01c      	b.n	8002826 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d903      	bls.n	80027fa <DMA_CheckFifoParam+0xb6>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d003      	beq.n	8002800 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027f8:	e018      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      break;
 80027fe:	e015      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00e      	beq.n	800282a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      break;
 8002810:	e00b      	b.n	800282a <DMA_CheckFifoParam+0xe6>
      break;
 8002812:	bf00      	nop
 8002814:	e00a      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      break;
 8002816:	bf00      	nop
 8002818:	e008      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      break;
 800281a:	bf00      	nop
 800281c:	e006      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      break;
 800281e:	bf00      	nop
 8002820:	e004      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      break;
 8002822:	bf00      	nop
 8002824:	e002      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      break;   
 8002826:	bf00      	nop
 8002828:	e000      	b.n	800282c <DMA_CheckFifoParam+0xe8>
      break;
 800282a:	bf00      	nop
    }
  } 
  
  return status; 
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	e165      	b.n	8002b24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002858:	2201      	movs	r2, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	429a      	cmp	r2, r3
 8002872:	f040 8154 	bne.w	8002b1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d005      	beq.n	800288e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	2b02      	cmp	r3, #2
 800288c:	d130      	bne.n	80028f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c4:	2201      	movs	r2, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 0201 	and.w	r2, r3, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d017      	beq.n	800292c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d123      	bne.n	8002980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	220f      	movs	r2, #15
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0203 	and.w	r2, r3, #3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80ae 	beq.w	8002b1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b5d      	ldr	r3, [pc, #372]	; (8002b3c <HAL_GPIO_Init+0x300>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a5c      	ldr	r2, [pc, #368]	; (8002b3c <HAL_GPIO_Init+0x300>)
 80029cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <HAL_GPIO_Init+0x300>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029de:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_GPIO_Init+0x304>)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	3302      	adds	r3, #2
 80029e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	220f      	movs	r2, #15
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4f      	ldr	r2, [pc, #316]	; (8002b44 <HAL_GPIO_Init+0x308>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d025      	beq.n	8002a56 <HAL_GPIO_Init+0x21a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4e      	ldr	r2, [pc, #312]	; (8002b48 <HAL_GPIO_Init+0x30c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01f      	beq.n	8002a52 <HAL_GPIO_Init+0x216>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a4d      	ldr	r2, [pc, #308]	; (8002b4c <HAL_GPIO_Init+0x310>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d019      	beq.n	8002a4e <HAL_GPIO_Init+0x212>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a4c      	ldr	r2, [pc, #304]	; (8002b50 <HAL_GPIO_Init+0x314>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_GPIO_Init+0x20e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4b      	ldr	r2, [pc, #300]	; (8002b54 <HAL_GPIO_Init+0x318>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00d      	beq.n	8002a46 <HAL_GPIO_Init+0x20a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	; (8002b58 <HAL_GPIO_Init+0x31c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <HAL_GPIO_Init+0x206>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a49      	ldr	r2, [pc, #292]	; (8002b5c <HAL_GPIO_Init+0x320>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_GPIO_Init+0x202>
 8002a3a:	2306      	movs	r3, #6
 8002a3c:	e00c      	b.n	8002a58 <HAL_GPIO_Init+0x21c>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00a      	b.n	8002a58 <HAL_GPIO_Init+0x21c>
 8002a42:	2305      	movs	r3, #5
 8002a44:	e008      	b.n	8002a58 <HAL_GPIO_Init+0x21c>
 8002a46:	2304      	movs	r3, #4
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x21c>
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x21c>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x21c>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x21c>
 8002a56:	2300      	movs	r3, #0
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f002 0203 	and.w	r2, r2, #3
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a68:	4935      	ldr	r1, [pc, #212]	; (8002b40 <HAL_GPIO_Init+0x304>)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a76:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9a:	4a31      	ldr	r2, [pc, #196]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b18:	4a11      	ldr	r2, [pc, #68]	; (8002b60 <HAL_GPIO_Init+0x324>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3301      	adds	r3, #1
 8002b22:	61fb      	str	r3, [r7, #28]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2b0f      	cmp	r3, #15
 8002b28:	f67f ae96 	bls.w	8002858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e001      	b.n	8002b86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	041a      	lsls	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e12b      	b.n	8002e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe f93c 	bl	8000e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f001 fed4 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 8002c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a81      	ldr	r2, [pc, #516]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d807      	bhi.n	8002c4c <HAL_I2C_Init+0x84>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <HAL_I2C_Init+0x278>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e006      	b.n	8002c5a <HAL_I2C_Init+0x92>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a7d      	ldr	r2, [pc, #500]	; (8002e44 <HAL_I2C_Init+0x27c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0e7      	b.n	8002e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a78      	ldr	r2, [pc, #480]	; (8002e48 <HAL_I2C_Init+0x280>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d802      	bhi.n	8002c9c <HAL_I2C_Init+0xd4>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	e009      	b.n	8002cb0 <HAL_I2C_Init+0xe8>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <HAL_I2C_Init+0x284>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	3301      	adds	r3, #1
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	495c      	ldr	r1, [pc, #368]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002ccc:	428b      	cmp	r3, r1
 8002cce:	d819      	bhi.n	8002d04 <HAL_I2C_Init+0x13c>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e59      	subs	r1, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cde:	1c59      	adds	r1, r3, #1
 8002ce0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_I2C_Init+0x138>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1e59      	subs	r1, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfe:	e051      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d00:	2304      	movs	r3, #4
 8002d02:	e04f      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <HAL_I2C_Init+0x168>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1e58      	subs	r0, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e012      	b.n	8002d56 <HAL_I2C_Init+0x18e>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	0099      	lsls	r1, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Init+0x196>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e022      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <HAL_I2C_Init+0x1bc>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1e58      	subs	r0, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	440b      	add	r3, r1
 8002d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d82:	e00f      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	0099      	lsls	r1, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	6809      	ldr	r1, [r1, #0]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6911      	ldr	r1, [r2, #16]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68d2      	ldr	r2, [r2, #12]
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	000186a0 	.word	0x000186a0
 8002e40:	001e847f 	.word	0x001e847f
 8002e44:	003d08ff 	.word	0x003d08ff
 8002e48:	431bde83 	.word	0x431bde83
 8002e4c:	10624dd3 	.word	0x10624dd3

08002e50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	2b10      	cmp	r3, #16
 8002e7e:	d003      	beq.n	8002e88 <HAL_I2C_EV_IRQHandler+0x38>
 8002e80:	7bfb      	ldrb	r3, [r7, #15]
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	f040 80c1 	bne.w	800300a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <HAL_I2C_EV_IRQHandler+0x6e>
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ea8:	d003      	beq.n	8002eb2 <HAL_I2C_EV_IRQHandler+0x62>
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_EV_IRQHandler+0x66>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_I2C_EV_IRQHandler+0x68>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f000 8132 	beq.w	8003122 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x92>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	0a5b      	lsrs	r3, r3, #9
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f001 fc71 	bl	80047bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fd79 	bl	80039d2 <I2C_Master_SB>
 8002ee0:	e092      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	08db      	lsrs	r3, r3, #3
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_I2C_EV_IRQHandler+0xb2>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	0a5b      	lsrs	r3, r3, #9
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fdef 	bl	8003ade <I2C_Master_ADD10>
 8002f00:	e082      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <HAL_I2C_EV_IRQHandler+0xd2>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	0a5b      	lsrs	r3, r3, #9
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fe09 	bl	8003b32 <I2C_Master_ADDR>
 8002f20:	e072      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03b      	beq.n	8002fa6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3c:	f000 80f3 	beq.w	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	09db      	lsrs	r3, r3, #7
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00f      	beq.n	8002f6c <HAL_I2C_EV_IRQHandler+0x11c>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	0a9b      	lsrs	r3, r3, #10
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_I2C_EV_IRQHandler+0x11c>
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f9f3 	bl	8003350 <I2C_MasterTransmit_TXE>
 8002f6a:	e04d      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80d6 	beq.w	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	0a5b      	lsrs	r3, r3, #9
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80cf 	beq.w	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002f88:	7bbb      	ldrb	r3, [r7, #14]
 8002f8a:	2b21      	cmp	r3, #33	; 0x21
 8002f8c:	d103      	bne.n	8002f96 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 fa7a 	bl	8003488 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f94:	e0c7      	b.n	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	f040 80c4 	bne.w	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fae8 	bl	8003574 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fa4:	e0bf      	b.n	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fb4:	f000 80b7 	beq.w	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	099b      	lsrs	r3, r3, #6
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00f      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x194>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d009      	beq.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x194>
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb5d 	bl	800369c <I2C_MasterReceive_RXNE>
 8002fe2:	e011      	b.n	8003008 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	089b      	lsrs	r3, r3, #2
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 809a 	beq.w	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	0a5b      	lsrs	r3, r3, #9
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8093 	beq.w	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fbfc 	bl	80037fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003006:	e08e      	b.n	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003008:	e08d      	b.n	8003126 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e007      	b.n	800302c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d012      	beq.n	800305e <HAL_I2C_EV_IRQHandler+0x20e>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	0a5b      	lsrs	r3, r3, #9
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003054:	69b9      	ldr	r1, [r7, #24]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 ffba 	bl	8003fd0 <I2C_Slave_ADDR>
 800305c:	e066      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_I2C_EV_IRQHandler+0x22e>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	0a5b      	lsrs	r3, r3, #9
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fff4 	bl	8004064 <I2C_Slave_STOPF>
 800307c:	e056      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800307e:	7bbb      	ldrb	r3, [r7, #14]
 8003080:	2b21      	cmp	r3, #33	; 0x21
 8003082:	d002      	beq.n	800308a <HAL_I2C_EV_IRQHandler+0x23a>
 8003084:	7bbb      	ldrb	r3, [r7, #14]
 8003086:	2b29      	cmp	r3, #41	; 0x29
 8003088:	d125      	bne.n	80030d6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	09db      	lsrs	r3, r3, #7
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00f      	beq.n	80030b6 <HAL_I2C_EV_IRQHandler+0x266>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	0a9b      	lsrs	r3, r3, #10
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_I2C_EV_IRQHandler+0x266>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fed0 	bl	8003e54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b4:	e039      	b.n	800312a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d033      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0x2da>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	0a5b      	lsrs	r3, r3, #9
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02d      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fefd 	bl	8003ece <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030d4:	e029      	b.n	800312a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	099b      	lsrs	r3, r3, #6
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00f      	beq.n	8003102 <HAL_I2C_EV_IRQHandler+0x2b2>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	0a9b      	lsrs	r3, r3, #10
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_I2C_EV_IRQHandler+0x2b2>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	089b      	lsrs	r3, r3, #2
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 ff08 	bl	8003f10 <I2C_SlaveReceive_RXNE>
 8003100:	e014      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	0a5b      	lsrs	r3, r3, #9
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 ff36 	bl	8003f8c <I2C_SlaveReceive_BTF>
 8003120:	e004      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003122:	bf00      	nop
 8003124:	e002      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800312a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b08a      	sub	sp, #40	; 0x28
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003154:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00e      	beq.n	8003180 <HAL_I2C_ER_IRQHandler+0x4e>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800317e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <HAL_I2C_ER_IRQHandler+0x78>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80031a8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	0a9b      	lsrs	r3, r3, #10
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03f      	beq.n	8003236 <HAL_I2C_ER_IRQHandler+0x104>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d039      	beq.n	8003236 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80031c2:	7efb      	ldrb	r3, [r7, #27]
 80031c4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80031dc:	7ebb      	ldrb	r3, [r7, #26]
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d112      	bne.n	8003208 <HAL_I2C_ER_IRQHandler+0xd6>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10f      	bne.n	8003208 <HAL_I2C_ER_IRQHandler+0xd6>
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	2b21      	cmp	r3, #33	; 0x21
 80031ec:	d008      	beq.n	8003200 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	2b29      	cmp	r3, #41	; 0x29
 80031f2:	d005      	beq.n	8003200 <HAL_I2C_ER_IRQHandler+0xce>
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	2b28      	cmp	r3, #40	; 0x28
 80031f8:	d106      	bne.n	8003208 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b21      	cmp	r3, #33	; 0x21
 80031fe:	d103      	bne.n	8003208 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f001 f85f 	bl	80042c4 <I2C_Slave_AF>
 8003206:	e016      	b.n	8003236 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003210:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800321a:	7efb      	ldrb	r3, [r7, #27]
 800321c:	2b10      	cmp	r3, #16
 800321e:	d002      	beq.n	8003226 <HAL_I2C_ER_IRQHandler+0xf4>
 8003220:	7efb      	ldrb	r3, [r7, #27]
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d107      	bne.n	8003236 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003234:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	0adb      	lsrs	r3, r3, #11
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00e      	beq.n	8003260 <HAL_I2C_ER_IRQHandler+0x12e>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	0a1b      	lsrs	r3, r3, #8
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800325e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 f896 	bl	80043a4 <I2C_ITError>
  }
}
 8003278:	bf00      	nop
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
 80032dc:	4613      	mov	r3, r2
 80032de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003366:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d150      	bne.n	8003418 <I2C_MasterTransmit_TXE+0xc8>
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b21      	cmp	r3, #33	; 0x21
 800337a:	d14d      	bne.n	8003418 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d01d      	beq.n	80033be <I2C_MasterTransmit_TXE+0x6e>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b20      	cmp	r3, #32
 8003386:	d01a      	beq.n	80033be <I2C_MasterTransmit_TXE+0x6e>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800338e:	d016      	beq.n	80033be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800339e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2211      	movs	r2, #17
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff62 	bl	8003280 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033bc:	e060      	b.n	8003480 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d107      	bne.n	8003408 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff7d 	bl	8003300 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003406:	e03b      	b.n	8003480 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ff35 	bl	8003280 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003416:	e033      	b.n	8003480 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b21      	cmp	r3, #33	; 0x21
 800341c:	d005      	beq.n	800342a <I2C_MasterTransmit_TXE+0xda>
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d12d      	bne.n	8003480 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	2b22      	cmp	r3, #34	; 0x22
 8003428:	d12a      	bne.n	8003480 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003444:	e01c      	b.n	8003480 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d103      	bne.n	800345a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f88e 	bl	8003574 <I2C_MemoryTransmit_TXE_BTF>
}
 8003458:	e012      	b.n	8003480 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800347e:	e7ff      	b.n	8003480 <I2C_MasterTransmit_TXE+0x130>
 8003480:	bf00      	nop
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b21      	cmp	r3, #33	; 0x21
 80034a0:	d164      	bne.n	800356c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d012      	beq.n	80034d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80034d0:	e04c      	b.n	800356c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d01d      	beq.n	8003514 <I2C_MasterTransmit_BTF+0x8c>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d01a      	beq.n	8003514 <I2C_MasterTransmit_BTF+0x8c>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e4:	d016      	beq.n	8003514 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2211      	movs	r2, #17
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff feb7 	bl	8003280 <HAL_I2C_MasterTxCpltCallback>
}
 8003512:	e02b      	b.n	800356c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003522:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b40      	cmp	r3, #64	; 0x40
 800354c:	d107      	bne.n	800355e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fed2 	bl	8003300 <HAL_I2C_MemTxCpltCallback>
}
 800355c:	e006      	b.n	800356c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fe8a 	bl	8003280 <HAL_I2C_MasterTxCpltCallback>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003582:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11d      	bne.n	80035c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10b      	bne.n	80035ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	b2da      	uxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a4:	1c9a      	adds	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80035aa:	e073      	b.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	121b      	asrs	r3, r3, #8
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035c6:	e065      	b.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d10b      	bne.n	80035e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80035e6:	e055      	b.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d151      	bne.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b22      	cmp	r3, #34	; 0x22
 80035f4:	d10d      	bne.n	8003612 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003604:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003610:	e040      	b.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d015      	beq.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	2b21      	cmp	r3, #33	; 0x21
 8003620:	d112      	bne.n	8003648 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003646:	e025      	b.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d120      	bne.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b21      	cmp	r3, #33	; 0x21
 8003656:	d11d      	bne.n	8003694 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003666:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff fe36 	bl	8003300 <HAL_I2C_MemTxCpltCallback>
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b22      	cmp	r3, #34	; 0x22
 80036ae:	f040 80a2 	bne.w	80037f6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d921      	bls.n	8003704 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	f040 8082 	bne.w	80037f6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003700:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003702:	e078      	b.n	80037f6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	2b02      	cmp	r3, #2
 800370a:	d074      	beq.n	80037f6 <I2C_MasterReceive_RXNE+0x15a>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d002      	beq.n	8003718 <I2C_MasterReceive_RXNE+0x7c>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d16e      	bne.n	80037f6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f001 f81d 	bl	8004758 <I2C_WaitOnSTOPRequestThroughIT>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d142      	bne.n	80037aa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003732:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003742:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d10a      	bne.n	8003794 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff fdc1 	bl	8003314 <HAL_I2C_MemRxCpltCallback>
}
 8003792:	e030      	b.n	80037f6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2212      	movs	r2, #18
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7ff fd76 	bl	8003294 <HAL_I2C_MasterRxCpltCallback>
}
 80037a8:	e025      	b.n	80037f6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fd99 	bl	8003328 <HAL_I2C_ErrorCallback>
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b04      	cmp	r3, #4
 8003814:	d11b      	bne.n	800384e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003824:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800384c:	e0bd      	b.n	80039ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b03      	cmp	r3, #3
 8003856:	d129      	bne.n	80038ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d00a      	beq.n	8003884 <I2C_MasterReceive_BTF+0x86>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d007      	beq.n	8003884 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003882:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038aa:	e08e      	b.n	80039ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d176      	bne.n	80039a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d002      	beq.n	80038c2 <I2C_MasterReceive_BTF+0xc4>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b10      	cmp	r3, #16
 80038c0:	d108      	bne.n	80038d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	e019      	b.n	8003908 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d002      	beq.n	80038e0 <I2C_MasterReceive_BTF+0xe2>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d108      	bne.n	80038f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e00a      	b.n	8003908 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d007      	beq.n	8003908 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003962:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d10a      	bne.n	800398e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff fcc4 	bl	8003314 <HAL_I2C_MemRxCpltCallback>
}
 800398c:	e01d      	b.n	80039ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2212      	movs	r2, #18
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff fc79 	bl	8003294 <HAL_I2C_MasterRxCpltCallback>
}
 80039a2:	e012      	b.n	80039ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b40      	cmp	r3, #64	; 0x40
 80039e4:	d117      	bne.n	8003a16 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a00:	e067      	b.n	8003ad2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]
}
 8003a14:	e05d      	b.n	8003ad2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1e:	d133      	bne.n	8003a88 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b21      	cmp	r3, #33	; 0x21
 8003a2a:	d109      	bne.n	8003a40 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a3c:	611a      	str	r2, [r3, #16]
 8003a3e:	e008      	b.n	8003a52 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <I2C_Master_SB+0x92>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d108      	bne.n	8003a76 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d032      	beq.n	8003ad2 <I2C_Master_SB+0x100>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d02d      	beq.n	8003ad2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a84:	605a      	str	r2, [r3, #4]
}
 8003a86:	e024      	b.n	8003ad2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10e      	bne.n	8003aae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	11db      	asrs	r3, r3, #7
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	f003 0306 	and.w	r3, r3, #6
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f063 030f 	orn	r3, r3, #15
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
}
 8003aac:	e011      	b.n	8003ad2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d10d      	bne.n	8003ad2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	11db      	asrs	r3, r3, #7
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 0306 	and.w	r3, r3, #6
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f063 030e 	orn	r3, r3, #14
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	611a      	str	r2, [r3, #16]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <I2C_Master_ADD10+0x26>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00c      	beq.n	8003b26 <I2C_Master_ADD10+0x48>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b24:	605a      	str	r2, [r3, #4]
  }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b091      	sub	sp, #68	; 0x44
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b22      	cmp	r3, #34	; 0x22
 8003b5a:	f040 8169 	bne.w	8003e30 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <I2C_Master_ADDR+0x54>
 8003b66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d10b      	bne.n	8003b86 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	633b      	str	r3, [r7, #48]	; 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	e160      	b.n	8003e48 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11d      	bne.n	8003bca <I2C_Master_ADDR+0x98>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b96:	d118      	bne.n	8003bca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8003bc8:	e13e      	b.n	8003e48 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d113      	bne.n	8003bfc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e115      	b.n	8003e28 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f040 808a 	bne.w	8003d1c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c0e:	d137      	bne.n	8003c80 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2e:	d113      	bne.n	8003c58 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	e0e7      	b.n	8003e28 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c58:	2300      	movs	r3, #0
 8003c5a:	623b      	str	r3, [r7, #32]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	623b      	str	r3, [r7, #32]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e0d3      	b.n	8003e28 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d02e      	beq.n	8003ce4 <I2C_Master_ADDR+0x1b2>
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d02b      	beq.n	8003ce4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	2b12      	cmp	r3, #18
 8003c90:	d102      	bne.n	8003c98 <I2C_Master_ADDR+0x166>
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d125      	bne.n	8003ce4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d00e      	beq.n	8003cbc <I2C_Master_ADDR+0x18a>
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d00b      	beq.n	8003cbc <I2C_Master_ADDR+0x18a>
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	d008      	beq.n	8003cbc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e007      	b.n	8003ccc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	e0a1      	b.n	8003e28 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e085      	b.n	8003e28 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d14d      	bne.n	8003dc2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d016      	beq.n	8003d5a <I2C_Master_ADDR+0x228>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d013      	beq.n	8003d5a <I2C_Master_ADDR+0x228>
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d010      	beq.n	8003d5a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e007      	b.n	8003d6a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d68:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d78:	d117      	bne.n	8003daa <I2C_Master_ADDR+0x278>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d80:	d00b      	beq.n	8003d9a <I2C_Master_ADDR+0x268>
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d008      	beq.n	8003d9a <I2C_Master_ADDR+0x268>
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d005      	beq.n	8003d9a <I2C_Master_ADDR+0x268>
 8003d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d002      	beq.n	8003d9a <I2C_Master_ADDR+0x268>
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d107      	bne.n	8003daa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003da8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	617b      	str	r3, [r7, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	e032      	b.n	8003e28 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dd0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de0:	d117      	bne.n	8003e12 <I2C_Master_ADDR+0x2e0>
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de8:	d00b      	beq.n	8003e02 <I2C_Master_ADDR+0x2d0>
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d008      	beq.n	8003e02 <I2C_Master_ADDR+0x2d0>
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d005      	beq.n	8003e02 <I2C_Master_ADDR+0x2d0>
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d002      	beq.n	8003e02 <I2C_Master_ADDR+0x2d0>
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d107      	bne.n	8003e12 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e2e:	e00b      	b.n	8003e48 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
}
 8003e46:	e7ff      	b.n	8003e48 <I2C_Master_ADDR+0x316>
 8003e48:	bf00      	nop
 8003e4a:	3744      	adds	r7, #68	; 0x44
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d02b      	beq.n	8003ec6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d114      	bne.n	8003ec6 <I2C_SlaveTransmit_TXE+0x72>
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b29      	cmp	r3, #41	; 0x29
 8003ea0:	d111      	bne.n	8003ec6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2221      	movs	r2, #33	; 0x21
 8003eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2228      	movs	r2, #40	; 0x28
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff f9f1 	bl	80032a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02c      	beq.n	8003f84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d114      	bne.n	8003f84 <I2C_SlaveReceive_RXNE+0x74>
 8003f5a:	7bfb      	ldrb	r3, [r7, #15]
 8003f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5e:	d111      	bne.n	8003f84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2222      	movs	r2, #34	; 0x22
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2228      	movs	r2, #40	; 0x28
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff f99c 	bl	80032bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d012      	beq.n	8003fc4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fea:	2b28      	cmp	r3, #40	; 0x28
 8003fec:	d127      	bne.n	800403e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ffc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800400a:	2301      	movs	r3, #1
 800400c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	09db      	lsrs	r3, r3, #7
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	81bb      	strh	r3, [r7, #12]
 8004020:	e002      	b.n	8004028 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004030:	89ba      	ldrh	r2, [r7, #12]
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff f94a 	bl	80032d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800403c:	e00e      	b.n	800405c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004082:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c0:	d172      	bne.n	80041a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b22      	cmp	r3, #34	; 0x22
 80040c6:	d002      	beq.n	80040ce <I2C_Slave_STOPF+0x6a>
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	2b2a      	cmp	r3, #42	; 0x2a
 80040cc:	d135      	bne.n	800413a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0204 	orr.w	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004100:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe faaa 	bl	8002660 <HAL_DMA_GetState>
 800410c:	4603      	mov	r3, r0
 800410e:	2b01      	cmp	r3, #1
 8004110:	d049      	beq.n	80041a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	4a69      	ldr	r2, [pc, #420]	; (80042bc <I2C_Slave_STOPF+0x258>)
 8004118:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe f8f2 	bl	8002308 <HAL_DMA_Abort_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03d      	beq.n	80041a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004134:	4610      	mov	r0, r2
 8004136:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004138:	e035      	b.n	80041a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f043 0204 	orr.w	r2, r3, #4
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fa74 	bl	8002660 <HAL_DMA_GetState>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d014      	beq.n	80041a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	4a4e      	ldr	r2, [pc, #312]	; (80042bc <I2C_Slave_STOPF+0x258>)
 8004184:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f8bc 	bl	8002308 <HAL_DMA_Abort_IT>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041a0:	4610      	mov	r0, r2
 80041a2:	4798      	blx	r3
 80041a4:	e000      	b.n	80041a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03e      	beq.n	8004230 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d112      	bne.n	80041e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d112      	bne.n	800421a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8b3 	bl	80043a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800423e:	e039      	b.n	80042b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	2b2a      	cmp	r3, #42	; 0x2a
 8004244:	d109      	bne.n	800425a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2228      	movs	r2, #40	; 0x28
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff f831 	bl	80032bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b28      	cmp	r3, #40	; 0x28
 8004264:	d111      	bne.n	800428a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <I2C_Slave_STOPF+0x25c>)
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff f832 	bl	80032ec <HAL_I2C_ListenCpltCallback>
}
 8004288:	e014      	b.n	80042b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	2b22      	cmp	r3, #34	; 0x22
 8004290:	d002      	beq.n	8004298 <I2C_Slave_STOPF+0x234>
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b22      	cmp	r3, #34	; 0x22
 8004296:	d10d      	bne.n	80042b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2220      	movs	r2, #32
 80042a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff f804 	bl	80032bc <HAL_I2C_SlaveRxCpltCallback>
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08004609 	.word	0x08004609
 80042c0:	ffff0000 	.word	0xffff0000

080042c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d002      	beq.n	80042e6 <I2C_Slave_AF+0x22>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	d129      	bne.n	800433a <I2C_Slave_AF+0x76>
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b28      	cmp	r3, #40	; 0x28
 80042ea:	d126      	bne.n	800433a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a2c      	ldr	r2, [pc, #176]	; (80043a0 <I2C_Slave_AF+0xdc>)
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004300:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800430a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe ffda 	bl	80032ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004338:	e02e      	b.n	8004398 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	2b21      	cmp	r3, #33	; 0x21
 800433e:	d126      	bne.n	800438e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <I2C_Slave_AF+0xdc>)
 8004344:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2221      	movs	r2, #33	; 0x21
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800436a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004374:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004384:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fe ff8e 	bl	80032a8 <HAL_I2C_SlaveTxCpltCallback>
}
 800438c:	e004      	b.n	8004398 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004396:	615a      	str	r2, [r3, #20]
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	ffff0000 	.word	0xffff0000

080043a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043bc:	7bbb      	ldrb	r3, [r7, #14]
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d002      	beq.n	80043c8 <I2C_ITError+0x24>
 80043c2:	7bbb      	ldrb	r3, [r7, #14]
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d10a      	bne.n	80043de <I2C_ITError+0x3a>
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b22      	cmp	r3, #34	; 0x22
 80043cc:	d107      	bne.n	80043de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043e4:	2b28      	cmp	r3, #40	; 0x28
 80043e6:	d107      	bne.n	80043f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2228      	movs	r2, #40	; 0x28
 80043f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80043f6:	e015      	b.n	8004424 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004406:	d00a      	beq.n	800441e <I2C_ITError+0x7a>
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b60      	cmp	r3, #96	; 0x60
 800440c:	d007      	beq.n	800441e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004432:	d162      	bne.n	80044fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004442:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004448:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d020      	beq.n	8004494 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	4a6a      	ldr	r2, [pc, #424]	; (8004600 <I2C_ITError+0x25c>)
 8004458:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445e:	4618      	mov	r0, r3
 8004460:	f7fd ff52 	bl	8002308 <HAL_DMA_Abort_IT>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8089 	beq.w	800457e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0201 	bic.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800448e:	4610      	mov	r0, r2
 8004490:	4798      	blx	r3
 8004492:	e074      	b.n	800457e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	4a59      	ldr	r2, [pc, #356]	; (8004600 <I2C_ITError+0x25c>)
 800449a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fd ff31 	bl	8002308 <HAL_DMA_Abort_IT>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d068      	beq.n	800457e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d10b      	bne.n	80044d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
 80044f8:	e041      	b.n	800457e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b60      	cmp	r3, #96	; 0x60
 8004504:	d125      	bne.n	8004552 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d10b      	bne.n	800453a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0201 	bic.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fe fef6 	bl	800333c <HAL_I2C_AbortCpltCallback>
 8004550:	e015      	b.n	800457e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455c:	2b40      	cmp	r3, #64	; 0x40
 800455e:	d10b      	bne.n	8004578 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fe fed5 	bl	8003328 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10e      	bne.n	80045ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d113      	bne.n	80045f8 <I2C_ITError+0x254>
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b28      	cmp	r3, #40	; 0x28
 80045d4:	d110      	bne.n	80045f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <I2C_ITError+0x260>)
 80045da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fe fe7a 	bl	80032ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	08004609 	.word	0x08004609
 8004604:	ffff0000 	.word	0xffff0000

08004608 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004622:	4b4b      	ldr	r3, [pc, #300]	; (8004750 <I2C_DMAAbort+0x148>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	4a4a      	ldr	r2, [pc, #296]	; (8004754 <I2C_DMAAbort+0x14c>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	0a1a      	lsrs	r2, r3, #8
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	00da      	lsls	r2, r3, #3
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800464e:	e00a      	b.n	8004666 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3b01      	subs	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004664:	d0ea      	beq.n	800463c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	2200      	movs	r2, #0
 8004674:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	2200      	movs	r2, #0
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004694:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	2200      	movs	r2, #0
 80046aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	2200      	movs	r2, #0
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b60      	cmp	r3, #96	; 0x60
 80046d6:	d10e      	bne.n	80046f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f7fe fe24 	bl	800333c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046f4:	e027      	b.n	8004746 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046fc:	2b28      	cmp	r3, #40	; 0x28
 80046fe:	d117      	bne.n	8004730 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800471e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2228      	movs	r2, #40	; 0x28
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800472e:	e007      	b.n	8004740 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004740:	6978      	ldr	r0, [r7, #20]
 8004742:	f7fe fdf1 	bl	8003328 <HAL_I2C_ErrorCallback>
}
 8004746:	bf00      	nop
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000000 	.word	0x20000000
 8004754:	14f8b589 	.word	0x14f8b589

08004758 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800476c:	fba2 2303 	umull	r2, r3, r2, r3
 8004770:	0a1a      	lsrs	r2, r3, #8
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3b01      	subs	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e008      	b.n	80047a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a4:	d0e9      	beq.n	800477a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	20000000 	.word	0x20000000
 80047b8:	14f8b589 	.word	0x14f8b589

080047bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80047cc:	d103      	bne.n	80047d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80047d4:	e007      	b.n	80047e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80047de:	d102      	bne.n	80047e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2208      	movs	r2, #8
 80047e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0cc      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004808:	4b68      	ldr	r3, [pc, #416]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d90c      	bls.n	8004830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004816:	4b65      	ldr	r3, [pc, #404]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800481e:	4b63      	ldr	r3, [pc, #396]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0b8      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d020      	beq.n	800487e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004848:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	4a58      	ldr	r2, [pc, #352]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004860:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a52      	ldr	r2, [pc, #328]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800486a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800486c:	4b50      	ldr	r3, [pc, #320]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	494d      	ldr	r1, [pc, #308]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d044      	beq.n	8004914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d107      	bne.n	80048a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d119      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e07f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d003      	beq.n	80048b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b2:	4b3f      	ldr	r3, [pc, #252]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e06f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e067      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4934      	ldr	r1, [pc, #208]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e4:	f7fd fa7c 	bl	8001de0 <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7fd fa78 	bl	8001de0 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e04f      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 020c 	and.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d1eb      	bne.n	80048ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d20c      	bcs.n	800493c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b20      	ldr	r3, [pc, #128]	; (80049ac <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e032      	b.n	80049a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004948:	4b19      	ldr	r3, [pc, #100]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4916      	ldr	r1, [pc, #88]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004966:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	490e      	ldr	r1, [pc, #56]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800497a:	f000 f855 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 800497e:	4602      	mov	r2, r0
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	490a      	ldr	r1, [pc, #40]	; (80049b4 <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	5ccb      	ldrb	r3, [r1, r3]
 800498e:	fa22 f303 	lsr.w	r3, r2, r3
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_ClockConfig+0x1c8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd f9dc 	bl	8001d58 <HAL_InitTick>

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023c00 	.word	0x40023c00
 80049b0:	40023800 	.word	0x40023800
 80049b4:	08007764 	.word	0x08007764
 80049b8:	20000000 	.word	0x20000000
 80049bc:	20000008 	.word	0x20000008

080049c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c4:	4b03      	ldr	r3, [pc, #12]	; (80049d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000000 	.word	0x20000000

080049d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049dc:	f7ff fff0 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a9b      	lsrs	r3, r3, #10
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	4903      	ldr	r1, [pc, #12]	; (80049fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ee:	5ccb      	ldrb	r3, [r1, r3]
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40023800 	.word	0x40023800
 80049fc:	08007774 	.word	0x08007774

08004a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a04:	f7ff ffdc 	bl	80049c0 <HAL_RCC_GetHCLKFreq>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	0b5b      	lsrs	r3, r3, #13
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	4903      	ldr	r1, [pc, #12]	; (8004a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a16:	5ccb      	ldrb	r3, [r1, r3]
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	08007774 	.word	0x08007774

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a2c:	b088      	sub	sp, #32
 8004a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a44:	4bce      	ldr	r3, [pc, #824]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	f200 818d 	bhi.w	8004d6c <HAL_RCC_GetSysClockFreq+0x344>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <HAL_RCC_GetSysClockFreq+0x30>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a8d 	.word	0x08004a8d
 8004a5c:	08004d6d 	.word	0x08004d6d
 8004a60:	08004d6d 	.word	0x08004d6d
 8004a64:	08004d6d 	.word	0x08004d6d
 8004a68:	08004a93 	.word	0x08004a93
 8004a6c:	08004d6d 	.word	0x08004d6d
 8004a70:	08004d6d 	.word	0x08004d6d
 8004a74:	08004d6d 	.word	0x08004d6d
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004d6d 	.word	0x08004d6d
 8004a80:	08004d6d 	.word	0x08004d6d
 8004a84:	08004d6d 	.word	0x08004d6d
 8004a88:	08004c0d 	.word	0x08004c0d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4bbd      	ldr	r3, [pc, #756]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a8e:	61bb      	str	r3, [r7, #24]
       break;
 8004a90:	e16f      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a92:	4bbd      	ldr	r3, [pc, #756]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x360>)
 8004a94:	61bb      	str	r3, [r7, #24]
      break;
 8004a96:	e16c      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a98:	4bb9      	ldr	r3, [pc, #740]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa2:	4bb7      	ldr	r3, [pc, #732]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d053      	beq.n	8004b56 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aae:	4bb4      	ldr	r3, [pc, #720]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004abe:	f04f 0100 	mov.w	r1, #0
 8004ac2:	ea02 0400 	and.w	r4, r2, r0
 8004ac6:	603c      	str	r4, [r7, #0]
 8004ac8:	400b      	ands	r3, r1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	014b      	lsls	r3, r1, #5
 8004ade:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ae2:	0142      	lsls	r2, r0, #5
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4623      	mov	r3, r4
 8004aea:	1ac0      	subs	r0, r0, r3
 8004aec:	462b      	mov	r3, r5
 8004aee:	eb61 0103 	sbc.w	r1, r1, r3
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	018b      	lsls	r3, r1, #6
 8004afc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b00:	0182      	lsls	r2, r0, #6
 8004b02:	1a12      	subs	r2, r2, r0
 8004b04:	eb63 0301 	sbc.w	r3, r3, r1
 8004b08:	f04f 0000 	mov.w	r0, #0
 8004b0c:	f04f 0100 	mov.w	r1, #0
 8004b10:	00d9      	lsls	r1, r3, #3
 8004b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b16:	00d0      	lsls	r0, r2, #3
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	1852      	adds	r2, r2, r1
 8004b20:	4629      	mov	r1, r5
 8004b22:	eb43 0101 	adc.w	r1, r3, r1
 8004b26:	460b      	mov	r3, r1
 8004b28:	f04f 0000 	mov.w	r0, #0
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	0259      	lsls	r1, r3, #9
 8004b32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b36:	0250      	lsls	r0, r2, #9
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	461a      	mov	r2, r3
 8004b44:	f04f 0300 	mov.w	r3, #0
 8004b48:	f7fb fb5c 	bl	8000204 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	61fb      	str	r3, [r7, #28]
 8004b54:	e04c      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b56:	4b8a      	ldr	r3, [pc, #552]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	ea02 0a00 	and.w	sl, r2, r0
 8004b6e:	ea03 0b01 	and.w	fp, r3, r1
 8004b72:	4650      	mov	r0, sl
 8004b74:	4659      	mov	r1, fp
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	f04f 0300 	mov.w	r3, #0
 8004b7e:	014b      	lsls	r3, r1, #5
 8004b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b84:	0142      	lsls	r2, r0, #5
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	ebb0 000a 	subs.w	r0, r0, sl
 8004b8e:	eb61 010b 	sbc.w	r1, r1, fp
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	018b      	lsls	r3, r1, #6
 8004b9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ba0:	0182      	lsls	r2, r0, #6
 8004ba2:	1a12      	subs	r2, r2, r0
 8004ba4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ba8:	f04f 0000 	mov.w	r0, #0
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	00d9      	lsls	r1, r3, #3
 8004bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bb6:	00d0      	lsls	r0, r2, #3
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	eb12 020a 	adds.w	r2, r2, sl
 8004bc0:	eb43 030b 	adc.w	r3, r3, fp
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f04f 0100 	mov.w	r1, #0
 8004bcc:	0299      	lsls	r1, r3, #10
 8004bce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bd2:	0290      	lsls	r0, r2, #10
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	f7fb fb0e 	bl	8000204 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf0:	4b63      	ldr	r3, [pc, #396]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004c00:	69fa      	ldr	r2, [r7, #28]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	61bb      	str	r3, [r7, #24]
      break;
 8004c0a:	e0b2      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c0c:	4b5c      	ldr	r3, [pc, #368]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c14:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c16:	4b5a      	ldr	r3, [pc, #360]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d04d      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c22:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	ea02 0800 	and.w	r8, r2, r0
 8004c3a:	ea03 0901 	and.w	r9, r3, r1
 8004c3e:	4640      	mov	r0, r8
 8004c40:	4649      	mov	r1, r9
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	014b      	lsls	r3, r1, #5
 8004c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c50:	0142      	lsls	r2, r0, #5
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	ebb0 0008 	subs.w	r0, r0, r8
 8004c5a:	eb61 0109 	sbc.w	r1, r1, r9
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	018b      	lsls	r3, r1, #6
 8004c68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c6c:	0182      	lsls	r2, r0, #6
 8004c6e:	1a12      	subs	r2, r2, r0
 8004c70:	eb63 0301 	sbc.w	r3, r3, r1
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	00d9      	lsls	r1, r3, #3
 8004c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c82:	00d0      	lsls	r0, r2, #3
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	eb12 0208 	adds.w	r2, r2, r8
 8004c8c:	eb43 0309 	adc.w	r3, r3, r9
 8004c90:	f04f 0000 	mov.w	r0, #0
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	0259      	lsls	r1, r3, #9
 8004c9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c9e:	0250      	lsls	r0, r2, #9
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	f7fb faa8 	bl	8000204 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e04a      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	ea02 0400 	and.w	r4, r2, r0
 8004cd6:	ea03 0501 	and.w	r5, r3, r1
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	014b      	lsls	r3, r1, #5
 8004ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cec:	0142      	lsls	r2, r0, #5
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	1b00      	subs	r0, r0, r4
 8004cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	018b      	lsls	r3, r1, #6
 8004d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d06:	0182      	lsls	r2, r0, #6
 8004d08:	1a12      	subs	r2, r2, r0
 8004d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d0e:	f04f 0000 	mov.w	r0, #0
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	00d9      	lsls	r1, r3, #3
 8004d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d1c:	00d0      	lsls	r0, r2, #3
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	1912      	adds	r2, r2, r4
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	0299      	lsls	r1, r3, #10
 8004d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d36:	0290      	lsls	r0, r2, #10
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	f7fb fa5c 	bl	8000204 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0f1b      	lsrs	r3, r3, #28
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	61bb      	str	r3, [r7, #24]
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d6e:	61bb      	str	r3, [r7, #24]
      break;
 8004d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d72:	69bb      	ldr	r3, [r7, #24]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	007a1200 	.word	0x007a1200

08004d8c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e28d      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8083 	beq.w	8004eb2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004dac:	4b94      	ldr	r3, [pc, #592]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 030c 	and.w	r3, r3, #12
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d019      	beq.n	8004dec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004db8:	4b91      	ldr	r3, [pc, #580]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004dc4:	4b8e      	ldr	r3, [pc, #568]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dd0:	d00c      	beq.n	8004dec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd2:	4b8b      	ldr	r3, [pc, #556]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d112      	bne.n	8004e04 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dde:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dea:	d10b      	bne.n	8004e04 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dec:	4b84      	ldr	r3, [pc, #528]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d05b      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x124>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d157      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e25a      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0c:	d106      	bne.n	8004e1c <HAL_RCC_OscConfig+0x90>
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7b      	ldr	r2, [pc, #492]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e01d      	b.n	8004e58 <HAL_RCC_OscConfig+0xcc>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e24:	d10c      	bne.n	8004e40 <HAL_RCC_OscConfig+0xb4>
 8004e26:	4b76      	ldr	r3, [pc, #472]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a75      	ldr	r2, [pc, #468]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	4b73      	ldr	r3, [pc, #460]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a72      	ldr	r2, [pc, #456]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e00b      	b.n	8004e58 <HAL_RCC_OscConfig+0xcc>
 8004e40:	4b6f      	ldr	r3, [pc, #444]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6e      	ldr	r2, [pc, #440]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	4b6c      	ldr	r3, [pc, #432]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a6b      	ldr	r2, [pc, #428]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d013      	beq.n	8004e88 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fc ffbe 	bl	8001de0 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e68:	f7fc ffba 	bl	8001de0 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b64      	cmp	r3, #100	; 0x64
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e21f      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0xdc>
 8004e86:	e014      	b.n	8004eb2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fc ffaa 	bl	8001de0 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e90:	f7fc ffa6 	bl	8001de0 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	; 0x64
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e20b      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea2:	4b57      	ldr	r3, [pc, #348]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x104>
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d06f      	beq.n	8004f9e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ebe:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d017      	beq.n	8004efa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004eca:	4b4d      	ldr	r3, [pc, #308]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d105      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ed6:	4b4a      	ldr	r3, [pc, #296]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00b      	beq.n	8004efa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee2:	4b47      	ldr	r3, [pc, #284]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004eea:	2b0c      	cmp	r3, #12
 8004eec:	d11c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eee:	4b44      	ldr	r3, [pc, #272]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d116      	bne.n	8004f28 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efa:	4b41      	ldr	r3, [pc, #260]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_RCC_OscConfig+0x186>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d001      	beq.n	8004f12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e1d3      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f12:	4b3b      	ldr	r3, [pc, #236]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4937      	ldr	r1, [pc, #220]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f26:	e03a      	b.n	8004f9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d020      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f30:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_RCC_OscConfig+0x278>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f36:	f7fc ff53 	bl	8001de0 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f3e:	f7fc ff4f 	bl	8001de0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e1b4      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f50:	4b2b      	ldr	r3, [pc, #172]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f5c:	4b28      	ldr	r3, [pc, #160]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4925      	ldr	r1, [pc, #148]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	600b      	str	r3, [r1, #0]
 8004f70:	e015      	b.n	8004f9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f72:	4b24      	ldr	r3, [pc, #144]	; (8005004 <HAL_RCC_OscConfig+0x278>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fc ff32 	bl	8001de0 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f80:	f7fc ff2e 	bl	8001de0 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e193      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f92:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d036      	beq.n	8005018 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d016      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fc ff12 	bl	8001de0 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc0:	f7fc ff0e 	bl	8001de0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e173      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0f0      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x234>
 8004fde:	e01b      	b.n	8005018 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fc fefb 	bl	8001de0 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fec:	e00e      	b.n	800500c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fee:	f7fc fef7 	bl	8001de0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d907      	bls.n	800500c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e15c      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
 8005000:	40023800 	.word	0x40023800
 8005004:	42470000 	.word	0x42470000
 8005008:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800500c:	4b8a      	ldr	r3, [pc, #552]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 800500e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1ea      	bne.n	8004fee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8097 	beq.w	8005154 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005026:	2300      	movs	r3, #0
 8005028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502a:	4b83      	ldr	r3, [pc, #524]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10f      	bne.n	8005056 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005036:	2300      	movs	r3, #0
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	4b7f      	ldr	r3, [pc, #508]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	4a7e      	ldr	r2, [pc, #504]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 8005040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005044:	6413      	str	r3, [r2, #64]	; 0x40
 8005046:	4b7c      	ldr	r3, [pc, #496]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005052:	2301      	movs	r3, #1
 8005054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005056:	4b79      	ldr	r3, [pc, #484]	; (800523c <HAL_RCC_OscConfig+0x4b0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d118      	bne.n	8005094 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005062:	4b76      	ldr	r3, [pc, #472]	; (800523c <HAL_RCC_OscConfig+0x4b0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a75      	ldr	r2, [pc, #468]	; (800523c <HAL_RCC_OscConfig+0x4b0>)
 8005068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800506c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506e:	f7fc feb7 	bl	8001de0 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005076:	f7fc feb3 	bl	8001de0 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e118      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005088:	4b6c      	ldr	r3, [pc, #432]	; (800523c <HAL_RCC_OscConfig+0x4b0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <HAL_RCC_OscConfig+0x31e>
 800509c:	4b66      	ldr	r3, [pc, #408]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a65      	ldr	r2, [pc, #404]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
 80050a8:	e01c      	b.n	80050e4 <HAL_RCC_OscConfig+0x358>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x340>
 80050b2:	4b61      	ldr	r3, [pc, #388]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	4a60      	ldr	r2, [pc, #384]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050b8:	f043 0304 	orr.w	r3, r3, #4
 80050bc:	6713      	str	r3, [r2, #112]	; 0x70
 80050be:	4b5e      	ldr	r3, [pc, #376]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c2:	4a5d      	ldr	r2, [pc, #372]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ca:	e00b      	b.n	80050e4 <HAL_RCC_OscConfig+0x358>
 80050cc:	4b5a      	ldr	r3, [pc, #360]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a59      	ldr	r2, [pc, #356]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050d2:	f023 0301 	bic.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
 80050d8:	4b57      	ldr	r3, [pc, #348]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a56      	ldr	r2, [pc, #344]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80050de:	f023 0304 	bic.w	r3, r3, #4
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d015      	beq.n	8005118 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ec:	f7fc fe78 	bl	8001de0 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f2:	e00a      	b.n	800510a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f4:	f7fc fe74 	bl	8001de0 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e0d7      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510a:	4b4b      	ldr	r3, [pc, #300]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0ee      	beq.n	80050f4 <HAL_RCC_OscConfig+0x368>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fc fe62 	bl	8001de0 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511e:	e00a      	b.n	8005136 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005120:	f7fc fe5e 	bl	8001de0 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e0c1      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005136:	4b40      	ldr	r3, [pc, #256]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ee      	bne.n	8005120 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005142:	7dfb      	ldrb	r3, [r7, #23]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d105      	bne.n	8005154 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005148:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	4a3a      	ldr	r2, [pc, #232]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 800514e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005152:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80ad 	beq.w	80052b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b08      	cmp	r3, #8
 8005168:	d060      	beq.n	800522c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d145      	bne.n	80051fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005172:	4b33      	ldr	r3, [pc, #204]	; (8005240 <HAL_RCC_OscConfig+0x4b4>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fc fe32 	bl	8001de0 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005180:	f7fc fe2e 	bl	8001de0 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e093      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005192:	4b29      	ldr	r3, [pc, #164]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	019b      	lsls	r3, r3, #6
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	3b01      	subs	r3, #1
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	061b      	lsls	r3, r3, #24
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	071b      	lsls	r3, r3, #28
 80051ca:	491b      	ldr	r1, [pc, #108]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d0:	4b1b      	ldr	r3, [pc, #108]	; (8005240 <HAL_RCC_OscConfig+0x4b4>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d6:	f7fc fe03 	bl	8001de0 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051de:	f7fc fdff 	bl	8001de0 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e064      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f0:	4b11      	ldr	r3, [pc, #68]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCC_OscConfig+0x452>
 80051fc:	e05c      	b.n	80052b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <HAL_RCC_OscConfig+0x4b4>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fc fdec 	bl	8001de0 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800520c:	f7fc fde8 	bl	8001de0 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e04d      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1f0      	bne.n	800520c <HAL_RCC_OscConfig+0x480>
 800522a:	e045      	b.n	80052b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d107      	bne.n	8005244 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e040      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
 8005238:	40023800 	.word	0x40023800
 800523c:	40007000 	.word	0x40007000
 8005240:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005244:	4b1f      	ldr	r3, [pc, #124]	; (80052c4 <HAL_RCC_OscConfig+0x538>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d030      	beq.n	80052b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d129      	bne.n	80052b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800526a:	429a      	cmp	r2, r3
 800526c:	d122      	bne.n	80052b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005274:	4013      	ands	r3, r2
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800527a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800527c:	4293      	cmp	r3, r2
 800527e:	d119      	bne.n	80052b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	3b01      	subs	r3, #1
 800528e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d10f      	bne.n	80052b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d107      	bne.n	80052b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e000      	b.n	80052ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800

080052c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e041      	b.n	800535e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fb fe7a 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f000 fe56 	bl	8005fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e041      	b.n	80053fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d106      	bne.n	8005392 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f839 	bl	8005404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f000 fe07 	bl	8005fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d109      	bne.n	800543c <HAL_TIM_PWM_Start+0x24>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	bf14      	ite	ne
 8005434:	2301      	movne	r3, #1
 8005436:	2300      	moveq	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	e022      	b.n	8005482 <HAL_TIM_PWM_Start+0x6a>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	2b04      	cmp	r3, #4
 8005440:	d109      	bne.n	8005456 <HAL_TIM_PWM_Start+0x3e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	bf14      	ite	ne
 800544e:	2301      	movne	r3, #1
 8005450:	2300      	moveq	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	e015      	b.n	8005482 <HAL_TIM_PWM_Start+0x6a>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b08      	cmp	r3, #8
 800545a:	d109      	bne.n	8005470 <HAL_TIM_PWM_Start+0x58>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e008      	b.n	8005482 <HAL_TIM_PWM_Start+0x6a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e07c      	b.n	8005584 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <HAL_TIM_PWM_Start+0x82>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005498:	e013      	b.n	80054c2 <HAL_TIM_PWM_Start+0xaa>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d104      	bne.n	80054aa <HAL_TIM_PWM_Start+0x92>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a8:	e00b      	b.n	80054c2 <HAL_TIM_PWM_Start+0xaa>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Start+0xa2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b8:	e003      	b.n	80054c2 <HAL_TIM_PWM_Start+0xaa>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2201      	movs	r2, #1
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 f85e 	bl	800658c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2d      	ldr	r2, [pc, #180]	; (800558c <HAL_TIM_PWM_Start+0x174>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIM_PWM_Start+0xcc>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2c      	ldr	r2, [pc, #176]	; (8005590 <HAL_TIM_PWM_Start+0x178>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d101      	bne.n	80054e8 <HAL_TIM_PWM_Start+0xd0>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e000      	b.n	80054ea <HAL_TIM_PWM_Start+0xd2>
 80054e8:	2300      	movs	r3, #0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a22      	ldr	r2, [pc, #136]	; (800558c <HAL_TIM_PWM_Start+0x174>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d022      	beq.n	800554e <HAL_TIM_PWM_Start+0x136>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005510:	d01d      	beq.n	800554e <HAL_TIM_PWM_Start+0x136>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_TIM_PWM_Start+0x17c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d018      	beq.n	800554e <HAL_TIM_PWM_Start+0x136>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_TIM_PWM_Start+0x180>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <HAL_TIM_PWM_Start+0x136>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_TIM_PWM_Start+0x184>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00e      	beq.n	800554e <HAL_TIM_PWM_Start+0x136>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_TIM_PWM_Start+0x178>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d009      	beq.n	800554e <HAL_TIM_PWM_Start+0x136>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a18      	ldr	r2, [pc, #96]	; (80055a0 <HAL_TIM_PWM_Start+0x188>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d004      	beq.n	800554e <HAL_TIM_PWM_Start+0x136>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a16      	ldr	r2, [pc, #88]	; (80055a4 <HAL_TIM_PWM_Start+0x18c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d111      	bne.n	8005572 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b06      	cmp	r3, #6
 800555e:	d010      	beq.n	8005582 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005570:	e007      	b.n	8005582 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40010000 	.word	0x40010000
 8005590:	40010400 	.word	0x40010400
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40001800 	.word	0x40001800

080055a8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e022      	b.n	800561a <HAL_TIM_PWM_Start_DMA+0x72>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d109      	bne.n	80055ee <HAL_TIM_PWM_Start_DMA+0x46>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	bf0c      	ite	eq
 80055e6:	2301      	moveq	r3, #1
 80055e8:	2300      	movne	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e015      	b.n	800561a <HAL_TIM_PWM_Start_DMA+0x72>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d109      	bne.n	8005608 <HAL_TIM_PWM_Start_DMA+0x60>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e008      	b.n	800561a <HAL_TIM_PWM_Start_DMA+0x72>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	bf0c      	ite	eq
 8005614:	2301      	moveq	r3, #1
 8005616:	2300      	movne	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	e171      	b.n	8005906 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_TIM_PWM_Start_DMA+0x94>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf0c      	ite	eq
 8005634:	2301      	moveq	r3, #1
 8005636:	2300      	movne	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e022      	b.n	8005682 <HAL_TIM_PWM_Start_DMA+0xda>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d109      	bne.n	8005656 <HAL_TIM_PWM_Start_DMA+0xae>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	bf0c      	ite	eq
 800564e:	2301      	moveq	r3, #1
 8005650:	2300      	movne	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	e015      	b.n	8005682 <HAL_TIM_PWM_Start_DMA+0xda>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b08      	cmp	r3, #8
 800565a:	d109      	bne.n	8005670 <HAL_TIM_PWM_Start_DMA+0xc8>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e008      	b.n	8005682 <HAL_TIM_PWM_Start_DMA+0xda>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d024      	beq.n	80056d0 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start_DMA+0xee>
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e137      	b.n	8005906 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d104      	bne.n	80056a6 <HAL_TIM_PWM_Start_DMA+0xfe>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a4:	e016      	b.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d104      	bne.n	80056b6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b4:	e00e      	b.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d104      	bne.n	80056c6 <HAL_TIM_PWM_Start_DMA+0x11e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056c4:	e006      	b.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x12c>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ce:	e001      	b.n	80056d4 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e118      	b.n	8005906 <HAL_TIM_PWM_Start_DMA+0x35e>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b0c      	cmp	r3, #12
 80056d8:	f200 80ae 	bhi.w	8005838 <HAL_TIM_PWM_Start_DMA+0x290>
 80056dc:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	08005719 	.word	0x08005719
 80056e8:	08005839 	.word	0x08005839
 80056ec:	08005839 	.word	0x08005839
 80056f0:	08005839 	.word	0x08005839
 80056f4:	08005761 	.word	0x08005761
 80056f8:	08005839 	.word	0x08005839
 80056fc:	08005839 	.word	0x08005839
 8005700:	08005839 	.word	0x08005839
 8005704:	080057a9 	.word	0x080057a9
 8005708:	08005839 	.word	0x08005839
 800570c:	08005839 	.word	0x08005839
 8005710:	08005839 	.word	0x08005839
 8005714:	080057f1 	.word	0x080057f1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	4a7c      	ldr	r2, [pc, #496]	; (8005910 <HAL_TIM_PWM_Start_DMA+0x368>)
 800571e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	4a7b      	ldr	r2, [pc, #492]	; (8005914 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	4a7a      	ldr	r2, [pc, #488]	; (8005918 <HAL_TIM_PWM_Start_DMA+0x370>)
 800572e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3334      	adds	r3, #52	; 0x34
 800573c:	461a      	mov	r2, r3
 800573e:	887b      	ldrh	r3, [r7, #2]
 8005740:	f7fc fd1a 	bl	8002178 <HAL_DMA_Start_IT>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e0db      	b.n	8005906 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800575c:	60da      	str	r2, [r3, #12]
      break;
 800575e:	e06e      	b.n	800583e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005764:	4a6a      	ldr	r2, [pc, #424]	; (8005910 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005766:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576c:	4a69      	ldr	r2, [pc, #420]	; (8005914 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800576e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	4a68      	ldr	r2, [pc, #416]	; (8005918 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005776:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3338      	adds	r3, #56	; 0x38
 8005784:	461a      	mov	r2, r3
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	f7fc fcf6 	bl	8002178 <HAL_DMA_Start_IT>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e0b7      	b.n	8005906 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057a4:	60da      	str	r2, [r3, #12]
      break;
 80057a6:	e04a      	b.n	800583e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a58      	ldr	r2, [pc, #352]	; (8005910 <HAL_TIM_PWM_Start_DMA+0x368>)
 80057ae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	4a57      	ldr	r2, [pc, #348]	; (8005914 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	4a56      	ldr	r2, [pc, #344]	; (8005918 <HAL_TIM_PWM_Start_DMA+0x370>)
 80057be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	333c      	adds	r3, #60	; 0x3c
 80057cc:	461a      	mov	r2, r3
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	f7fc fcd2 	bl	8002178 <HAL_DMA_Start_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e093      	b.n	8005906 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ec:	60da      	str	r2, [r3, #12]
      break;
 80057ee:	e026      	b.n	800583e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	4a46      	ldr	r2, [pc, #280]	; (8005910 <HAL_TIM_PWM_Start_DMA+0x368>)
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4a45      	ldr	r2, [pc, #276]	; (8005914 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	4a44      	ldr	r2, [pc, #272]	; (8005918 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005806:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3340      	adds	r3, #64	; 0x40
 8005814:	461a      	mov	r2, r3
 8005816:	887b      	ldrh	r3, [r7, #2]
 8005818:	f7fc fcae 	bl	8002178 <HAL_DMA_Start_IT>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e06f      	b.n	8005906 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005834:	60da      	str	r2, [r3, #12]
      break;
 8005836:	e002      	b.n	800583e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	75fb      	strb	r3, [r7, #23]
      break;
 800583c:	bf00      	nop
  }

  if (status == HAL_OK)
 800583e:	7dfb      	ldrb	r3, [r7, #23]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d15f      	bne.n	8005904 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fe9d 	bl	800658c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a31      	ldr	r2, [pc, #196]	; (800591c <HAL_TIM_PWM_Start_DMA+0x374>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIM_PWM_Start_DMA+0x2be>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2f      	ldr	r2, [pc, #188]	; (8005920 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800587e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a25      	ldr	r2, [pc, #148]	; (800591c <HAL_TIM_PWM_Start_DMA+0x374>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d022      	beq.n	80058d0 <HAL_TIM_PWM_Start_DMA+0x328>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005892:	d01d      	beq.n	80058d0 <HAL_TIM_PWM_Start_DMA+0x328>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a22      	ldr	r2, [pc, #136]	; (8005924 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d018      	beq.n	80058d0 <HAL_TIM_PWM_Start_DMA+0x328>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	; (8005928 <HAL_TIM_PWM_Start_DMA+0x380>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1f      	ldr	r2, [pc, #124]	; (800592c <HAL_TIM_PWM_Start_DMA+0x384>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00e      	beq.n	80058d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1a      	ldr	r2, [pc, #104]	; (8005920 <HAL_TIM_PWM_Start_DMA+0x378>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_TIM_PWM_Start_DMA+0x388>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIM_PWM_Start_DMA+0x328>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d111      	bne.n	80058f4 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b06      	cmp	r3, #6
 80058e0:	d010      	beq.n	8005904 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f2:	e007      	b.n	8005904 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	08005ea9 	.word	0x08005ea9
 8005914:	08005f51 	.word	0x08005f51
 8005918:	08005e17 	.word	0x08005e17
 800591c:	40010000 	.word	0x40010000
 8005920:	40010400 	.word	0x40010400
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40014000 	.word	0x40014000
 8005934:	40001800 	.word	0x40001800

08005938 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d855      	bhi.n	80059f8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005989 	.word	0x08005989
 8005958:	080059f9 	.word	0x080059f9
 800595c:	080059f9 	.word	0x080059f9
 8005960:	080059f9 	.word	0x080059f9
 8005964:	080059a5 	.word	0x080059a5
 8005968:	080059f9 	.word	0x080059f9
 800596c:	080059f9 	.word	0x080059f9
 8005970:	080059f9 	.word	0x080059f9
 8005974:	080059c1 	.word	0x080059c1
 8005978:	080059f9 	.word	0x080059f9
 800597c:	080059f9 	.word	0x080059f9
 8005980:	080059f9 	.word	0x080059f9
 8005984:	080059dd 	.word	0x080059dd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005996:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	4618      	mov	r0, r3
 800599e:	f7fc fcb3 	bl	8002308 <HAL_DMA_Abort_IT>
      break;
 80059a2:	e02c      	b.n	80059fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fc fca5 	bl	8002308 <HAL_DMA_Abort_IT>
      break;
 80059be:	e01e      	b.n	80059fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fc fc97 	bl	8002308 <HAL_DMA_Abort_IT>
      break;
 80059da:	e010      	b.n	80059fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68da      	ldr	r2, [r3, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fc fc89 	bl	8002308 <HAL_DMA_Abort_IT>
      break;
 80059f6:	e002      	b.n	80059fe <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      break;
 80059fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d161      	bne.n	8005ac8 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fdbd 	bl	800658c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <HAL_TIM_PWM_Stop_DMA+0xee>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2d      	ldr	r2, [pc, #180]	; (8005ad8 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d017      	beq.n	8005a60 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10f      	bne.n	8005a60 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6a1a      	ldr	r2, [r3, #32]
 8005a46:	f240 4344 	movw	r3, #1092	; 0x444
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d107      	bne.n	8005a60 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6a1a      	ldr	r2, [r3, #32]
 8005a76:	f240 4344 	movw	r3, #1092	; 0x444
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d107      	bne.n	8005a90 <HAL_TIM_PWM_Stop_DMA+0x158>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0201 	bic.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <HAL_TIM_PWM_Stop_DMA+0x168>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a9e:	e013      	b.n	8005ac8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d104      	bne.n	8005ab0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aae:	e00b      	b.n	8005ac8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d104      	bne.n	8005ac0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abe:	e003      	b.n	8005ac8 <HAL_TIM_PWM_Stop_DMA+0x190>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40010000 	.word	0x40010000
 8005ad8:	40010400 	.word	0x40010400

08005adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0ae      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	f200 809f 	bhi.w	8005c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005c49 	.word	0x08005c49
 8005b18:	08005c49 	.word	0x08005c49
 8005b1c:	08005c49 	.word	0x08005c49
 8005b20:	08005b85 	.word	0x08005b85
 8005b24:	08005c49 	.word	0x08005c49
 8005b28:	08005c49 	.word	0x08005c49
 8005b2c:	08005c49 	.word	0x08005c49
 8005b30:	08005bc7 	.word	0x08005bc7
 8005b34:	08005c49 	.word	0x08005c49
 8005b38:	08005c49 	.word	0x08005c49
 8005b3c:	08005c49 	.word	0x08005c49
 8005b40:	08005c07 	.word	0x08005c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fad4 	bl	80060f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0208 	orr.w	r2, r2, #8
 8005b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0204 	bic.w	r2, r2, #4
 8005b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6999      	ldr	r1, [r3, #24]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	619a      	str	r2, [r3, #24]
      break;
 8005b82:	e064      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fb24 	bl	80061d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	619a      	str	r2, [r3, #24]
      break;
 8005bc4:	e043      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fb79 	bl	80062c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0208 	orr.w	r2, r2, #8
 8005be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0204 	bic.w	r2, r2, #4
 8005bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69d9      	ldr	r1, [r3, #28]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	61da      	str	r2, [r3, #28]
      break;
 8005c04:	e023      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fbcd 	bl	80063ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69d9      	ldr	r1, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	021a      	lsls	r2, r3, #8
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	61da      	str	r2, [r3, #28]
      break;
 8005c46:	e002      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIM_ConfigClockSource+0x1c>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e0b4      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x186>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb4:	d03e      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0xd4>
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cba:	f200 8087 	bhi.w	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	f000 8086 	beq.w	8005dd2 <HAL_TIM_ConfigClockSource+0x172>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cca:	d87f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b70      	cmp	r3, #112	; 0x70
 8005cce:	d01a      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xa6>
 8005cd0:	2b70      	cmp	r3, #112	; 0x70
 8005cd2:	d87b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b60      	cmp	r3, #96	; 0x60
 8005cd6:	d050      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x11a>
 8005cd8:	2b60      	cmp	r3, #96	; 0x60
 8005cda:	d877      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b50      	cmp	r3, #80	; 0x50
 8005cde:	d03c      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ce0:	2b50      	cmp	r3, #80	; 0x50
 8005ce2:	d873      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d058      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	d86f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d064      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d86b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d060      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d867      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05c      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d05a      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	e062      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f000 fc19 	bl	800654c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	609a      	str	r2, [r3, #8]
      break;
 8005d32:	e04f      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6899      	ldr	r1, [r3, #8]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f000 fc02 	bl	800654c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d56:	609a      	str	r2, [r3, #8]
      break;
 8005d58:	e03c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 fb76 	bl	8006458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2150      	movs	r1, #80	; 0x50
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fbcf 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 8005d78:	e02c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 fb95 	bl	80064b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2160      	movs	r1, #96	; 0x60
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fbbf 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e01c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 fb56 	bl	8006458 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fbaf 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 8005db8:	e00c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f000 fba6 	bl	8006516 <TIM_ITRx_SetConfig>
      break;
 8005dca:	e003      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd0:	e000      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d107      	bne.n	8005e3e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3c:	e02a      	b.n	8005e94 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d107      	bne.n	8005e58 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e56:	e01d      	b.n	8005e94 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d107      	bne.n	8005e72 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2204      	movs	r2, #4
 8005e66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e70:	e010      	b.n	8005e94 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d107      	bne.n	8005e8c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2208      	movs	r2, #8
 8005e80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e8a:	e003      	b.n	8005e94 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff ffb4 	bl	8005e02 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d10b      	bne.n	8005ed8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d136      	bne.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed6:	e031      	b.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d10b      	bne.n	8005efa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d125      	bne.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef8:	e020      	b.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d10b      	bne.n	8005f1c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2204      	movs	r2, #4
 8005f08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d114      	bne.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f1a:	e00f      	b.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d10a      	bne.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d103      	bne.n	8005f3c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7fa ff5d 	bl	8000dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
}
 8005f48:	bf00      	nop
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d103      	bne.n	8005f70 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	771a      	strb	r2, [r3, #28]
 8005f6e:	e019      	b.n	8005fa4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d103      	bne.n	8005f82 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	771a      	strb	r2, [r3, #28]
 8005f80:	e010      	b.n	8005fa4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d103      	bne.n	8005f94 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2204      	movs	r2, #4
 8005f90:	771a      	strb	r2, [r3, #28]
 8005f92:	e007      	b.n	8005fa4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d102      	bne.n	8005fa4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff ff22 	bl	8005dee <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
}
 8005fb0:	bf00      	nop
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a40      	ldr	r2, [pc, #256]	; (80060cc <TIM_Base_SetConfig+0x114>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd6:	d00f      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a3d      	ldr	r2, [pc, #244]	; (80060d0 <TIM_Base_SetConfig+0x118>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00b      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a3c      	ldr	r2, [pc, #240]	; (80060d4 <TIM_Base_SetConfig+0x11c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3b      	ldr	r2, [pc, #236]	; (80060d8 <TIM_Base_SetConfig+0x120>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3a      	ldr	r2, [pc, #232]	; (80060dc <TIM_Base_SetConfig+0x124>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d108      	bne.n	800600a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2f      	ldr	r2, [pc, #188]	; (80060cc <TIM_Base_SetConfig+0x114>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d02b      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006018:	d027      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2c      	ldr	r2, [pc, #176]	; (80060d0 <TIM_Base_SetConfig+0x118>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d023      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <TIM_Base_SetConfig+0x11c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01f      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2a      	ldr	r2, [pc, #168]	; (80060d8 <TIM_Base_SetConfig+0x120>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01b      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a29      	ldr	r2, [pc, #164]	; (80060dc <TIM_Base_SetConfig+0x124>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d017      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a28      	ldr	r2, [pc, #160]	; (80060e0 <TIM_Base_SetConfig+0x128>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a27      	ldr	r2, [pc, #156]	; (80060e4 <TIM_Base_SetConfig+0x12c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00f      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a26      	ldr	r2, [pc, #152]	; (80060e8 <TIM_Base_SetConfig+0x130>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00b      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a25      	ldr	r2, [pc, #148]	; (80060ec <TIM_Base_SetConfig+0x134>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d007      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a24      	ldr	r2, [pc, #144]	; (80060f0 <TIM_Base_SetConfig+0x138>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a23      	ldr	r2, [pc, #140]	; (80060f4 <TIM_Base_SetConfig+0x13c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d108      	bne.n	800607c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <TIM_Base_SetConfig+0x114>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_Base_SetConfig+0xf8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a0c      	ldr	r2, [pc, #48]	; (80060dc <TIM_Base_SetConfig+0x124>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d103      	bne.n	80060b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	691a      	ldr	r2, [r3, #16]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	615a      	str	r2, [r3, #20]
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40010000 	.word	0x40010000
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800
 80060d8:	40000c00 	.word	0x40000c00
 80060dc:	40010400 	.word	0x40010400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800
 80060ec:	40001800 	.word	0x40001800
 80060f0:	40001c00 	.word	0x40001c00
 80060f4:	40002000 	.word	0x40002000

080060f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0201 	bic.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f023 0302 	bic.w	r3, r3, #2
 8006140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	4313      	orrs	r3, r2
 800614a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <TIM_OC1_SetConfig+0xd8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC1_SetConfig+0x64>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <TIM_OC1_SetConfig+0xdc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d10c      	bne.n	8006176 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0308 	bic.w	r3, r3, #8
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 0304 	bic.w	r3, r3, #4
 8006174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <TIM_OC1_SetConfig+0xd8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC1_SetConfig+0x8e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a14      	ldr	r2, [pc, #80]	; (80061d4 <TIM_OC1_SetConfig+0xdc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d111      	bne.n	80061aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800618c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	621a      	str	r2, [r3, #32]
}
 80061c4:	bf00      	nop
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400

080061d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f023 0210 	bic.w	r2, r3, #16
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800620e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0320 	bic.w	r3, r3, #32
 8006222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a22      	ldr	r2, [pc, #136]	; (80062bc <TIM_OC2_SetConfig+0xe4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_OC2_SetConfig+0x68>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a21      	ldr	r2, [pc, #132]	; (80062c0 <TIM_OC2_SetConfig+0xe8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d10d      	bne.n	800625c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a17      	ldr	r2, [pc, #92]	; (80062bc <TIM_OC2_SetConfig+0xe4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_OC2_SetConfig+0x94>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a16      	ldr	r2, [pc, #88]	; (80062c0 <TIM_OC2_SetConfig+0xe8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d113      	bne.n	8006294 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800627a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40010400 	.word	0x40010400

080062c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800630c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a21      	ldr	r2, [pc, #132]	; (80063a4 <TIM_OC3_SetConfig+0xe0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_OC3_SetConfig+0x66>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <TIM_OC3_SetConfig+0xe4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d10d      	bne.n	8006346 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006330:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	021b      	lsls	r3, r3, #8
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a16      	ldr	r2, [pc, #88]	; (80063a4 <TIM_OC3_SetConfig+0xe0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_OC3_SetConfig+0x92>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <TIM_OC3_SetConfig+0xe4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d113      	bne.n	800637e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800635c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40010400 	.word	0x40010400

080063ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	031b      	lsls	r3, r3, #12
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a12      	ldr	r2, [pc, #72]	; (8006450 <TIM_OC4_SetConfig+0xa4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d003      	beq.n	8006414 <TIM_OC4_SetConfig+0x68>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a11      	ldr	r2, [pc, #68]	; (8006454 <TIM_OC4_SetConfig+0xa8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d109      	bne.n	8006428 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800641a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	019b      	lsls	r3, r3, #6
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40010000 	.word	0x40010000
 8006454:	40010400 	.word	0x40010400

08006458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4313      	orrs	r3, r2
 800648c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f023 030a 	bic.w	r3, r3, #10
 8006494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b087      	sub	sp, #28
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0210 	bic.w	r2, r3, #16
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	031b      	lsls	r3, r3, #12
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	011b      	lsls	r3, r3, #4
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006516:	b480      	push	{r7}
 8006518:	b085      	sub	sp, #20
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	f043 0307 	orr.w	r3, r3, #7
 8006538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	021a      	lsls	r2, r3, #8
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	431a      	orrs	r2, r3
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4313      	orrs	r3, r2
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	609a      	str	r2, [r3, #8]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2201      	movs	r2, #1
 80065a0:	fa02 f303 	lsl.w	r3, r2, r3
 80065a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a1a      	ldr	r2, [r3, #32]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	43db      	mvns	r3, r3
 80065ae:	401a      	ands	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1a      	ldr	r2, [r3, #32]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	fa01 f303 	lsl.w	r3, r1, r3
 80065c4:	431a      	orrs	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e05a      	b.n	80066a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d022      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663c:	d01d      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a1d      	ldr	r2, [pc, #116]	; (80066b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d018      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a1b      	ldr	r2, [pc, #108]	; (80066bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a1a      	ldr	r2, [pc, #104]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00e      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a18      	ldr	r2, [pc, #96]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d009      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a15      	ldr	r2, [pc, #84]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d10c      	bne.n	8006694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	4313      	orrs	r3, r2
 800668a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40010400 	.word	0x40010400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40001800 	.word	0x40001800

080066d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e03d      	b.n	8006768 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e03f      	b.n	8006806 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fa fd0e 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2224      	movs	r2, #36	; 0x24
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fdc7 	bl	800734c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68da      	ldr	r2, [r3, #12]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	4613      	mov	r3, r2
 800681c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b20      	cmp	r3, #32
 8006828:	d165      	bne.n	80068f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d002      	beq.n	8006836 <HAL_UART_Transmit_DMA+0x26>
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e05e      	b.n	80068f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_UART_Transmit_DMA+0x38>
 8006844:	2302      	movs	r3, #2
 8006846:	e057      	b.n	80068f8 <HAL_UART_Transmit_DMA+0xe8>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	88fa      	ldrh	r2, [r7, #6]
 800685a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	88fa      	ldrh	r2, [r7, #6]
 8006860:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2221      	movs	r2, #33	; 0x21
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006874:	4a22      	ldr	r2, [pc, #136]	; (8006900 <HAL_UART_Transmit_DMA+0xf0>)
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	4a21      	ldr	r2, [pc, #132]	; (8006904 <HAL_UART_Transmit_DMA+0xf4>)
 800687e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	4a20      	ldr	r2, [pc, #128]	; (8006908 <HAL_UART_Transmit_DMA+0xf8>)
 8006886:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688c:	2200      	movs	r2, #0
 800688e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006890:	f107 0308 	add.w	r3, r7, #8
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	6819      	ldr	r1, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3304      	adds	r3, #4
 80068a4:	461a      	mov	r2, r3
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	f7fb fc66 	bl	8002178 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3314      	adds	r3, #20
 80068c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	617b      	str	r3, [r7, #20]
   return(result);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3314      	adds	r3, #20
 80068dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068de:	627a      	str	r2, [r7, #36]	; 0x24
 80068e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e2:	6a39      	ldr	r1, [r7, #32]
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e5      	bne.n	80068be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e000      	b.n	80068f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80068f6:	2302      	movs	r3, #2
  }
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3730      	adds	r7, #48	; 0x30
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	08006e7d 	.word	0x08006e7d
 8006904:	08006f17 	.word	0x08006f17
 8006908:	08006f33 	.word	0x08006f33

0800690c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b0ba      	sub	sp, #232	; 0xe8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006932:	2300      	movs	r3, #0
 8006934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006938:	2300      	movs	r3, #0
 800693a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800693e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800694a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10f      	bne.n	8006972 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d009      	beq.n	8006972 <HAL_UART_IRQHandler+0x66>
 800695e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fc32 	bl	80071d4 <UART_Receive_IT>
      return;
 8006970:	e256      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006972:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80de 	beq.w	8006b38 <HAL_UART_IRQHandler+0x22c>
 800697c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 80d1 	beq.w	8006b38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <HAL_UART_IRQHandler+0xae>
 80069a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <HAL_UART_IRQHandler+0xd2>
 80069c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	f043 0202 	orr.w	r2, r3, #2
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <HAL_UART_IRQHandler+0xf6>
 80069ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0204 	orr.w	r2, r3, #4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <HAL_UART_IRQHandler+0x126>
 8006a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f043 0208 	orr.w	r2, r3, #8
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 81ed 	beq.w	8006e16 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a40:	f003 0320 	and.w	r3, r3, #32
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_UART_IRQHandler+0x14e>
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fbbd 	bl	80071d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d103      	bne.n	8006a86 <HAL_UART_IRQHandler+0x17a>
 8006a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d04f      	beq.n	8006b26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fac5 	bl	8007016 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d141      	bne.n	8006b1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1d9      	bne.n	8006a9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d013      	beq.n	8006b16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	4a7d      	ldr	r2, [pc, #500]	; (8006ce8 <HAL_UART_IRQHandler+0x3dc>)
 8006af4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fb fc04 	bl	8002308 <HAL_DMA_Abort_IT>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d016      	beq.n	8006b34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b14:	e00e      	b.n	8006b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f99a 	bl	8006e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	e00a      	b.n	8006b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f996 	bl	8006e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b24:	e006      	b.n	8006b34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f992 	bl	8006e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b32:	e170      	b.n	8006e16 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b34:	bf00      	nop
    return;
 8006b36:	e16e      	b.n	8006e16 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	f040 814a 	bne.w	8006dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0310 	and.w	r3, r3, #16
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 8143 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 813c 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	60bb      	str	r3, [r7, #8]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	f040 80b4 	bne.w	8006cec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8140 	beq.w	8006e1a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	f080 8139 	bcs.w	8006e1a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bba:	f000 8088 	beq.w	8006cce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	330c      	adds	r3, #12
 8006be6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1d9      	bne.n	8006bbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3314      	adds	r3, #20
 8006c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c1c:	f023 0301 	bic.w	r3, r3, #1
 8006c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3314      	adds	r3, #20
 8006c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e1      	bne.n	8006c0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3314      	adds	r3, #20
 8006c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e3      	bne.n	8006c46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	330c      	adds	r3, #12
 8006c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c9e:	f023 0310 	bic.w	r3, r3, #16
 8006ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	330c      	adds	r3, #12
 8006cac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cb8:	e841 2300 	strex	r3, r2, [r1]
 8006cbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e3      	bne.n	8006c8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fb faad 	bl	8002228 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8c0 	bl	8006e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ce4:	e099      	b.n	8006e1a <HAL_UART_IRQHandler+0x50e>
 8006ce6:	bf00      	nop
 8006ce8:	080070dd 	.word	0x080070dd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 808b 	beq.w	8006e1e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8086 	beq.w	8006e1e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	330c      	adds	r3, #12
 8006d18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	330c      	adds	r3, #12
 8006d32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d36:	647a      	str	r2, [r7, #68]	; 0x44
 8006d38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e3      	bne.n	8006d12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d54:	e853 3f00 	ldrex	r3, [r3]
 8006d58:	623b      	str	r3, [r7, #32]
   return(result);
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3314      	adds	r3, #20
 8006d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e3      	bne.n	8006d4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	330c      	adds	r3, #12
 8006d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0310 	bic.w	r3, r3, #16
 8006da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006db4:	61fa      	str	r2, [r7, #28]
 8006db6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	69b9      	ldr	r1, [r7, #24]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e3      	bne.n	8006d90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f848 	bl	8006e64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006dd4:	e023      	b.n	8006e1e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_UART_IRQHandler+0x4ea>
 8006de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f988 	bl	8007104 <UART_Transmit_IT>
    return;
 8006df4:	e014      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00e      	beq.n	8006e20 <HAL_UART_IRQHandler+0x514>
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f9c8 	bl	80071a4 <UART_EndTransmit_IT>
    return;
 8006e14:	e004      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
    return;
 8006e16:	bf00      	nop
 8006e18:	e002      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
      return;
 8006e1a:	bf00      	nop
 8006e1c:	e000      	b.n	8006e20 <HAL_UART_IRQHandler+0x514>
      return;
 8006e1e:	bf00      	nop
  }
}
 8006e20:	37e8      	adds	r7, #232	; 0xe8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop

08006e28 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b090      	sub	sp, #64	; 0x40
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d137      	bne.n	8006f08 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3314      	adds	r3, #20
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	623b      	str	r3, [r7, #32]
   return(result);
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3314      	adds	r3, #20
 8006ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ebe:	633a      	str	r2, [r7, #48]	; 0x30
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e5      	bne.n	8006e9e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	330c      	adds	r3, #12
 8006ed8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	330c      	adds	r3, #12
 8006ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ef2:	61fa      	str	r2, [r7, #28]
 8006ef4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	69b9      	ldr	r1, [r7, #24]
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	617b      	str	r3, [r7, #20]
   return(result);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e5      	bne.n	8006ed2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f06:	e002      	b.n	8006f0e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f0a:	f7f9 ff65 	bl	8000dd8 <HAL_UART_TxCpltCallback>
}
 8006f0e:	bf00      	nop
 8006f10:	3740      	adds	r7, #64	; 0x40
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff ff7f 	bl	8006e28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	bf0c      	ite	eq
 8006f52:	2301      	moveq	r3, #1
 8006f54:	2300      	movne	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b21      	cmp	r3, #33	; 0x21
 8006f64:	d108      	bne.n	8006f78 <UART_DMAError+0x46>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f72:	68b8      	ldr	r0, [r7, #8]
 8006f74:	f000 f827 	bl	8006fc6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b40      	cmp	r3, #64	; 0x40
 8006f84:	bf0c      	ite	eq
 8006f86:	2301      	moveq	r3, #1
 8006f88:	2300      	movne	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b22      	cmp	r3, #34	; 0x22
 8006f98:	d108      	bne.n	8006fac <UART_DMAError+0x7a>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006fa6:	68b8      	ldr	r0, [r7, #8]
 8006fa8:	f000 f835 	bl	8007016 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	f043 0210 	orr.w	r2, r3, #16
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fb8:	68b8      	ldr	r0, [r7, #8]
 8006fba:	f7ff ff49 	bl	8006e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fbe:	bf00      	nop
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b089      	sub	sp, #36	; 0x24
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	e853 3f00 	ldrex	r3, [r3]
 8006fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fe4:	61fb      	str	r3, [r7, #28]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	330c      	adds	r3, #12
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	61ba      	str	r2, [r7, #24]
 8006ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6979      	ldr	r1, [r7, #20]
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e5      	bne.n	8006fce <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800700a:	bf00      	nop
 800700c:	3724      	adds	r7, #36	; 0x24
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007016:	b480      	push	{r7}
 8007018:	b095      	sub	sp, #84	; 0x54
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007034:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	330c      	adds	r3, #12
 800703c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800703e:	643a      	str	r2, [r7, #64]	; 0x40
 8007040:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3314      	adds	r3, #20
 8007058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	e853 3f00 	ldrex	r3, [r3]
 8007060:	61fb      	str	r3, [r7, #28]
   return(result);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	f023 0301 	bic.w	r3, r3, #1
 8007068:	64bb      	str	r3, [r7, #72]	; 0x48
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3314      	adds	r3, #20
 8007070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707a:	e841 2300 	strex	r3, r2, [r1]
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e5      	bne.n	8007052 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	2b01      	cmp	r3, #1
 800708c:	d119      	bne.n	80070c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	330c      	adds	r3, #12
 8007094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	60bb      	str	r3, [r7, #8]
   return(result);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f023 0310 	bic.w	r3, r3, #16
 80070a4:	647b      	str	r3, [r7, #68]	; 0x44
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	330c      	adds	r3, #12
 80070ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070ae:	61ba      	str	r2, [r7, #24]
 80070b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6979      	ldr	r1, [r7, #20]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	613b      	str	r3, [r7, #16]
   return(result);
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e5      	bne.n	800708e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070d0:	bf00      	nop
 80070d2:	3754      	adds	r7, #84	; 0x54
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff feaa 	bl	8006e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b21      	cmp	r3, #33	; 0x21
 8007116:	d13e      	bne.n	8007196 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007120:	d114      	bne.n	800714c <UART_Transmit_IT+0x48>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d110      	bne.n	800714c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800713e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	1c9a      	adds	r2, r3, #2
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	621a      	str	r2, [r3, #32]
 800714a:	e008      	b.n	800715e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	1c59      	adds	r1, r3, #1
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6211      	str	r1, [r2, #32]
 8007156:	781a      	ldrb	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4619      	mov	r1, r3
 800716c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10f      	bne.n	8007192 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007180:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007190:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7f9 fe07 	bl	8000dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b22      	cmp	r3, #34	; 0x22
 80071e6:	f040 80ab 	bne.w	8007340 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f2:	d117      	bne.n	8007224 <UART_Receive_IT+0x50>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d113      	bne.n	8007224 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	b29b      	uxth	r3, r3
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	b29a      	uxth	r2, r3
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	1c9a      	adds	r2, r3, #2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	629a      	str	r2, [r3, #40]	; 0x28
 8007222:	e026      	b.n	8007272 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007236:	d007      	beq.n	8007248 <UART_Receive_IT+0x74>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10a      	bne.n	8007256 <UART_Receive_IT+0x82>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	701a      	strb	r2, [r3, #0]
 8007254:	e008      	b.n	8007268 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007262:	b2da      	uxtb	r2, r3
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29b      	uxth	r3, r3
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	4619      	mov	r1, r3
 8007280:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007282:	2b00      	cmp	r3, #0
 8007284:	d15a      	bne.n	800733c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0220 	bic.w	r2, r2, #32
 8007294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68da      	ldr	r2, [r3, #12]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695a      	ldr	r2, [r3, #20]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0201 	bic.w	r2, r2, #1
 80072b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d135      	bne.n	8007332 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	613b      	str	r3, [r7, #16]
   return(result);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f023 0310 	bic.w	r3, r3, #16
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ec:	623a      	str	r2, [r7, #32]
 80072ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	69f9      	ldr	r1, [r7, #28]
 80072f2:	6a3a      	ldr	r2, [r7, #32]
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	2b10      	cmp	r3, #16
 800730c:	d10a      	bne.n	8007324 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff fd9a 	bl	8006e64 <HAL_UARTEx_RxEventCallback>
 8007330:	e002      	b.n	8007338 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7ff fd82 	bl	8006e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e002      	b.n	8007342 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	e000      	b.n	8007342 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007340:	2302      	movs	r3, #2
  }
}
 8007342:	4618      	mov	r0, r3
 8007344:	3730      	adds	r7, #48	; 0x30
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
	...

0800734c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800734c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007350:	b09f      	sub	sp, #124	; 0x7c
 8007352:	af00      	add	r7, sp, #0
 8007354:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007362:	68d9      	ldr	r1, [r3, #12]
 8007364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	ea40 0301 	orr.w	r3, r0, r1
 800736c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800736e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	431a      	orrs	r2, r3
 8007378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	431a      	orrs	r2, r3
 800737e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	4313      	orrs	r3, r2
 8007384:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007390:	f021 010c 	bic.w	r1, r1, #12
 8007394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800739a:	430b      	orrs	r3, r1
 800739c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800739e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073aa:	6999      	ldr	r1, [r3, #24]
 80073ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	ea40 0301 	orr.w	r3, r0, r1
 80073b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4bc5      	ldr	r3, [pc, #788]	; (80076d0 <UART_SetConfig+0x384>)
 80073bc:	429a      	cmp	r2, r3
 80073be:	d004      	beq.n	80073ca <UART_SetConfig+0x7e>
 80073c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4bc3      	ldr	r3, [pc, #780]	; (80076d4 <UART_SetConfig+0x388>)
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d103      	bne.n	80073d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073ca:	f7fd fb19 	bl	8004a00 <HAL_RCC_GetPCLK2Freq>
 80073ce:	6778      	str	r0, [r7, #116]	; 0x74
 80073d0:	e002      	b.n	80073d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073d2:	f7fd fb01 	bl	80049d8 <HAL_RCC_GetPCLK1Freq>
 80073d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e0:	f040 80b6 	bne.w	8007550 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e6:	461c      	mov	r4, r3
 80073e8:	f04f 0500 	mov.w	r5, #0
 80073ec:	4622      	mov	r2, r4
 80073ee:	462b      	mov	r3, r5
 80073f0:	1891      	adds	r1, r2, r2
 80073f2:	6439      	str	r1, [r7, #64]	; 0x40
 80073f4:	415b      	adcs	r3, r3
 80073f6:	647b      	str	r3, [r7, #68]	; 0x44
 80073f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073fc:	1912      	adds	r2, r2, r4
 80073fe:	eb45 0303 	adc.w	r3, r5, r3
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f04f 0100 	mov.w	r1, #0
 800740a:	00d9      	lsls	r1, r3, #3
 800740c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007410:	00d0      	lsls	r0, r2, #3
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	1911      	adds	r1, r2, r4
 8007418:	6639      	str	r1, [r7, #96]	; 0x60
 800741a:	416b      	adcs	r3, r5
 800741c:	667b      	str	r3, [r7, #100]	; 0x64
 800741e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	461a      	mov	r2, r3
 8007424:	f04f 0300 	mov.w	r3, #0
 8007428:	1891      	adds	r1, r2, r2
 800742a:	63b9      	str	r1, [r7, #56]	; 0x38
 800742c:	415b      	adcs	r3, r3
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007434:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007438:	f7f8 fee4 	bl	8000204 <__aeabi_uldivmod>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4ba5      	ldr	r3, [pc, #660]	; (80076d8 <UART_SetConfig+0x38c>)
 8007442:	fba3 2302 	umull	r2, r3, r3, r2
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	011e      	lsls	r6, r3, #4
 800744a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800744c:	461c      	mov	r4, r3
 800744e:	f04f 0500 	mov.w	r5, #0
 8007452:	4622      	mov	r2, r4
 8007454:	462b      	mov	r3, r5
 8007456:	1891      	adds	r1, r2, r2
 8007458:	6339      	str	r1, [r7, #48]	; 0x30
 800745a:	415b      	adcs	r3, r3
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
 800745e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007462:	1912      	adds	r2, r2, r4
 8007464:	eb45 0303 	adc.w	r3, r5, r3
 8007468:	f04f 0000 	mov.w	r0, #0
 800746c:	f04f 0100 	mov.w	r1, #0
 8007470:	00d9      	lsls	r1, r3, #3
 8007472:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007476:	00d0      	lsls	r0, r2, #3
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	1911      	adds	r1, r2, r4
 800747e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007480:	416b      	adcs	r3, r5
 8007482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	461a      	mov	r2, r3
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	1891      	adds	r1, r2, r2
 8007490:	62b9      	str	r1, [r7, #40]	; 0x28
 8007492:	415b      	adcs	r3, r3
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800749a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800749e:	f7f8 feb1 	bl	8000204 <__aeabi_uldivmod>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4b8c      	ldr	r3, [pc, #560]	; (80076d8 <UART_SetConfig+0x38c>)
 80074a8:	fba3 1302 	umull	r1, r3, r3, r2
 80074ac:	095b      	lsrs	r3, r3, #5
 80074ae:	2164      	movs	r1, #100	; 0x64
 80074b0:	fb01 f303 	mul.w	r3, r1, r3
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	3332      	adds	r3, #50	; 0x32
 80074ba:	4a87      	ldr	r2, [pc, #540]	; (80076d8 <UART_SetConfig+0x38c>)
 80074bc:	fba2 2303 	umull	r2, r3, r2, r3
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074c8:	441e      	add	r6, r3
 80074ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074cc:	4618      	mov	r0, r3
 80074ce:	f04f 0100 	mov.w	r1, #0
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	1894      	adds	r4, r2, r2
 80074d8:	623c      	str	r4, [r7, #32]
 80074da:	415b      	adcs	r3, r3
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
 80074de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074e2:	1812      	adds	r2, r2, r0
 80074e4:	eb41 0303 	adc.w	r3, r1, r3
 80074e8:	f04f 0400 	mov.w	r4, #0
 80074ec:	f04f 0500 	mov.w	r5, #0
 80074f0:	00dd      	lsls	r5, r3, #3
 80074f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074f6:	00d4      	lsls	r4, r2, #3
 80074f8:	4622      	mov	r2, r4
 80074fa:	462b      	mov	r3, r5
 80074fc:	1814      	adds	r4, r2, r0
 80074fe:	653c      	str	r4, [r7, #80]	; 0x50
 8007500:	414b      	adcs	r3, r1
 8007502:	657b      	str	r3, [r7, #84]	; 0x54
 8007504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	461a      	mov	r2, r3
 800750a:	f04f 0300 	mov.w	r3, #0
 800750e:	1891      	adds	r1, r2, r2
 8007510:	61b9      	str	r1, [r7, #24]
 8007512:	415b      	adcs	r3, r3
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800751a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800751e:	f7f8 fe71 	bl	8000204 <__aeabi_uldivmod>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4b6c      	ldr	r3, [pc, #432]	; (80076d8 <UART_SetConfig+0x38c>)
 8007528:	fba3 1302 	umull	r1, r3, r3, r2
 800752c:	095b      	lsrs	r3, r3, #5
 800752e:	2164      	movs	r1, #100	; 0x64
 8007530:	fb01 f303 	mul.w	r3, r1, r3
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	3332      	adds	r3, #50	; 0x32
 800753a:	4a67      	ldr	r2, [pc, #412]	; (80076d8 <UART_SetConfig+0x38c>)
 800753c:	fba2 2303 	umull	r2, r3, r2, r3
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	f003 0207 	and.w	r2, r3, #7
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4432      	add	r2, r6
 800754c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800754e:	e0b9      	b.n	80076c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007552:	461c      	mov	r4, r3
 8007554:	f04f 0500 	mov.w	r5, #0
 8007558:	4622      	mov	r2, r4
 800755a:	462b      	mov	r3, r5
 800755c:	1891      	adds	r1, r2, r2
 800755e:	6139      	str	r1, [r7, #16]
 8007560:	415b      	adcs	r3, r3
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007568:	1912      	adds	r2, r2, r4
 800756a:	eb45 0303 	adc.w	r3, r5, r3
 800756e:	f04f 0000 	mov.w	r0, #0
 8007572:	f04f 0100 	mov.w	r1, #0
 8007576:	00d9      	lsls	r1, r3, #3
 8007578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800757c:	00d0      	lsls	r0, r2, #3
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	eb12 0804 	adds.w	r8, r2, r4
 8007586:	eb43 0905 	adc.w	r9, r3, r5
 800758a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	4618      	mov	r0, r3
 8007590:	f04f 0100 	mov.w	r1, #0
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	008b      	lsls	r3, r1, #2
 800759e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075a2:	0082      	lsls	r2, r0, #2
 80075a4:	4640      	mov	r0, r8
 80075a6:	4649      	mov	r1, r9
 80075a8:	f7f8 fe2c 	bl	8000204 <__aeabi_uldivmod>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4b49      	ldr	r3, [pc, #292]	; (80076d8 <UART_SetConfig+0x38c>)
 80075b2:	fba3 2302 	umull	r2, r3, r3, r2
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	011e      	lsls	r6, r3, #4
 80075ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075bc:	4618      	mov	r0, r3
 80075be:	f04f 0100 	mov.w	r1, #0
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	1894      	adds	r4, r2, r2
 80075c8:	60bc      	str	r4, [r7, #8]
 80075ca:	415b      	adcs	r3, r3
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075d2:	1812      	adds	r2, r2, r0
 80075d4:	eb41 0303 	adc.w	r3, r1, r3
 80075d8:	f04f 0400 	mov.w	r4, #0
 80075dc:	f04f 0500 	mov.w	r5, #0
 80075e0:	00dd      	lsls	r5, r3, #3
 80075e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80075e6:	00d4      	lsls	r4, r2, #3
 80075e8:	4622      	mov	r2, r4
 80075ea:	462b      	mov	r3, r5
 80075ec:	1814      	adds	r4, r2, r0
 80075ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80075f0:	414b      	adcs	r3, r1
 80075f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f04f 0100 	mov.w	r1, #0
 80075fe:	f04f 0200 	mov.w	r2, #0
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	008b      	lsls	r3, r1, #2
 8007608:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800760c:	0082      	lsls	r2, r0, #2
 800760e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007612:	f7f8 fdf7 	bl	8000204 <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4b2f      	ldr	r3, [pc, #188]	; (80076d8 <UART_SetConfig+0x38c>)
 800761c:	fba3 1302 	umull	r1, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	2164      	movs	r1, #100	; 0x64
 8007624:	fb01 f303 	mul.w	r3, r1, r3
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	3332      	adds	r3, #50	; 0x32
 800762e:	4a2a      	ldr	r2, [pc, #168]	; (80076d8 <UART_SetConfig+0x38c>)
 8007630:	fba2 2303 	umull	r2, r3, r2, r3
 8007634:	095b      	lsrs	r3, r3, #5
 8007636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800763a:	441e      	add	r6, r3
 800763c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800763e:	4618      	mov	r0, r3
 8007640:	f04f 0100 	mov.w	r1, #0
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	1894      	adds	r4, r2, r2
 800764a:	603c      	str	r4, [r7, #0]
 800764c:	415b      	adcs	r3, r3
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007654:	1812      	adds	r2, r2, r0
 8007656:	eb41 0303 	adc.w	r3, r1, r3
 800765a:	f04f 0400 	mov.w	r4, #0
 800765e:	f04f 0500 	mov.w	r5, #0
 8007662:	00dd      	lsls	r5, r3, #3
 8007664:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007668:	00d4      	lsls	r4, r2, #3
 800766a:	4622      	mov	r2, r4
 800766c:	462b      	mov	r3, r5
 800766e:	eb12 0a00 	adds.w	sl, r2, r0
 8007672:	eb43 0b01 	adc.w	fp, r3, r1
 8007676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4618      	mov	r0, r3
 800767c:	f04f 0100 	mov.w	r1, #0
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	008b      	lsls	r3, r1, #2
 800768a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800768e:	0082      	lsls	r2, r0, #2
 8007690:	4650      	mov	r0, sl
 8007692:	4659      	mov	r1, fp
 8007694:	f7f8 fdb6 	bl	8000204 <__aeabi_uldivmod>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <UART_SetConfig+0x38c>)
 800769e:	fba3 1302 	umull	r1, r3, r3, r2
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	2164      	movs	r1, #100	; 0x64
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	3332      	adds	r3, #50	; 0x32
 80076b0:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <UART_SetConfig+0x38c>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	f003 020f 	and.w	r2, r3, #15
 80076bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4432      	add	r2, r6
 80076c2:	609a      	str	r2, [r3, #8]
}
 80076c4:	bf00      	nop
 80076c6:	377c      	adds	r7, #124	; 0x7c
 80076c8:	46bd      	mov	sp, r7
 80076ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ce:	bf00      	nop
 80076d0:	40011000 	.word	0x40011000
 80076d4:	40011400 	.word	0x40011400
 80076d8:	51eb851f 	.word	0x51eb851f

080076dc <__libc_init_array>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	4d0d      	ldr	r5, [pc, #52]	; (8007714 <__libc_init_array+0x38>)
 80076e0:	4c0d      	ldr	r4, [pc, #52]	; (8007718 <__libc_init_array+0x3c>)
 80076e2:	1b64      	subs	r4, r4, r5
 80076e4:	10a4      	asrs	r4, r4, #2
 80076e6:	2600      	movs	r6, #0
 80076e8:	42a6      	cmp	r6, r4
 80076ea:	d109      	bne.n	8007700 <__libc_init_array+0x24>
 80076ec:	4d0b      	ldr	r5, [pc, #44]	; (800771c <__libc_init_array+0x40>)
 80076ee:	4c0c      	ldr	r4, [pc, #48]	; (8007720 <__libc_init_array+0x44>)
 80076f0:	f000 f820 	bl	8007734 <_init>
 80076f4:	1b64      	subs	r4, r4, r5
 80076f6:	10a4      	asrs	r4, r4, #2
 80076f8:	2600      	movs	r6, #0
 80076fa:	42a6      	cmp	r6, r4
 80076fc:	d105      	bne.n	800770a <__libc_init_array+0x2e>
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	f855 3b04 	ldr.w	r3, [r5], #4
 8007704:	4798      	blx	r3
 8007706:	3601      	adds	r6, #1
 8007708:	e7ee      	b.n	80076e8 <__libc_init_array+0xc>
 800770a:	f855 3b04 	ldr.w	r3, [r5], #4
 800770e:	4798      	blx	r3
 8007710:	3601      	adds	r6, #1
 8007712:	e7f2      	b.n	80076fa <__libc_init_array+0x1e>
 8007714:	0800778c 	.word	0x0800778c
 8007718:	0800778c 	.word	0x0800778c
 800771c:	0800778c 	.word	0x0800778c
 8007720:	08007790 	.word	0x08007790

08007724 <memset>:
 8007724:	4402      	add	r2, r0
 8007726:	4603      	mov	r3, r0
 8007728:	4293      	cmp	r3, r2
 800772a:	d100      	bne.n	800772e <memset+0xa>
 800772c:	4770      	bx	lr
 800772e:	f803 1b01 	strb.w	r1, [r3], #1
 8007732:	e7f9      	b.n	8007728 <memset+0x4>

08007734 <_init>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr

08007740 <_fini>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr
