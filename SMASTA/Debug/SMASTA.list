
SMASTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084c4  080084c4  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080084c4  080084c4  000184c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084cc  080084cc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084cc  080084cc  000184cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084d0  080084d0  000184d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080084d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eb4  20000030  08008504  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ee4  08008504  00021ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197c4  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d95  00000000  00000000  00039824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a0c  00000000  00000000  0003e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017344  00000000  00000000  0006211c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3628  00000000  00000000  00079460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ca88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004920  00000000  00000000  0014cadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000030 	.word	0x20000030
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008474 	.word	0x08008474

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000034 	.word	0x20000034
 8000204:	08008474 	.word	0x08008474

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	; 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	; 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2iz>:
 80007d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007dc:	d215      	bcs.n	800080a <__aeabi_d2iz+0x36>
 80007de:	d511      	bpl.n	8000804 <__aeabi_d2iz+0x30>
 80007e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d912      	bls.n	8000810 <__aeabi_d2iz+0x3c>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007fa:	fa23 f002 	lsr.w	r0, r3, r2
 80007fe:	bf18      	it	ne
 8000800:	4240      	negne	r0, r0
 8000802:	4770      	bx	lr
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	4770      	bx	lr
 800080a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800080e:	d105      	bne.n	800081c <__aeabi_d2iz+0x48>
 8000810:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000814:	bf08      	it	eq
 8000816:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000834:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000838:	f000 b96e 	b.w	8000b18 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	4604      	mov	r4, r0
 800085c:	468c      	mov	ip, r1
 800085e:	2b00      	cmp	r3, #0
 8000860:	f040 8083 	bne.w	800096a <__udivmoddi4+0x116>
 8000864:	428a      	cmp	r2, r1
 8000866:	4617      	mov	r7, r2
 8000868:	d947      	bls.n	80008fa <__udivmoddi4+0xa6>
 800086a:	fab2 f282 	clz	r2, r2
 800086e:	b142      	cbz	r2, 8000882 <__udivmoddi4+0x2e>
 8000870:	f1c2 0020 	rsb	r0, r2, #32
 8000874:	fa24 f000 	lsr.w	r0, r4, r0
 8000878:	4091      	lsls	r1, r2
 800087a:	4097      	lsls	r7, r2
 800087c:	ea40 0c01 	orr.w	ip, r0, r1
 8000880:	4094      	lsls	r4, r2
 8000882:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000886:	0c23      	lsrs	r3, r4, #16
 8000888:	fbbc f6f8 	udiv	r6, ip, r8
 800088c:	fa1f fe87 	uxth.w	lr, r7
 8000890:	fb08 c116 	mls	r1, r8, r6, ip
 8000894:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000898:	fb06 f10e 	mul.w	r1, r6, lr
 800089c:	4299      	cmp	r1, r3
 800089e:	d909      	bls.n	80008b4 <__udivmoddi4+0x60>
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008a6:	f080 8119 	bcs.w	8000adc <__udivmoddi4+0x288>
 80008aa:	4299      	cmp	r1, r3
 80008ac:	f240 8116 	bls.w	8000adc <__udivmoddi4+0x288>
 80008b0:	3e02      	subs	r6, #2
 80008b2:	443b      	add	r3, r7
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008bc:	fb08 3310 	mls	r3, r8, r0, r3
 80008c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d909      	bls.n	80008e0 <__udivmoddi4+0x8c>
 80008cc:	193c      	adds	r4, r7, r4
 80008ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80008d2:	f080 8105 	bcs.w	8000ae0 <__udivmoddi4+0x28c>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f240 8102 	bls.w	8000ae0 <__udivmoddi4+0x28c>
 80008dc:	3802      	subs	r0, #2
 80008de:	443c      	add	r4, r7
 80008e0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008e4:	eba4 040e 	sub.w	r4, r4, lr
 80008e8:	2600      	movs	r6, #0
 80008ea:	b11d      	cbz	r5, 80008f4 <__udivmoddi4+0xa0>
 80008ec:	40d4      	lsrs	r4, r2
 80008ee:	2300      	movs	r3, #0
 80008f0:	e9c5 4300 	strd	r4, r3, [r5]
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	b902      	cbnz	r2, 80008fe <__udivmoddi4+0xaa>
 80008fc:	deff      	udf	#255	; 0xff
 80008fe:	fab2 f282 	clz	r2, r2
 8000902:	2a00      	cmp	r2, #0
 8000904:	d150      	bne.n	80009a8 <__udivmoddi4+0x154>
 8000906:	1bcb      	subs	r3, r1, r7
 8000908:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090c:	fa1f f887 	uxth.w	r8, r7
 8000910:	2601      	movs	r6, #1
 8000912:	fbb3 fcfe 	udiv	ip, r3, lr
 8000916:	0c21      	lsrs	r1, r4, #16
 8000918:	fb0e 331c 	mls	r3, lr, ip, r3
 800091c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000920:	fb08 f30c 	mul.w	r3, r8, ip
 8000924:	428b      	cmp	r3, r1
 8000926:	d907      	bls.n	8000938 <__udivmoddi4+0xe4>
 8000928:	1879      	adds	r1, r7, r1
 800092a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0xe2>
 8000930:	428b      	cmp	r3, r1
 8000932:	f200 80e9 	bhi.w	8000b08 <__udivmoddi4+0x2b4>
 8000936:	4684      	mov	ip, r0
 8000938:	1ac9      	subs	r1, r1, r3
 800093a:	b2a3      	uxth	r3, r4
 800093c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000940:	fb0e 1110 	mls	r1, lr, r0, r1
 8000944:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000948:	fb08 f800 	mul.w	r8, r8, r0
 800094c:	45a0      	cmp	r8, r4
 800094e:	d907      	bls.n	8000960 <__udivmoddi4+0x10c>
 8000950:	193c      	adds	r4, r7, r4
 8000952:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x10a>
 8000958:	45a0      	cmp	r8, r4
 800095a:	f200 80d9 	bhi.w	8000b10 <__udivmoddi4+0x2bc>
 800095e:	4618      	mov	r0, r3
 8000960:	eba4 0408 	sub.w	r4, r4, r8
 8000964:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000968:	e7bf      	b.n	80008ea <__udivmoddi4+0x96>
 800096a:	428b      	cmp	r3, r1
 800096c:	d909      	bls.n	8000982 <__udivmoddi4+0x12e>
 800096e:	2d00      	cmp	r5, #0
 8000970:	f000 80b1 	beq.w	8000ad6 <__udivmoddi4+0x282>
 8000974:	2600      	movs	r6, #0
 8000976:	e9c5 0100 	strd	r0, r1, [r5]
 800097a:	4630      	mov	r0, r6
 800097c:	4631      	mov	r1, r6
 800097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000982:	fab3 f683 	clz	r6, r3
 8000986:	2e00      	cmp	r6, #0
 8000988:	d14a      	bne.n	8000a20 <__udivmoddi4+0x1cc>
 800098a:	428b      	cmp	r3, r1
 800098c:	d302      	bcc.n	8000994 <__udivmoddi4+0x140>
 800098e:	4282      	cmp	r2, r0
 8000990:	f200 80b8 	bhi.w	8000b04 <__udivmoddi4+0x2b0>
 8000994:	1a84      	subs	r4, r0, r2
 8000996:	eb61 0103 	sbc.w	r1, r1, r3
 800099a:	2001      	movs	r0, #1
 800099c:	468c      	mov	ip, r1
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0a8      	beq.n	80008f4 <__udivmoddi4+0xa0>
 80009a2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009a6:	e7a5      	b.n	80008f4 <__udivmoddi4+0xa0>
 80009a8:	f1c2 0320 	rsb	r3, r2, #32
 80009ac:	fa20 f603 	lsr.w	r6, r0, r3
 80009b0:	4097      	lsls	r7, r2
 80009b2:	fa01 f002 	lsl.w	r0, r1, r2
 80009b6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ba:	40d9      	lsrs	r1, r3
 80009bc:	4330      	orrs	r0, r6
 80009be:	0c03      	lsrs	r3, r0, #16
 80009c0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009c4:	fa1f f887 	uxth.w	r8, r7
 80009c8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d0:	fb06 f108 	mul.w	r1, r6, r8
 80009d4:	4299      	cmp	r1, r3
 80009d6:	fa04 f402 	lsl.w	r4, r4, r2
 80009da:	d909      	bls.n	80009f0 <__udivmoddi4+0x19c>
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80009e2:	f080 808d 	bcs.w	8000b00 <__udivmoddi4+0x2ac>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 808a 	bls.w	8000b00 <__udivmoddi4+0x2ac>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	443b      	add	r3, r7
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	b281      	uxth	r1, r0
 80009f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a00:	fb00 f308 	mul.w	r3, r0, r8
 8000a04:	428b      	cmp	r3, r1
 8000a06:	d907      	bls.n	8000a18 <__udivmoddi4+0x1c4>
 8000a08:	1879      	adds	r1, r7, r1
 8000a0a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000a0e:	d273      	bcs.n	8000af8 <__udivmoddi4+0x2a4>
 8000a10:	428b      	cmp	r3, r1
 8000a12:	d971      	bls.n	8000af8 <__udivmoddi4+0x2a4>
 8000a14:	3802      	subs	r0, #2
 8000a16:	4439      	add	r1, r7
 8000a18:	1acb      	subs	r3, r1, r3
 8000a1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a1e:	e778      	b.n	8000912 <__udivmoddi4+0xbe>
 8000a20:	f1c6 0c20 	rsb	ip, r6, #32
 8000a24:	fa03 f406 	lsl.w	r4, r3, r6
 8000a28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a2c:	431c      	orrs	r4, r3
 8000a2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a32:	fa01 f306 	lsl.w	r3, r1, r6
 8000a36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a3e:	431f      	orrs	r7, r3
 8000a40:	0c3b      	lsrs	r3, r7, #16
 8000a42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a46:	fa1f f884 	uxth.w	r8, r4
 8000a4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a52:	fb09 fa08 	mul.w	sl, r9, r8
 8000a56:	458a      	cmp	sl, r1
 8000a58:	fa02 f206 	lsl.w	r2, r2, r6
 8000a5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x220>
 8000a62:	1861      	adds	r1, r4, r1
 8000a64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000a68:	d248      	bcs.n	8000afc <__udivmoddi4+0x2a8>
 8000a6a:	458a      	cmp	sl, r1
 8000a6c:	d946      	bls.n	8000afc <__udivmoddi4+0x2a8>
 8000a6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a72:	4421      	add	r1, r4
 8000a74:	eba1 010a 	sub.w	r1, r1, sl
 8000a78:	b2bf      	uxth	r7, r7
 8000a7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a86:	fb00 f808 	mul.w	r8, r0, r8
 8000a8a:	45b8      	cmp	r8, r7
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x24a>
 8000a8e:	19e7      	adds	r7, r4, r7
 8000a90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000a94:	d22e      	bcs.n	8000af4 <__udivmoddi4+0x2a0>
 8000a96:	45b8      	cmp	r8, r7
 8000a98:	d92c      	bls.n	8000af4 <__udivmoddi4+0x2a0>
 8000a9a:	3802      	subs	r0, #2
 8000a9c:	4427      	add	r7, r4
 8000a9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000aa2:	eba7 0708 	sub.w	r7, r7, r8
 8000aa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000aaa:	454f      	cmp	r7, r9
 8000aac:	46c6      	mov	lr, r8
 8000aae:	4649      	mov	r1, r9
 8000ab0:	d31a      	bcc.n	8000ae8 <__udivmoddi4+0x294>
 8000ab2:	d017      	beq.n	8000ae4 <__udivmoddi4+0x290>
 8000ab4:	b15d      	cbz	r5, 8000ace <__udivmoddi4+0x27a>
 8000ab6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aba:	eb67 0701 	sbc.w	r7, r7, r1
 8000abe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ac2:	40f2      	lsrs	r2, r6
 8000ac4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ac8:	40f7      	lsrs	r7, r6
 8000aca:	e9c5 2700 	strd	r2, r7, [r5]
 8000ace:	2600      	movs	r6, #0
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	462e      	mov	r6, r5
 8000ad8:	4628      	mov	r0, r5
 8000ada:	e70b      	b.n	80008f4 <__udivmoddi4+0xa0>
 8000adc:	4606      	mov	r6, r0
 8000ade:	e6e9      	b.n	80008b4 <__udivmoddi4+0x60>
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	e6fd      	b.n	80008e0 <__udivmoddi4+0x8c>
 8000ae4:	4543      	cmp	r3, r8
 8000ae6:	d2e5      	bcs.n	8000ab4 <__udivmoddi4+0x260>
 8000ae8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aec:	eb69 0104 	sbc.w	r1, r9, r4
 8000af0:	3801      	subs	r0, #1
 8000af2:	e7df      	b.n	8000ab4 <__udivmoddi4+0x260>
 8000af4:	4608      	mov	r0, r1
 8000af6:	e7d2      	b.n	8000a9e <__udivmoddi4+0x24a>
 8000af8:	4660      	mov	r0, ip
 8000afa:	e78d      	b.n	8000a18 <__udivmoddi4+0x1c4>
 8000afc:	4681      	mov	r9, r0
 8000afe:	e7b9      	b.n	8000a74 <__udivmoddi4+0x220>
 8000b00:	4666      	mov	r6, ip
 8000b02:	e775      	b.n	80009f0 <__udivmoddi4+0x19c>
 8000b04:	4630      	mov	r0, r6
 8000b06:	e74a      	b.n	800099e <__udivmoddi4+0x14a>
 8000b08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b0c:	4439      	add	r1, r7
 8000b0e:	e713      	b.n	8000938 <__udivmoddi4+0xe4>
 8000b10:	3802      	subs	r0, #2
 8000b12:	443c      	add	r4, r7
 8000b14:	e724      	b.n	8000960 <__udivmoddi4+0x10c>
 8000b16:	bf00      	nop

08000b18 <__aeabi_idiv0>:
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <appInit>:
static double BlinkCoeff = 1.0;

static int Encoder_Process(void);
static void ArraySwap_Rainbow(int num);

int appInit(void){
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	0000      	movs	r0, r0
	...

08000b30 <appTask>:

int appTask(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
	DeltaTime = G_System_counter - Recent_System_counter;
 8000b36:	4ba7      	ldr	r3, [pc, #668]	; (8000dd4 <appTask+0x2a4>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4ba7      	ldr	r3, [pc, #668]	; (8000dd8 <appTask+0x2a8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	4aa6      	ldr	r2, [pc, #664]	; (8000ddc <appTask+0x2ac>)
 8000b42:	6013      	str	r3, [r2, #0]

	Encoder_Process();
 8000b44:	f000 fae8 	bl	8001118 <Encoder_Process>

	if(IO_READ_USERBUTTON()){
 8000b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4c:	48a4      	ldr	r0, [pc, #656]	; (8000de0 <appTask+0x2b0>)
 8000b4e:	f001 fbc6 	bl	80022de <D_GPIO_Read>
        //	D_LED_Set(i, 0, 0, 0);
      	//}
      	//D_LED_Send();
	}

	RainbowTime += DeltaTime;
 8000b52:	4ba4      	ldr	r3, [pc, #656]	; (8000de4 <appTask+0x2b4>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4ba1      	ldr	r3, [pc, #644]	; (8000ddc <appTask+0x2ac>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4aa1      	ldr	r2, [pc, #644]	; (8000de4 <appTask+0x2b4>)
 8000b5e:	6013      	str	r3, [r2, #0]
	if(RainbowTime >= RAINBOW_FLOWTIME){
 8000b60:	4ba0      	ldr	r3, [pc, #640]	; (8000de4 <appTask+0x2b4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b63      	cmp	r3, #99	; 0x63
 8000b66:	d90e      	bls.n	8000b86 <appTask+0x56>
		RainbowCount++;
 8000b68:	4b9f      	ldr	r3, [pc, #636]	; (8000de8 <appTask+0x2b8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a9e      	ldr	r2, [pc, #632]	; (8000de8 <appTask+0x2b8>)
 8000b70:	6013      	str	r3, [r2, #0]
		RainbowTime = 0;
 8000b72:	4b9c      	ldr	r3, [pc, #624]	; (8000de4 <appTask+0x2b4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
		if(RainbowCount >= 50){
 8000b78:	4b9b      	ldr	r3, [pc, #620]	; (8000de8 <appTask+0x2b8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b31      	cmp	r3, #49	; 0x31
 8000b7e:	dd02      	ble.n	8000b86 <appTask+0x56>
			RainbowCount = 0;
 8000b80:	4b99      	ldr	r3, [pc, #612]	; (8000de8 <appTask+0x2b8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
		}
	}
	BlinkTime += DeltaTime;
 8000b86:	4b99      	ldr	r3, [pc, #612]	; (8000dec <appTask+0x2bc>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b94      	ldr	r3, [pc, #592]	; (8000ddc <appTask+0x2ac>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a96      	ldr	r2, [pc, #600]	; (8000dec <appTask+0x2bc>)
 8000b92:	6013      	str	r3, [r2, #0]
	if(BlinkTime >= BLINK_FLOWTIME){
 8000b94:	4b95      	ldr	r3, [pc, #596]	; (8000dec <appTask+0x2bc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d902      	bls.n	8000ba6 <appTask+0x76>
		BlinkTime = 0;
 8000ba0:	4b92      	ldr	r3, [pc, #584]	; (8000dec <appTask+0x2bc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
	}
	if(BlinkTime <= 100){
 8000ba6:	4b91      	ldr	r3, [pc, #580]	; (8000dec <appTask+0x2bc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b64      	cmp	r3, #100	; 0x64
 8000bac:	d807      	bhi.n	8000bbe <appTask+0x8e>
		BlinkCoeff = 0.0;
 8000bae:	4990      	ldr	r1, [pc, #576]	; (8000df0 <appTask+0x2c0>)
 8000bb0:	f04f 0200 	mov.w	r2, #0
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e9c1 2300 	strd	r2, r3, [r1]
 8000bbc:	e022      	b.n	8000c04 <appTask+0xd4>
	}else if(BlinkTime <= 250){
 8000bbe:	4b8b      	ldr	r3, [pc, #556]	; (8000dec <appTask+0x2bc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2bfa      	cmp	r3, #250	; 0xfa
 8000bc4:	d806      	bhi.n	8000bd4 <appTask+0xa4>
		BlinkCoeff = 1.0;
 8000bc6:	498a      	ldr	r1, [pc, #552]	; (8000df0 <appTask+0x2c0>)
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	4b89      	ldr	r3, [pc, #548]	; (8000df4 <appTask+0x2c4>)
 8000bce:	e9c1 2300 	strd	r2, r3, [r1]
 8000bd2:	e017      	b.n	8000c04 <appTask+0xd4>
	}else if(BlinkTime <= 350){
 8000bd4:	4b85      	ldr	r3, [pc, #532]	; (8000dec <appTask+0x2bc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000bdc:	d807      	bhi.n	8000bee <appTask+0xbe>
		BlinkCoeff = 0.0;
 8000bde:	4984      	ldr	r1, [pc, #528]	; (8000df0 <appTask+0x2c0>)
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e9c1 2300 	strd	r2, r3, [r1]
 8000bec:	e00a      	b.n	8000c04 <appTask+0xd4>
	}else if(BlinkTime <= 450){
 8000bee:	4b7f      	ldr	r3, [pc, #508]	; (8000dec <appTask+0x2bc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8000bf6:	d805      	bhi.n	8000c04 <appTask+0xd4>
		BlinkCoeff = 1.0;
 8000bf8:	497d      	ldr	r1, [pc, #500]	; (8000df0 <appTask+0x2c0>)
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	4b7d      	ldr	r3, [pc, #500]	; (8000df4 <appTask+0x2c4>)
 8000c00:	e9c1 2300 	strd	r2, r3, [r1]
	}

	ArraySwap_Rainbow(RainbowCount);
 8000c04:	4b78      	ldr	r3, [pc, #480]	; (8000de8 <appTask+0x2b8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fb03 	bl	8001214 <ArraySwap_Rainbow>
	for(int i=0; i<5; i++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c12:	e216      	b.n	8001042 <appTask+0x512>
    	int r=0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    	int g=0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    	int b=0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
		double coeff = 1.0;
 8000c20:	f04f 0200 	mov.w	r2, #0
 8000c24:	4b73      	ldr	r3, [pc, #460]	; (8000df4 <appTask+0x2c4>)
 8000c26:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d830      	bhi.n	8000c92 <appTask+0x162>
 8000c30:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <appTask+0x108>)
 8000c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c36:	bf00      	nop
 8000c38:	08000c4d 	.word	0x08000c4d
 8000c3c:	08000c5b 	.word	0x08000c5b
 8000c40:	08000c69 	.word	0x08000c69
 8000c44:	08000c77 	.word	0x08000c77
 8000c48:	08000c85 	.word	0x08000c85
    	switch (i)
    	{
    	case 0:
    	  	r=1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
    	  	break;
 8000c58:	e01b      	b.n	8000c92 <appTask+0x162>

    	case 1:
    	  	r=1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    	  	break;
 8000c66:	e014      	b.n	8000c92 <appTask+0x162>

    	case 2:
    	  	r=0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
    	  	break;
 8000c74:	e00d      	b.n	8000c92 <appTask+0x162>

    	case 3:
    	  	r=1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	623b      	str	r3, [r7, #32]
    	  	break;
 8000c82:	e006      	b.n	8000c92 <appTask+0x162>

    	case 4:
    	  	r=1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
    	  	g=1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    	  	b=0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
    	  	break;
 8000c90:	bf00      	nop
    	}

		if(i==0 || i==2){
 8000c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <appTask+0x170>
 8000c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	f040 808f 	bne.w	8000dbe <appTask+0x28e>
			for(int j=0; j<10; j++){
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e086      	b.n	8000db4 <appTask+0x284>
				if(j==0 || j==9){
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <appTask+0x182>
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	d106      	bne.n	8000cc0 <appTask+0x190>
					coeff = 0.0;
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000cbe:	e004      	b.n	8000cca <appTask+0x19a>
				}else{
					coeff = 1.0;
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <appTask+0x2c4>)
 8000cc6:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				int index = (Encoder_Count + i*10+j) % 50;
 8000cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <appTask+0x2c8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	441a      	add	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	441a      	add	r2, r3
 8000ce0:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <appTask+0x2cc>)
 8000ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	2132      	movs	r1, #50	; 0x32
 8000cea:	fb01 f303 	mul.w	r3, r1, r3
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	607b      	str	r3, [r7, #4]
				LED_Temp[j][0] = (int)((double)LED_Temp_Rainbow[index][0]*coeff);
 8000cf2:	4943      	ldr	r1, [pc, #268]	; (8000e00 <appTask+0x2d0>)
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff fced 	bl	80006e0 <__aeabi_ui2d>
 8000d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d0a:	f7ff fa7d 	bl	8000208 <__aeabi_dmul>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f7ff fd5d 	bl	80007d4 <__aeabi_d2iz>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	b2d8      	uxtb	r0, r3
 8000d1e:	4939      	ldr	r1, [pc, #228]	; (8000e04 <appTask+0x2d4>)
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)LED_Temp_Rainbow[index][1]*coeff);
 8000d2e:	4934      	ldr	r1, [pc, #208]	; (8000e00 <appTask+0x2d0>)
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fcce 	bl	80006e0 <__aeabi_ui2d>
 8000d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d48:	f7ff fa5e 	bl	8000208 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fd3e 	bl	80007d4 <__aeabi_d2iz>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b2d8      	uxtb	r0, r3
 8000d5c:	4929      	ldr	r1, [pc, #164]	; (8000e04 <appTask+0x2d4>)
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)LED_Temp_Rainbow[index][2]*coeff);
 8000d6e:	4924      	ldr	r1, [pc, #144]	; (8000e00 <appTask+0x2d0>)
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fcae 	bl	80006e0 <__aeabi_ui2d>
 8000d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000d88:	f7ff fa3e 	bl	8000208 <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fd1e 	bl	80007d4 <__aeabi_d2iz>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b2d8      	uxtb	r0, r3
 8000d9c:	4919      	ldr	r1, [pc, #100]	; (8000e04 <appTask+0x2d4>)
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	3302      	adds	r3, #2
 8000daa:	4602      	mov	r2, r0
 8000dac:	701a      	strb	r2, [r3, #0]
			for(int j=0; j<10; j++){
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2b09      	cmp	r3, #9
 8000db8:	f77f af75 	ble.w	8000ca6 <appTask+0x176>
 8000dbc:	e138      	b.n	8001030 <appTask+0x500>
			}
		}else if(i==3 || i==4){
 8000dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d003      	beq.n	8000dcc <appTask+0x29c>
 8000dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	f040 80b5 	bne.w	8000f36 <appTask+0x406>
			for(int j=0;j<10;j++){
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	e0ac      	b.n	8000f2c <appTask+0x3fc>
 8000dd2:	bf00      	nop
 8000dd4:	200001a8 	.word	0x200001a8
 8000dd8:	20000180 	.word	0x20000180
 8000ddc:	20000184 	.word	0x20000184
 8000de0:	40020800 	.word	0x40020800
 8000de4:	20000188 	.word	0x20000188
 8000de8:	20000190 	.word	0x20000190
 8000dec:	2000018c 	.word	0x2000018c
 8000df0:	20000018 	.word	0x20000018
 8000df4:	3ff00000 	.word	0x3ff00000
 8000df8:	2000004c 	.word	0x2000004c
 8000dfc:	51eb851f 	.word	0x51eb851f
 8000e00:	200000e8 	.word	0x200000e8
 8000e04:	20000050 	.word	0x20000050
				if(j==0 || j==9){
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <appTask+0x2e4>
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2b09      	cmp	r3, #9
 8000e12:	d106      	bne.n	8000e22 <appTask+0x2f2>
					coeff = 0.0;
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000e20:	e004      	b.n	8000e2c <appTask+0x2fc>
				}else{
					coeff = 1.0;
 8000e22:	f04f 0200 	mov.w	r2, #0
 8000e26:	4bb0      	ldr	r3, [pc, #704]	; (80010e8 <appTask+0x5b8>)
 8000e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				LED_Temp[j][0] = (int)((double)r*255.0*BlinkCoeff*coeff);
 8000e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e2e:	f7ff fc67 	bl	8000700 <__aeabi_i2d>
 8000e32:	a3ab      	add	r3, pc, #684	; (adr r3, 80010e0 <appTask+0x5b0>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff f9e6 	bl	8000208 <__aeabi_dmul>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	4ba9      	ldr	r3, [pc, #676]	; (80010ec <appTask+0x5bc>)
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	f7ff f9dd 	bl	8000208 <__aeabi_dmul>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e5a:	f7ff f9d5 	bl	8000208 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fcb5 	bl	80007d4 <__aeabi_d2iz>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b2d8      	uxtb	r0, r3
 8000e6e:	49a0      	ldr	r1, [pc, #640]	; (80010f0 <appTask+0x5c0>)
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)g*255.0*BlinkCoeff*coeff);
 8000e7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e80:	f7ff fc3e 	bl	8000700 <__aeabi_i2d>
 8000e84:	a396      	add	r3, pc, #600	; (adr r3, 80010e0 <appTask+0x5b0>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff f9bd 	bl	8000208 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	4b95      	ldr	r3, [pc, #596]	; (80010ec <appTask+0x5bc>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff f9b4 	bl	8000208 <__aeabi_dmul>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000eac:	f7ff f9ac 	bl	8000208 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f7ff fc8c 	bl	80007d4 <__aeabi_d2iz>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	498b      	ldr	r1, [pc, #556]	; (80010f0 <appTask+0x5c0>)
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4602      	mov	r2, r0
 8000ed0:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)b*255.0*BlinkCoeff*coeff);
 8000ed2:	6a38      	ldr	r0, [r7, #32]
 8000ed4:	f7ff fc14 	bl	8000700 <__aeabi_i2d>
 8000ed8:	a381      	add	r3, pc, #516	; (adr r3, 80010e0 <appTask+0x5b0>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff f993 	bl	8000208 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4b80      	ldr	r3, [pc, #512]	; (80010ec <appTask+0x5bc>)
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	f7ff f98a 	bl	8000208 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f00:	f7ff f982 	bl	8000208 <__aeabi_dmul>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f7ff fc62 	bl	80007d4 <__aeabi_d2iz>
 8000f10:	4603      	mov	r3, r0
 8000f12:	b2d8      	uxtb	r0, r3
 8000f14:	4976      	ldr	r1, [pc, #472]	; (80010f0 <appTask+0x5c0>)
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3302      	adds	r3, #2
 8000f22:	4602      	mov	r2, r0
 8000f24:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<10;j++){
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b09      	cmp	r3, #9
 8000f30:	f77f af6a 	ble.w	8000e08 <appTask+0x2d8>
 8000f34:	e07c      	b.n	8001030 <appTask+0x500>
			}
		}else{
			for(int j=0;j<10;j++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	e076      	b.n	800102a <appTask+0x4fa>
				if(j==0 || j==9){
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <appTask+0x418>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	d106      	bne.n	8000f56 <appTask+0x426>
					coeff = 0.0;
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	f04f 0300 	mov.w	r3, #0
 8000f50:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f54:	e004      	b.n	8000f60 <appTask+0x430>
				}else{
					coeff = 1.0;
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <appTask+0x5b8>)
 8000f5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
				}
				LED_Temp[j][0] = (int)((double)r*255.0*coeff);
 8000f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f62:	f7ff fbcd 	bl	8000700 <__aeabi_i2d>
 8000f66:	a35e      	add	r3, pc, #376	; (adr r3, 80010e0 <appTask+0x5b0>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff f94c 	bl	8000208 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f7c:	f7ff f944 	bl	8000208 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fc24 	bl	80007d4 <__aeabi_d2iz>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b2d8      	uxtb	r0, r3
 8000f90:	4957      	ldr	r1, [pc, #348]	; (80010f0 <appTask+0x5c0>)
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][1] = (int)((double)g*255.0*coeff);
 8000fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fa2:	f7ff fbad 	bl	8000700 <__aeabi_i2d>
 8000fa6:	a34e      	add	r3, pc, #312	; (adr r3, 80010e0 <appTask+0x5b0>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff f92c 	bl	8000208 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fbc:	f7ff f924 	bl	8000208 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fc04 	bl	80007d4 <__aeabi_d2iz>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b2d8      	uxtb	r0, r3
 8000fd0:	4947      	ldr	r1, [pc, #284]	; (80010f0 <appTask+0x5c0>)
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3301      	adds	r3, #1
 8000fde:	4602      	mov	r2, r0
 8000fe0:	701a      	strb	r2, [r3, #0]
				LED_Temp[j][2] = (int)((double)b*255.0*coeff);
 8000fe2:	6a38      	ldr	r0, [r7, #32]
 8000fe4:	f7ff fb8c 	bl	8000700 <__aeabi_i2d>
 8000fe8:	a33d      	add	r3, pc, #244	; (adr r3, 80010e0 <appTask+0x5b0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff f90b 	bl	8000208 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ffe:	f7ff f903 	bl	8000208 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fbe3 	bl	80007d4 <__aeabi_d2iz>
 800100e:	4603      	mov	r3, r0
 8001010:	b2d8      	uxtb	r0, r3
 8001012:	4937      	ldr	r1, [pc, #220]	; (80010f0 <appTask+0x5c0>)
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	440b      	add	r3, r1
 800101e:	3302      	adds	r3, #2
 8001020:	4602      	mov	r2, r0
 8001022:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<10;j++){
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	3301      	adds	r3, #1
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b09      	cmp	r3, #9
 800102e:	dd85      	ble.n	8000f3c <appTask+0x40c>
			}
		}
		D_LED_Set_Circle(LED_Temp, i+1);
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	3301      	adds	r3, #1
 8001034:	4619      	mov	r1, r3
 8001036:	482e      	ldr	r0, [pc, #184]	; (80010f0 <appTask+0x5c0>)
 8001038:	f001 f966 	bl	8002308 <D_LED_Set_Circle>
	for(int i=0; i<5; i++){
 800103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103e:	3301      	adds	r3, #1
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001044:	2b04      	cmp	r3, #4
 8001046:	f77f ade5 	ble.w	8000c14 <appTask+0xe4>
    	//for(int j=0;j<10;j++){
		//	D_LED_Set(i*10+j, (j+1)*25*r, (j+1)*25*g, (j+1)*25*b);
    	//}
    }
	D_LED_Rotate(-Encoder_Count + LED_OFFSET);
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <appTask+0x5c4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f1c3 0304 	rsb	r3, r3, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fa3a 	bl	80024cc <D_LED_Rotate>
    D_LED_Send();
 8001058:	f001 f9c4 	bl	80023e4 <D_LED_Send>

	int16_t debug_bits = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_ENC_HOME() << 1);
 8001060:	2120      	movs	r1, #32
 8001062:	4825      	ldr	r0, [pc, #148]	; (80010f8 <appTask+0x5c8>)
 8001064:	f001 f93b 	bl	80022de <D_GPIO_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	b21a      	sxth	r2, r3
 8001074:	897b      	ldrh	r3, [r7, #10]
 8001076:	4313      	orrs	r3, r2
 8001078:	817b      	strh	r3, [r7, #10]
	debug_bits |= ((int)IO_READ_ENC_STEP() << 0);
 800107a:	2110      	movs	r1, #16
 800107c:	481e      	ldr	r0, [pc, #120]	; (80010f8 <appTask+0x5c8>)
 800107e:	f001 f92e 	bl	80022de <D_GPIO_Read>
 8001082:	4603      	mov	r3, r0
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b21a      	sxth	r2, r3
 800108c:	897b      	ldrh	r3, [r7, #10]
 800108e:	4313      	orrs	r3, r2
 8001090:	817b      	strh	r3, [r7, #10]
	D_Mess_printf("\033[1;1H");
 8001092:	481a      	ldr	r0, [pc, #104]	; (80010fc <appTask+0x5cc>)
 8001094:	f001 fab0 	bl	80025f8 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",G_System_counter);
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <appTask+0x5d0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	4819      	ldr	r0, [pc, #100]	; (8001104 <appTask+0x5d4>)
 80010a0:	f001 faaa 	bl	80025f8 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",Encoder_Count);
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <appTask+0x5c4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	4816      	ldr	r0, [pc, #88]	; (8001104 <appTask+0x5d4>)
 80010ac:	f001 faa4 	bl	80025f8 <D_Mess_printf>
	D_Mess_printf("[%10d]\n",RainbowTime);
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <appTask+0x5d8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <appTask+0x5d4>)
 80010b8:	f001 fa9e 	bl	80025f8 <D_Mess_printf>
	D_Mess_printf("%016b\n", debug_bits);
 80010bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80010c0:	4619      	mov	r1, r3
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <appTask+0x5dc>)
 80010c4:	f001 fa98 	bl	80025f8 <D_Mess_printf>


	Recent_System_counter = Recent_System_counter + DeltaTime;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <appTask+0x5e0>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <appTask+0x5e4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <appTask+0x5e0>)
 80010d4:	6013      	str	r3, [r2, #0]
	return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3730      	adds	r7, #48	; 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	00000000 	.word	0x00000000
 80010e4:	406fe000 	.word	0x406fe000
 80010e8:	3ff00000 	.word	0x3ff00000
 80010ec:	20000018 	.word	0x20000018
 80010f0:	20000050 	.word	0x20000050
 80010f4:	2000004c 	.word	0x2000004c
 80010f8:	40020400 	.word	0x40020400
 80010fc:	0800848c 	.word	0x0800848c
 8001100:	200001a8 	.word	0x200001a8
 8001104:	08008494 	.word	0x08008494
 8001108:	20000188 	.word	0x20000188
 800110c:	0800849c 	.word	0x0800849c
 8001110:	20000180 	.word	0x20000180
 8001114:	20000184 	.word	0x20000184

08001118 <Encoder_Process>:

static int Encoder_Process(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	static bool reset = false;
	int enc_state = (int)IO_READ_ENC_STEP();
 800111e:	2110      	movs	r1, #16
 8001120:	4835      	ldr	r0, [pc, #212]	; (80011f8 <Encoder_Process+0xe0>)
 8001122:	f001 f8dc 	bl	80022de <D_GPIO_Read>
 8001126:	4603      	mov	r3, r0
 8001128:	f083 0301 	eor.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_ENC_HOME();
 8001130:	2120      	movs	r1, #32
 8001132:	4831      	ldr	r0, [pc, #196]	; (80011f8 <Encoder_Process+0xe0>)
 8001134:	f001 f8d3 	bl	80022de <D_GPIO_Read>
 8001138:	4603      	mov	r3, r0
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 8001142:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <Encoder_Process+0xe4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d005      	beq.n	8001158 <Encoder_Process+0x40>
		enc_change_count++;
 800114c:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <Encoder_Process+0xe8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <Encoder_Process+0xe8>)
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e002      	b.n	800115e <Encoder_Process+0x46>
	}else{
		enc_change_count = 0;
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <Encoder_Process+0xe8>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 800115e:	4b28      	ldr	r3, [pc, #160]	; (8001200 <Encoder_Process+0xe8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b04      	cmp	r3, #4
 8001164:	dd0d      	ble.n	8001182 <Encoder_Process+0x6a>
		recent_enc_state = enc_state;
 8001166:	4a25      	ldr	r2, [pc, #148]	; (80011fc <Encoder_Process+0xe4>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <Encoder_Process+0xe8>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d104      	bne.n	8001182 <Encoder_Process+0x6a>
			Encoder_Count++;
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <Encoder_Process+0xec>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <Encoder_Process+0xec>)
 8001180:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <Encoder_Process+0xf0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d005      	beq.n	8001198 <Encoder_Process+0x80>
		home_change_count++;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <Encoder_Process+0xf4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <Encoder_Process+0xf4>)
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e002      	b.n	800119e <Encoder_Process+0x86>
	}else{
		home_change_count = 0;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <Encoder_Process+0xf4>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5 && !reset){
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <Encoder_Process+0xf4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	dd15      	ble.n	80011d2 <Encoder_Process+0xba>
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <Encoder_Process+0xf8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	f083 0301 	eor.w	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00e      	beq.n	80011d2 <Encoder_Process+0xba>
		reset = true;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <Encoder_Process+0xf8>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
		recent_home_state = home_state;
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <Encoder_Process+0xf0>)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <Encoder_Process+0xf4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d102      	bne.n	80011d2 <Encoder_Process+0xba>
			Encoder_Count = 1;
 80011cc:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <Encoder_Process+0xec>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Count > 10){
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <Encoder_Process+0xec>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b0a      	cmp	r3, #10
 80011d8:	d902      	bls.n	80011e0 <Encoder_Process+0xc8>
		reset = false;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <Encoder_Process+0xf8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
		//Encoder_Count = 0;
	}
	if(Encoder_Count > 50){
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <Encoder_Process+0xec>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b32      	cmp	r3, #50	; 0x32
 80011e6:	d902      	bls.n	80011ee <Encoder_Process+0xd6>
		Encoder_Count = 1;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <Encoder_Process+0xec>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]
	}

	return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020400 	.word	0x40020400
 80011fc:	20000194 	.word	0x20000194
 8001200:	20000198 	.word	0x20000198
 8001204:	2000004c 	.word	0x2000004c
 8001208:	2000019c 	.word	0x2000019c
 800120c:	200001a0 	.word	0x200001a0
 8001210:	200001a4 	.word	0x200001a4

08001214 <ArraySwap_Rainbow>:

static void ArraySwap_Rainbow(int num){
 8001214:	b480      	push	{r7}
 8001216:	b0ad      	sub	sp, #180	; 0xb4
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	uint8_t arr_temp[LED_NUM][3];
	for(int i=0; i<LED_NUM; i++){
 800121c:	2300      	movs	r3, #0
 800121e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001222:	e05c      	b.n	80012de <ArraySwap_Rainbow+0xca>
		LED_Temp_Rainbow[i][0] = Rainbow[i%7][0];
 8001224:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001228:	4b86      	ldr	r3, [pc, #536]	; (8001444 <ArraySwap_Rainbow+0x230>)
 800122a:	fb83 1302 	smull	r1, r3, r3, r2
 800122e:	4413      	add	r3, r2
 8001230:	1099      	asrs	r1, r3, #2
 8001232:	17d3      	asrs	r3, r2, #31
 8001234:	1ac9      	subs	r1, r1, r3
 8001236:	460b      	mov	r3, r1
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	1a5b      	subs	r3, r3, r1
 800123c:	1ad1      	subs	r1, r2, r3
 800123e:	4a82      	ldr	r2, [pc, #520]	; (8001448 <ArraySwap_Rainbow+0x234>)
 8001240:	460b      	mov	r3, r1
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	440b      	add	r3, r1
 8001246:	4413      	add	r3, r2
 8001248:	7818      	ldrb	r0, [r3, #0]
 800124a:	4980      	ldr	r1, [pc, #512]	; (800144c <ArraySwap_Rainbow+0x238>)
 800124c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	440b      	add	r3, r1
 8001258:	4602      	mov	r2, r0
 800125a:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = Rainbow[i%7][1];
 800125c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001260:	4b78      	ldr	r3, [pc, #480]	; (8001444 <ArraySwap_Rainbow+0x230>)
 8001262:	fb83 1302 	smull	r1, r3, r3, r2
 8001266:	4413      	add	r3, r2
 8001268:	1099      	asrs	r1, r3, #2
 800126a:	17d3      	asrs	r3, r2, #31
 800126c:	1ac9      	subs	r1, r1, r3
 800126e:	460b      	mov	r3, r1
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	1a5b      	subs	r3, r3, r1
 8001274:	1ad1      	subs	r1, r2, r3
 8001276:	4a74      	ldr	r2, [pc, #464]	; (8001448 <ArraySwap_Rainbow+0x234>)
 8001278:	460b      	mov	r3, r1
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	440b      	add	r3, r1
 800127e:	4413      	add	r3, r2
 8001280:	3301      	adds	r3, #1
 8001282:	7818      	ldrb	r0, [r3, #0]
 8001284:	4971      	ldr	r1, [pc, #452]	; (800144c <ArraySwap_Rainbow+0x238>)
 8001286:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	440b      	add	r3, r1
 8001292:	3301      	adds	r3, #1
 8001294:	4602      	mov	r2, r0
 8001296:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = Rainbow[i%7][2];
 8001298:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800129c:	4b69      	ldr	r3, [pc, #420]	; (8001444 <ArraySwap_Rainbow+0x230>)
 800129e:	fb83 1302 	smull	r1, r3, r3, r2
 80012a2:	4413      	add	r3, r2
 80012a4:	1099      	asrs	r1, r3, #2
 80012a6:	17d3      	asrs	r3, r2, #31
 80012a8:	1ac9      	subs	r1, r1, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	1a5b      	subs	r3, r3, r1
 80012b0:	1ad1      	subs	r1, r2, r3
 80012b2:	4a65      	ldr	r2, [pc, #404]	; (8001448 <ArraySwap_Rainbow+0x234>)
 80012b4:	460b      	mov	r3, r1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	440b      	add	r3, r1
 80012ba:	4413      	add	r3, r2
 80012bc:	3302      	adds	r3, #2
 80012be:	7818      	ldrb	r0, [r3, #0]
 80012c0:	4962      	ldr	r1, [pc, #392]	; (800144c <ArraySwap_Rainbow+0x238>)
 80012c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	3302      	adds	r3, #2
 80012d0:	4602      	mov	r2, r0
 80012d2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<LED_NUM; i++){
 80012d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012d8:	3301      	adds	r3, #1
 80012da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80012de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012e2:	2b31      	cmp	r3, #49	; 0x31
 80012e4:	dd9e      	ble.n	8001224 <ArraySwap_Rainbow+0x10>
	}
	int indx;
	for(int i=0;i<LED_NUM; i++){
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80012ec:	e057      	b.n	800139e <ArraySwap_Rainbow+0x18a>
		indx = i + num;
 80012ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		if(indx >= LED_NUM){
 80012fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012fe:	2b31      	cmp	r3, #49	; 0x31
 8001300:	dd04      	ble.n	800130c <ArraySwap_Rainbow+0xf8>
			indx -= LED_NUM;
 8001302:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001306:	3b32      	subs	r3, #50	; 0x32
 8001308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		if(indx < 0){
 800130c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001310:	2b00      	cmp	r3, #0
 8001312:	da04      	bge.n	800131e <ArraySwap_Rainbow+0x10a>
			indx += LED_NUM;
 8001314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001318:	3332      	adds	r3, #50	; 0x32
 800131a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		arr_temp[i][0] = LED_Temp_Rainbow[indx][0];
 800131e:	494b      	ldr	r1, [pc, #300]	; (800144c <ArraySwap_Rainbow+0x238>)
 8001320:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	440b      	add	r3, r1
 800132c:	7819      	ldrb	r1, [r3, #0]
 800132e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800133c:	4413      	add	r3, r2
 800133e:	3ba8      	subs	r3, #168	; 0xa8
 8001340:	460a      	mov	r2, r1
 8001342:	701a      	strb	r2, [r3, #0]
		arr_temp[i][1] = LED_Temp_Rainbow[indx][1];
 8001344:	4941      	ldr	r1, [pc, #260]	; (800144c <ArraySwap_Rainbow+0x238>)
 8001346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	440b      	add	r3, r1
 8001352:	3301      	adds	r3, #1
 8001354:	7819      	ldrb	r1, [r3, #0]
 8001356:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001364:	4413      	add	r3, r2
 8001366:	3ba7      	subs	r3, #167	; 0xa7
 8001368:	460a      	mov	r2, r1
 800136a:	701a      	strb	r2, [r3, #0]
		arr_temp[i][2] = LED_Temp_Rainbow[indx][2];
 800136c:	4937      	ldr	r1, [pc, #220]	; (800144c <ArraySwap_Rainbow+0x238>)
 800136e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	440b      	add	r3, r1
 800137a:	3302      	adds	r3, #2
 800137c:	7819      	ldrb	r1, [r3, #0]
 800137e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800138c:	4413      	add	r3, r2
 800138e:	3ba6      	subs	r3, #166	; 0xa6
 8001390:	460a      	mov	r2, r1
 8001392:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 8001394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001398:	3301      	adds	r3, #1
 800139a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800139e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013a2:	2b31      	cmp	r3, #49	; 0x31
 80013a4:	dda3      	ble.n	80012ee <ArraySwap_Rainbow+0xda>
	}
	for(int i=0;i<LED_NUM; i++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80013ac:	e03f      	b.n	800142e <ArraySwap_Rainbow+0x21a>
		LED_Temp_Rainbow[i][0] = arr_temp[i][0];
 80013ae:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80013bc:	4413      	add	r3, r2
 80013be:	3ba8      	subs	r3, #168	; 0xa8
 80013c0:	7818      	ldrb	r0, [r3, #0]
 80013c2:	4922      	ldr	r1, [pc, #136]	; (800144c <ArraySwap_Rainbow+0x238>)
 80013c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	4602      	mov	r2, r0
 80013d2:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][1] = arr_temp[i][1];
 80013d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80013e2:	4413      	add	r3, r2
 80013e4:	3ba7      	subs	r3, #167	; 0xa7
 80013e6:	7818      	ldrb	r0, [r3, #0]
 80013e8:	4918      	ldr	r1, [pc, #96]	; (800144c <ArraySwap_Rainbow+0x238>)
 80013ea:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	3301      	adds	r3, #1
 80013f8:	4602      	mov	r2, r0
 80013fa:	701a      	strb	r2, [r3, #0]
		LED_Temp_Rainbow[i][2] = arr_temp[i][2];
 80013fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800140a:	4413      	add	r3, r2
 800140c:	3ba6      	subs	r3, #166	; 0xa6
 800140e:	7818      	ldrb	r0, [r3, #0]
 8001410:	490e      	ldr	r1, [pc, #56]	; (800144c <ArraySwap_Rainbow+0x238>)
 8001412:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	440b      	add	r3, r1
 800141e:	3302      	adds	r3, #2
 8001420:	4602      	mov	r2, r0
 8001422:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<LED_NUM; i++){
 8001424:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001428:	3301      	adds	r3, #1
 800142a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800142e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001432:	2b31      	cmp	r3, #49	; 0x31
 8001434:	ddbb      	ble.n	80013ae <ArraySwap_Rainbow+0x19a>
	}
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	37b4      	adds	r7, #180	; 0xb4
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	92492493 	.word	0x92492493
 8001448:	20000000 	.word	0x20000000
 800144c:	200000e8 	.word	0x200000e8

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f001 fafe 	bl	8002a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f81e 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f000 faa0 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001460:	f000 fa40 	bl	80018e4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001464:	f000 f9ea 	bl	800183c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001468:	f000 fa12 	bl	8001890 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800146c:	f000 f880 	bl	8001570 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001470:	f000 f94c 	bl	800170c <MX_TIM3_Init>
  MX_TIM1_Init();
 8001474:	f000 f8aa 	bl	80015cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  
  D_PWM_Init();
 8001478:	f001 fad6 	bl	8002a28 <D_PWM_Init>
  appInit();
 800147c:	f7ff fb4e 	bl	8000b1c <appInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 8001480:	f7ff fb56 	bl	8000b30 <appTask>
    if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <main+0x44>)
 800148a:	f002 fa0b 	bl	80038a4 <HAL_GPIO_ReadPin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 800148e:	f001 f8d3 	bl	8002638 <D_Mess_flush>
	  appTask();
 8001492:	e7f5      	b.n	8001480 <main+0x30>
 8001494:	40020800 	.word	0x40020800

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 031c 	add.w	r3, r7, #28
 80014a2:	2234      	movs	r2, #52	; 0x34
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 ffdc 	bl	8008464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <SystemClock_Config+0xd0>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <SystemClock_Config+0xd0>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <SystemClock_Config+0xd0>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014d8:	2300      	movs	r3, #0
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	4b23      	ldr	r3, [pc, #140]	; (800156c <SystemClock_Config+0xd4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <SystemClock_Config+0xd4>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b1f      	ldr	r3, [pc, #124]	; (800156c <SystemClock_Config+0xd4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001500:	2310      	movs	r3, #16
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001508:	2300      	movs	r3, #0
 800150a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800150c:	2308      	movs	r3, #8
 800150e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001510:	2350      	movs	r3, #80	; 0x50
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001518:	2302      	movs	r3, #2
 800151a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4618      	mov	r0, r3
 8001526:	f004 fad1 	bl	8005acc <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001530:	f000 face 	bl	8001ad0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2102      	movs	r1, #2
 8001550:	4618      	mov	r0, r3
 8001552:	f003 ffef 	bl	8005534 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800155c:	f000 fab8 	bl	8001ad0 <Error_Handler>
  }
}
 8001560:	bf00      	nop
 8001562:	3750      	adds	r7, #80	; 0x50
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <MX_I2C1_Init+0x54>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_I2C1_Init+0x50>)
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x58>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001588:	2220      	movs	r2, #32
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_I2C1_Init+0x50>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <MX_I2C1_Init+0x50>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_I2C1_Init+0x50>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	4804      	ldr	r0, [pc, #16]	; (80015c0 <MX_I2C1_Init+0x50>)
 80015ae:	f002 f9ab 	bl	8003908 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015b8:	f000 fa8a 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20001a58 	.word	0x20001a58
 80015c4:	40005400 	.word	0x40005400
 80015c8:	000186a0 	.word	0x000186a0

080015cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b096      	sub	sp, #88	; 0x58
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2220      	movs	r2, #32
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f006 ff2d 	bl	8008464 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <MX_TIM1_Init+0x138>)
 800160c:	4a3e      	ldr	r2, [pc, #248]	; (8001708 <MX_TIM1_Init+0x13c>)
 800160e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <MX_TIM1_Init+0x138>)
 8001612:	2203      	movs	r2, #3
 8001614:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <MX_TIM1_Init+0x138>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <MX_TIM1_Init+0x138>)
 800161e:	2218      	movs	r2, #24
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <MX_TIM1_Init+0x138>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <MX_TIM1_Init+0x138>)
 800162a:	2200      	movs	r2, #0
 800162c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <MX_TIM1_Init+0x138>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001634:	4833      	ldr	r0, [pc, #204]	; (8001704 <MX_TIM1_Init+0x138>)
 8001636:	f004 fce7 	bl	8006008 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001640:	f000 fa46 	bl	8001ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800164e:	4619      	mov	r1, r3
 8001650:	482c      	ldr	r0, [pc, #176]	; (8001704 <MX_TIM1_Init+0x138>)
 8001652:	f005 f9a5 	bl	80069a0 <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800165c:	f000 fa38 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001660:	4828      	ldr	r0, [pc, #160]	; (8001704 <MX_TIM1_Init+0x138>)
 8001662:	f004 fd20 	bl	80060a6 <HAL_TIM_PWM_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800166c:	f000 fa30 	bl	8001ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800167c:	4619      	mov	r1, r3
 800167e:	4821      	ldr	r0, [pc, #132]	; (8001704 <MX_TIM1_Init+0x138>)
 8001680:	f005 fe4a 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800168a:	f000 fa21 	bl	8001ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168e:	2360      	movs	r3, #96	; 0x60
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4814      	ldr	r0, [pc, #80]	; (8001704 <MX_TIM1_Init+0x138>)
 80016b4:	f005 f8b2 	bl	800681c <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80016be:	f000 fa07 	bl	8001ad0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <MX_TIM1_Init+0x138>)
 80016e6:	f005 fe93 	bl	8007410 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80016f0:	f000 f9ee 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <MX_TIM1_Init+0x138>)
 80016f6:	f000 fb41 	bl	8001d7c <HAL_TIM_MspPostInit>

}
 80016fa:	bf00      	nop
 80016fc:	3758      	adds	r7, #88	; 0x58
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20001c58 	.word	0x20001c58
 8001708:	40010000 	.word	0x40010000

0800170c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	615a      	str	r2, [r3, #20]
 800173a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <MX_TIM3_Init+0x128>)
 800173e:	4a3e      	ldr	r2, [pc, #248]	; (8001838 <MX_TIM3_Init+0x12c>)
 8001740:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <MX_TIM3_Init+0x128>)
 8001744:	224f      	movs	r2, #79	; 0x4f
 8001746:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <MX_TIM3_Init+0x128>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <MX_TIM3_Init+0x128>)
 8001750:	f241 3287 	movw	r2, #4999	; 0x1387
 8001754:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <MX_TIM3_Init+0x128>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <MX_TIM3_Init+0x128>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001762:	4834      	ldr	r0, [pc, #208]	; (8001834 <MX_TIM3_Init+0x128>)
 8001764:	f004 fc50 	bl	8006008 <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800176e:	f000 f9af 	bl	8001ad0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177c:	4619      	mov	r1, r3
 800177e:	482d      	ldr	r0, [pc, #180]	; (8001834 <MX_TIM3_Init+0x128>)
 8001780:	f005 f90e 	bl	80069a0 <HAL_TIM_ConfigClockSource>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800178a:	f000 f9a1 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800178e:	4829      	ldr	r0, [pc, #164]	; (8001834 <MX_TIM3_Init+0x128>)
 8001790:	f004 fc89 	bl	80060a6 <HAL_TIM_PWM_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800179a:	f000 f999 	bl	8001ad0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	4619      	mov	r1, r3
 80017ac:	4821      	ldr	r0, [pc, #132]	; (8001834 <MX_TIM3_Init+0x128>)
 80017ae:	f005 fdb3 	bl	8007318 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80017b8:	f000 f98a 	bl	8001ad0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	4619      	mov	r1, r3
 80017d2:	4818      	ldr	r0, [pc, #96]	; (8001834 <MX_TIM3_Init+0x128>)
 80017d4:	f005 f822 	bl	800681c <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017de:	f000 f977 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2204      	movs	r2, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4812      	ldr	r0, [pc, #72]	; (8001834 <MX_TIM3_Init+0x128>)
 80017ea:	f005 f817 	bl	800681c <HAL_TIM_PWM_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80017f4:	f000 f96c 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2208      	movs	r2, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_TIM3_Init+0x128>)
 8001800:	f005 f80c 	bl	800681c <HAL_TIM_PWM_ConfigChannel>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800180a:	f000 f961 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	220c      	movs	r2, #12
 8001812:	4619      	mov	r1, r3
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <MX_TIM3_Init+0x128>)
 8001816:	f005 f801 	bl	800681c <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001820:	f000 f956 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <MX_TIM3_Init+0x128>)
 8001826:	f000 faa9 	bl	8001d7c <HAL_TIM_MspPostInit>

}
 800182a:	bf00      	nop
 800182c:	3738      	adds	r7, #56	; 0x38
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20001aac 	.word	0x20001aac
 8001838:	40000400 	.word	0x40000400

0800183c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART1_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 8001848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800184c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART1_UART_Init+0x4c>)
 8001874:	f005 fe1e 	bl	80074b4 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f000 f927 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20001c14 	.word	0x20001c14
 800188c:	40011000 	.word	0x40011000

08001890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <MX_USART2_UART_Init+0x50>)
 8001898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 800189c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 80018b6:	220c      	movs	r2, #12
 80018b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_USART2_UART_Init+0x4c>)
 80018c8:	f005 fdf4 	bl	80074b4 <HAL_UART_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018d2:	f000 f8fd 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20001d00 	.word	0x20001d00
 80018e0:	40004400 	.word	0x40004400

080018e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <MX_DMA_Init+0xb8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a2a      	ldr	r2, [pc, #168]	; (800199c <MX_DMA_Init+0xb8>)
 80018f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <MX_DMA_Init+0xb8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <MX_DMA_Init+0xb8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a23      	ldr	r2, [pc, #140]	; (800199c <MX_DMA_Init+0xb8>)
 8001910:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <MX_DMA_Init+0xb8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	200b      	movs	r0, #11
 8001928:	f001 f9e1 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800192c:	200b      	movs	r0, #11
 800192e:	f001 f9fa 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2010      	movs	r0, #16
 8001938:	f001 f9d9 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800193c:	2010      	movs	r0, #16
 800193e:	f001 f9f2 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2011      	movs	r0, #17
 8001948:	f001 f9d1 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800194c:	2011      	movs	r0, #17
 800194e:	f001 f9ea 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	202f      	movs	r0, #47	; 0x2f
 8001958:	f001 f9c9 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800195c:	202f      	movs	r0, #47	; 0x2f
 800195e:	f001 f9e2 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2039      	movs	r0, #57	; 0x39
 8001968:	f001 f9c1 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800196c:	2039      	movs	r0, #57	; 0x39
 800196e:	f001 f9da 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	203a      	movs	r0, #58	; 0x3a
 8001978:	f001 f9b9 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800197c:	203a      	movs	r0, #58	; 0x3a
 800197e:	f001 f9d2 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2046      	movs	r0, #70	; 0x46
 8001988:	f001 f9b1 	bl	8002cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800198c:	2046      	movs	r0, #70	; 0x46
 800198e:	f001 f9ca 	bl	8002d26 <HAL_NVIC_EnableIRQ>

}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	; 0x28
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
 80019b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b29      	ldr	r3, [pc, #164]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <MX_GPIO_Init+0xe8>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <MX_GPIO_Init+0xe8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MX_GPIO_Init+0xe8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a1d      	ldr	r2, [pc, #116]	; (8001a88 <MX_GPIO_Init+0xe8>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_GPIO_Init+0xe8>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2120      	movs	r1, #32
 8001a2a:	4818      	ldr	r0, [pc, #96]	; (8001a8c <MX_GPIO_Init+0xec>)
 8001a2c:	f001 ff52 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4812      	ldr	r0, [pc, #72]	; (8001a90 <MX_GPIO_Init+0xf0>)
 8001a48:	f001 fd98 	bl	800357c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a50:	2301      	movs	r3, #1
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	480a      	ldr	r0, [pc, #40]	; (8001a8c <MX_GPIO_Init+0xec>)
 8001a64:	f001 fd8a 	bl	800357c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a68:	2330      	movs	r3, #48	; 0x30
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_GPIO_Init+0xf4>)
 8001a7c:	f001 fd7e 	bl	800357c <HAL_GPIO_Init>

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020400 	.word	0x40020400

08001a98 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_UART_TxCpltCallback+0x20>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8001aaa:	f000 fdf7 	bl	800269c <D_Mess_TransitionCompletedCallBack>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40004400 	.word	0x40004400

08001abc <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef* htim){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  //busy = false;
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
  //HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
	//datasentflag=1;
  D_LED_Callback();
 8001ac4:	f000 fd88 	bl	80025d8 <D_LED_Callback>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <Error_Handler+0x8>
	...

08001adc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_MspInit+0x4c>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_MspInit+0x4c>)
 8001aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af0:	6453      	str	r3, [r2, #68]	; 0x44
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_MspInit+0x4c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_MspInit+0x4c>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b1a:	2007      	movs	r0, #7
 8001b1c:	f001 f8dc 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <HAL_I2C_MspInit+0x160>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	f040 8099 	bne.w	8001c82 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	4b4e      	ldr	r3, [pc, #312]	; (8001c90 <HAL_I2C_MspInit+0x164>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	4a4d      	ldr	r2, [pc, #308]	; (8001c90 <HAL_I2C_MspInit+0x164>)
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_I2C_MspInit+0x164>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b72:	2312      	movs	r3, #18
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4842      	ldr	r0, [pc, #264]	; (8001c94 <HAL_I2C_MspInit+0x168>)
 8001b8a:	f001 fcf7 	bl	800357c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	4b3f      	ldr	r3, [pc, #252]	; (8001c90 <HAL_I2C_MspInit+0x164>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_I2C_MspInit+0x164>)
 8001b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <HAL_I2C_MspInit+0x164>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bac:	4a3b      	ldr	r2, [pc, #236]	; (8001c9c <HAL_I2C_MspInit+0x170>)
 8001bae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb8:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbe:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001bea:	482b      	ldr	r0, [pc, #172]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bec:	f001 f8b6 	bl	8002d5c <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001bf6:	f7ff ff6b 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
 8001c00:	4a25      	ldr	r2, [pc, #148]	; (8001c98 <HAL_I2C_MspInit+0x16c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c08:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <HAL_I2C_MspInit+0x178>)
 8001c0a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c12:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c26:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c46:	4816      	ldr	r0, [pc, #88]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c48:	f001 f888 	bl	8002d5c <HAL_DMA_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001c52:	f7ff ff3d 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_I2C_MspInit+0x174>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201f      	movs	r0, #31
 8001c68:	f001 f841 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c6c:	201f      	movs	r0, #31
 8001c6e:	f001 f85a 	bl	8002d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	2020      	movs	r0, #32
 8001c78:	f001 f839 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c7c:	2020      	movs	r0, #32
 8001c7e:	f001 f852 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40005400 	.word	0x40005400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400
 8001c98:	20001ca0 	.word	0x20001ca0
 8001c9c:	40026010 	.word	0x40026010
 8001ca0:	200019f8 	.word	0x200019f8
 8001ca4:	400260b8 	.word	0x400260b8

08001ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <HAL_TIM_Base_MspInit+0xc0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d13e      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_TIM_Base_MspInit+0xc4>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <HAL_TIM_Base_MspInit+0xc4>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_TIM_Base_MspInit+0xc4>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001cd8:	4a26      	ldr	r2, [pc, #152]	; (8001d74 <HAL_TIM_Base_MspInit+0xcc>)
 8001cda:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001cde:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001ce2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001ce6:	2240      	movs	r2, #64	; 0x40
 8001ce8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d06:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d14:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d1a:	4815      	ldr	r0, [pc, #84]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001d1c:	f001 f81e 	bl	8002d5c <HAL_DMA_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001d26:	f7ff fed3 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d30:	4a0f      	ldr	r2, [pc, #60]	; (8001d70 <HAL_TIM_Base_MspInit+0xc8>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d36:	e012      	b.n	8001d5e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_TIM_Base_MspInit+0xd0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10d      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_TIM_Base_MspInit+0xc4>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_TIM_Base_MspInit+0xc4>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_TIM_Base_MspInit+0xc4>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	20001938 	.word	0x20001938
 8001d74:	40026428 	.word	0x40026428
 8001d78:	40000400 	.word	0x40000400

08001d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a33      	ldr	r2, [pc, #204]	; (8001e68 <HAL_TIM_MspPostInit+0xec>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d11f      	bne.n	8001dde <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a31      	ldr	r2, [pc, #196]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4826      	ldr	r0, [pc, #152]	; (8001e70 <HAL_TIM_MspPostInit+0xf4>)
 8001dd8:	f001 fbd0 	bl	800357c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ddc:	e040      	b.n	8001e60 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_TIM_MspPostInit+0xf8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d13b      	bne.n	8001e60 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6313      	str	r3, [r2, #48]	; 0x30
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_TIM_MspPostInit+0xf0>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e20:	23c0      	movs	r3, #192	; 0xc0
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e30:	2302      	movs	r3, #2
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <HAL_TIM_MspPostInit+0xf4>)
 8001e3c:	f001 fb9e 	bl	800357c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e40:	2303      	movs	r3, #3
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e50:	2302      	movs	r3, #2
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <HAL_TIM_MspPostInit+0xfc>)
 8001e5c:	f001 fb8e 	bl	800357c <HAL_GPIO_Init>
}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40020400 	.word	0x40020400

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a97      	ldr	r2, [pc, #604]	; (80020f8 <HAL_UART_MspInit+0x27c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	f040 8092 	bne.w	8001fc4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	4b95      	ldr	r3, [pc, #596]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	4a94      	ldr	r2, [pc, #592]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb0:	4b92      	ldr	r3, [pc, #584]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	4a8d      	ldr	r2, [pc, #564]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6313      	str	r3, [r2, #48]	; 0x30
 8001ecc:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ed8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eea:	2307      	movs	r3, #7
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4882      	ldr	r0, [pc, #520]	; (8002100 <HAL_UART_MspInit+0x284>)
 8001ef6:	f001 fb41 	bl	800357c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001efa:	4b82      	ldr	r3, [pc, #520]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001efc:	4a82      	ldr	r2, [pc, #520]	; (8002108 <HAL_UART_MspInit+0x28c>)
 8001efe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001f00:	4b80      	ldr	r3, [pc, #512]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f06:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f08:	4b7e      	ldr	r3, [pc, #504]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0e:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f14:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1c:	4b79      	ldr	r3, [pc, #484]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f22:	4b78      	ldr	r3, [pc, #480]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001f28:	4b76      	ldr	r3, [pc, #472]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f2e:	4b75      	ldr	r3, [pc, #468]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f34:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001f3a:	4872      	ldr	r0, [pc, #456]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f3c:	f000 ff0e 	bl	8002d5c <HAL_DMA_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001f46:	f7ff fdc3 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a6d      	ldr	r2, [pc, #436]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f50:	4a6c      	ldr	r2, [pc, #432]	; (8002104 <HAL_UART_MspInit+0x288>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001f56:	4b6d      	ldr	r3, [pc, #436]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f58:	4a6d      	ldr	r2, [pc, #436]	; (8002110 <HAL_UART_MspInit+0x294>)
 8001f5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001f5c:	4b6b      	ldr	r3, [pc, #428]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f62:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f64:	4b69      	ldr	r3, [pc, #420]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6a:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f70:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f76:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f78:	4b64      	ldr	r3, [pc, #400]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f90:	4b5e      	ldr	r3, [pc, #376]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f96:	485d      	ldr	r0, [pc, #372]	; (800210c <HAL_UART_MspInit+0x290>)
 8001f98:	f000 fee0 	bl	8002d5c <HAL_DMA_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001fa2:	f7ff fd95 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_UART_MspInit+0x290>)
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34
 8001fac:	4a57      	ldr	r2, [pc, #348]	; (800210c <HAL_UART_MspInit+0x290>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2025      	movs	r0, #37	; 0x25
 8001fb8:	f000 fe99 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fbc:	2025      	movs	r0, #37	; 0x25
 8001fbe:	f000 feb2 	bl	8002d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fc2:	e095      	b.n	80020f0 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a52      	ldr	r2, [pc, #328]	; (8002114 <HAL_UART_MspInit+0x298>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	f040 8090 	bne.w	80020f0 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	4b49      	ldr	r3, [pc, #292]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fde:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	4a41      	ldr	r2, [pc, #260]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffc:	4b3f      	ldr	r3, [pc, #252]	; (80020fc <HAL_UART_MspInit+0x280>)
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002008:	230c      	movs	r3, #12
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002014:	2303      	movs	r3, #3
 8002016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002018:	2307      	movs	r3, #7
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f107 031c 	add.w	r3, r7, #28
 8002020:	4619      	mov	r1, r3
 8002022:	4837      	ldr	r0, [pc, #220]	; (8002100 <HAL_UART_MspInit+0x284>)
 8002024:	f001 faaa 	bl	800357c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_UART_MspInit+0x29c>)
 800202a:	4a3c      	ldr	r2, [pc, #240]	; (800211c <HAL_UART_MspInit+0x2a0>)
 800202c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_UART_MspInit+0x29c>)
 8002030:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002034:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_UART_MspInit+0x29c>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_UART_MspInit+0x29c>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002042:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_UART_MspInit+0x29c>)
 8002044:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002048:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_UART_MspInit+0x29c>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_UART_MspInit+0x29c>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_UART_MspInit+0x29c>)
 8002058:	2200      	movs	r2, #0
 800205a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_UART_MspInit+0x29c>)
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_UART_MspInit+0x29c>)
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002068:	482b      	ldr	r0, [pc, #172]	; (8002118 <HAL_UART_MspInit+0x29c>)
 800206a:	f000 fe77 	bl	8002d5c <HAL_DMA_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002074:	f7ff fd2c 	bl	8001ad0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_UART_MspInit+0x29c>)
 800207c:	639a      	str	r2, [r3, #56]	; 0x38
 800207e:	4a26      	ldr	r2, [pc, #152]	; (8002118 <HAL_UART_MspInit+0x29c>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_UART_MspInit+0x2a8>)
 8002088:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 800208c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002090:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 8002094:	2240      	movs	r2, #64	; 0x40
 8002096:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020c4:	4816      	ldr	r0, [pc, #88]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020c6:	f000 fe49 	bl	8002d5c <HAL_DMA_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80020d0:	f7ff fcfe 	bl	8001ad0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
 80020da:	4a11      	ldr	r2, [pc, #68]	; (8002120 <HAL_UART_MspInit+0x2a4>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2100      	movs	r1, #0
 80020e4:	2026      	movs	r0, #38	; 0x26
 80020e6:	f000 fe02 	bl	8002cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ea:	2026      	movs	r0, #38	; 0x26
 80020ec:	f000 fe1b 	bl	8002d26 <HAL_NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3730      	adds	r7, #48	; 0x30
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40011000 	.word	0x40011000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	20001b54 	.word	0x20001b54
 8002108:	40026440 	.word	0x40026440
 800210c:	20001af4 	.word	0x20001af4
 8002110:	400264b8 	.word	0x400264b8
 8002114:	40004400 	.word	0x40004400
 8002118:	20001998 	.word	0x20001998
 800211c:	40026088 	.word	0x40026088
 8002120:	20001bb4 	.word	0x20001bb4
 8002124:	400260a0 	.word	0x400260a0

08002128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800212c:	e7fe      	b.n	800212c <NMI_Handler+0x4>

0800212e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <MemManage_Handler+0x4>

0800213a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213e:	e7fe      	b.n	800213e <BusFault_Handler+0x4>

08002140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002144:	e7fe      	b.n	8002144 <UsageFault_Handler+0x4>

08002146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002174:	f000 fcc0 	bl	8002af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <SysTick_Handler+0x18>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a02      	ldr	r2, [pc, #8]	; (8002188 <SysTick_Handler+0x18>)
 8002180:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200001a8 	.word	0x200001a8

0800218c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <DMA1_Stream0_IRQHandler+0x10>)
 8002192:	f000 ff7b 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20001ca0 	.word	0x20001ca0

080021a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <DMA1_Stream5_IRQHandler+0x10>)
 80021a6:	f000 ff71 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20001998 	.word	0x20001998

080021b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <DMA1_Stream6_IRQHandler+0x10>)
 80021ba:	f000 ff67 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20001bb4 	.word	0x20001bb4

080021c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <I2C1_EV_IRQHandler+0x10>)
 80021ce:	f001 fcdf 	bl	8003b90 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20001a58 	.word	0x20001a58

080021dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <I2C1_ER_IRQHandler+0x10>)
 80021e2:	f001 fe46 	bl	8003e72 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20001a58 	.word	0x20001a58

080021f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <USART1_IRQHandler+0x10>)
 80021f6:	f005 fa29 	bl	800764c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20001c14 	.word	0x20001c14

08002204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <USART2_IRQHandler+0x10>)
 800220a:	f005 fa1f 	bl	800764c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20001d00 	.word	0x20001d00

08002218 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <DMA1_Stream7_IRQHandler+0x10>)
 800221e:	f000 ff35 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200019f8 	.word	0x200019f8

0800222c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <DMA2_Stream1_IRQHandler+0x10>)
 8002232:	f000 ff2b 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20001938 	.word	0x20001938

08002240 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA2_Stream2_IRQHandler+0x10>)
 8002246:	f000 ff21 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20001b54 	.word	0x20001b54

08002254 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <DMA2_Stream7_IRQHandler+0x10>)
 800225a:	f000 ff17 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20001af4 	.word	0x20001af4

08002268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <SystemInit+0x20>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <SystemInit+0x20>)
 8002274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800228c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002292:	490e      	ldr	r1, [pc, #56]	; (80022cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022a8:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022b6:	f7ff ffd7 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ba:	f006 f8af 	bl	800841c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022be:	f7ff f8c7 	bl	8001450 <main>
  bx  lr    
 80022c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022cc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80022d0:	080084d4 	.word	0x080084d4
  ldr r2, =_sbss
 80022d4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80022d8:	20001ee4 	.word	0x20001ee4

080022dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <ADC_IRQHandler>

080022de <D_GPIO_Read>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
}

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	4619      	mov	r1, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f001 fad8 	bl	80038a4 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <D_LED_Set_Circle>:
	LED_Data[LEDnum][1] = Green;
	LED_Data[LEDnum][2] = Red;
	LED_Data[LEDnum][3] = Blue;
}

void D_LED_Set_Circle(uint8_t LED[][3], int num){
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	for(int i=0; i<10; i++){
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e059      	b.n	80023cc <D_LED_Set_Circle+0xc4>
		LED_Data[(num-1)*10 + i][0] = (num-1)*10 + i;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	4413      	add	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	b2d8      	uxtb	r0, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	b2d9      	uxtb	r1, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	461a      	mov	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	1842      	adds	r2, r0, r1
 8002340:	b2d1      	uxtb	r1, r2
 8002342:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <D_LED_Set_Circle+0xd8>)
 8002344:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[(num-1)*10 + i][1] = LED[i][1];
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	18d1      	adds	r1, r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	1e5a      	subs	r2, r3, #1
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	461a      	mov	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4413      	add	r3, r2
 8002366:	7849      	ldrb	r1, [r1, #1]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <D_LED_Set_Circle+0xd8>)
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	460a      	mov	r2, r1
 8002370:	705a      	strb	r2, [r3, #1]
		LED_Data[(num-1)*10 + i][2] = LED[i][0];
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	18d1      	adds	r1, r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	7809      	ldrb	r1, [r1, #0]
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <D_LED_Set_Circle+0xd8>)
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	460a      	mov	r2, r1
 800239a:	709a      	strb	r2, [r3, #2]
		LED_Data[(num-1)*10 + i][3] = LED[i][2];
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	18d1      	adds	r1, r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	461a      	mov	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	7889      	ldrb	r1, [r1, #2]
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <D_LED_Set_Circle+0xd8>)
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	460a      	mov	r2, r1
 80023c4:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<10; i++){
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3301      	adds	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	dda2      	ble.n	8002318 <D_LED_Set_Circle+0x10>
	}
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	20001d44 	.word	0x20001d44

080023e4 <D_LED_Send>:

void D_LED_Send(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int j= 0; j<LED_NUM; j++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e036      	b.n	8002462 <D_LED_Send+0x7e>
	{
		color = ((LED_Data[j][1]<<16) | (LED_Data[j][2]<<8) | (LED_Data[j][3]));
 80023f4:	4a31      	ldr	r2, [pc, #196]	; (80024bc <D_LED_Send+0xd8>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	041a      	lsls	r2, r3, #16
 8002400:	492e      	ldr	r1, [pc, #184]	; (80024bc <D_LED_Send+0xd8>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	789b      	ldrb	r3, [r3, #2]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	431a      	orrs	r2, r3
 800240e:	492b      	ldr	r1, [pc, #172]	; (80024bc <D_LED_Send+0xd8>)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	78db      	ldrb	r3, [r3, #3]
 8002418:	4313      	orrs	r3, r2
 800241a:	607b      	str	r3, [r7, #4]
		for (int i=23; i>=0; i--)
 800241c:	2317      	movs	r3, #23
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e019      	b.n	8002456 <D_LED_Send+0x72>
		{
			if (color&(1<<i))
 8002422:	2201      	movs	r2, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <D_LED_Send+0x5c>
			{
				pwmData[indx] = 15;  // 2/3 of 25
 8002434:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <D_LED_Send+0xdc>)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	210f      	movs	r1, #15
 800243a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800243e:	e004      	b.n	800244a <D_LED_Send+0x66>
			}
			else pwmData[indx] = 7;  // 1/3 of 25
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <D_LED_Send+0xdc>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2107      	movs	r1, #7
 8002446:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			indx++;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3b01      	subs	r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	dae2      	bge.n	8002422 <D_LED_Send+0x3e>
	for (int j= 0; j<LED_NUM; j++)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	3301      	adds	r3, #1
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b31      	cmp	r3, #49	; 0x31
 8002466:	ddc5      	ble.n	80023f4 <D_LED_Send+0x10>
		}
	}

	for (int i=0; i<50; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	e00a      	b.n	8002484 <D_LED_Send+0xa0>
	{
		pwmData[indx] = 0;
 800246e:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <D_LED_Send+0xdc>)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2100      	movs	r1, #0
 8002474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3301      	adds	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3301      	adds	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b31      	cmp	r3, #49	; 0x31
 8002488:	ddf1      	ble.n	800246e <D_LED_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx*2);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	b29b      	uxth	r3, r3
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	b29b      	uxth	r3, r3
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <D_LED_Send+0xdc>)
 8002494:	2100      	movs	r1, #0
 8002496:	480b      	ldr	r0, [pc, #44]	; (80024c4 <D_LED_Send+0xe0>)
 8002498:	f003 ff26 	bl	80062e8 <HAL_TIM_PWM_Start_DMA>
	while (!_dataSent){};
 800249c:	bf00      	nop
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <D_LED_Send+0xe4>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f083 0301 	eor.w	r3, r3, #1
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f7      	bne.n	800249e <D_LED_Send+0xba>
	_dataSent = false;
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <D_LED_Send+0xe4>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20001d44 	.word	0x20001d44
 80024c0:	200001b0 	.word	0x200001b0
 80024c4:	20001c58 	.word	0x20001c58
 80024c8:	200001ac 	.word	0x200001ac

080024cc <D_LED_Rotate>:

void D_LED_Rotate(int num){
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	int indx = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
	for(int i=0;i<LED_NUM; i++){
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	e03b      	b.n	8002556 <D_LED_Rotate+0x8a>
		indx = i + num;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4413      	add	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
		if(indx >= LED_NUM){
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b31      	cmp	r3, #49	; 0x31
 80024ea:	dd02      	ble.n	80024f2 <D_LED_Rotate+0x26>
			indx -= 50;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3b32      	subs	r3, #50	; 0x32
 80024f0:	617b      	str	r3, [r7, #20]
		}
		if(indx < 0){
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	da02      	bge.n	80024fe <D_LED_Rotate+0x32>
			indx += 50;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3332      	adds	r3, #50	; 0x32
 80024fc:	617b      	str	r3, [r7, #20]
		}
		LED_Temp[i][0] = LED_Data[indx][0];
 80024fe:	4a34      	ldr	r2, [pc, #208]	; (80025d0 <D_LED_Rotate+0x104>)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002506:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <D_LED_Rotate+0x108>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Temp[i][1] = LED_Data[indx][1];
 800250e:	4a30      	ldr	r2, [pc, #192]	; (80025d0 <D_LED_Rotate+0x104>)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	7859      	ldrb	r1, [r3, #1]
 8002518:	4a2e      	ldr	r2, [pc, #184]	; (80025d4 <D_LED_Rotate+0x108>)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	460a      	mov	r2, r1
 8002522:	705a      	strb	r2, [r3, #1]
		LED_Temp[i][2] = LED_Data[indx][2];
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <D_LED_Rotate+0x104>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	7899      	ldrb	r1, [r3, #2]
 800252e:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <D_LED_Rotate+0x108>)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	460a      	mov	r2, r1
 8002538:	709a      	strb	r2, [r3, #2]
		LED_Temp[i][3] = LED_Data[indx][3];
 800253a:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <D_LED_Rotate+0x104>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	78d9      	ldrb	r1, [r3, #3]
 8002544:	4a23      	ldr	r2, [pc, #140]	; (80025d4 <D_LED_Rotate+0x108>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	460a      	mov	r2, r1
 800254e:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	3301      	adds	r3, #1
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b31      	cmp	r3, #49	; 0x31
 800255a:	ddc0      	ble.n	80024de <D_LED_Rotate+0x12>
	}
	for(int i=0;i<LED_NUM; i++){
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e02b      	b.n	80025ba <D_LED_Rotate+0xee>
		LED_Data[i][0] = LED_Temp[i][0];
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <D_LED_Rotate+0x108>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <D_LED_Rotate+0x104>)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = LED_Temp[i][1];
 8002572:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <D_LED_Rotate+0x108>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	7859      	ldrb	r1, [r3, #1]
 800257c:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <D_LED_Rotate+0x104>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	460a      	mov	r2, r1
 8002586:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = LED_Temp[i][2];
 8002588:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <D_LED_Rotate+0x108>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	7899      	ldrb	r1, [r3, #2]
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <D_LED_Rotate+0x104>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	460a      	mov	r2, r1
 800259c:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = LED_Temp[i][3];
 800259e:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <D_LED_Rotate+0x108>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	78d9      	ldrb	r1, [r3, #3]
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <D_LED_Rotate+0x104>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	460a      	mov	r2, r1
 80025b2:	70da      	strb	r2, [r3, #3]
	for(int i=0;i<LED_NUM; i++){
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b31      	cmp	r3, #49	; 0x31
 80025be:	ddd0      	ble.n	8002562 <D_LED_Rotate+0x96>
	}
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20001d44 	.word	0x20001d44
 80025d4:	20001e0c 	.word	0x20001e0c

080025d8 <D_LED_Callback>:

void D_LED_Callback(void){
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80025dc:	2100      	movs	r1, #0
 80025de:	4804      	ldr	r0, [pc, #16]	; (80025f0 <D_LED_Callback+0x18>)
 80025e0:	f004 f84a 	bl	8006678 <HAL_TIM_PWM_Stop_DMA>
    _dataSent = true;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <D_LED_Callback+0x1c>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20001c58 	.word	0x20001c58
 80025f4:	200001ac 	.word	0x200001ac

080025f8 <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 80025f8:	b40f      	push	{r0, r1, r2, r3}
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	6938      	ldr	r0, [r7, #16]
 800260a:	f000 f891 	bl	8002730 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <D_Mess_printf+0x38>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <D_Mess_printf+0x3c>)
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800261a:	dd01      	ble.n	8002620 <D_Mess_printf+0x28>
	  D_Mess_flush();
 800261c:	f000 f80c 	bl	8002638 <D_Mess_flush>
  }
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800262a:	b004      	add	sp, #16
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	20001edc 	.word	0x20001edc
 8002634:	20001538 	.word	0x20001538

08002638 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <D_Mess_flush+0x54>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <D_Mess_flush+0x1c>
		outptr = buff;
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <D_Mess_flush+0x58>)
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <D_Mess_flush+0x5c>)
 8002650:	601a      	str	r2, [r3, #0]
		return;
 8002652:	e01a      	b.n	800268a <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <D_Mess_flush+0x58>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <D_Mess_flush+0x58>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	490b      	ldr	r1, [pc, #44]	; (8002690 <D_Mess_flush+0x58>)
 8002664:	600a      	str	r2, [r1, #0]
 8002666:	220a      	movs	r2, #10
 8002668:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <D_Mess_flush+0x58>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <D_Mess_flush+0x5c>)
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	4907      	ldr	r1, [pc, #28]	; (8002694 <D_Mess_flush+0x5c>)
 8002678:	4807      	ldr	r0, [pc, #28]	; (8002698 <D_Mess_flush+0x60>)
 800267a:	f004 ff69 	bl	8007550 <HAL_UART_Transmit_DMA>
		had_completed = false;
 800267e:	4b03      	ldr	r3, [pc, #12]	; (800268c <D_Mess_flush+0x54>)
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <D_Mess_flush+0x58>)
 8002686:	4a03      	ldr	r2, [pc, #12]	; (8002694 <D_Mess_flush+0x5c>)
 8002688:	601a      	str	r2, [r3, #0]
}
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000024 	.word	0x20000024
 8002690:	20001edc 	.word	0x20001edc
 8002694:	20001538 	.word	0x20001538
 8002698:	20001d00 	.word	0x20001d00

0800269c <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  had_completed = true;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <D_Mess_TransitionCompletedCallBack+0x14>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
}
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	20000024 	.word	0x20000024

080026b4 <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2b0a      	cmp	r3, #10
 80026c2:	d102      	bne.n	80026ca <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 80026c4:	200d      	movs	r0, #13
 80026c6:	f7ff fff5 	bl	80026b4 <xputc>
  }
  if( outptr ){
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <xputc+0x48>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <xputc+0x48>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	4908      	ldr	r1, [pc, #32]	; (80026fc <xputc+0x48>)
 80026da:	600a      	str	r2, [r1, #0]
 80026dc:	79fa      	ldrb	r2, [r7, #7]
 80026de:	701a      	strb	r2, [r3, #0]
    return;
 80026e0:	e008      	b.n	80026f4 <xputc+0x40>
  }

  if( xfunc_out ){
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <xputc+0x4c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <xputc+0x40>
    xfunc_out((unsigned char)c);
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <xputc+0x4c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	79fa      	ldrb	r2, [r7, #7]
 80026f0:	4610      	mov	r0, r2
 80026f2:	4798      	blx	r3
  }
}
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20001edc 	.word	0x20001edc
 8002700:	20001ed8 	.word	0x20001ed8

08002704 <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  while( *str ){
 800270c:	e006      	b.n	800271c <xputs+0x18>
    xputc(*str++);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ffcc 	bl	80026b4 <xputc>
  while( *str ){
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f4      	bne.n	800270e <xputs+0xa>
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 8002744:	7ffb      	ldrb	r3, [r7, #31]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 8167 	beq.w	8002a1a <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 800274c:	7ffb      	ldrb	r3, [r7, #31]
 800274e:	2b25      	cmp	r3, #37	; 0x25
 8002750:	d004      	beq.n	800275c <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ffad 	bl	80026b4 <xputc>
 800275a:	e15d      	b.n	8002a18 <xvprintf+0x2e8>
    }
    f = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 800276a:	7ffb      	ldrb	r3, [r7, #31]
 800276c:	2b30      	cmp	r3, #48	; 0x30
 800276e:	d107      	bne.n	8002780 <xvprintf+0x50>
      f = 1; c = *fmt++;
 8002770:	2301      	movs	r3, #1
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	77fb      	strb	r3, [r7, #31]
 800277e:	e009      	b.n	8002794 <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 8002780:	7ffb      	ldrb	r3, [r7, #31]
 8002782:	2b2d      	cmp	r3, #45	; 0x2d
 8002784:	d106      	bne.n	8002794 <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 8002786:	2302      	movs	r3, #2
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
 8002798:	e00e      	b.n	80027b8 <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 800279a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	461a      	mov	r2, r3
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	4413      	add	r3, r2
 80027aa:	3b30      	subs	r3, #48	; 0x30
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	77fb      	strb	r3, [r7, #31]
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
 80027ba:	2b2f      	cmp	r3, #47	; 0x2f
 80027bc:	d902      	bls.n	80027c4 <xvprintf+0x94>
 80027be:	7ffb      	ldrb	r3, [r7, #31]
 80027c0:	2b39      	cmp	r3, #57	; 0x39
 80027c2:	d9ea      	bls.n	800279a <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 80027c4:	7ffb      	ldrb	r3, [r7, #31]
 80027c6:	2b6c      	cmp	r3, #108	; 0x6c
 80027c8:	d002      	beq.n	80027d0 <xvprintf+0xa0>
 80027ca:	7ffb      	ldrb	r3, [r7, #31]
 80027cc:	2b4c      	cmp	r3, #76	; 0x4c
 80027ce:	d108      	bne.n	80027e2 <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 811a 	beq.w	8002a1e <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 80027ee:	7fbb      	ldrb	r3, [r7, #30]
 80027f0:	2b60      	cmp	r3, #96	; 0x60
 80027f2:	d902      	bls.n	80027fa <xvprintf+0xca>
      d -= 0x20;
 80027f4:	7fbb      	ldrb	r3, [r7, #30]
 80027f6:	3b20      	subs	r3, #32
 80027f8:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 80027fa:	7fbb      	ldrb	r3, [r7, #30]
 80027fc:	3b42      	subs	r3, #66	; 0x42
 80027fe:	2b16      	cmp	r3, #22
 8002800:	d873      	bhi.n	80028ea <xvprintf+0x1ba>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <xvprintf+0xd8>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	080028d3 	.word	0x080028d3
 800280c:	080028c1 	.word	0x080028c1
 8002810:	080028df 	.word	0x080028df
 8002814:	080028eb 	.word	0x080028eb
 8002818:	080028eb 	.word	0x080028eb
 800281c:	080028eb 	.word	0x080028eb
 8002820:	080028eb 	.word	0x080028eb
 8002824:	080028eb 	.word	0x080028eb
 8002828:	080028eb 	.word	0x080028eb
 800282c:	080028eb 	.word	0x080028eb
 8002830:	080028eb 	.word	0x080028eb
 8002834:	080028eb 	.word	0x080028eb
 8002838:	080028eb 	.word	0x080028eb
 800283c:	080028d9 	.word	0x080028d9
 8002840:	080028eb 	.word	0x080028eb
 8002844:	080028eb 	.word	0x080028eb
 8002848:	080028eb 	.word	0x080028eb
 800284c:	08002865 	.word	0x08002865
 8002850:	080028eb 	.word	0x080028eb
 8002854:	080028df 	.word	0x080028df
 8002858:	080028eb 	.word	0x080028eb
 800285c:	080028eb 	.word	0x080028eb
 8002860:	080028e5 	.word	0x080028e5
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	1d1a      	adds	r2, r3, #4
 8002868:	603a      	str	r2, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002872:	e002      	b.n	800287a <xvprintf+0x14a>
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	3301      	adds	r3, #1
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f6      	bne.n	8002874 <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 8002886:	e002      	b.n	800288e <xvprintf+0x15e>
        xputc(' ');
 8002888:	2020      	movs	r0, #32
 800288a:	f7ff ff13 	bl	80026b4 <xputc>
      while( !( f & 2 ) && j++ < w ){
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <xvprintf+0x174>
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800289e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f1      	bhi.n	8002888 <xvprintf+0x158>
      }
      xputs(p);
 80028a4:	69b8      	ldr	r0, [r7, #24]
 80028a6:	f7ff ff2d 	bl	8002704 <xputs>
      while( j++ < w ){
 80028aa:	e002      	b.n	80028b2 <xvprintf+0x182>
        xputc(' ');
 80028ac:	2020      	movs	r0, #32
 80028ae:	f7ff ff01 	bl	80026b4 <xputc>
      while( j++ < w ){
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d8f6      	bhi.n	80028ac <xvprintf+0x17c>
      }
      continue;
 80028be:	e0ab      	b.n	8002a18 <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	1d1a      	adds	r2, r3, #4
 80028c4:	603a      	str	r2, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fef2 	bl	80026b4 <xputc>
 80028d0:	e0a2      	b.n	8002a18 <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 80028d2:	2302      	movs	r3, #2
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
 80028d6:	e00d      	b.n	80028f4 <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 80028d8:	2308      	movs	r3, #8
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
 80028dc:	e00a      	b.n	80028f4 <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 80028de:	230a      	movs	r3, #10
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
 80028e2:	e007      	b.n	80028f4 <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 80028e4:	2310      	movs	r3, #16
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
 80028e8:	e004      	b.n	80028f4 <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 80028ea:	7ffb      	ldrb	r3, [r7, #31]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fee1 	bl	80026b4 <xputc>
 80028f2:	e091      	b.n	8002a18 <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d004      	beq.n	8002908 <xvprintf+0x1d8>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	1d1a      	adds	r2, r3, #4
 8002902:	603a      	str	r2, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e00b      	b.n	8002920 <xvprintf+0x1f0>
 8002908:	7fbb      	ldrb	r3, [r7, #30]
 800290a:	2b44      	cmp	r3, #68	; 0x44
 800290c:	d104      	bne.n	8002918 <xvprintf+0x1e8>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	1d1a      	adds	r2, r3, #4
 8002912:	603a      	str	r2, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e003      	b.n	8002920 <xvprintf+0x1f0>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	1d1a      	adds	r2, r3, #4
 800291c:	603a      	str	r2, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8002922:	7fbb      	ldrb	r3, [r7, #30]
 8002924:	2b44      	cmp	r3, #68	; 0x44
 8002926:	d109      	bne.n	800293c <xvprintf+0x20c>
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	2b00      	cmp	r3, #0
 800292c:	da06      	bge.n	800293c <xvprintf+0x20c>
      v = 0 - v;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	425b      	negs	r3, r3
 8002932:	623b      	str	r3, [r7, #32]
      f |= 8;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002944:	fbb3 f2f2 	udiv	r2, r3, r2
 8002948:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800294a:	fb01 f202 	mul.w	r2, r1, r2
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	77bb      	strb	r3, [r7, #30]
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 800295c:	7fbb      	ldrb	r3, [r7, #30]
 800295e:	2b09      	cmp	r3, #9
 8002960:	d908      	bls.n	8002974 <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8002962:	7ffb      	ldrb	r3, [r7, #31]
 8002964:	2b78      	cmp	r3, #120	; 0x78
 8002966:	d101      	bne.n	800296c <xvprintf+0x23c>
 8002968:	2227      	movs	r2, #39	; 0x27
 800296a:	e000      	b.n	800296e <xvprintf+0x23e>
 800296c:	2207      	movs	r2, #7
 800296e:	7fbb      	ldrb	r3, [r7, #30]
 8002970:	4413      	add	r3, r2
 8002972:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	633a      	str	r2, [r7, #48]	; 0x30
 800297a:	7fba      	ldrb	r2, [r7, #30]
 800297c:	3230      	adds	r2, #48	; 0x30
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002984:	440b      	add	r3, r1
 8002986:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <xvprintf+0x266>
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	2b0f      	cmp	r3, #15
 8002994:	d9d4      	bls.n	8002940 <xvprintf+0x210>
    if( f & 8 ){
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <xvprintf+0x282>
      s[i++] = '-';
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	633a      	str	r2, [r7, #48]	; 0x30
 80029a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029aa:	4413      	add	r3, r2
 80029ac:	222d      	movs	r2, #45	; 0x2d
 80029ae:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <xvprintf+0x294>
 80029c0:	2330      	movs	r3, #48	; 0x30
 80029c2:	e000      	b.n	80029c6 <xvprintf+0x296>
 80029c4:	2320      	movs	r3, #32
 80029c6:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 80029c8:	e003      	b.n	80029d2 <xvprintf+0x2a2>
      xputc(d);
 80029ca:	7fbb      	ldrb	r3, [r7, #30]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fe71 	bl	80026b4 <xputc>
    while( !( f & 2 ) && j++ < w ){
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <xvprintf+0x2b8>
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f0      	bhi.n	80029ca <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	3b01      	subs	r3, #1
 80029ec:	633b      	str	r3, [r7, #48]	; 0x30
 80029ee:	f107 0208 	add.w	r2, r7, #8
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	4413      	add	r3, r2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fe5b 	bl	80026b4 <xputc>
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f1      	bne.n	80029e8 <xvprintf+0x2b8>
    while( j++ < w ){
 8002a04:	e002      	b.n	8002a0c <xvprintf+0x2dc>
      xputc(' ');
 8002a06:	2020      	movs	r0, #32
 8002a08:	f7ff fe54 	bl	80026b4 <xputc>
    while( j++ < w ){
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d8f6      	bhi.n	8002a06 <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8002a18:	e68f      	b.n	800273a <xvprintf+0xa>
      break;                                            /* End of format? */
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8002a1e:	bf00      	nop
    }
  }
} /* xvprintf */
 8002a20:	bf00      	nop
 8002a22:	3738      	adds	r7, #56	; 0x38
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4808      	ldr	r0, [pc, #32]	; (8002a50 <D_PWM_Init+0x28>)
 8002a30:	f003 fb92 	bl	8006158 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a34:	2104      	movs	r1, #4
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <D_PWM_Init+0x28>)
 8002a38:	f003 fb8e 	bl	8006158 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	4804      	ldr	r0, [pc, #16]	; (8002a50 <D_PWM_Init+0x28>)
 8002a40:	f003 fb8a 	bl	8006158 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002a44:	210c      	movs	r1, #12
 8002a46:	4802      	ldr	r0, [pc, #8]	; (8002a50 <D_PWM_Init+0x28>)
 8002a48:	f003 fb86 	bl	8006158 <HAL_TIM_PWM_Start>
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20001aac 	.word	0x20001aac

08002a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_Init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <HAL_Init+0x40>)
 8002a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_Init+0x40>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <HAL_Init+0x40>)
 8002a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_Init+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a07      	ldr	r2, [pc, #28]	; (8002a94 <HAL_Init+0x40>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	f000 f92b 	bl	8002cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 f808 	bl	8002a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a88:	f7ff f828 	bl	8001adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00

08002a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x54>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_InitTick+0x58>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 f943 	bl	8002d42 <HAL_SYSTICK_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00e      	b.n	8002ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d80a      	bhi.n	8002ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ad4:	f000 f90b 	bl	8002cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad8:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <HAL_InitTick+0x5c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000020 	.word	0x20000020
 8002af0:	2000002c 	.word	0x2000002c
 8002af4:	20000028 	.word	0x20000028

08002af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x20>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	461a      	mov	r2, r3
 8002b02:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x24>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <HAL_IncTick+0x24>)
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000002c 	.word	0x2000002c
 8002b1c:	20001ee0 	.word	0x20001ee0

08002b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return uwTick;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_GetTick+0x14>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20001ee0 	.word	0x20001ee0

08002b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <__NVIC_EnableIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	; (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca4:	d301      	bcc.n	8002caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e00f      	b.n	8002cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <SysTick_Config+0x40>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cb2:	210f      	movs	r1, #15
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb8:	f7ff ff8e 	bl	8002bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <SysTick_Config+0x40>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <SysTick_Config+0x40>)
 8002cc4:	2207      	movs	r2, #7
 8002cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010

08002cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff ff29 	bl	8002b38 <__NVIC_SetPriorityGrouping>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b086      	sub	sp, #24
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d00:	f7ff ff3e 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8002d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68b9      	ldr	r1, [r7, #8]
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f7ff ff8e 	bl	8002c2c <NVIC_EncodePriority>
 8002d10:	4602      	mov	r2, r0
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff5d 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff31 	bl	8002b9c <__NVIC_EnableIRQ>
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ffa2 	bl	8002c94 <SysTick_Config>
 8002d50:	4603      	mov	r3, r0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7ff feda 	bl	8002b20 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e099      	b.n	8002eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d98:	e00f      	b.n	8002dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d9a:	f7ff fec1 	bl	8002b20 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d908      	bls.n	8002dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2203      	movs	r2, #3
 8002db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e078      	b.n	8002eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e8      	bne.n	8002d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_DMA_Init+0x158>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d107      	bne.n	8002e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f023 0307 	bic.w	r3, r3, #7
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d117      	bne.n	8002e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fb0f 	bl	8003484 <DMA_CheckFifoParam>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e016      	b.n	8002eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fac6 	bl	8003418 <DMA_CalcBaseAndBitshift>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	223f      	movs	r2, #63	; 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	f010803f 	.word	0xf010803f

08002eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_Start_IT+0x26>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e040      	b.n	8002f60 <HAL_DMA_Start_IT+0xa8>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12f      	bne.n	8002f52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa58 	bl	80033bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	223f      	movs	r2, #63	; 0x3f
 8002f12:	409a      	lsls	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0216 	orr.w	r2, r2, #22
 8002f26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0208 	orr.w	r2, r2, #8
 8002f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	e005      	b.n	8002f5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f76:	f7ff fdd3 	bl	8002b20 <HAL_GetTick>
 8002f7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d008      	beq.n	8002f9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e052      	b.n	8003040 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0216 	bic.w	r2, r2, #22
 8002fa8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_DMA_Abort+0x62>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0208 	bic.w	r2, r2, #8
 8002fd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fea:	e013      	b.n	8003014 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fec:	f7ff fd98 	bl	8002b20 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d90c      	bls.n	8003014 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2203      	movs	r2, #3
 8003004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e015      	b.n	8003040 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e4      	bne.n	8002fec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	223f      	movs	r2, #63	; 0x3f
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d004      	beq.n	8003066 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00c      	b.n	8003080 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2205      	movs	r2, #5
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003098:	4b92      	ldr	r3, [pc, #584]	; (80032e4 <HAL_DMA_IRQHandler+0x258>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a92      	ldr	r2, [pc, #584]	; (80032e8 <HAL_DMA_IRQHandler+0x25c>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2208      	movs	r2, #8
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01a      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	2208      	movs	r2, #8
 80030e6:	409a      	lsls	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2201      	movs	r2, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d012      	beq.n	800312e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	2201      	movs	r2, #1
 800311c:	409a      	lsls	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2204      	movs	r2, #4
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d012      	beq.n	8003164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	2204      	movs	r2, #4
 8003152:	409a      	lsls	r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	2210      	movs	r2, #16
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d043      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d03c      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	2210      	movs	r2, #16
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d018      	beq.n	80031ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d024      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
 80031ba:	e01f      	b.n	80031fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e016      	b.n	80031fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0208 	bic.w	r2, r2, #8
 80031ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2220      	movs	r2, #32
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 808e 	beq.w	800332a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8086 	beq.w	800332a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2220      	movs	r2, #32
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b05      	cmp	r3, #5
 8003234:	d136      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0216 	bic.w	r2, r2, #22
 8003244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_DMA_IRQHandler+0x1da>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0208 	bic.w	r2, r2, #8
 8003274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	223f      	movs	r2, #63	; 0x3f
 800327c:	409a      	lsls	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	d07d      	beq.n	8003396 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
        }
        return;
 80032a2:	e078      	b.n	8003396 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01c      	beq.n	80032ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d108      	bne.n	80032d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d030      	beq.n	800332a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e02b      	b.n	800332a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d027      	beq.n	800332a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
 80032e2:	e022      	b.n	800332a <HAL_DMA_IRQHandler+0x29e>
 80032e4:	20000020 	.word	0x20000020
 80032e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0210 	bic.w	r2, r2, #16
 8003308:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332e:	2b00      	cmp	r3, #0
 8003330:	d032      	beq.n	8003398 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d022      	beq.n	8003384 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2205      	movs	r2, #5
 8003342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3301      	adds	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	429a      	cmp	r2, r3
 8003360:	d307      	bcc.n	8003372 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f2      	bne.n	8003356 <HAL_DMA_IRQHandler+0x2ca>
 8003370:	e000      	b.n	8003374 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003372:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4798      	blx	r3
 8003394:	e000      	b.n	8003398 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003396:	bf00      	nop
    }
  }
}
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop

080033a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ae:	b2db      	uxtb	r3, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d108      	bne.n	80033fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033fa:	e007      	b.n	800340c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	60da      	str	r2, [r3, #12]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	3b10      	subs	r3, #16
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <DMA_CalcBaseAndBitshift+0x64>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003432:	4a13      	ldr	r2, [pc, #76]	; (8003480 <DMA_CalcBaseAndBitshift+0x68>)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d909      	bls.n	800345a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	1d1a      	adds	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	659a      	str	r2, [r3, #88]	; 0x58
 8003458:	e007      	b.n	800346a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	aaaaaaab 	.word	0xaaaaaaab
 8003480:	080084bc 	.word	0x080084bc

08003484 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11f      	bne.n	80034de <DMA_CheckFifoParam+0x5a>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d856      	bhi.n	8003552 <DMA_CheckFifoParam+0xce>
 80034a4:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <DMA_CheckFifoParam+0x28>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034cf 	.word	0x080034cf
 80034b4:	080034bd 	.word	0x080034bd
 80034b8:	08003553 	.word	0x08003553
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d046      	beq.n	8003556 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034cc:	e043      	b.n	8003556 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d6:	d140      	bne.n	800355a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034dc:	e03d      	b.n	800355a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e6:	d121      	bne.n	800352c <DMA_CheckFifoParam+0xa8>
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d837      	bhi.n	800355e <DMA_CheckFifoParam+0xda>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <DMA_CheckFifoParam+0x70>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003505 	.word	0x08003505
 80034f8:	0800350b 	.word	0x0800350b
 80034fc:	08003505 	.word	0x08003505
 8003500:	0800351d 	.word	0x0800351d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e030      	b.n	800356c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d025      	beq.n	8003562 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351a:	e022      	b.n	8003562 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003524:	d11f      	bne.n	8003566 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800352a:	e01c      	b.n	8003566 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d903      	bls.n	800353a <DMA_CheckFifoParam+0xb6>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d003      	beq.n	8003540 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003538:	e018      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      break;
 800353e:	e015      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00e      	beq.n	800356a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      break;
 8003550:	e00b      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      break;
 8003552:	bf00      	nop
 8003554:	e00a      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      break;
 8003556:	bf00      	nop
 8003558:	e008      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      break;
 800355a:	bf00      	nop
 800355c:	e006      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      break;
 800355e:	bf00      	nop
 8003560:	e004      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      break;
 8003562:	bf00      	nop
 8003564:	e002      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      break;   
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
    }
  } 
  
  return status; 
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop

0800357c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800357c:	b480      	push	{r7}
 800357e:	b089      	sub	sp, #36	; 0x24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	e165      	b.n	8003864 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003598:	2201      	movs	r2, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	f040 8154 	bne.w	800385e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d005      	beq.n	80035ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d130      	bne.n	8003630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2203      	movs	r2, #3
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003604:	2201      	movs	r2, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	091b      	lsrs	r3, r3, #4
 800361a:	f003 0201 	and.w	r2, r3, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b03      	cmp	r3, #3
 800363a:	d017      	beq.n	800366c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d123      	bne.n	80036c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	08da      	lsrs	r2, r3, #3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3208      	adds	r2, #8
 8003680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	69b9      	ldr	r1, [r7, #24]
 80036bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	2203      	movs	r2, #3
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	4013      	ands	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0203 	and.w	r2, r3, #3
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 80ae 	beq.w	800385e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4b5d      	ldr	r3, [pc, #372]	; (800387c <HAL_GPIO_Init+0x300>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	4a5c      	ldr	r2, [pc, #368]	; (800387c <HAL_GPIO_Init+0x300>)
 800370c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003710:	6453      	str	r3, [r2, #68]	; 0x44
 8003712:	4b5a      	ldr	r3, [pc, #360]	; (800387c <HAL_GPIO_Init+0x300>)
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371e:	4a58      	ldr	r2, [pc, #352]	; (8003880 <HAL_GPIO_Init+0x304>)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3302      	adds	r3, #2
 8003726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a4f      	ldr	r2, [pc, #316]	; (8003884 <HAL_GPIO_Init+0x308>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d025      	beq.n	8003796 <HAL_GPIO_Init+0x21a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <HAL_GPIO_Init+0x30c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <HAL_GPIO_Init+0x216>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a4d      	ldr	r2, [pc, #308]	; (800388c <HAL_GPIO_Init+0x310>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d019      	beq.n	800378e <HAL_GPIO_Init+0x212>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_GPIO_Init+0x314>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_GPIO_Init+0x20e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4b      	ldr	r2, [pc, #300]	; (8003894 <HAL_GPIO_Init+0x318>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00d      	beq.n	8003786 <HAL_GPIO_Init+0x20a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <HAL_GPIO_Init+0x31c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <HAL_GPIO_Init+0x206>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a49      	ldr	r2, [pc, #292]	; (800389c <HAL_GPIO_Init+0x320>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d101      	bne.n	800377e <HAL_GPIO_Init+0x202>
 800377a:	2306      	movs	r3, #6
 800377c:	e00c      	b.n	8003798 <HAL_GPIO_Init+0x21c>
 800377e:	2307      	movs	r3, #7
 8003780:	e00a      	b.n	8003798 <HAL_GPIO_Init+0x21c>
 8003782:	2305      	movs	r3, #5
 8003784:	e008      	b.n	8003798 <HAL_GPIO_Init+0x21c>
 8003786:	2304      	movs	r3, #4
 8003788:	e006      	b.n	8003798 <HAL_GPIO_Init+0x21c>
 800378a:	2303      	movs	r3, #3
 800378c:	e004      	b.n	8003798 <HAL_GPIO_Init+0x21c>
 800378e:	2302      	movs	r3, #2
 8003790:	e002      	b.n	8003798 <HAL_GPIO_Init+0x21c>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_GPIO_Init+0x21c>
 8003796:	2300      	movs	r3, #0
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	f002 0203 	and.w	r2, r2, #3
 800379e:	0092      	lsls	r2, r2, #2
 80037a0:	4093      	lsls	r3, r2
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a8:	4935      	ldr	r1, [pc, #212]	; (8003880 <HAL_GPIO_Init+0x304>)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3302      	adds	r3, #2
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b6:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <HAL_GPIO_Init+0x324>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037da:	4a31      	ldr	r2, [pc, #196]	; (80038a0 <HAL_GPIO_Init+0x324>)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80037e0:	4b2f      	ldr	r3, [pc, #188]	; (80038a0 <HAL_GPIO_Init+0x324>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003804:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <HAL_GPIO_Init+0x324>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_GPIO_Init+0x324>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_GPIO_Init+0x324>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003834:	4b1a      	ldr	r3, [pc, #104]	; (80038a0 <HAL_GPIO_Init+0x324>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003858:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <HAL_GPIO_Init+0x324>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3301      	adds	r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	f67f ae96 	bls.w	8003598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800386c:	bf00      	nop
 800386e:	bf00      	nop
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	40013800 	.word	0x40013800
 8003884:	40020000 	.word	0x40020000
 8003888:	40020400 	.word	0x40020400
 800388c:	40020800 	.word	0x40020800
 8003890:	40020c00 	.word	0x40020c00
 8003894:	40021000 	.word	0x40021000
 8003898:	40021400 	.word	0x40021400
 800389c:	40021800 	.word	0x40021800
 80038a0:	40013c00 	.word	0x40013c00

080038a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
 80038c0:	e001      	b.n	80038c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	807b      	strh	r3, [r7, #2]
 80038e0:	4613      	mov	r3, r2
 80038e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e4:	787b      	ldrb	r3, [r7, #1]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ea:	887a      	ldrh	r2, [r7, #2]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038f0:	e003      	b.n	80038fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038f2:	887b      	ldrh	r3, [r7, #2]
 80038f4:	041a      	lsls	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	619a      	str	r2, [r3, #24]
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e12b      	b.n	8003b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe f8fc 	bl	8001b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800395a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800396a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800396c:	f001 fed4 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8003970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4a81      	ldr	r2, [pc, #516]	; (8003b7c <HAL_I2C_Init+0x274>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d807      	bhi.n	800398c <HAL_I2C_Init+0x84>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a80      	ldr	r2, [pc, #512]	; (8003b80 <HAL_I2C_Init+0x278>)
 8003980:	4293      	cmp	r3, r2
 8003982:	bf94      	ite	ls
 8003984:	2301      	movls	r3, #1
 8003986:	2300      	movhi	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e006      	b.n	800399a <HAL_I2C_Init+0x92>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a7d      	ldr	r2, [pc, #500]	; (8003b84 <HAL_I2C_Init+0x27c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	bf94      	ite	ls
 8003994:	2301      	movls	r3, #1
 8003996:	2300      	movhi	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e0e7      	b.n	8003b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a78      	ldr	r2, [pc, #480]	; (8003b88 <HAL_I2C_Init+0x280>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0c9b      	lsrs	r3, r3, #18
 80039ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a6a      	ldr	r2, [pc, #424]	; (8003b7c <HAL_I2C_Init+0x274>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d802      	bhi.n	80039dc <HAL_I2C_Init+0xd4>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3301      	adds	r3, #1
 80039da:	e009      	b.n	80039f0 <HAL_I2C_Init+0xe8>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	4a69      	ldr	r2, [pc, #420]	; (8003b8c <HAL_I2C_Init+0x284>)
 80039e8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	3301      	adds	r3, #1
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	430b      	orrs	r3, r1
 80039f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	495c      	ldr	r1, [pc, #368]	; (8003b7c <HAL_I2C_Init+0x274>)
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	d819      	bhi.n	8003a44 <HAL_I2C_Init+0x13c>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1e59      	subs	r1, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a1e:	1c59      	adds	r1, r3, #1
 8003a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a24:	400b      	ands	r3, r1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_I2C_Init+0x138>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1e59      	subs	r1, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3e:	e051      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003a40:	2304      	movs	r3, #4
 8003a42:	e04f      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <HAL_I2C_Init+0x168>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	440b      	add	r3, r1
 8003a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e012      	b.n	8003a96 <HAL_I2C_Init+0x18e>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	0099      	lsls	r1, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Init+0x196>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e022      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_I2C_Init+0x1bc>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1e58      	subs	r0, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6859      	ldr	r1, [r3, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	440b      	add	r3, r1
 8003ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac2:	e00f      	b.n	8003ae4 <HAL_I2C_Init+0x1dc>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	0099      	lsls	r1, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	6809      	ldr	r1, [r1, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6911      	ldr	r1, [r2, #16]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	4311      	orrs	r1, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	000186a0 	.word	0x000186a0
 8003b80:	001e847f 	.word	0x001e847f
 8003b84:	003d08ff 	.word	0x003d08ff
 8003b88:	431bde83 	.word	0x431bde83
 8003b8c:	10624dd3 	.word	0x10624dd3

08003b90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d003      	beq.n	8003bc8 <HAL_I2C_EV_IRQHandler+0x38>
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	f040 80c1 	bne.w	8003d4a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <HAL_I2C_EV_IRQHandler+0x6e>
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003be8:	d003      	beq.n	8003bf2 <HAL_I2C_EV_IRQHandler+0x62>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bf0:	d101      	bne.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x66>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_I2C_EV_IRQHandler+0x68>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f000 8132 	beq.w	8003e62 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0x92>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	0a5b      	lsrs	r3, r3, #9
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f001 fc71 	bl	80054fc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fd79 	bl	8004712 <I2C_Master_SB>
 8003c20:	e092      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0xb2>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	0a5b      	lsrs	r3, r3, #9
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fdef 	bl	800481e <I2C_Master_ADD10>
 8003c40:	e082      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_I2C_EV_IRQHandler+0xd2>
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	0a5b      	lsrs	r3, r3, #9
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fe09 	bl	8004872 <I2C_Master_ADDR>
 8003c60:	e072      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7c:	f000 80f3 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	09db      	lsrs	r3, r3, #7
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00f      	beq.n	8003cac <HAL_I2C_EV_IRQHandler+0x11c>
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d009      	beq.n	8003cac <HAL_I2C_EV_IRQHandler+0x11c>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f9f3 	bl	8004090 <I2C_MasterTransmit_TXE>
 8003caa:	e04d      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80d6 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	0a5b      	lsrs	r3, r3, #9
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80cf 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	2b21      	cmp	r3, #33	; 0x21
 8003ccc:	d103      	bne.n	8003cd6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa7a 	bl	80041c8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd4:	e0c7      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	f040 80c4 	bne.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fae8 	bl	80042b4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	e0bf      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf4:	f000 80b7 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00f      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x194>
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	0a9b      	lsrs	r3, r3, #10
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d009      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x194>
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	089b      	lsrs	r3, r3, #2
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d103      	bne.n	8003d24 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fb5d 	bl	80043dc <I2C_MasterReceive_RXNE>
 8003d22:	e011      	b.n	8003d48 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	089b      	lsrs	r3, r3, #2
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 809a 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	0a5b      	lsrs	r3, r3, #9
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8093 	beq.w	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fbfc 	bl	800453e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	e08e      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d48:	e08d      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e007      	b.n	8003d6c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d012      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0x20e>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	0a5b      	lsrs	r3, r3, #9
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00c      	beq.n	8003d9e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d94:	69b9      	ldr	r1, [r7, #24]
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 ffba 	bl	8004d10 <I2C_Slave_ADDR>
 8003d9c:	e066      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0x22e>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fff4 	bl	8004da4 <I2C_Slave_STOPF>
 8003dbc:	e056      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	2b21      	cmp	r3, #33	; 0x21
 8003dc2:	d002      	beq.n	8003dca <HAL_I2C_EV_IRQHandler+0x23a>
 8003dc4:	7bbb      	ldrb	r3, [r7, #14]
 8003dc6:	2b29      	cmp	r3, #41	; 0x29
 8003dc8:	d125      	bne.n	8003e16 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	09db      	lsrs	r3, r3, #7
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00f      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0x266>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	0a9b      	lsrs	r3, r3, #10
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0x266>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fed0 	bl	8004b94 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df4:	e039      	b.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d033      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	0a5b      	lsrs	r3, r3, #9
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02d      	beq.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fefd 	bl	8004c0e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e14:	e029      	b.n	8003e6a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	099b      	lsrs	r3, r3, #6
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00f      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	0a9b      	lsrs	r3, r3, #10
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d009      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 ff08 	bl	8004c50 <I2C_SlaveReceive_RXNE>
 8003e40:	e014      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00e      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	0a5b      	lsrs	r3, r3, #9
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d008      	beq.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 ff36 	bl	8004ccc <I2C_SlaveReceive_BTF>
 8003e60:	e004      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e6c:	3720      	adds	r7, #32
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b08a      	sub	sp, #40	; 0x28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e94:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00e      	beq.n	8003ec0 <HAL_I2C_ER_IRQHandler+0x4e>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ebe:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	0a5b      	lsrs	r3, r3, #9
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <HAL_I2C_ER_IRQHandler+0x78>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ee8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	0a9b      	lsrs	r3, r3, #10
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03f      	beq.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d039      	beq.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003f02:	7efb      	ldrb	r3, [r7, #27]
 8003f04:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f1c:	7ebb      	ldrb	r3, [r7, #26]
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d112      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	2b21      	cmp	r3, #33	; 0x21
 8003f2c:	d008      	beq.n	8003f40 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f2e:	7cfb      	ldrb	r3, [r7, #19]
 8003f30:	2b29      	cmp	r3, #41	; 0x29
 8003f32:	d005      	beq.n	8003f40 <HAL_I2C_ER_IRQHandler+0xce>
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b28      	cmp	r3, #40	; 0x28
 8003f38:	d106      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b21      	cmp	r3, #33	; 0x21
 8003f3e:	d103      	bne.n	8003f48 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 f85f 	bl	8005004 <I2C_Slave_AF>
 8003f46:	e016      	b.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f50:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f043 0304 	orr.w	r3, r3, #4
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f5a:	7efb      	ldrb	r3, [r7, #27]
 8003f5c:	2b10      	cmp	r3, #16
 8003f5e:	d002      	beq.n	8003f66 <HAL_I2C_ER_IRQHandler+0xf4>
 8003f60:	7efb      	ldrb	r3, [r7, #27]
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f74:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	0adb      	lsrs	r3, r3, #11
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00e      	beq.n	8003fa0 <HAL_I2C_ER_IRQHandler+0x12e>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f9e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 f896 	bl	80050e4 <I2C_ITError>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
 800401c:	4613      	mov	r3, r2
 800401e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d150      	bne.n	8004158 <I2C_MasterTransmit_TXE+0xc8>
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b21      	cmp	r3, #33	; 0x21
 80040ba:	d14d      	bne.n	8004158 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d01d      	beq.n	80040fe <I2C_MasterTransmit_TXE+0x6e>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d01a      	beq.n	80040fe <I2C_MasterTransmit_TXE+0x6e>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040ce:	d016      	beq.n	80040fe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040de:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2211      	movs	r2, #17
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ff62 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040fc:	e060      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800410c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b40      	cmp	r3, #64	; 0x40
 8004136:	d107      	bne.n	8004148 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff7d 	bl	8004040 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004146:	e03b      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff35 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004156:	e033      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b21      	cmp	r3, #33	; 0x21
 800415c:	d005      	beq.n	800416a <I2C_MasterTransmit_TXE+0xda>
 800415e:	7bbb      	ldrb	r3, [r7, #14]
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d12d      	bne.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b22      	cmp	r3, #34	; 0x22
 8004168:	d12a      	bne.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d108      	bne.n	8004186 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004182:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004184:	e01c      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d103      	bne.n	800419a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f88e 	bl	80042b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004198:	e012      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	781a      	ldrb	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041be:	e7ff      	b.n	80041c0 <I2C_MasterTransmit_TXE+0x130>
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b21      	cmp	r3, #33	; 0x21
 80041e0:	d164      	bne.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d012      	beq.n	8004212 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004210:	e04c      	b.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b08      	cmp	r3, #8
 8004216:	d01d      	beq.n	8004254 <I2C_MasterTransmit_BTF+0x8c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2b20      	cmp	r3, #32
 800421c:	d01a      	beq.n	8004254 <I2C_MasterTransmit_BTF+0x8c>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004224:	d016      	beq.n	8004254 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004234:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2211      	movs	r2, #17
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff feb7 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
}
 8004252:	e02b      	b.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004262:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004272:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d107      	bne.n	800429e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fed2 	bl	8004040 <HAL_I2C_MemTxCpltCallback>
}
 800429c:	e006      	b.n	80042ac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fe8a 	bl	8003fc0 <HAL_I2C_MasterTxCpltCallback>
}
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11d      	bne.n	8004308 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d10b      	bne.n	80042ec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	1c9a      	adds	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80042ea:	e073      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	121b      	asrs	r3, r3, #8
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004306:	e065      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10b      	bne.n	8004328 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004314:	b2da      	uxtb	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004326:	e055      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	2b02      	cmp	r3, #2
 800432e:	d151      	bne.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b22      	cmp	r3, #34	; 0x22
 8004334:	d10d      	bne.n	8004352 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004344:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004350:	e040      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b21      	cmp	r3, #33	; 0x21
 8004360:	d112      	bne.n	8004388 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004386:	e025      	b.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d120      	bne.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b21      	cmp	r3, #33	; 0x21
 8004396:	d11d      	bne.n	80043d4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fe36 	bl	8004040 <HAL_I2C_MemTxCpltCallback>
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b22      	cmp	r3, #34	; 0x22
 80043ee:	f040 80a2 	bne.w	8004536 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d921      	bls.n	8004444 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b03      	cmp	r3, #3
 800442e:	f040 8082 	bne.w	8004536 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004440:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004442:	e078      	b.n	8004536 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	2b02      	cmp	r3, #2
 800444a:	d074      	beq.n	8004536 <I2C_MasterReceive_RXNE+0x15a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d002      	beq.n	8004458 <I2C_MasterReceive_RXNE+0x7c>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d16e      	bne.n	8004536 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f001 f81d 	bl	8005498 <I2C_WaitOnSTOPRequestThroughIT>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d142      	bne.n	80044ea <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004482:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d10a      	bne.n	80044d4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff fdc1 	bl	8004054 <HAL_I2C_MemRxCpltCallback>
}
 80044d2:	e030      	b.n	8004536 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2212      	movs	r2, #18
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff fd76 	bl	8003fd4 <HAL_I2C_MasterRxCpltCallback>
}
 80044e8:	e025      	b.n	8004536 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fd99 	bl	8004068 <HAL_I2C_ErrorCallback>
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b04      	cmp	r3, #4
 8004554:	d11b      	bne.n	800458e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004564:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800458c:	e0bd      	b.n	800470a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b03      	cmp	r3, #3
 8004596:	d129      	bne.n	80045ec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d00a      	beq.n	80045c4 <I2C_MasterReceive_BTF+0x86>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d007      	beq.n	80045c4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045ea:	e08e      	b.n	800470a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d176      	bne.n	80046e4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d002      	beq.n	8004602 <I2C_MasterReceive_BTF+0xc4>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d108      	bne.n	8004614 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e019      	b.n	8004648 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b04      	cmp	r3, #4
 8004618:	d002      	beq.n	8004620 <I2C_MasterReceive_BTF+0xe2>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d108      	bne.n	8004632 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e00a      	b.n	8004648 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b10      	cmp	r3, #16
 8004636:	d007      	beq.n	8004648 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d10a      	bne.n	80046ce <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fcc4 	bl	8004054 <HAL_I2C_MemRxCpltCallback>
}
 80046cc:	e01d      	b.n	800470a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2212      	movs	r2, #18
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fc79 	bl	8003fd4 <HAL_I2C_MasterRxCpltCallback>
}
 80046e2:	e012      	b.n	800470a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d117      	bne.n	8004756 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800473e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004740:	e067      	b.n	8004812 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	b2da      	uxtb	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]
}
 8004754:	e05d      	b.n	8004812 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800475e:	d133      	bne.n	80047c8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b21      	cmp	r3, #33	; 0x21
 800476a:	d109      	bne.n	8004780 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	b2db      	uxtb	r3, r3
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800477c:	611a      	str	r2, [r3, #16]
 800477e:	e008      	b.n	8004792 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	2b00      	cmp	r3, #0
 8004798:	d004      	beq.n	80047a4 <I2C_Master_SB+0x92>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d108      	bne.n	80047b6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d032      	beq.n	8004812 <I2C_Master_SB+0x100>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d02d      	beq.n	8004812 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047c4:	605a      	str	r2, [r3, #4]
}
 80047c6:	e024      	b.n	8004812 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10e      	bne.n	80047ee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	11db      	asrs	r3, r3, #7
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f063 030f 	orn	r3, r3, #15
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
}
 80047ec:	e011      	b.n	8004812 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d10d      	bne.n	8004812 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	11db      	asrs	r3, r3, #7
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0306 	and.w	r3, r3, #6
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f063 030e 	orn	r3, r3, #14
 800480a:	b2da      	uxtb	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	611a      	str	r2, [r3, #16]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	b2da      	uxtb	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <I2C_Master_ADD10+0x26>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <I2C_Master_ADD10+0x48>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004864:	605a      	str	r2, [r3, #4]
  }
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004872:	b480      	push	{r7}
 8004874:	b091      	sub	sp, #68	; 0x44
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b22      	cmp	r3, #34	; 0x22
 800489a:	f040 8169 	bne.w	8004b70 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <I2C_Master_ADDR+0x54>
 80048a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d10b      	bne.n	80048c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ae:	2300      	movs	r3, #0
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	633b      	str	r3, [r7, #48]	; 0x30
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	e160      	b.n	8004b88 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11d      	bne.n	800490a <I2C_Master_ADDR+0x98>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048d6:	d118      	bne.n	800490a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	651a      	str	r2, [r3, #80]	; 0x50
 8004908:	e13e      	b.n	8004b88 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d113      	bne.n	800493c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004914:	2300      	movs	r3, #0
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e115      	b.n	8004b68 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	f040 808a 	bne.w	8004a5c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800494e:	d137      	bne.n	80049c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800496a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800496e:	d113      	bne.n	8004998 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	e0e7      	b.n	8004b68 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004998:	2300      	movs	r3, #0
 800499a:	623b      	str	r3, [r7, #32]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	623b      	str	r3, [r7, #32]
 80049ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e0d3      	b.n	8004b68 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d02e      	beq.n	8004a24 <I2C_Master_ADDR+0x1b2>
 80049c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d02b      	beq.n	8004a24 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	2b12      	cmp	r3, #18
 80049d0:	d102      	bne.n	80049d8 <I2C_Master_ADDR+0x166>
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d125      	bne.n	8004a24 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d00e      	beq.n	80049fc <I2C_Master_ADDR+0x18a>
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d00b      	beq.n	80049fc <I2C_Master_ADDR+0x18a>
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	d008      	beq.n	80049fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e007      	b.n	8004a0c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a0a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	e0a1      	b.n	8004b68 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a32:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e085      	b.n	8004b68 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d14d      	bne.n	8004b02 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d016      	beq.n	8004a9a <I2C_Master_ADDR+0x228>
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d013      	beq.n	8004a9a <I2C_Master_ADDR+0x228>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d010      	beq.n	8004a9a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a86:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e007      	b.n	8004aaa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab8:	d117      	bne.n	8004aea <I2C_Master_ADDR+0x278>
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ac0:	d00b      	beq.n	8004ada <I2C_Master_ADDR+0x268>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d008      	beq.n	8004ada <I2C_Master_ADDR+0x268>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d005      	beq.n	8004ada <I2C_Master_ADDR+0x268>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d002      	beq.n	8004ada <I2C_Master_ADDR+0x268>
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d107      	bne.n	8004aea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ae8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	e032      	b.n	8004b68 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b10:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b20:	d117      	bne.n	8004b52 <I2C_Master_ADDR+0x2e0>
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b28:	d00b      	beq.n	8004b42 <I2C_Master_ADDR+0x2d0>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d008      	beq.n	8004b42 <I2C_Master_ADDR+0x2d0>
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d005      	beq.n	8004b42 <I2C_Master_ADDR+0x2d0>
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d002      	beq.n	8004b42 <I2C_Master_ADDR+0x2d0>
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d107      	bne.n	8004b52 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b50:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b6e:	e00b      	b.n	8004b88 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	e7ff      	b.n	8004b88 <I2C_Master_ADDR+0x316>
 8004b88:	bf00      	nop
 8004b8a:	3744      	adds	r7, #68	; 0x44
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02b      	beq.n	8004c06 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d114      	bne.n	8004c06 <I2C_SlaveTransmit_TXE+0x72>
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b29      	cmp	r3, #41	; 0x29
 8004be0:	d111      	bne.n	8004c06 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2221      	movs	r2, #33	; 0x21
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2228      	movs	r2, #40	; 0x28
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff f9f1 	bl	8003fe8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d011      	beq.n	8004c44 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	781a      	ldrb	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d02c      	beq.n	8004cc4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d114      	bne.n	8004cc4 <I2C_SlaveReceive_RXNE+0x74>
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9e:	d111      	bne.n	8004cc4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2222      	movs	r2, #34	; 0x22
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2228      	movs	r2, #40	; 0x28
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff f99c 	bl	8003ffc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d2a:	2b28      	cmp	r3, #40	; 0x28
 8004d2c:	d127      	bne.n	8004d7e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	09db      	lsrs	r3, r3, #7
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d103      	bne.n	8004d62 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	81bb      	strh	r3, [r7, #12]
 8004d60:	e002      	b.n	8004d68 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d70:	89ba      	ldrh	r2, [r7, #12]
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff f94a 	bl	8004010 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d7c:	e00e      	b.n	8004d9c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d9c:	bf00      	nop
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dc2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e00:	d172      	bne.n	8004ee8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b22      	cmp	r3, #34	; 0x22
 8004e06:	d002      	beq.n	8004e0e <I2C_Slave_STOPF+0x6a>
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e0c:	d135      	bne.n	8004e7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe faaa 	bl	80033a0 <HAL_DMA_GetState>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d049      	beq.n	8004ee6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	4a69      	ldr	r2, [pc, #420]	; (8004ffc <I2C_Slave_STOPF+0x258>)
 8004e58:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe f8f2 	bl	8003048 <HAL_DMA_Abort_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d03d      	beq.n	8004ee6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e74:	4610      	mov	r0, r2
 8004e76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e78:	e035      	b.n	8004ee6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fa74 	bl	80033a0 <HAL_DMA_GetState>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d014      	beq.n	8004ee8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	4a4e      	ldr	r2, [pc, #312]	; (8004ffc <I2C_Slave_STOPF+0x258>)
 8004ec4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe f8bc 	bl	8003048 <HAL_DMA_Abort_IT>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4798      	blx	r3
 8004ee4:	e000      	b.n	8004ee8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ee6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d03e      	beq.n	8004f70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d112      	bne.n	8004f26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691a      	ldr	r2, [r3, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b40      	cmp	r3, #64	; 0x40
 8004f32:	d112      	bne.n	8004f5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	f043 0204 	orr.w	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8b3 	bl	80050e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f7e:	e039      	b.n	8004ff4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b2a      	cmp	r3, #42	; 0x2a
 8004f84:	d109      	bne.n	8004f9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2228      	movs	r2, #40	; 0x28
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff f831 	bl	8003ffc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b28      	cmp	r3, #40	; 0x28
 8004fa4:	d111      	bne.n	8004fca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a15      	ldr	r2, [pc, #84]	; (8005000 <I2C_Slave_STOPF+0x25c>)
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff f832 	bl	800402c <HAL_I2C_ListenCpltCallback>
}
 8004fc8:	e014      	b.n	8004ff4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	2b22      	cmp	r3, #34	; 0x22
 8004fd0:	d002      	beq.n	8004fd8 <I2C_Slave_STOPF+0x234>
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b22      	cmp	r3, #34	; 0x22
 8004fd6:	d10d      	bne.n	8004ff4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff f804 	bl	8003ffc <HAL_I2C_SlaveRxCpltCallback>
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	08005349 	.word	0x08005349
 8005000:	ffff0000 	.word	0xffff0000

08005004 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005012:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d002      	beq.n	8005026 <I2C_Slave_AF+0x22>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b20      	cmp	r3, #32
 8005024:	d129      	bne.n	800507a <I2C_Slave_AF+0x76>
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b28      	cmp	r3, #40	; 0x28
 800502a:	d126      	bne.n	800507a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a2c      	ldr	r2, [pc, #176]	; (80050e0 <I2C_Slave_AF+0xdc>)
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005040:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800504a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7fe ffda 	bl	800402c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005078:	e02e      	b.n	80050d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b21      	cmp	r3, #33	; 0x21
 800507e:	d126      	bne.n	80050ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a17      	ldr	r2, [pc, #92]	; (80050e0 <I2C_Slave_AF+0xdc>)
 8005084:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2221      	movs	r2, #33	; 0x21
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fe ff8e 	bl	8003fe8 <HAL_I2C_SlaveTxCpltCallback>
}
 80050cc:	e004      	b.n	80050d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050d6:	615a      	str	r2, [r3, #20]
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	ffff0000 	.word	0xffff0000

080050e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d002      	beq.n	8005108 <I2C_ITError+0x24>
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d10a      	bne.n	800511e <I2C_ITError+0x3a>
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	2b22      	cmp	r3, #34	; 0x22
 800510c:	d107      	bne.n	800511e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005124:	2b28      	cmp	r3, #40	; 0x28
 8005126:	d107      	bne.n	8005138 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2228      	movs	r2, #40	; 0x28
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005136:	e015      	b.n	8005164 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005146:	d00a      	beq.n	800515e <I2C_ITError+0x7a>
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2b60      	cmp	r3, #96	; 0x60
 800514c:	d007      	beq.n	800515e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005172:	d162      	bne.n	800523a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005182:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	d020      	beq.n	80051d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005196:	4a6a      	ldr	r2, [pc, #424]	; (8005340 <I2C_ITError+0x25c>)
 8005198:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fd ff52 	bl	8003048 <HAL_DMA_Abort_IT>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8089 	beq.w	80052be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051ce:	4610      	mov	r0, r2
 80051d0:	4798      	blx	r3
 80051d2:	e074      	b.n	80052be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	4a59      	ldr	r2, [pc, #356]	; (8005340 <I2C_ITError+0x25c>)
 80051da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd ff31 	bl	8003048 <HAL_DMA_Abort_IT>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d068      	beq.n	80052be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d10b      	bne.n	8005212 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
 8005238:	e041      	b.n	80052be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b60      	cmp	r3, #96	; 0x60
 8005244:	d125      	bne.n	8005292 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d10b      	bne.n	800527a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fe fef6 	bl	800407c <HAL_I2C_AbortCpltCallback>
 8005290:	e015      	b.n	80052be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d10b      	bne.n	80052b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7fe fed5 	bl	8004068 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10e      	bne.n	80052ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005302:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d113      	bne.n	8005338 <I2C_ITError+0x254>
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b28      	cmp	r3, #40	; 0x28
 8005314:	d110      	bne.n	8005338 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <I2C_ITError+0x260>)
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fe fe7a 	bl	800402c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	08005349 	.word	0x08005349
 8005344:	ffff0000 	.word	0xffff0000

08005348 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005362:	4b4b      	ldr	r3, [pc, #300]	; (8005490 <I2C_DMAAbort+0x148>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	08db      	lsrs	r3, r3, #3
 8005368:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <I2C_DMAAbort+0x14c>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	0a1a      	lsrs	r2, r3, #8
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	00da      	lsls	r2, r3, #3
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800538e:	e00a      	b.n	80053a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a4:	d0ea      	beq.n	800537c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	2200      	movs	r2, #0
 80053b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	2200      	movs	r2, #0
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2200      	movs	r2, #0
 80053da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e8:	2200      	movs	r2, #0
 80053ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f8:	2200      	movs	r2, #0
 80053fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b60      	cmp	r3, #96	; 0x60
 8005416:	d10e      	bne.n	8005436 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800542e:	6978      	ldr	r0, [r7, #20]
 8005430:	f7fe fe24 	bl	800407c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005434:	e027      	b.n	8005486 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800543c:	2b28      	cmp	r3, #40	; 0x28
 800543e:	d117      	bne.n	8005470 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800545e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	2200      	movs	r2, #0
 8005464:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2228      	movs	r2, #40	; 0x28
 800546a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800546e:	e007      	b.n	8005480 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005480:	6978      	ldr	r0, [r7, #20]
 8005482:	f7fe fdf1 	bl	8004068 <HAL_I2C_ErrorCallback>
}
 8005486:	bf00      	nop
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000020 	.word	0x20000020
 8005494:	14f8b589 	.word	0x14f8b589

08005498 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	08db      	lsrs	r3, r3, #3
 80054aa:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80054ac:	fba2 2303 	umull	r2, r3, r2, r3
 80054b0:	0a1a      	lsrs	r2, r3, #8
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3b01      	subs	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d107      	bne.n	80054d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e008      	b.n	80054e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e4:	d0e9      	beq.n	80054ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	20000020 	.word	0x20000020
 80054f8:	14f8b589 	.word	0x14f8b589

080054fc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800550c:	d103      	bne.n	8005516 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005514:	e007      	b.n	8005526 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800551e:	d102      	bne.n	8005526 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2208      	movs	r2, #8
 8005524:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0cc      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b68      	ldr	r3, [pc, #416]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d90c      	bls.n	8005570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b65      	ldr	r3, [pc, #404]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0b8      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d020      	beq.n	80055be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005588:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	4a58      	ldr	r2, [pc, #352]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055a0:	4b53      	ldr	r3, [pc, #332]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4a52      	ldr	r2, [pc, #328]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ac:	4b50      	ldr	r3, [pc, #320]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	494d      	ldr	r1, [pc, #308]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d044      	beq.n	8005654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d107      	bne.n	80055e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	4b47      	ldr	r3, [pc, #284]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d119      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e07f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d003      	beq.n	80055f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	d107      	bne.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f2:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e06f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e067      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005612:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f023 0203 	bic.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4934      	ldr	r1, [pc, #208]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005624:	f7fd fa7c 	bl	8002b20 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800562a:	e00a      	b.n	8005642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800562c:	f7fd fa78 	bl	8002b20 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e04f      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005642:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 020c 	and.w	r2, r3, #12
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	429a      	cmp	r2, r3
 8005652:	d1eb      	bne.n	800562c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d20c      	bcs.n	800567c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b22      	ldr	r3, [pc, #136]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <HAL_RCC_ClockConfig+0x1b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d001      	beq.n	800567c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e032      	b.n	80056e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4916      	ldr	r1, [pc, #88]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	4313      	orrs	r3, r2
 8005698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d009      	beq.n	80056ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056a6:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	490e      	ldr	r1, [pc, #56]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ba:	f000 f855 	bl	8005768 <HAL_RCC_GetSysClockFreq>
 80056be:	4602      	mov	r2, r0
 80056c0:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	490a      	ldr	r1, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x1c0>)
 80056cc:	5ccb      	ldrb	r3, [r1, r3]
 80056ce:	fa22 f303 	lsr.w	r3, r2, r3
 80056d2:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <HAL_RCC_ClockConfig+0x1c4>)
 80056d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_RCC_ClockConfig+0x1c8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fd f9dc 	bl	8002a98 <HAL_InitTick>

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023c00 	.word	0x40023c00
 80056f0:	40023800 	.word	0x40023800
 80056f4:	080084a4 	.word	0x080084a4
 80056f8:	20000020 	.word	0x20000020
 80056fc:	20000028 	.word	0x20000028

08005700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_RCC_GetHCLKFreq+0x14>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	20000020 	.word	0x20000020

08005718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800571c:	f7ff fff0 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005720:	4602      	mov	r2, r0
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	0a9b      	lsrs	r3, r3, #10
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	4903      	ldr	r1, [pc, #12]	; (800573c <HAL_RCC_GetPCLK1Freq+0x24>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40023800 	.word	0x40023800
 800573c:	080084b4 	.word	0x080084b4

08005740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005744:	f7ff ffdc 	bl	8005700 <HAL_RCC_GetHCLKFreq>
 8005748:	4602      	mov	r2, r0
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	0b5b      	lsrs	r3, r3, #13
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	4903      	ldr	r1, [pc, #12]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005756:	5ccb      	ldrb	r3, [r1, r3]
 8005758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40023800 	.word	0x40023800
 8005764:	080084b4 	.word	0x080084b4

08005768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005784:	4bce      	ldr	r3, [pc, #824]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 030c 	and.w	r3, r3, #12
 800578c:	2b0c      	cmp	r3, #12
 800578e:	f200 818d 	bhi.w	8005aac <HAL_RCC_GetSysClockFreq+0x344>
 8005792:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <HAL_RCC_GetSysClockFreq+0x30>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057cd 	.word	0x080057cd
 800579c:	08005aad 	.word	0x08005aad
 80057a0:	08005aad 	.word	0x08005aad
 80057a4:	08005aad 	.word	0x08005aad
 80057a8:	080057d3 	.word	0x080057d3
 80057ac:	08005aad 	.word	0x08005aad
 80057b0:	08005aad 	.word	0x08005aad
 80057b4:	08005aad 	.word	0x08005aad
 80057b8:	080057d9 	.word	0x080057d9
 80057bc:	08005aad 	.word	0x08005aad
 80057c0:	08005aad 	.word	0x08005aad
 80057c4:	08005aad 	.word	0x08005aad
 80057c8:	0800594d 	.word	0x0800594d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057cc:	4bbd      	ldr	r3, [pc, #756]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80057ce:	61bb      	str	r3, [r7, #24]
       break;
 80057d0:	e16f      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d2:	4bbd      	ldr	r3, [pc, #756]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0x360>)
 80057d4:	61bb      	str	r3, [r7, #24]
      break;
 80057d6:	e16c      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057d8:	4bb9      	ldr	r3, [pc, #740]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057e2:	4bb7      	ldr	r3, [pc, #732]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d053      	beq.n	8005896 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ee:	4bb4      	ldr	r3, [pc, #720]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	461a      	mov	r2, r3
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057fe:	f04f 0100 	mov.w	r1, #0
 8005802:	ea02 0400 	and.w	r4, r2, r0
 8005806:	603c      	str	r4, [r7, #0]
 8005808:	400b      	ands	r3, r1
 800580a:	607b      	str	r3, [r7, #4]
 800580c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	014b      	lsls	r3, r1, #5
 800581e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005822:	0142      	lsls	r2, r0, #5
 8005824:	4610      	mov	r0, r2
 8005826:	4619      	mov	r1, r3
 8005828:	4623      	mov	r3, r4
 800582a:	1ac0      	subs	r0, r0, r3
 800582c:	462b      	mov	r3, r5
 800582e:	eb61 0103 	sbc.w	r1, r1, r3
 8005832:	f04f 0200 	mov.w	r2, #0
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	018b      	lsls	r3, r1, #6
 800583c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005840:	0182      	lsls	r2, r0, #6
 8005842:	1a12      	subs	r2, r2, r0
 8005844:	eb63 0301 	sbc.w	r3, r3, r1
 8005848:	f04f 0000 	mov.w	r0, #0
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	00d9      	lsls	r1, r3, #3
 8005852:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005856:	00d0      	lsls	r0, r2, #3
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4621      	mov	r1, r4
 800585e:	1852      	adds	r2, r2, r1
 8005860:	4629      	mov	r1, r5
 8005862:	eb43 0101 	adc.w	r1, r3, r1
 8005866:	460b      	mov	r3, r1
 8005868:	f04f 0000 	mov.w	r0, #0
 800586c:	f04f 0100 	mov.w	r1, #0
 8005870:	0259      	lsls	r1, r3, #9
 8005872:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005876:	0250      	lsls	r0, r2, #9
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	461a      	mov	r2, r3
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	f7fa ffcc 	bl	8000824 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e04c      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005896:	4b8a      	ldr	r3, [pc, #552]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	099b      	lsrs	r3, r3, #6
 800589c:	461a      	mov	r2, r3
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80058a6:	f04f 0100 	mov.w	r1, #0
 80058aa:	ea02 0a00 	and.w	sl, r2, r0
 80058ae:	ea03 0b01 	and.w	fp, r3, r1
 80058b2:	4650      	mov	r0, sl
 80058b4:	4659      	mov	r1, fp
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	014b      	lsls	r3, r1, #5
 80058c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80058c4:	0142      	lsls	r2, r0, #5
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	ebb0 000a 	subs.w	r0, r0, sl
 80058ce:	eb61 010b 	sbc.w	r1, r1, fp
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	018b      	lsls	r3, r1, #6
 80058dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058e0:	0182      	lsls	r2, r0, #6
 80058e2:	1a12      	subs	r2, r2, r0
 80058e4:	eb63 0301 	sbc.w	r3, r3, r1
 80058e8:	f04f 0000 	mov.w	r0, #0
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	00d9      	lsls	r1, r3, #3
 80058f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058f6:	00d0      	lsls	r0, r2, #3
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	eb12 020a 	adds.w	r2, r2, sl
 8005900:	eb43 030b 	adc.w	r3, r3, fp
 8005904:	f04f 0000 	mov.w	r0, #0
 8005908:	f04f 0100 	mov.w	r1, #0
 800590c:	0299      	lsls	r1, r3, #10
 800590e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005912:	0290      	lsls	r0, r2, #10
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4610      	mov	r0, r2
 800591a:	4619      	mov	r1, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	461a      	mov	r2, r3
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	f7fa ff7e 	bl	8000824 <__aeabi_uldivmod>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4613      	mov	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005930:	4b63      	ldr	r3, [pc, #396]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	3301      	adds	r3, #1
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	fbb2 f3f3 	udiv	r3, r2, r3
 8005948:	61bb      	str	r3, [r7, #24]
      break;
 800594a:	e0b2      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800594c:	4b5c      	ldr	r3, [pc, #368]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005954:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005956:	4b5a      	ldr	r3, [pc, #360]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d04d      	beq.n	80059fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005962:	4b57      	ldr	r3, [pc, #348]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	461a      	mov	r2, r3
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	ea02 0800 	and.w	r8, r2, r0
 800597a:	ea03 0901 	and.w	r9, r3, r1
 800597e:	4640      	mov	r0, r8
 8005980:	4649      	mov	r1, r9
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	014b      	lsls	r3, r1, #5
 800598c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005990:	0142      	lsls	r2, r0, #5
 8005992:	4610      	mov	r0, r2
 8005994:	4619      	mov	r1, r3
 8005996:	ebb0 0008 	subs.w	r0, r0, r8
 800599a:	eb61 0109 	sbc.w	r1, r1, r9
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	018b      	lsls	r3, r1, #6
 80059a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059ac:	0182      	lsls	r2, r0, #6
 80059ae:	1a12      	subs	r2, r2, r0
 80059b0:	eb63 0301 	sbc.w	r3, r3, r1
 80059b4:	f04f 0000 	mov.w	r0, #0
 80059b8:	f04f 0100 	mov.w	r1, #0
 80059bc:	00d9      	lsls	r1, r3, #3
 80059be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059c2:	00d0      	lsls	r0, r2, #3
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	eb12 0208 	adds.w	r2, r2, r8
 80059cc:	eb43 0309 	adc.w	r3, r3, r9
 80059d0:	f04f 0000 	mov.w	r0, #0
 80059d4:	f04f 0100 	mov.w	r1, #0
 80059d8:	0259      	lsls	r1, r3, #9
 80059da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80059de:	0250      	lsls	r0, r2, #9
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4610      	mov	r0, r2
 80059e6:	4619      	mov	r1, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	f7fa ff18 	bl	8000824 <__aeabi_uldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4613      	mov	r3, r2
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	e04a      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059fe:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	099b      	lsrs	r3, r3, #6
 8005a04:	461a      	mov	r2, r3
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a0e:	f04f 0100 	mov.w	r1, #0
 8005a12:	ea02 0400 	and.w	r4, r2, r0
 8005a16:	ea03 0501 	and.w	r5, r3, r1
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	014b      	lsls	r3, r1, #5
 8005a28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a2c:	0142      	lsls	r2, r0, #5
 8005a2e:	4610      	mov	r0, r2
 8005a30:	4619      	mov	r1, r3
 8005a32:	1b00      	subs	r0, r0, r4
 8005a34:	eb61 0105 	sbc.w	r1, r1, r5
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	018b      	lsls	r3, r1, #6
 8005a42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a46:	0182      	lsls	r2, r0, #6
 8005a48:	1a12      	subs	r2, r2, r0
 8005a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a4e:	f04f 0000 	mov.w	r0, #0
 8005a52:	f04f 0100 	mov.w	r1, #0
 8005a56:	00d9      	lsls	r1, r3, #3
 8005a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a5c:	00d0      	lsls	r0, r2, #3
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	1912      	adds	r2, r2, r4
 8005a64:	eb45 0303 	adc.w	r3, r5, r3
 8005a68:	f04f 0000 	mov.w	r0, #0
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	0299      	lsls	r1, r3, #10
 8005a72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a76:	0290      	lsls	r0, r2, #10
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	f7fa fecc 	bl	8000824 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	0f1b      	lsrs	r3, r3, #28
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa8:	61bb      	str	r3, [r7, #24]
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aac:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005aae:	61bb      	str	r3, [r7, #24]
      break;
 8005ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	00f42400 	.word	0x00f42400
 8005ac8:	007a1200 	.word	0x007a1200

08005acc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e28d      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 8083 	beq.w	8005bf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005aec:	4b94      	ldr	r3, [pc, #592]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 030c 	and.w	r3, r3, #12
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d019      	beq.n	8005b2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005af8:	4b91      	ldr	r3, [pc, #580]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d106      	bne.n	8005b12 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b04:	4b8e      	ldr	r3, [pc, #568]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b10:	d00c      	beq.n	8005b2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b12:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d112      	bne.n	8005b44 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b1e:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b2a:	d10b      	bne.n	8005b44 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b2c:	4b84      	ldr	r3, [pc, #528]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d05b      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x124>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d157      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e25a      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCC_OscConfig+0x90>
 8005b4e:	4b7c      	ldr	r3, [pc, #496]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a7b      	ldr	r2, [pc, #492]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b58:	6013      	str	r3, [r2, #0]
 8005b5a:	e01d      	b.n	8005b98 <HAL_RCC_OscConfig+0xcc>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCC_OscConfig+0xb4>
 8005b66:	4b76      	ldr	r3, [pc, #472]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a75      	ldr	r2, [pc, #468]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	4b73      	ldr	r3, [pc, #460]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a72      	ldr	r2, [pc, #456]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e00b      	b.n	8005b98 <HAL_RCC_OscConfig+0xcc>
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a6e      	ldr	r2, [pc, #440]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	4b6c      	ldr	r3, [pc, #432]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6b      	ldr	r2, [pc, #428]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d013      	beq.n	8005bc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fc ffbe 	bl	8002b20 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba8:	f7fc ffba 	bl	8002b20 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e21f      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bba:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCC_OscConfig+0xdc>
 8005bc6:	e014      	b.n	8005bf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc ffaa 	bl	8002b20 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bd0:	f7fc ffa6 	bl	8002b20 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	; 0x64
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e20b      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005be2:	4b57      	ldr	r3, [pc, #348]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x104>
 8005bee:	e000      	b.n	8005bf2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d06f      	beq.n	8005cde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005bfe:	4b50      	ldr	r3, [pc, #320]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c0a:	4b4d      	ldr	r3, [pc, #308]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d105      	bne.n	8005c22 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c16:	4b4a      	ldr	r3, [pc, #296]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c22:	4b47      	ldr	r3, [pc, #284]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d11c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2e:	4b44      	ldr	r3, [pc, #272]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d116      	bne.n	8005c68 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c3a:	4b41      	ldr	r3, [pc, #260]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_RCC_OscConfig+0x186>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d001      	beq.n	8005c52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e1d3      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c52:	4b3b      	ldr	r3, [pc, #236]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4937      	ldr	r1, [pc, #220]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c66:	e03a      	b.n	8005cde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d020      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c70:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <HAL_RCC_OscConfig+0x278>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c76:	f7fc ff53 	bl	8002b20 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c7e:	f7fc ff4f 	bl	8002b20 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e1b4      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c90:	4b2b      	ldr	r3, [pc, #172]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d0f0      	beq.n	8005c7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c9c:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	4925      	ldr	r1, [pc, #148]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	600b      	str	r3, [r1, #0]
 8005cb0:	e015      	b.n	8005cde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cb2:	4b24      	ldr	r3, [pc, #144]	; (8005d44 <HAL_RCC_OscConfig+0x278>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb8:	f7fc ff32 	bl	8002b20 <HAL_GetTick>
 8005cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cbe:	e008      	b.n	8005cd2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cc0:	f7fc ff2e 	bl	8002b20 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e193      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cd2:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f0      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d036      	beq.n	8005d58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d016      	beq.n	8005d20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cf2:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <HAL_RCC_OscConfig+0x27c>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf8:	f7fc ff12 	bl	8002b20 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d00:	f7fc ff0e 	bl	8002b20 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e173      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <HAL_RCC_OscConfig+0x274>)
 8005d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x234>
 8005d1e:	e01b      	b.n	8005d58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d20:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <HAL_RCC_OscConfig+0x27c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d26:	f7fc fefb 	bl	8002b20 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d2c:	e00e      	b.n	8005d4c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d2e:	f7fc fef7 	bl	8002b20 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d907      	bls.n	8005d4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e15c      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
 8005d40:	40023800 	.word	0x40023800
 8005d44:	42470000 	.word	0x42470000
 8005d48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d4c:	4b8a      	ldr	r3, [pc, #552]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ea      	bne.n	8005d2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8097 	beq.w	8005e94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d6a:	4b83      	ldr	r3, [pc, #524]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10f      	bne.n	8005d96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d76:	2300      	movs	r3, #0
 8005d78:	60bb      	str	r3, [r7, #8]
 8005d7a:	4b7f      	ldr	r3, [pc, #508]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	4a7e      	ldr	r2, [pc, #504]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d84:	6413      	str	r3, [r2, #64]	; 0x40
 8005d86:	4b7c      	ldr	r3, [pc, #496]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d92:	2301      	movs	r3, #1
 8005d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d96:	4b79      	ldr	r3, [pc, #484]	; (8005f7c <HAL_RCC_OscConfig+0x4b0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d118      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005da2:	4b76      	ldr	r3, [pc, #472]	; (8005f7c <HAL_RCC_OscConfig+0x4b0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a75      	ldr	r2, [pc, #468]	; (8005f7c <HAL_RCC_OscConfig+0x4b0>)
 8005da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dae:	f7fc feb7 	bl	8002b20 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db6:	f7fc feb3 	bl	8002b20 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e118      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc8:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <HAL_RCC_OscConfig+0x4b0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_OscConfig+0x31e>
 8005ddc:	4b66      	ldr	r3, [pc, #408]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de0:	4a65      	ldr	r2, [pc, #404]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6713      	str	r3, [r2, #112]	; 0x70
 8005de8:	e01c      	b.n	8005e24 <HAL_RCC_OscConfig+0x358>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b05      	cmp	r3, #5
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCC_OscConfig+0x340>
 8005df2:	4b61      	ldr	r3, [pc, #388]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	4a60      	ldr	r2, [pc, #384]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005df8:	f043 0304 	orr.w	r3, r3, #4
 8005dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005dfe:	4b5e      	ldr	r3, [pc, #376]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	4a5d      	ldr	r2, [pc, #372]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e04:	f043 0301 	orr.w	r3, r3, #1
 8005e08:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0x358>
 8005e0c:	4b5a      	ldr	r3, [pc, #360]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	4a59      	ldr	r2, [pc, #356]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	6713      	str	r3, [r2, #112]	; 0x70
 8005e18:	4b57      	ldr	r3, [pc, #348]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	4a56      	ldr	r2, [pc, #344]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e1e:	f023 0304 	bic.w	r3, r3, #4
 8005e22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2c:	f7fc fe78 	bl	8002b20 <HAL_GetTick>
 8005e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e32:	e00a      	b.n	8005e4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e34:	f7fc fe74 	bl	8002b20 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e0d7      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4a:	4b4b      	ldr	r3, [pc, #300]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0ee      	beq.n	8005e34 <HAL_RCC_OscConfig+0x368>
 8005e56:	e014      	b.n	8005e82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e58:	f7fc fe62 	bl	8002b20 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fc fe5e 	bl	8002b20 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0c1      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e76:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ee      	bne.n	8005e60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d105      	bne.n	8005e94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e88:	4b3b      	ldr	r3, [pc, #236]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	4a3a      	ldr	r2, [pc, #232]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 80ad 	beq.w	8005ff8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e9e:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 030c 	and.w	r3, r3, #12
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d060      	beq.n	8005f6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d145      	bne.n	8005f3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <HAL_RCC_OscConfig+0x4b4>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fc fe32 	bl	8002b20 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fc fe2e 	bl	8002b20 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e093      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	019b      	lsls	r3, r3, #6
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	041b      	lsls	r3, r3, #16
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	061b      	lsls	r3, r3, #24
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	071b      	lsls	r3, r3, #28
 8005f0a:	491b      	ldr	r1, [pc, #108]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f10:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <HAL_RCC_OscConfig+0x4b4>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f16:	f7fc fe03 	bl	8002b20 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f1e:	f7fc fdff 	bl	8002b20 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e064      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x452>
 8005f3c:	e05c      	b.n	8005ff8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3e:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <HAL_RCC_OscConfig+0x4b4>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f44:	f7fc fdec 	bl	8002b20 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f4c:	f7fc fde8 	bl	8002b20 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e04d      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_RCC_OscConfig+0x4ac>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0x480>
 8005f6a:	e045      	b.n	8005ff8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e040      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	40007000 	.word	0x40007000
 8005f80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f84:	4b1f      	ldr	r3, [pc, #124]	; (8006004 <HAL_RCC_OscConfig+0x538>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d030      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d129      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d122      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d119      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d10f      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e000      	b.n	8005ffa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40023800 	.word	0x40023800

08006008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e041      	b.n	800609e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fb fe3a 	bl	8001ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f000 fe56 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e041      	b.n	800613c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f839 	bl	8006144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f000 fe07 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <HAL_TIM_PWM_Start+0x24>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e022      	b.n	80061c2 <HAL_TIM_PWM_Start+0x6a>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b04      	cmp	r3, #4
 8006180:	d109      	bne.n	8006196 <HAL_TIM_PWM_Start+0x3e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b01      	cmp	r3, #1
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	e015      	b.n	80061c2 <HAL_TIM_PWM_Start+0x6a>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d109      	bne.n	80061b0 <HAL_TIM_PWM_Start+0x58>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	e008      	b.n	80061c2 <HAL_TIM_PWM_Start+0x6a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e07c      	b.n	80062c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d104      	bne.n	80061da <HAL_TIM_PWM_Start+0x82>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d8:	e013      	b.n	8006202 <HAL_TIM_PWM_Start+0xaa>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0x92>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e8:	e00b      	b.n	8006202 <HAL_TIM_PWM_Start+0xaa>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d104      	bne.n	80061fa <HAL_TIM_PWM_Start+0xa2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f8:	e003      	b.n	8006202 <HAL_TIM_PWM_Start+0xaa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2201      	movs	r2, #1
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f85e 	bl	80072cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a2d      	ldr	r2, [pc, #180]	; (80062cc <HAL_TIM_PWM_Start+0x174>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_PWM_Start+0xcc>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a2c      	ldr	r2, [pc, #176]	; (80062d0 <HAL_TIM_PWM_Start+0x178>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d101      	bne.n	8006228 <HAL_TIM_PWM_Start+0xd0>
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <HAL_TIM_PWM_Start+0xd2>
 8006228:	2300      	movs	r3, #0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d007      	beq.n	800623e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800623c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a22      	ldr	r2, [pc, #136]	; (80062cc <HAL_TIM_PWM_Start+0x174>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d022      	beq.n	800628e <HAL_TIM_PWM_Start+0x136>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006250:	d01d      	beq.n	800628e <HAL_TIM_PWM_Start+0x136>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <HAL_TIM_PWM_Start+0x17c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d018      	beq.n	800628e <HAL_TIM_PWM_Start+0x136>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <HAL_TIM_PWM_Start+0x180>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <HAL_TIM_PWM_Start+0x136>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <HAL_TIM_PWM_Start+0x184>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d00e      	beq.n	800628e <HAL_TIM_PWM_Start+0x136>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a16      	ldr	r2, [pc, #88]	; (80062d0 <HAL_TIM_PWM_Start+0x178>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d009      	beq.n	800628e <HAL_TIM_PWM_Start+0x136>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a18      	ldr	r2, [pc, #96]	; (80062e0 <HAL_TIM_PWM_Start+0x188>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d004      	beq.n	800628e <HAL_TIM_PWM_Start+0x136>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <HAL_TIM_PWM_Start+0x18c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d111      	bne.n	80062b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2b06      	cmp	r3, #6
 800629e:	d010      	beq.n	80062c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b0:	e007      	b.n	80062c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40010400 	.word	0x40010400
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40014000 	.word	0x40014000
 80062e4:	40001800 	.word	0x40001800

080062e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d109      	bne.n	8006314 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e022      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x72>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	2b04      	cmp	r3, #4
 8006318:	d109      	bne.n	800632e <HAL_TIM_PWM_Start_DMA+0x46>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	bf0c      	ite	eq
 8006326:	2301      	moveq	r3, #1
 8006328:	2300      	movne	r3, #0
 800632a:	b2db      	uxtb	r3, r3
 800632c:	e015      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x72>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d109      	bne.n	8006348 <HAL_TIM_PWM_Start_DMA+0x60>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	bf0c      	ite	eq
 8006340:	2301      	moveq	r3, #1
 8006342:	2300      	movne	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	e008      	b.n	800635a <HAL_TIM_PWM_Start_DMA+0x72>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	bf0c      	ite	eq
 8006354:	2301      	moveq	r3, #1
 8006356:	2300      	movne	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800635e:	2302      	movs	r3, #2
 8006360:	e171      	b.n	8006646 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d109      	bne.n	800637c <HAL_TIM_PWM_Start_DMA+0x94>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	bf0c      	ite	eq
 8006374:	2301      	moveq	r3, #1
 8006376:	2300      	movne	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	e022      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xda>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b04      	cmp	r3, #4
 8006380:	d109      	bne.n	8006396 <HAL_TIM_PWM_Start_DMA+0xae>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e015      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b08      	cmp	r3, #8
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e008      	b.n	80063c2 <HAL_TIM_PWM_Start_DMA+0xda>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d024      	beq.n	8006410 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <HAL_TIM_PWM_Start_DMA+0xee>
 80063cc:	887b      	ldrh	r3, [r7, #2]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e137      	b.n	8006646 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063e4:	e016      	b.n	8006414 <HAL_TIM_PWM_Start_DMA+0x12c>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d104      	bne.n	80063f6 <HAL_TIM_PWM_Start_DMA+0x10e>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f4:	e00e      	b.n	8006414 <HAL_TIM_PWM_Start_DMA+0x12c>
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d104      	bne.n	8006406 <HAL_TIM_PWM_Start_DMA+0x11e>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006404:	e006      	b.n	8006414 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800640e:	e001      	b.n	8006414 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e118      	b.n	8006646 <HAL_TIM_PWM_Start_DMA+0x35e>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b0c      	cmp	r3, #12
 8006418:	f200 80ae 	bhi.w	8006578 <HAL_TIM_PWM_Start_DMA+0x290>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006459 	.word	0x08006459
 8006428:	08006579 	.word	0x08006579
 800642c:	08006579 	.word	0x08006579
 8006430:	08006579 	.word	0x08006579
 8006434:	080064a1 	.word	0x080064a1
 8006438:	08006579 	.word	0x08006579
 800643c:	08006579 	.word	0x08006579
 8006440:	08006579 	.word	0x08006579
 8006444:	080064e9 	.word	0x080064e9
 8006448:	08006579 	.word	0x08006579
 800644c:	08006579 	.word	0x08006579
 8006450:	08006579 	.word	0x08006579
 8006454:	08006531 	.word	0x08006531
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	4a7c      	ldr	r2, [pc, #496]	; (8006650 <HAL_TIM_PWM_Start_DMA+0x368>)
 800645e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	4a7b      	ldr	r2, [pc, #492]	; (8006654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006466:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	4a7a      	ldr	r2, [pc, #488]	; (8006658 <HAL_TIM_PWM_Start_DMA+0x370>)
 800646e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3334      	adds	r3, #52	; 0x34
 800647c:	461a      	mov	r2, r3
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	f7fc fd1a 	bl	8002eb8 <HAL_DMA_Start_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e0db      	b.n	8006646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800649c:	60da      	str	r2, [r3, #12]
      break;
 800649e:	e06e      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	4a6a      	ldr	r2, [pc, #424]	; (8006650 <HAL_TIM_PWM_Start_DMA+0x368>)
 80064a6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	4a69      	ldr	r2, [pc, #420]	; (8006654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	4a68      	ldr	r2, [pc, #416]	; (8006658 <HAL_TIM_PWM_Start_DMA+0x370>)
 80064b6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3338      	adds	r3, #56	; 0x38
 80064c4:	461a      	mov	r2, r3
 80064c6:	887b      	ldrh	r3, [r7, #2]
 80064c8:	f7fc fcf6 	bl	8002eb8 <HAL_DMA_Start_IT>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0b7      	b.n	8006646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064e4:	60da      	str	r2, [r3, #12]
      break;
 80064e6:	e04a      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	4a58      	ldr	r2, [pc, #352]	; (8006650 <HAL_TIM_PWM_Start_DMA+0x368>)
 80064ee:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	4a57      	ldr	r2, [pc, #348]	; (8006654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80064f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	4a56      	ldr	r2, [pc, #344]	; (8006658 <HAL_TIM_PWM_Start_DMA+0x370>)
 80064fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	333c      	adds	r3, #60	; 0x3c
 800650c:	461a      	mov	r2, r3
 800650e:	887b      	ldrh	r3, [r7, #2]
 8006510:	f7fc fcd2 	bl	8002eb8 <HAL_DMA_Start_IT>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e093      	b.n	8006646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800652c:	60da      	str	r2, [r3, #12]
      break;
 800652e:	e026      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006534:	4a46      	ldr	r2, [pc, #280]	; (8006650 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006536:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	4a45      	ldr	r2, [pc, #276]	; (8006654 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800653e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	4a44      	ldr	r2, [pc, #272]	; (8006658 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006546:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3340      	adds	r3, #64	; 0x40
 8006554:	461a      	mov	r2, r3
 8006556:	887b      	ldrh	r3, [r7, #2]
 8006558:	f7fc fcae 	bl	8002eb8 <HAL_DMA_Start_IT>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e06f      	b.n	8006646 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006574:	60da      	str	r2, [r3, #12]
      break;
 8006576:	e002      	b.n	800657e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	bf00      	nop
  }

  if (status == HAL_OK)
 800657e:	7dfb      	ldrb	r3, [r7, #23]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d15f      	bne.n	8006644 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2201      	movs	r2, #1
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fe9d 	bl	80072cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a31      	ldr	r2, [pc, #196]	; (800665c <HAL_TIM_PWM_Start_DMA+0x374>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIM_PWM_Start_DMA+0x2be>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <HAL_TIM_PWM_Start_DMA+0x378>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_PWM_Start_DMA+0x2c2>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <HAL_TIM_PWM_Start_DMA+0x2c4>
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a25      	ldr	r2, [pc, #148]	; (800665c <HAL_TIM_PWM_Start_DMA+0x374>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d022      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x328>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d2:	d01d      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x328>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a22      	ldr	r2, [pc, #136]	; (8006664 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x328>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a21      	ldr	r2, [pc, #132]	; (8006668 <HAL_TIM_PWM_Start_DMA+0x380>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x328>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a1f      	ldr	r2, [pc, #124]	; (800666c <HAL_TIM_PWM_Start_DMA+0x384>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d00e      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x328>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1a      	ldr	r2, [pc, #104]	; (8006660 <HAL_TIM_PWM_Start_DMA+0x378>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x328>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1b      	ldr	r2, [pc, #108]	; (8006670 <HAL_TIM_PWM_Start_DMA+0x388>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_TIM_PWM_Start_DMA+0x328>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d111      	bne.n	8006634 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b06      	cmp	r3, #6
 8006620:	d010      	beq.n	8006644 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006632:	e007      	b.n	8006644 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006644:	7dfb      	ldrb	r3, [r7, #23]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	08006be9 	.word	0x08006be9
 8006654:	08006c91 	.word	0x08006c91
 8006658:	08006b57 	.word	0x08006b57
 800665c:	40010000 	.word	0x40010000
 8006660:	40010400 	.word	0x40010400
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40014000 	.word	0x40014000
 8006674:	40001800 	.word	0x40001800

08006678 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d855      	bhi.n	8006738 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066c9 	.word	0x080066c9
 8006698:	08006739 	.word	0x08006739
 800669c:	08006739 	.word	0x08006739
 80066a0:	08006739 	.word	0x08006739
 80066a4:	080066e5 	.word	0x080066e5
 80066a8:	08006739 	.word	0x08006739
 80066ac:	08006739 	.word	0x08006739
 80066b0:	08006739 	.word	0x08006739
 80066b4:	08006701 	.word	0x08006701
 80066b8:	08006739 	.word	0x08006739
 80066bc:	08006739 	.word	0x08006739
 80066c0:	08006739 	.word	0x08006739
 80066c4:	0800671d 	.word	0x0800671d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fc fcb3 	bl	8003048 <HAL_DMA_Abort_IT>
      break;
 80066e2:	e02c      	b.n	800673e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fc fca5 	bl	8003048 <HAL_DMA_Abort_IT>
      break;
 80066fe:	e01e      	b.n	800673e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800670e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4618      	mov	r0, r3
 8006716:	f7fc fc97 	bl	8003048 <HAL_DMA_Abort_IT>
      break;
 800671a:	e010      	b.n	800673e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800672a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	4618      	mov	r0, r3
 8006732:	f7fc fc89 	bl	8003048 <HAL_DMA_Abort_IT>
      break;
 8006736:	e002      	b.n	800673e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	bf00      	nop
  }

  if (status == HAL_OK)
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d161      	bne.n	8006808 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2200      	movs	r2, #0
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fdbd 	bl	80072cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_TIM_PWM_Stop_DMA+0xee>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2d      	ldr	r2, [pc, #180]	; (8006818 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d101      	bne.n	800676a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <HAL_TIM_PWM_Stop_DMA+0xf4>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d017      	beq.n	80067a0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a1a      	ldr	r2, [r3, #32]
 8006776:	f241 1311 	movw	r3, #4369	; 0x1111
 800677a:	4013      	ands	r3, r2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10f      	bne.n	80067a0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6a1a      	ldr	r2, [r3, #32]
 8006786:	f240 4344 	movw	r3, #1092	; 0x444
 800678a:	4013      	ands	r3, r2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d107      	bne.n	80067a0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800679e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6a1a      	ldr	r2, [r3, #32]
 80067a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10f      	bne.n	80067d0 <HAL_TIM_PWM_Stop_DMA+0x158>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6a1a      	ldr	r2, [r3, #32]
 80067b6:	f240 4344 	movw	r3, #1092	; 0x444
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_PWM_Stop_DMA+0x158>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_TIM_PWM_Stop_DMA+0x168>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067de:	e013      	b.n	8006808 <HAL_TIM_PWM_Stop_DMA+0x190>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d104      	bne.n	80067f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ee:	e00b      	b.n	8006808 <HAL_TIM_PWM_Stop_DMA+0x190>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d104      	bne.n	8006800 <HAL_TIM_PWM_Stop_DMA+0x188>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067fe:	e003      	b.n	8006808 <HAL_TIM_PWM_Stop_DMA+0x190>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40010000 	.word	0x40010000
 8006818:	40010400 	.word	0x40010400

0800681c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006836:	2302      	movs	r3, #2
 8006838:	e0ae      	b.n	8006998 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b0c      	cmp	r3, #12
 8006846:	f200 809f 	bhi.w	8006988 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006885 	.word	0x08006885
 8006854:	08006989 	.word	0x08006989
 8006858:	08006989 	.word	0x08006989
 800685c:	08006989 	.word	0x08006989
 8006860:	080068c5 	.word	0x080068c5
 8006864:	08006989 	.word	0x08006989
 8006868:	08006989 	.word	0x08006989
 800686c:	08006989 	.word	0x08006989
 8006870:	08006907 	.word	0x08006907
 8006874:	08006989 	.word	0x08006989
 8006878:	08006989 	.word	0x08006989
 800687c:	08006989 	.word	0x08006989
 8006880:	08006947 	.word	0x08006947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fad4 	bl	8006e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0204 	bic.w	r2, r2, #4
 80068ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6999      	ldr	r1, [r3, #24]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	619a      	str	r2, [r3, #24]
      break;
 80068c2:	e064      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fb24 	bl	8006f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6999      	ldr	r1, [r3, #24]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	021a      	lsls	r2, r3, #8
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	619a      	str	r2, [r3, #24]
      break;
 8006904:	e043      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fb79 	bl	8007004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f042 0208 	orr.w	r2, r2, #8
 8006920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0204 	bic.w	r2, r2, #4
 8006930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69d9      	ldr	r1, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	61da      	str	r2, [r3, #28]
      break;
 8006944:	e023      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fbcd 	bl	80070ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69d9      	ldr	r1, [r3, #28]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	021a      	lsls	r2, r3, #8
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	61da      	str	r2, [r3, #28]
      break;
 8006986:	e002      	b.n	800698e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
      break;
 800698c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006996:	7dfb      	ldrb	r3, [r7, #23]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_TIM_ConfigClockSource+0x1c>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e0b4      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x186>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2202      	movs	r2, #2
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d03e      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0xd4>
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	f200 8087 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	f000 8086 	beq.w	8006b12 <HAL_TIM_ConfigClockSource+0x172>
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d87f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b70      	cmp	r3, #112	; 0x70
 8006a0e:	d01a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0xa6>
 8006a10:	2b70      	cmp	r3, #112	; 0x70
 8006a12:	d87b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b60      	cmp	r3, #96	; 0x60
 8006a16:	d050      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x11a>
 8006a18:	2b60      	cmp	r3, #96	; 0x60
 8006a1a:	d877      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b50      	cmp	r3, #80	; 0x50
 8006a1e:	d03c      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0xfa>
 8006a20:	2b50      	cmp	r3, #80	; 0x50
 8006a22:	d873      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d058      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x13a>
 8006a28:	2b40      	cmp	r3, #64	; 0x40
 8006a2a:	d86f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a2c:	2b30      	cmp	r3, #48	; 0x30
 8006a2e:	d064      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
 8006a30:	2b30      	cmp	r3, #48	; 0x30
 8006a32:	d86b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d060      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d867      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d05a      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15a>
 8006a44:	e062      	b.n	8006b0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f000 fc19 	bl	800728c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	609a      	str	r2, [r3, #8]
      break;
 8006a72:	e04f      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6899      	ldr	r1, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f000 fc02 	bl	800728c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a96:	609a      	str	r2, [r3, #8]
      break;
 8006a98:	e03c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 fb76 	bl	8007198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2150      	movs	r1, #80	; 0x50
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fbcf 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e02c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fb95 	bl	80071f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2160      	movs	r1, #96	; 0x60
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fbbf 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e01c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 fb56 	bl	8007198 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2140      	movs	r1, #64	; 0x40
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fbaf 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8006af8:	e00c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f000 fba6 	bl	8007256 <TIM_ITRx_SetConfig>
      break;
 8006b0a:	e003      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b10:	e000      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d107      	bne.n	8006b7e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	e02a      	b.n	8006bd4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d107      	bne.n	8006b98 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b96:	e01d      	b.n	8006bd4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d107      	bne.n	8006bb2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bb0:	e010      	b.n	8006bd4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d107      	bne.n	8006bcc <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2208      	movs	r2, #8
 8006bc0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bca:	e003      	b.n	8006bd4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f7ff ffb4 	bl	8006b42 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]
}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d10b      	bne.n	8006c18 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d136      	bne.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c16:	e031      	b.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d10b      	bne.n	8006c3a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2202      	movs	r2, #2
 8006c26:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	69db      	ldr	r3, [r3, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d125      	bne.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c38:	e020      	b.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d10b      	bne.n	8006c5c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2204      	movs	r2, #4
 8006c48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d114      	bne.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c5a:	e00f      	b.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d10a      	bne.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2208      	movs	r2, #8
 8006c6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d103      	bne.n	8006c7c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f7fa ff1d 	bl	8001abc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	771a      	strb	r2, [r3, #28]
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d103      	bne.n	8006cb0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2201      	movs	r2, #1
 8006cac:	771a      	strb	r2, [r3, #28]
 8006cae:	e019      	b.n	8006ce4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d103      	bne.n	8006cc2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	771a      	strb	r2, [r3, #28]
 8006cc0:	e010      	b.n	8006ce4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d103      	bne.n	8006cd4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	771a      	strb	r2, [r3, #28]
 8006cd2:	e007      	b.n	8006ce4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d102      	bne.n	8006ce4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7ff ff22 	bl	8006b2e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	771a      	strb	r2, [r3, #28]
}
 8006cf0:	bf00      	nop
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a40      	ldr	r2, [pc, #256]	; (8006e0c <TIM_Base_SetConfig+0x114>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d16:	d00f      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a3d      	ldr	r2, [pc, #244]	; (8006e10 <TIM_Base_SetConfig+0x118>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a3c      	ldr	r2, [pc, #240]	; (8006e14 <TIM_Base_SetConfig+0x11c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a3b      	ldr	r2, [pc, #236]	; (8006e18 <TIM_Base_SetConfig+0x120>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d003      	beq.n	8006d38 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a3a      	ldr	r2, [pc, #232]	; (8006e1c <TIM_Base_SetConfig+0x124>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d108      	bne.n	8006d4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a2f      	ldr	r2, [pc, #188]	; (8006e0c <TIM_Base_SetConfig+0x114>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d02b      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d58:	d027      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a2c      	ldr	r2, [pc, #176]	; (8006e10 <TIM_Base_SetConfig+0x118>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d023      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a2b      	ldr	r2, [pc, #172]	; (8006e14 <TIM_Base_SetConfig+0x11c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01f      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <TIM_Base_SetConfig+0x120>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d01b      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a29      	ldr	r2, [pc, #164]	; (8006e1c <TIM_Base_SetConfig+0x124>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d017      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a28      	ldr	r2, [pc, #160]	; (8006e20 <TIM_Base_SetConfig+0x128>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d013      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a27      	ldr	r2, [pc, #156]	; (8006e24 <TIM_Base_SetConfig+0x12c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d00f      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a26      	ldr	r2, [pc, #152]	; (8006e28 <TIM_Base_SetConfig+0x130>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d00b      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a25      	ldr	r2, [pc, #148]	; (8006e2c <TIM_Base_SetConfig+0x134>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d007      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a24      	ldr	r2, [pc, #144]	; (8006e30 <TIM_Base_SetConfig+0x138>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d003      	beq.n	8006daa <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a23      	ldr	r2, [pc, #140]	; (8006e34 <TIM_Base_SetConfig+0x13c>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d108      	bne.n	8006dbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <TIM_Base_SetConfig+0x114>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_Base_SetConfig+0xf8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <TIM_Base_SetConfig+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d103      	bne.n	8006df8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	691a      	ldr	r2, [r3, #16]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	615a      	str	r2, [r3, #20]
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	40000c00 	.word	0x40000c00
 8006e1c:	40010400 	.word	0x40010400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800
 8006e2c:	40001800 	.word	0x40001800
 8006e30:	40001c00 	.word	0x40001c00
 8006e34:	40002000 	.word	0x40002000

08006e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0303 	bic.w	r3, r3, #3
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f023 0302 	bic.w	r3, r3, #2
 8006e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <TIM_OC1_SetConfig+0xd8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d003      	beq.n	8006e9c <TIM_OC1_SetConfig+0x64>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <TIM_OC1_SetConfig+0xdc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d10c      	bne.n	8006eb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 0308 	bic.w	r3, r3, #8
 8006ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 0304 	bic.w	r3, r3, #4
 8006eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a15      	ldr	r2, [pc, #84]	; (8006f10 <TIM_OC1_SetConfig+0xd8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_OC1_SetConfig+0x8e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <TIM_OC1_SetConfig+0xdc>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d111      	bne.n	8006eea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	621a      	str	r2, [r3, #32]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40010400 	.word	0x40010400

08006f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	f023 0210 	bic.w	r2, r3, #16
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0320 	bic.w	r3, r3, #32
 8006f62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <TIM_OC2_SetConfig+0xe4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC2_SetConfig+0x68>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	; (8007000 <TIM_OC2_SetConfig+0xe8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d10d      	bne.n	8006f9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <TIM_OC2_SetConfig+0xe4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <TIM_OC2_SetConfig+0x94>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a16      	ldr	r2, [pc, #88]	; (8007000 <TIM_OC2_SetConfig+0xe8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d113      	bne.n	8006fd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	621a      	str	r2, [r3, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	371c      	adds	r7, #28
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	40010000 	.word	0x40010000
 8007000:	40010400 	.word	0x40010400

08007004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0303 	bic.w	r3, r3, #3
 800703a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800704c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	021b      	lsls	r3, r3, #8
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	4313      	orrs	r3, r2
 8007058:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a21      	ldr	r2, [pc, #132]	; (80070e4 <TIM_OC3_SetConfig+0xe0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d003      	beq.n	800706a <TIM_OC3_SetConfig+0x66>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a20      	ldr	r2, [pc, #128]	; (80070e8 <TIM_OC3_SetConfig+0xe4>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d10d      	bne.n	8007086 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a16      	ldr	r2, [pc, #88]	; (80070e4 <TIM_OC3_SetConfig+0xe0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d003      	beq.n	8007096 <TIM_OC3_SetConfig+0x92>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <TIM_OC3_SetConfig+0xe4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d113      	bne.n	80070be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40010400 	.word	0x40010400

080070ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	031b      	lsls	r3, r3, #12
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a12      	ldr	r2, [pc, #72]	; (8007190 <TIM_OC4_SetConfig+0xa4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d003      	beq.n	8007154 <TIM_OC4_SetConfig+0x68>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a11      	ldr	r2, [pc, #68]	; (8007194 <TIM_OC4_SetConfig+0xa8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d109      	bne.n	8007168 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800715a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	019b      	lsls	r3, r3, #6
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685a      	ldr	r2, [r3, #4]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	621a      	str	r2, [r3, #32]
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40010000 	.word	0x40010000
 8007194:	40010400 	.word	0x40010400

08007198 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f023 0201 	bic.w	r2, r3, #1
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f023 030a 	bic.w	r3, r3, #10
 80071d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b087      	sub	sp, #28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0210 	bic.w	r2, r3, #16
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	031b      	lsls	r3, r3, #12
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007232:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007256:	b480      	push	{r7}
 8007258:	b085      	sub	sp, #20
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	f043 0307 	orr.w	r3, r3, #7
 8007278:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	609a      	str	r2, [r3, #8]
}
 8007280:	bf00      	nop
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	021a      	lsls	r2, r3, #8
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	609a      	str	r2, [r3, #8]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	2201      	movs	r2, #1
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1a      	ldr	r2, [r3, #32]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	43db      	mvns	r3, r3
 80072ee:	401a      	ands	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1a      	ldr	r2, [r3, #32]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	431a      	orrs	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
	...

08007318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800732c:	2302      	movs	r3, #2
 800732e:	e05a      	b.n	80073e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a21      	ldr	r2, [pc, #132]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d022      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800737c:	d01d      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a1d      	ldr	r2, [pc, #116]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d018      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a1b      	ldr	r2, [pc, #108]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a1a      	ldr	r2, [pc, #104]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00e      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a18      	ldr	r2, [pc, #96]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d009      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d004      	beq.n	80073ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a15      	ldr	r2, [pc, #84]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d10c      	bne.n	80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40010000 	.word	0x40010000
 80073f8:	40000400 	.word	0x40000400
 80073fc:	40000800 	.word	0x40000800
 8007400:	40000c00 	.word	0x40000c00
 8007404:	40010400 	.word	0x40010400
 8007408:	40014000 	.word	0x40014000
 800740c:	40001800 	.word	0x40001800

08007410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d101      	bne.n	800742c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007428:	2302      	movs	r3, #2
 800742a:	e03d      	b.n	80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e03f      	b.n	8007546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fa fcce 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2224      	movs	r2, #36	; 0x24
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fdc7 	bl	800808c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800750c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695a      	ldr	r2, [r3, #20]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800751c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800752c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08c      	sub	sp, #48	; 0x30
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4613      	mov	r3, r2
 800755c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b20      	cmp	r3, #32
 8007568:	d165      	bne.n	8007636 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_UART_Transmit_DMA+0x26>
 8007570:	88fb      	ldrh	r3, [r7, #6]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e05e      	b.n	8007638 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_UART_Transmit_DMA+0x38>
 8007584:	2302      	movs	r3, #2
 8007586:	e057      	b.n	8007638 <HAL_UART_Transmit_DMA+0xe8>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	88fa      	ldrh	r2, [r7, #6]
 80075a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2221      	movs	r2, #33	; 0x21
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b4:	4a22      	ldr	r2, [pc, #136]	; (8007640 <HAL_UART_Transmit_DMA+0xf0>)
 80075b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	4a21      	ldr	r2, [pc, #132]	; (8007644 <HAL_UART_Transmit_DMA+0xf4>)
 80075be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	4a20      	ldr	r2, [pc, #128]	; (8007648 <HAL_UART_Transmit_DMA+0xf8>)
 80075c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075cc:	2200      	movs	r2, #0
 80075ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80075d0:	f107 0308 	add.w	r3, r7, #8
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	6819      	ldr	r1, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3304      	adds	r3, #4
 80075e4:	461a      	mov	r2, r3
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	f7fb fc66 	bl	8002eb8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3314      	adds	r3, #20
 8007604:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	617b      	str	r3, [r7, #20]
   return(result);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3314      	adds	r3, #20
 800761c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800761e:	627a      	str	r2, [r7, #36]	; 0x24
 8007620:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6a39      	ldr	r1, [r7, #32]
 8007624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	61fb      	str	r3, [r7, #28]
   return(result);
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	e000      	b.n	8007638 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007636:	2302      	movs	r3, #2
  }
}
 8007638:	4618      	mov	r0, r3
 800763a:	3730      	adds	r7, #48	; 0x30
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	08007bbd 	.word	0x08007bbd
 8007644:	08007c57 	.word	0x08007c57
 8007648:	08007c73 	.word	0x08007c73

0800764c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b0ba      	sub	sp, #232	; 0xe8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007672:	2300      	movs	r3, #0
 8007674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800767e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800768a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10f      	bne.n	80076b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d009      	beq.n	80076b2 <HAL_UART_IRQHandler+0x66>
 800769e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d003      	beq.n	80076b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fc32 	bl	8007f14 <UART_Receive_IT>
      return;
 80076b0:	e256      	b.n	8007b60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80076b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80de 	beq.w	8007878 <HAL_UART_IRQHandler+0x22c>
 80076bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80076c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 80d1 	beq.w	8007878 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00b      	beq.n	80076fa <HAL_UART_IRQHandler+0xae>
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d005      	beq.n	80076fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	f043 0201 	orr.w	r2, r3, #1
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_UART_IRQHandler+0xd2>
 8007706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	f043 0202 	orr.w	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800771e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00b      	beq.n	8007742 <HAL_UART_IRQHandler+0xf6>
 800772a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	f043 0204 	orr.w	r2, r3, #4
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d011      	beq.n	8007772 <HAL_UART_IRQHandler+0x126>
 800774e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007752:	f003 0320 	and.w	r3, r3, #32
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800775a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f043 0208 	orr.w	r2, r3, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 81ed 	beq.w	8007b56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800777c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <HAL_UART_IRQHandler+0x14e>
 8007788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800778c:	f003 0320 	and.w	r3, r3, #32
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fbbd 	bl	8007f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	bf0c      	ite	eq
 80077a8:	2301      	moveq	r3, #1
 80077aa:	2300      	movne	r3, #0
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <HAL_UART_IRQHandler+0x17a>
 80077be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d04f      	beq.n	8007866 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fac5 	bl	8007d56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d141      	bne.n	800785e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3314      	adds	r3, #20
 80077e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3314      	adds	r3, #20
 8007802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800780a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800781e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1d9      	bne.n	80077da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	2b00      	cmp	r3, #0
 800782c:	d013      	beq.n	8007856 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	4a7d      	ldr	r2, [pc, #500]	; (8007a28 <HAL_UART_IRQHandler+0x3dc>)
 8007834:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	4618      	mov	r0, r3
 800783c:	f7fb fc04 	bl	8003048 <HAL_DMA_Abort_IT>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007854:	e00e      	b.n	8007874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f99a 	bl	8007b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785c:	e00a      	b.n	8007874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f996 	bl	8007b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007864:	e006      	b.n	8007874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f992 	bl	8007b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007872:	e170      	b.n	8007b56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007874:	bf00      	nop
    return;
 8007876:	e16e      	b.n	8007b56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	2b01      	cmp	r3, #1
 800787e:	f040 814a 	bne.w	8007b16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 8143 	beq.w	8007b16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 813c 	beq.w	8007b16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800789e:	2300      	movs	r3, #0
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60bb      	str	r3, [r7, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	60bb      	str	r3, [r7, #8]
 80078b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	f040 80b4 	bne.w	8007a2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8140 	beq.w	8007b5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078e2:	429a      	cmp	r2, r3
 80078e4:	f080 8139 	bcs.w	8007b5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fa:	f000 8088 	beq.w	8007a0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	330c      	adds	r3, #12
 8007904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800791c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	330c      	adds	r3, #12
 8007926:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800792a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800792e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1d9      	bne.n	80078fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3314      	adds	r3, #20
 8007950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800795a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3314      	adds	r3, #20
 800796a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800796e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e1      	bne.n	800794a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3314      	adds	r3, #20
 800798c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3314      	adds	r3, #20
 80079a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e3      	bne.n	8007986 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	330c      	adds	r3, #12
 80079d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079de:	f023 0310 	bic.w	r3, r3, #16
 80079e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	330c      	adds	r3, #12
 80079ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80079f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80079f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e3      	bne.n	80079cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fb faad 	bl	8002f68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f8c0 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007a24:	e099      	b.n	8007b5a <HAL_UART_IRQHandler+0x50e>
 8007a26:	bf00      	nop
 8007a28:	08007e1d 	.word	0x08007e1d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 808b 	beq.w	8007b5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8086 	beq.w	8007b5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	330c      	adds	r3, #12
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	330c      	adds	r3, #12
 8007a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a76:	647a      	str	r2, [r7, #68]	; 0x44
 8007a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e3      	bne.n	8007a52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3314      	adds	r3, #20
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	623b      	str	r3, [r7, #32]
   return(result);
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3314      	adds	r3, #20
 8007aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aae:	633a      	str	r2, [r7, #48]	; 0x30
 8007ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e3      	bne.n	8007a8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0310 	bic.w	r3, r3, #16
 8007ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007af4:	61fa      	str	r2, [r7, #28]
 8007af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	69b9      	ldr	r1, [r7, #24]
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	617b      	str	r3, [r7, #20]
   return(result);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e3      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f848 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b14:	e023      	b.n	8007b5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <HAL_UART_IRQHandler+0x4ea>
 8007b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f988 	bl	8007e44 <UART_Transmit_IT>
    return;
 8007b34:	e014      	b.n	8007b60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00e      	beq.n	8007b60 <HAL_UART_IRQHandler+0x514>
 8007b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d008      	beq.n	8007b60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f9c8 	bl	8007ee4 <UART_EndTransmit_IT>
    return;
 8007b54:	e004      	b.n	8007b60 <HAL_UART_IRQHandler+0x514>
    return;
 8007b56:	bf00      	nop
 8007b58:	e002      	b.n	8007b60 <HAL_UART_IRQHandler+0x514>
      return;
 8007b5a:	bf00      	nop
 8007b5c:	e000      	b.n	8007b60 <HAL_UART_IRQHandler+0x514>
      return;
 8007b5e:	bf00      	nop
  }
}
 8007b60:	37e8      	adds	r7, #232	; 0xe8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop

08007b68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b98:	bf00      	nop
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b090      	sub	sp, #64	; 0x40
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d137      	bne.n	8007c48 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bda:	2200      	movs	r2, #0
 8007bdc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3314      	adds	r3, #20
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	e853 3f00 	ldrex	r3, [r3]
 8007bec:	623b      	str	r3, [r7, #32]
   return(result);
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3314      	adds	r3, #20
 8007bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfe:	633a      	str	r2, [r7, #48]	; 0x30
 8007c00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e5      	bne.n	8007bde <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	330c      	adds	r3, #12
 8007c18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	e853 3f00 	ldrex	r3, [r3]
 8007c20:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c32:	61fa      	str	r2, [r7, #28]
 8007c34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	69b9      	ldr	r1, [r7, #24]
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e5      	bne.n	8007c12 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c46:	e002      	b.n	8007c4e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007c48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c4a:	f7f9 ff25 	bl	8001a98 <HAL_UART_TxCpltCallback>
}
 8007c4e:	bf00      	nop
 8007c50:	3740      	adds	r7, #64	; 0x40
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7ff ff7f 	bl	8007b68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8e:	2b80      	cmp	r3, #128	; 0x80
 8007c90:	bf0c      	ite	eq
 8007c92:	2301      	moveq	r3, #1
 8007c94:	2300      	movne	r3, #0
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b21      	cmp	r3, #33	; 0x21
 8007ca4:	d108      	bne.n	8007cb8 <UART_DMAError+0x46>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007cb2:	68b8      	ldr	r0, [r7, #8]
 8007cb4:	f000 f827 	bl	8007d06 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	bf0c      	ite	eq
 8007cc6:	2301      	moveq	r3, #1
 8007cc8:	2300      	movne	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b22      	cmp	r3, #34	; 0x22
 8007cd8:	d108      	bne.n	8007cec <UART_DMAError+0x7a>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007ce6:	68b8      	ldr	r0, [r7, #8]
 8007ce8:	f000 f835 	bl	8007d56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	f043 0210 	orr.w	r2, r3, #16
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cf8:	68b8      	ldr	r0, [r7, #8]
 8007cfa:	f7ff ff49 	bl	8007b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b089      	sub	sp, #36	; 0x24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	69fa      	ldr	r2, [r7, #28]
 8007d2e:	61ba      	str	r2, [r7, #24]
 8007d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6979      	ldr	r1, [r7, #20]
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007d4a:	bf00      	nop
 8007d4c:	3724      	adds	r7, #36	; 0x24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b095      	sub	sp, #84	; 0x54
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	330c      	adds	r3, #12
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d7e:	643a      	str	r2, [r7, #64]	; 0x40
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1e5      	bne.n	8007d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3314      	adds	r3, #20
 8007d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3314      	adds	r3, #20
 8007db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e5      	bne.n	8007d92 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d119      	bne.n	8007e02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	330c      	adds	r3, #12
 8007dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f023 0310 	bic.w	r3, r3, #16
 8007de4:	647b      	str	r3, [r7, #68]	; 0x44
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dee:	61ba      	str	r2, [r7, #24]
 8007df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6979      	ldr	r1, [r7, #20]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e5      	bne.n	8007dce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e10:	bf00      	nop
 8007e12:	3754      	adds	r7, #84	; 0x54
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff feaa 	bl	8007b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b21      	cmp	r3, #33	; 0x21
 8007e56:	d13e      	bne.n	8007ed6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e60:	d114      	bne.n	8007e8c <UART_Transmit_IT+0x48>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d110      	bne.n	8007e8c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	461a      	mov	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e7e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	1c9a      	adds	r2, r3, #2
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	621a      	str	r2, [r3, #32]
 8007e8a:	e008      	b.n	8007e9e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	1c59      	adds	r1, r3, #1
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	6211      	str	r1, [r2, #32]
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10f      	bne.n	8007ed2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ec0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ed0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e000      	b.n	8007ed8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ed6:	2302      	movs	r3, #2
  }
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7f9 fdc7 	bl	8001a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08c      	sub	sp, #48	; 0x30
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b22      	cmp	r3, #34	; 0x22
 8007f26:	f040 80ab 	bne.w	8008080 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f32:	d117      	bne.n	8007f64 <UART_Receive_IT+0x50>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d113      	bne.n	8007f64 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f44:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	1c9a      	adds	r2, r3, #2
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	629a      	str	r2, [r3, #40]	; 0x28
 8007f62:	e026      	b.n	8007fb2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f76:	d007      	beq.n	8007f88 <UART_Receive_IT+0x74>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <UART_Receive_IT+0x82>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d106      	bne.n	8007f96 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	701a      	strb	r2, [r3, #0]
 8007f94:	e008      	b.n	8007fa8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa2:	b2da      	uxtb	r2, r3
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fac:	1c5a      	adds	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d15a      	bne.n	800807c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68da      	ldr	r2, [r3, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0220 	bic.w	r2, r2, #32
 8007fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	695a      	ldr	r2, [r3, #20]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0201 	bic.w	r2, r2, #1
 8007ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	2b01      	cmp	r3, #1
 8008004:	d135      	bne.n	8008072 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	330c      	adds	r3, #12
 8008012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	613b      	str	r3, [r7, #16]
   return(result);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f023 0310 	bic.w	r3, r3, #16
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	330c      	adds	r3, #12
 800802a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802c:	623a      	str	r2, [r7, #32]
 800802e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	69f9      	ldr	r1, [r7, #28]
 8008032:	6a3a      	ldr	r2, [r7, #32]
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	61bb      	str	r3, [r7, #24]
   return(result);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e5      	bne.n	800800c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	2b10      	cmp	r3, #16
 800804c:	d10a      	bne.n	8008064 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fd9a 	bl	8007ba4 <HAL_UARTEx_RxEventCallback>
 8008070:	e002      	b.n	8008078 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7ff fd82 	bl	8007b7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	e002      	b.n	8008082 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	e000      	b.n	8008082 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008080:	2302      	movs	r3, #2
  }
}
 8008082:	4618      	mov	r0, r3
 8008084:	3730      	adds	r7, #48	; 0x30
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
	...

0800808c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	b09f      	sub	sp, #124	; 0x7c
 8008092:	af00      	add	r7, sp, #0
 8008094:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a2:	68d9      	ldr	r1, [r3, #12]
 80080a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	ea40 0301 	orr.w	r3, r0, r1
 80080ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	431a      	orrs	r2, r3
 80080b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	431a      	orrs	r2, r3
 80080be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80080c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080d0:	f021 010c 	bic.w	r1, r1, #12
 80080d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080da:	430b      	orrs	r3, r1
 80080dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ea:	6999      	ldr	r1, [r3, #24]
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	ea40 0301 	orr.w	r3, r0, r1
 80080f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4bc5      	ldr	r3, [pc, #788]	; (8008410 <UART_SetConfig+0x384>)
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d004      	beq.n	800810a <UART_SetConfig+0x7e>
 8008100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	4bc3      	ldr	r3, [pc, #780]	; (8008414 <UART_SetConfig+0x388>)
 8008106:	429a      	cmp	r2, r3
 8008108:	d103      	bne.n	8008112 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800810a:	f7fd fb19 	bl	8005740 <HAL_RCC_GetPCLK2Freq>
 800810e:	6778      	str	r0, [r7, #116]	; 0x74
 8008110:	e002      	b.n	8008118 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008112:	f7fd fb01 	bl	8005718 <HAL_RCC_GetPCLK1Freq>
 8008116:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008120:	f040 80b6 	bne.w	8008290 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008126:	461c      	mov	r4, r3
 8008128:	f04f 0500 	mov.w	r5, #0
 800812c:	4622      	mov	r2, r4
 800812e:	462b      	mov	r3, r5
 8008130:	1891      	adds	r1, r2, r2
 8008132:	6439      	str	r1, [r7, #64]	; 0x40
 8008134:	415b      	adcs	r3, r3
 8008136:	647b      	str	r3, [r7, #68]	; 0x44
 8008138:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800813c:	1912      	adds	r2, r2, r4
 800813e:	eb45 0303 	adc.w	r3, r5, r3
 8008142:	f04f 0000 	mov.w	r0, #0
 8008146:	f04f 0100 	mov.w	r1, #0
 800814a:	00d9      	lsls	r1, r3, #3
 800814c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008150:	00d0      	lsls	r0, r2, #3
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	1911      	adds	r1, r2, r4
 8008158:	6639      	str	r1, [r7, #96]	; 0x60
 800815a:	416b      	adcs	r3, r5
 800815c:	667b      	str	r3, [r7, #100]	; 0x64
 800815e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	461a      	mov	r2, r3
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	1891      	adds	r1, r2, r2
 800816a:	63b9      	str	r1, [r7, #56]	; 0x38
 800816c:	415b      	adcs	r3, r3
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008174:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008178:	f7f8 fb54 	bl	8000824 <__aeabi_uldivmod>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4ba5      	ldr	r3, [pc, #660]	; (8008418 <UART_SetConfig+0x38c>)
 8008182:	fba3 2302 	umull	r2, r3, r3, r2
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	011e      	lsls	r6, r3, #4
 800818a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800818c:	461c      	mov	r4, r3
 800818e:	f04f 0500 	mov.w	r5, #0
 8008192:	4622      	mov	r2, r4
 8008194:	462b      	mov	r3, r5
 8008196:	1891      	adds	r1, r2, r2
 8008198:	6339      	str	r1, [r7, #48]	; 0x30
 800819a:	415b      	adcs	r3, r3
 800819c:	637b      	str	r3, [r7, #52]	; 0x34
 800819e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80081a2:	1912      	adds	r2, r2, r4
 80081a4:	eb45 0303 	adc.w	r3, r5, r3
 80081a8:	f04f 0000 	mov.w	r0, #0
 80081ac:	f04f 0100 	mov.w	r1, #0
 80081b0:	00d9      	lsls	r1, r3, #3
 80081b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081b6:	00d0      	lsls	r0, r2, #3
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	1911      	adds	r1, r2, r4
 80081be:	65b9      	str	r1, [r7, #88]	; 0x58
 80081c0:	416b      	adcs	r3, r5
 80081c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	461a      	mov	r2, r3
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	1891      	adds	r1, r2, r2
 80081d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80081d2:	415b      	adcs	r3, r3
 80081d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081de:	f7f8 fb21 	bl	8000824 <__aeabi_uldivmod>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4b8c      	ldr	r3, [pc, #560]	; (8008418 <UART_SetConfig+0x38c>)
 80081e8:	fba3 1302 	umull	r1, r3, r3, r2
 80081ec:	095b      	lsrs	r3, r3, #5
 80081ee:	2164      	movs	r1, #100	; 0x64
 80081f0:	fb01 f303 	mul.w	r3, r1, r3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	3332      	adds	r3, #50	; 0x32
 80081fa:	4a87      	ldr	r2, [pc, #540]	; (8008418 <UART_SetConfig+0x38c>)
 80081fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008208:	441e      	add	r6, r3
 800820a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800820c:	4618      	mov	r0, r3
 800820e:	f04f 0100 	mov.w	r1, #0
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	1894      	adds	r4, r2, r2
 8008218:	623c      	str	r4, [r7, #32]
 800821a:	415b      	adcs	r3, r3
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
 800821e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008222:	1812      	adds	r2, r2, r0
 8008224:	eb41 0303 	adc.w	r3, r1, r3
 8008228:	f04f 0400 	mov.w	r4, #0
 800822c:	f04f 0500 	mov.w	r5, #0
 8008230:	00dd      	lsls	r5, r3, #3
 8008232:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008236:	00d4      	lsls	r4, r2, #3
 8008238:	4622      	mov	r2, r4
 800823a:	462b      	mov	r3, r5
 800823c:	1814      	adds	r4, r2, r0
 800823e:	653c      	str	r4, [r7, #80]	; 0x50
 8008240:	414b      	adcs	r3, r1
 8008242:	657b      	str	r3, [r7, #84]	; 0x54
 8008244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	461a      	mov	r2, r3
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	1891      	adds	r1, r2, r2
 8008250:	61b9      	str	r1, [r7, #24]
 8008252:	415b      	adcs	r3, r3
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800825a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800825e:	f7f8 fae1 	bl	8000824 <__aeabi_uldivmod>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4b6c      	ldr	r3, [pc, #432]	; (8008418 <UART_SetConfig+0x38c>)
 8008268:	fba3 1302 	umull	r1, r3, r3, r2
 800826c:	095b      	lsrs	r3, r3, #5
 800826e:	2164      	movs	r1, #100	; 0x64
 8008270:	fb01 f303 	mul.w	r3, r1, r3
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	3332      	adds	r3, #50	; 0x32
 800827a:	4a67      	ldr	r2, [pc, #412]	; (8008418 <UART_SetConfig+0x38c>)
 800827c:	fba2 2303 	umull	r2, r3, r2, r3
 8008280:	095b      	lsrs	r3, r3, #5
 8008282:	f003 0207 	and.w	r2, r3, #7
 8008286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4432      	add	r2, r6
 800828c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800828e:	e0b9      	b.n	8008404 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008292:	461c      	mov	r4, r3
 8008294:	f04f 0500 	mov.w	r5, #0
 8008298:	4622      	mov	r2, r4
 800829a:	462b      	mov	r3, r5
 800829c:	1891      	adds	r1, r2, r2
 800829e:	6139      	str	r1, [r7, #16]
 80082a0:	415b      	adcs	r3, r3
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082a8:	1912      	adds	r2, r2, r4
 80082aa:	eb45 0303 	adc.w	r3, r5, r3
 80082ae:	f04f 0000 	mov.w	r0, #0
 80082b2:	f04f 0100 	mov.w	r1, #0
 80082b6:	00d9      	lsls	r1, r3, #3
 80082b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082bc:	00d0      	lsls	r0, r2, #3
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	eb12 0804 	adds.w	r8, r2, r4
 80082c6:	eb43 0905 	adc.w	r9, r3, r5
 80082ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f04f 0100 	mov.w	r1, #0
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	008b      	lsls	r3, r1, #2
 80082de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082e2:	0082      	lsls	r2, r0, #2
 80082e4:	4640      	mov	r0, r8
 80082e6:	4649      	mov	r1, r9
 80082e8:	f7f8 fa9c 	bl	8000824 <__aeabi_uldivmod>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4b49      	ldr	r3, [pc, #292]	; (8008418 <UART_SetConfig+0x38c>)
 80082f2:	fba3 2302 	umull	r2, r3, r3, r2
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	011e      	lsls	r6, r3, #4
 80082fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082fc:	4618      	mov	r0, r3
 80082fe:	f04f 0100 	mov.w	r1, #0
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	1894      	adds	r4, r2, r2
 8008308:	60bc      	str	r4, [r7, #8]
 800830a:	415b      	adcs	r3, r3
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008312:	1812      	adds	r2, r2, r0
 8008314:	eb41 0303 	adc.w	r3, r1, r3
 8008318:	f04f 0400 	mov.w	r4, #0
 800831c:	f04f 0500 	mov.w	r5, #0
 8008320:	00dd      	lsls	r5, r3, #3
 8008322:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008326:	00d4      	lsls	r4, r2, #3
 8008328:	4622      	mov	r2, r4
 800832a:	462b      	mov	r3, r5
 800832c:	1814      	adds	r4, r2, r0
 800832e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008330:	414b      	adcs	r3, r1
 8008332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	f04f 0100 	mov.w	r1, #0
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	f04f 0300 	mov.w	r3, #0
 8008346:	008b      	lsls	r3, r1, #2
 8008348:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800834c:	0082      	lsls	r2, r0, #2
 800834e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008352:	f7f8 fa67 	bl	8000824 <__aeabi_uldivmod>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4b2f      	ldr	r3, [pc, #188]	; (8008418 <UART_SetConfig+0x38c>)
 800835c:	fba3 1302 	umull	r1, r3, r3, r2
 8008360:	095b      	lsrs	r3, r3, #5
 8008362:	2164      	movs	r1, #100	; 0x64
 8008364:	fb01 f303 	mul.w	r3, r1, r3
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	3332      	adds	r3, #50	; 0x32
 800836e:	4a2a      	ldr	r2, [pc, #168]	; (8008418 <UART_SetConfig+0x38c>)
 8008370:	fba2 2303 	umull	r2, r3, r2, r3
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800837a:	441e      	add	r6, r3
 800837c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800837e:	4618      	mov	r0, r3
 8008380:	f04f 0100 	mov.w	r1, #0
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	1894      	adds	r4, r2, r2
 800838a:	603c      	str	r4, [r7, #0]
 800838c:	415b      	adcs	r3, r3
 800838e:	607b      	str	r3, [r7, #4]
 8008390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008394:	1812      	adds	r2, r2, r0
 8008396:	eb41 0303 	adc.w	r3, r1, r3
 800839a:	f04f 0400 	mov.w	r4, #0
 800839e:	f04f 0500 	mov.w	r5, #0
 80083a2:	00dd      	lsls	r5, r3, #3
 80083a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083a8:	00d4      	lsls	r4, r2, #3
 80083aa:	4622      	mov	r2, r4
 80083ac:	462b      	mov	r3, r5
 80083ae:	eb12 0a00 	adds.w	sl, r2, r0
 80083b2:	eb43 0b01 	adc.w	fp, r3, r1
 80083b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f04f 0100 	mov.w	r1, #0
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f04f 0300 	mov.w	r3, #0
 80083c8:	008b      	lsls	r3, r1, #2
 80083ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083ce:	0082      	lsls	r2, r0, #2
 80083d0:	4650      	mov	r0, sl
 80083d2:	4659      	mov	r1, fp
 80083d4:	f7f8 fa26 	bl	8000824 <__aeabi_uldivmod>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <UART_SetConfig+0x38c>)
 80083de:	fba3 1302 	umull	r1, r3, r3, r2
 80083e2:	095b      	lsrs	r3, r3, #5
 80083e4:	2164      	movs	r1, #100	; 0x64
 80083e6:	fb01 f303 	mul.w	r3, r1, r3
 80083ea:	1ad3      	subs	r3, r2, r3
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	3332      	adds	r3, #50	; 0x32
 80083f0:	4a09      	ldr	r2, [pc, #36]	; (8008418 <UART_SetConfig+0x38c>)
 80083f2:	fba2 2303 	umull	r2, r3, r2, r3
 80083f6:	095b      	lsrs	r3, r3, #5
 80083f8:	f003 020f 	and.w	r2, r3, #15
 80083fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4432      	add	r2, r6
 8008402:	609a      	str	r2, [r3, #8]
}
 8008404:	bf00      	nop
 8008406:	377c      	adds	r7, #124	; 0x7c
 8008408:	46bd      	mov	sp, r7
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	bf00      	nop
 8008410:	40011000 	.word	0x40011000
 8008414:	40011400 	.word	0x40011400
 8008418:	51eb851f 	.word	0x51eb851f

0800841c <__libc_init_array>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	4d0d      	ldr	r5, [pc, #52]	; (8008454 <__libc_init_array+0x38>)
 8008420:	4c0d      	ldr	r4, [pc, #52]	; (8008458 <__libc_init_array+0x3c>)
 8008422:	1b64      	subs	r4, r4, r5
 8008424:	10a4      	asrs	r4, r4, #2
 8008426:	2600      	movs	r6, #0
 8008428:	42a6      	cmp	r6, r4
 800842a:	d109      	bne.n	8008440 <__libc_init_array+0x24>
 800842c:	4d0b      	ldr	r5, [pc, #44]	; (800845c <__libc_init_array+0x40>)
 800842e:	4c0c      	ldr	r4, [pc, #48]	; (8008460 <__libc_init_array+0x44>)
 8008430:	f000 f820 	bl	8008474 <_init>
 8008434:	1b64      	subs	r4, r4, r5
 8008436:	10a4      	asrs	r4, r4, #2
 8008438:	2600      	movs	r6, #0
 800843a:	42a6      	cmp	r6, r4
 800843c:	d105      	bne.n	800844a <__libc_init_array+0x2e>
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	f855 3b04 	ldr.w	r3, [r5], #4
 8008444:	4798      	blx	r3
 8008446:	3601      	adds	r6, #1
 8008448:	e7ee      	b.n	8008428 <__libc_init_array+0xc>
 800844a:	f855 3b04 	ldr.w	r3, [r5], #4
 800844e:	4798      	blx	r3
 8008450:	3601      	adds	r6, #1
 8008452:	e7f2      	b.n	800843a <__libc_init_array+0x1e>
 8008454:	080084cc 	.word	0x080084cc
 8008458:	080084cc 	.word	0x080084cc
 800845c:	080084cc 	.word	0x080084cc
 8008460:	080084d0 	.word	0x080084d0

08008464 <memset>:
 8008464:	4402      	add	r2, r0
 8008466:	4603      	mov	r3, r0
 8008468:	4293      	cmp	r3, r2
 800846a:	d100      	bne.n	800846e <memset+0xa>
 800846c:	4770      	bx	lr
 800846e:	f803 1b01 	strb.w	r1, [r3], #1
 8008472:	e7f9      	b.n	8008468 <memset+0x4>

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
