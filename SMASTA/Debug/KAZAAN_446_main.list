
KAZAAN_446_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cdc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007ea4  08007ea4  00017ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f98  08007f98  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  08007f98  08007f98  00017f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa0  08007fa0  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08007fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000038  08007fe0  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08007fe0  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181c9  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be6  00000000  00000000  00038231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  0003bf38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023794  00000000  00000000  0003cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016699  00000000  00000000  0006070c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3de9  00000000  00000000  00076da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ab8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  0014abe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000038 	.word	0x20000038
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007e8c 	.word	0x08007e8c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000003c 	.word	0x2000003c
 8000204:	08007e8c 	.word	0x08007e8c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_uldivmod>:
 80009f4:	b953      	cbnz	r3, 8000a0c <__aeabi_uldivmod+0x18>
 80009f6:	b94a      	cbnz	r2, 8000a0c <__aeabi_uldivmod+0x18>
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf08      	it	eq
 80009fc:	2800      	cmpeq	r0, #0
 80009fe:	bf1c      	itt	ne
 8000a00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a08:	f000 b96e 	b.w	8000ce8 <__aeabi_idiv0>
 8000a0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a14:	f000 f806 	bl	8000a24 <__udivmoddi4>
 8000a18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a20:	b004      	add	sp, #16
 8000a22:	4770      	bx	lr

08000a24 <__udivmoddi4>:
 8000a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a28:	9d08      	ldr	r5, [sp, #32]
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	468c      	mov	ip, r1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f040 8083 	bne.w	8000b3a <__udivmoddi4+0x116>
 8000a34:	428a      	cmp	r2, r1
 8000a36:	4617      	mov	r7, r2
 8000a38:	d947      	bls.n	8000aca <__udivmoddi4+0xa6>
 8000a3a:	fab2 f282 	clz	r2, r2
 8000a3e:	b142      	cbz	r2, 8000a52 <__udivmoddi4+0x2e>
 8000a40:	f1c2 0020 	rsb	r0, r2, #32
 8000a44:	fa24 f000 	lsr.w	r0, r4, r0
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a50:	4094      	lsls	r4, r2
 8000a52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a56:	0c23      	lsrs	r3, r4, #16
 8000a58:	fbbc f6f8 	udiv	r6, ip, r8
 8000a5c:	fa1f fe87 	uxth.w	lr, r7
 8000a60:	fb08 c116 	mls	r1, r8, r6, ip
 8000a64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a68:	fb06 f10e 	mul.w	r1, r6, lr
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d909      	bls.n	8000a84 <__udivmoddi4+0x60>
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a76:	f080 8119 	bcs.w	8000cac <__udivmoddi4+0x288>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 8116 	bls.w	8000cac <__udivmoddi4+0x288>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	443b      	add	r3, r7
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	45a6      	cmp	lr, r4
 8000a9a:	d909      	bls.n	8000ab0 <__udivmoddi4+0x8c>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa2:	f080 8105 	bcs.w	8000cb0 <__udivmoddi4+0x28c>
 8000aa6:	45a6      	cmp	lr, r4
 8000aa8:	f240 8102 	bls.w	8000cb0 <__udivmoddi4+0x28c>
 8000aac:	3802      	subs	r0, #2
 8000aae:	443c      	add	r4, r7
 8000ab0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab4:	eba4 040e 	sub.w	r4, r4, lr
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa0>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xaa>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d150      	bne.n	8000b78 <__udivmoddi4+0x154>
 8000ad6:	1bcb      	subs	r3, r1, r7
 8000ad8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	2601      	movs	r6, #1
 8000ae2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ae6:	0c21      	lsrs	r1, r4, #16
 8000ae8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af0:	fb08 f30c 	mul.w	r3, r8, ip
 8000af4:	428b      	cmp	r3, r1
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0xe4>
 8000af8:	1879      	adds	r1, r7, r1
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0xe2>
 8000b00:	428b      	cmp	r3, r1
 8000b02:	f200 80e9 	bhi.w	8000cd8 <__udivmoddi4+0x2b4>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1ac9      	subs	r1, r1, r3
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x10c>
 8000b20:	193c      	adds	r4, r7, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x10a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80d9 	bhi.w	8000ce0 <__udivmoddi4+0x2bc>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e7bf      	b.n	8000aba <__udivmoddi4+0x96>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x12e>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <__udivmoddi4+0x282>
 8000b44:	2600      	movs	r6, #0
 8000b46:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	4631      	mov	r1, r6
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f683 	clz	r6, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d14a      	bne.n	8000bf0 <__udivmoddi4+0x1cc>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0x140>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80b8 	bhi.w	8000cd4 <__udivmoddi4+0x2b0>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0103 	sbc.w	r1, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	468c      	mov	ip, r1
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0a8      	beq.n	8000ac4 <__udivmoddi4+0xa0>
 8000b72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b76:	e7a5      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000b78:	f1c2 0320 	rsb	r3, r2, #32
 8000b7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b80:	4097      	lsls	r7, r2
 8000b82:	fa01 f002 	lsl.w	r0, r1, r2
 8000b86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b8a:	40d9      	lsrs	r1, r3
 8000b8c:	4330      	orrs	r0, r6
 8000b8e:	0c03      	lsrs	r3, r0, #16
 8000b90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f108 	mul.w	r1, r6, r8
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	fa04 f402 	lsl.w	r4, r4, r2
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x19c>
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000bb2:	f080 808d 	bcs.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 808a 	bls.w	8000cd0 <__udivmoddi4+0x2ac>
 8000bbc:	3e02      	subs	r6, #2
 8000bbe:	443b      	add	r3, r7
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b281      	uxth	r1, r0
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bd0:	fb00 f308 	mul.w	r3, r0, r8
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x1c4>
 8000bd8:	1879      	adds	r1, r7, r1
 8000bda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000bde:	d273      	bcs.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d971      	bls.n	8000cc8 <__udivmoddi4+0x2a4>
 8000be4:	3802      	subs	r0, #2
 8000be6:	4439      	add	r1, r7
 8000be8:	1acb      	subs	r3, r1, r3
 8000bea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bee:	e778      	b.n	8000ae2 <__udivmoddi4+0xbe>
 8000bf0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bf4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bf8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c02:	fa01 f306 	lsl.w	r3, r1, r6
 8000c06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c0e:	431f      	orrs	r7, r3
 8000c10:	0c3b      	lsrs	r3, r7, #16
 8000c12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c16:	fa1f f884 	uxth.w	r8, r4
 8000c1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c22:	fb09 fa08 	mul.w	sl, r9, r8
 8000c26:	458a      	cmp	sl, r1
 8000c28:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x220>
 8000c32:	1861      	adds	r1, r4, r1
 8000c34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c38:	d248      	bcs.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	d946      	bls.n	8000ccc <__udivmoddi4+0x2a8>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4421      	add	r1, r4
 8000c44:	eba1 010a 	sub.w	r1, r1, sl
 8000c48:	b2bf      	uxth	r7, r7
 8000c4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c56:	fb00 f808 	mul.w	r8, r0, r8
 8000c5a:	45b8      	cmp	r8, r7
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x24a>
 8000c5e:	19e7      	adds	r7, r4, r7
 8000c60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c64:	d22e      	bcs.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c66:	45b8      	cmp	r8, r7
 8000c68:	d92c      	bls.n	8000cc4 <__udivmoddi4+0x2a0>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4427      	add	r7, r4
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	eba7 0708 	sub.w	r7, r7, r8
 8000c76:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7a:	454f      	cmp	r7, r9
 8000c7c:	46c6      	mov	lr, r8
 8000c7e:	4649      	mov	r1, r9
 8000c80:	d31a      	bcc.n	8000cb8 <__udivmoddi4+0x294>
 8000c82:	d017      	beq.n	8000cb4 <__udivmoddi4+0x290>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x27a>
 8000c86:	ebb3 020e 	subs.w	r2, r3, lr
 8000c8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	ea4c 0202 	orr.w	r2, ip, r2
 8000c98:	40f7      	lsrs	r7, r6
 8000c9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e70b      	b.n	8000ac4 <__udivmoddi4+0xa0>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0x60>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6fd      	b.n	8000ab0 <__udivmoddi4+0x8c>
 8000cb4:	4543      	cmp	r3, r8
 8000cb6:	d2e5      	bcs.n	8000c84 <__udivmoddi4+0x260>
 8000cb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0x260>
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	e7d2      	b.n	8000c6e <__udivmoddi4+0x24a>
 8000cc8:	4660      	mov	r0, ip
 8000cca:	e78d      	b.n	8000be8 <__udivmoddi4+0x1c4>
 8000ccc:	4681      	mov	r9, r0
 8000cce:	e7b9      	b.n	8000c44 <__udivmoddi4+0x220>
 8000cd0:	4666      	mov	r6, ip
 8000cd2:	e775      	b.n	8000bc0 <__udivmoddi4+0x19c>
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e74a      	b.n	8000b6e <__udivmoddi4+0x14a>
 8000cd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cdc:	4439      	add	r1, r7
 8000cde:	e713      	b.n	8000b08 <__udivmoddi4+0xe4>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	e724      	b.n	8000b30 <__udivmoddi4+0x10c>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <appInit>:
const int RearDetect_Pockets[2][6] = {
    {1,11,9,7,5,3}, //右方向回転(掘り当てと同じ)
    {12,2,4,6,8,10},  //左方向回転(掘り当てと同じ)
};

int appInit(void){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	Lottery_1st2nd_SetSpeed(0);
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f000 fd71 	bl	80017d8 <Lottery_1st2nd_SetSpeed>
	Lottery_3rd_SetSpeed(0);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 fda6 	bl	8001848 <Lottery_3rd_SetSpeed>
	Lottery_JP_SetSpeed(0,0);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 fde2 	bl	80018c8 <Lottery_JP_SetSpeed>
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <appTask>:

int appTask(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	Encoder_1st();
 8000d12:	f000 fbc3 	bl	800149c <Encoder_1st>
	Encoder_2nd();
 8000d16:	f000 fc29 	bl	800156c <Encoder_2nd>
	Encoder_3rd();
 8000d1a:	f000 fc8f 	bl	800163c <Encoder_3rd>
	Encoder_JP();
 8000d1e:	f000 fcf5 	bl	800170c <Encoder_JP>
	//D_Mess_printf("%d\n", G_System_counter);
	//D_PWM_Set(1,100);
	//D_PWM_Set(2,100);
	//IO_SET_BLDC2_DIR();
	if(IO_READ_USERBUTTON()){
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4864      	ldr	r0, [pc, #400]	; (8000eb8 <appTask+0x1ac>)
 8000d28:	f001 fcfd 	bl	8002726 <D_GPIO_Read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f083 0301 	eor.w	r3, r3, #1
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d007      	beq.n	8000d48 <appTask+0x3c>
		IO_SET_USERLED();
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4860      	ldr	r0, [pc, #384]	; (8000ebc <appTask+0x1b0>)
 8000d3c:	f001 fcd3 	bl	80026e6 <D_GPIO_Set>
		//D_PWM_Set(BLDC3,300);
		//IO_SET_JP_LED();
		//Lottery_1st2nd_SetSpeed(500);
		//Lottery_3rd_SetSpeed(800);
		//Lottery_JP_SetSpeed(300,0);
		JPC_stations[0] = 1;
 8000d40:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <appTask+0x1b4>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	e00a      	b.n	8000d5e <appTask+0x52>
		//Lottery_JP_SetSpeed(JPC_MAX_SPEED,0);

		//JP_Lift_Down();
	}else{
		IO_RESET_USERLED();
 8000d48:	2120      	movs	r1, #32
 8000d4a:	485c      	ldr	r0, [pc, #368]	; (8000ebc <appTask+0x1b0>)
 8000d4c:	f001 fcdb 	bl	8002706 <D_GPIO_Reset>
		//D_PWM_Set(BLDC1,300);
		//D_PWM_Set(BLDC2,3000);
		//D_PWM_Set(BLDC3,3500);
		//IO_RESET_JP_LED();
		
		Lottery_1st2nd_SetSpeed(100);
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f000 fd41 	bl	80017d8 <Lottery_1st2nd_SetSpeed>
		Lottery_3rd_SetSpeed(300);
 8000d56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d5a:	f000 fd75 	bl	8001848 <Lottery_3rd_SetSpeed>
		//Lottery_JP_SetSpeed(10,0);

		//JP_Lift_Up();
	}

	JPC_Processing(JPC_stations[0],JPC_SLOW_SPEED,1);
 8000d5e:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <appTask+0x1b4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2201      	movs	r2, #1
 8000d64:	2108      	movs	r1, #8
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f916 	bl	8000f98 <JPC_Processing>

	int16_t debug_bits = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	80fb      	strh	r3, [r7, #6]
	debug_bits &= 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_1ST_HOME() << 5);
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	4853      	ldr	r0, [pc, #332]	; (8000ec4 <appTask+0x1b8>)
 8000d78:	f001 fcd5 	bl	8002726 <D_GPIO_Read>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	015b      	lsls	r3, r3, #5
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_1ST_ENC() << 4);
 8000d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8c:	484b      	ldr	r0, [pc, #300]	; (8000ebc <appTask+0x1b0>)
 8000d8e:	f001 fcca 	bl	8002726 <D_GPIO_Read>
 8000d92:	4603      	mov	r3, r0
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_2ND_HOME() << 3);
 8000d9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da2:	4845      	ldr	r0, [pc, #276]	; (8000eb8 <appTask+0x1ac>)
 8000da4:	f001 fcbf 	bl	8002726 <D_GPIO_Read>
 8000da8:	4603      	mov	r3, r0
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	b21a      	sxth	r2, r3
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_2ND_ENC() << 2);
 8000db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db8:	483f      	ldr	r0, [pc, #252]	; (8000eb8 <appTask+0x1ac>)
 8000dba:	f001 fcb4 	bl	8002726 <D_GPIO_Read>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_3RD_HOME() << 1);
 8000dca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dce:	483a      	ldr	r0, [pc, #232]	; (8000eb8 <appTask+0x1ac>)
 8000dd0:	f001 fca9 	bl	8002726 <D_GPIO_Read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_3RD_ENC() << 0);
 8000de0:	2104      	movs	r1, #4
 8000de2:	4839      	ldr	r0, [pc, #228]	; (8000ec8 <appTask+0x1bc>)
 8000de4:	f001 fc9f 	bl	8002726 <D_GPIO_Read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_HOME() << 13);
 8000df2:	2102      	movs	r1, #2
 8000df4:	4831      	ldr	r0, [pc, #196]	; (8000ebc <appTask+0x1b0>)
 8000df6:	f001 fc96 	bl	8002726 <D_GPIO_Read>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	035b      	lsls	r3, r3, #13
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_ENC() << 12);
 8000e06:	2110      	movs	r1, #16
 8000e08:	482c      	ldr	r0, [pc, #176]	; (8000ebc <appTask+0x1b0>)
 8000e0a:	f001 fc8c 	bl	8002726 <D_GPIO_Read>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	031b      	lsls	r3, r3, #12
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_FRONT() << 11);
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	4826      	ldr	r0, [pc, #152]	; (8000eb8 <appTask+0x1ac>)
 8000e1e:	f001 fc82 	bl	8002726 <D_GPIO_Read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	02db      	lsls	r3, r3, #11
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_REAR() << 10);
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4821      	ldr	r0, [pc, #132]	; (8000eb8 <appTask+0x1ac>)
 8000e32:	f001 fc78 	bl	8002726 <D_GPIO_Read>
 8000e36:	4603      	mov	r3, r0
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_UPPER() << 9);
 8000e42:	2108      	movs	r1, #8
 8000e44:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <appTask+0x1ac>)
 8000e46:	f001 fc6e 	bl	8002726 <D_GPIO_Read>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	80fb      	strh	r3, [r7, #6]
	debug_bits |= ((int)IO_READ_JP_LOWER() << 8);
 8000e56:	2104      	movs	r1, #4
 8000e58:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <appTask+0x1ac>)
 8000e5a:	f001 fc64 	bl	8002726 <D_GPIO_Read>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
	D_Mess_printf("\033[1;1H");
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <appTask+0x1c0>)
 8000e6c:	f001 fc70 	bl	8002750 <D_Mess_printf>
	D_Mess_printf("%016b\n", debug_bits);
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4816      	ldr	r0, [pc, #88]	; (8000ed0 <appTask+0x1c4>)
 8000e78:	f001 fc6a 	bl	8002750 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_1st);
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <appTask+0x1c8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <appTask+0x1cc>)
 8000e84:	f001 fc64 	bl	8002750 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_2nd);
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <appTask+0x1d0>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <appTask+0x1cc>)
 8000e90:	f001 fc5e 	bl	8002750 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_3rd);
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <appTask+0x1d4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <appTask+0x1cc>)
 8000e9c:	f001 fc58 	bl	8002750 <D_Mess_printf>
	D_Mess_printf("%02d\n",Encoder_Num_JP);
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <appTask+0x1d8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <appTask+0x1cc>)
 8000ea8:	f001 fc52 	bl	8002750 <D_Mess_printf>


	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	20000054 	.word	0x20000054
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	08007eec 	.word	0x08007eec
 8000ed0:	08007ef4 	.word	0x08007ef4
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	08007efc 	.word	0x08007efc
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	2000000c 	.word	0x2000000c

08000ee8 <JPC_Pocket_cal>:


static int JPC_Pocket_cal(int front, int rear, int direction){
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	int return_num = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
	for(int i=0; i<6; i++){
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	e021      	b.n	8000f42 <JPC_Pocket_cal+0x5a>
		if(front == FrontDetect_Pockets[direction][i] && rear == RearDetect_Pockets[direction][i]){
 8000efe:	4916      	ldr	r1, [pc, #88]	; (8000f58 <JPC_Pocket_cal+0x70>)
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d111      	bne.n	8000f3c <JPC_Pocket_cal+0x54>
 8000f18:	4910      	ldr	r1, [pc, #64]	; (8000f5c <JPC_Pocket_cal+0x74>)
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	4413      	add	r3, r2
 8000f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d104      	bne.n	8000f3c <JPC_Pocket_cal+0x54>
			return_num = i+1;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
			return return_num;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	e006      	b.n	8000f4a <JPC_Pocket_cal+0x62>
	for(int i=0; i<6; i++){
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b05      	cmp	r3, #5
 8000f46:	ddda      	ble.n	8000efe <JPC_Pocket_cal+0x16>
		}
	}
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	08007f18 	.word	0x08007f18
 8000f5c:	08007f48 	.word	0x08007f48

08000f60 <JPC_Pocket>:

static int JPC_Pocket(int num){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	int return_num = num;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
	if(return_num < 1){
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	dc02      	bgt.n	8000f78 <JPC_Pocket+0x18>
		return_num += 12;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	330c      	adds	r3, #12
 8000f76:	60fb      	str	r3, [r7, #12]
	}
	if(return_num > 12){
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b0c      	cmp	r3, #12
 8000f7c:	dd02      	ble.n	8000f84 <JPC_Pocket+0x24>
		return_num -= 12;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3b0c      	subs	r3, #12
 8000f82:	60fb      	str	r3, [r7, #12]
	}
}
 8000f84:	bf00      	nop
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	0000      	movs	r0, r0
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <JPC_Processing>:

static int JPC_Processing(int station, int speed, int direction){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	static int Front_detect_num = 0;
	static int IN_Pocket = 0;
	static int Slowing_EncNum = 0;
	static int Stop_EncNum = 0;
	static bool _slowing = false;
	if(station == 0){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d118      	bne.n	8000fdc <JPC_Processing+0x44>
		RecentTime = G_System_counter;
 8000faa:	4b9b      	ldr	r3, [pc, #620]	; (8001218 <JPC_Processing+0x280>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	4b9a      	ldr	r3, [pc, #616]	; (800121c <JPC_Processing+0x284>)
 8000fb2:	601a      	str	r2, [r3, #0]
		Front_detect_num = 0;
 8000fb4:	4b9a      	ldr	r3, [pc, #616]	; (8001220 <JPC_Processing+0x288>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
		Rear_detect_num = 0;
 8000fba:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <JPC_Processing+0x28c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
		IN_Pocket = 0;
 8000fc0:	4b99      	ldr	r3, [pc, #612]	; (8001228 <JPC_Processing+0x290>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
		Slowing_EncNum = 0;
 8000fc6:	4b99      	ldr	r3, [pc, #612]	; (800122c <JPC_Processing+0x294>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
		Stop_EncNum = 0;
 8000fcc:	4b98      	ldr	r3, [pc, #608]	; (8001230 <JPC_Processing+0x298>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
		_slowing = false;
 8000fd2:	4b98      	ldr	r3, [pc, #608]	; (8001234 <JPC_Processing+0x29c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
		return 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e1f3      	b.n	80013c4 <JPC_Processing+0x42c>
	}
	DeltaTime = G_System_counter - RecentTime;
 8000fdc:	4b8e      	ldr	r3, [pc, #568]	; (8001218 <JPC_Processing+0x280>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a8e      	ldr	r2, [pc, #568]	; (800121c <JPC_Processing+0x284>)
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b93      	ldr	r3, [pc, #588]	; (8001238 <JPC_Processing+0x2a0>)
 8000fea:	601a      	str	r2, [r3, #0]
	caseDeltaTime += DeltaTime;
 8000fec:	4b93      	ldr	r3, [pc, #588]	; (800123c <JPC_Processing+0x2a4>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b91      	ldr	r3, [pc, #580]	; (8001238 <JPC_Processing+0x2a0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a91      	ldr	r2, [pc, #580]	; (800123c <JPC_Processing+0x2a4>)
 8000ff8:	6013      	str	r3, [r2, #0]
	switch (JPC_state)
 8000ffa:	4b91      	ldr	r3, [pc, #580]	; (8001240 <JPC_Processing+0x2a8>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b10      	cmp	r3, #16
 8001000:	f200 81ca 	bhi.w	8001398 <JPC_Processing+0x400>
 8001004:	a201      	add	r2, pc, #4	; (adr r2, 800100c <JPC_Processing+0x74>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	08001051 	.word	0x08001051
 8001010:	0800106d 	.word	0x0800106d
 8001014:	08001097 	.word	0x08001097
 8001018:	080010b7 	.word	0x080010b7
 800101c:	080010d7 	.word	0x080010d7
 8001020:	080010eb 	.word	0x080010eb
 8001024:	08001117 	.word	0x08001117
 8001028:	0800119f 	.word	0x0800119f
 800102c:	080012cb 	.word	0x080012cb
 8001030:	08001399 	.word	0x08001399
 8001034:	08001399 	.word	0x08001399
 8001038:	08001399 	.word	0x08001399
 800103c:	08001399 	.word	0x08001399
 8001040:	08001399 	.word	0x08001399
 8001044:	08001399 	.word	0x08001399
 8001048:	08001355 	.word	0x08001355
 800104c:	0800137d 	.word	0x0800137d
	{
	case JPC_ROT_START_SLOW_1:
		Lottery_JP_SetSpeed(speed,direction);
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	68b8      	ldr	r0, [r7, #8]
 8001054:	f000 fc38 	bl	80018c8 <Lottery_JP_SetSpeed>
		caseDeltaTime = 0;
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <JPC_Processing+0x2a4>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
		JPC_state += 1;
 800105e:	4b78      	ldr	r3, [pc, #480]	; (8001240 <JPC_Processing+0x2a8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b76      	ldr	r3, [pc, #472]	; (8001240 <JPC_Processing+0x2a8>)
 8001068:	701a      	strb	r2, [r3, #0]
		break;
 800106a:	e1a6      	b.n	80013ba <JPC_Processing+0x422>

	case JPC_LED_ON:
		IO_SET_JP_LED();
 800106c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001070:	4874      	ldr	r0, [pc, #464]	; (8001244 <JPC_Processing+0x2ac>)
 8001072:	f001 fb38 	bl	80026e6 <D_GPIO_Set>
		if(caseDeltaTime >= 2000){
 8001076:	4b71      	ldr	r3, [pc, #452]	; (800123c <JPC_Processing+0x2a4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800107e:	f2c0 818d 	blt.w	800139c <JPC_Processing+0x404>
			caseDeltaTime = 0;
 8001082:	4b6e      	ldr	r3, [pc, #440]	; (800123c <JPC_Processing+0x2a4>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
			JPC_state += 1;
 8001088:	4b6d      	ldr	r3, [pc, #436]	; (8001240 <JPC_Processing+0x2a8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b6b      	ldr	r3, [pc, #428]	; (8001240 <JPC_Processing+0x2a8>)
 8001092:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001094:	e182      	b.n	800139c <JPC_Processing+0x404>
	case JPC_LIFT_UP:
		if(JP_Lift_Up()){
 8001096:	f000 fc61 	bl	800195c <JP_Lift_Up>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 817f 	beq.w	80013a0 <JPC_Processing+0x408>
			caseDeltaTime = 0;
 80010a2:	4b66      	ldr	r3, [pc, #408]	; (800123c <JPC_Processing+0x2a4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
			JPC_state += 1;
 80010a8:	4b65      	ldr	r3, [pc, #404]	; (8001240 <JPC_Processing+0x2a8>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b63      	ldr	r3, [pc, #396]	; (8001240 <JPC_Processing+0x2a8>)
 80010b2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010b4:	e174      	b.n	80013a0 <JPC_Processing+0x408>
	case JPC_WAIT_1:
		if(caseDeltaTime >= 2000){
 80010b6:	4b61      	ldr	r3, [pc, #388]	; (800123c <JPC_Processing+0x2a4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010be:	f2c0 8171 	blt.w	80013a4 <JPC_Processing+0x40c>
			caseDeltaTime = 0;
 80010c2:	4b5e      	ldr	r3, [pc, #376]	; (800123c <JPC_Processing+0x2a4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
			JPC_state += 1;
 80010c8:	4b5d      	ldr	r3, [pc, #372]	; (8001240 <JPC_Processing+0x2a8>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3301      	adds	r3, #1
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b5b      	ldr	r3, [pc, #364]	; (8001240 <JPC_Processing+0x2a8>)
 80010d2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80010d4:	e166      	b.n	80013a4 <JPC_Processing+0x40c>
	case JPC_WAIT_INPUT_1:
		//Wait station JPC Button
		caseDeltaTime = 0;
 80010d6:	4b59      	ldr	r3, [pc, #356]	; (800123c <JPC_Processing+0x2a4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
		JPC_state += 1;
 80010dc:	4b58      	ldr	r3, [pc, #352]	; (8001240 <JPC_Processing+0x2a8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b56      	ldr	r3, [pc, #344]	; (8001240 <JPC_Processing+0x2a8>)
 80010e6:	701a      	strb	r2, [r3, #0]
		break;
 80010e8:	e167      	b.n	80013ba <JPC_Processing+0x422>
	case JPC_ROT_START_1:
		Lottery_JP_SetSpeed(JPC_MAX_SPEED,direction);
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f44f 7061 	mov.w	r0, #900	; 0x384
 80010f0:	f000 fbea 	bl	80018c8 <Lottery_JP_SetSpeed>
		if(caseDeltaTime >= 10000){
 80010f4:	4b51      	ldr	r3, [pc, #324]	; (800123c <JPC_Processing+0x2a4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80010fc:	4293      	cmp	r3, r2
 80010fe:	f340 8153 	ble.w	80013a8 <JPC_Processing+0x410>
			caseDeltaTime = 0;
 8001102:	4b4e      	ldr	r3, [pc, #312]	; (800123c <JPC_Processing+0x2a4>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
			JPC_state += 1;
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <JPC_Processing+0x2a8>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	3301      	adds	r3, #1
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <JPC_Processing+0x2a8>)
 8001112:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001114:	e148      	b.n	80013a8 <JPC_Processing+0x410>
	case JPC_DECELERATION_1:
		if(caseDeltaTime >= JPC_DECELERATOIN_TIME){
 8001116:	4b49      	ldr	r3, [pc, #292]	; (800123c <JPC_Processing+0x2a4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800111e:	4293      	cmp	r3, r2
 8001120:	dd04      	ble.n	800112c <JPC_Processing+0x194>
			Lottery_JP_SetSpeed(JPC_MIN_SPEED,direction);
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	2032      	movs	r0, #50	; 0x32
 8001126:	f000 fbcf 	bl	80018c8 <Lottery_JP_SetSpeed>
 800112a:	e009      	b.n	8001140 <JPC_Processing+0x1a8>
		}else{
			int calSpeed = JPC_DecelerationSpeed_cal(caseDeltaTime);
 800112c:	4b43      	ldr	r3, [pc, #268]	; (800123c <JPC_Processing+0x2a4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f96d 	bl	8001410 <JPC_DecelerationSpeed_cal>
 8001136:	6178      	str	r0, [r7, #20]
			Lottery_JP_SetSpeed(calSpeed,direction);
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f000 fbc4 	bl	80018c8 <Lottery_JP_SetSpeed>
		}
		if(IO_READ_JP_FRONT() || IO_READ_JP_REAR()){
 8001140:	2102      	movs	r1, #2
 8001142:	4840      	ldr	r0, [pc, #256]	; (8001244 <JPC_Processing+0x2ac>)
 8001144:	f001 faef 	bl	8002726 <D_GPIO_Read>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d107      	bne.n	800115e <JPC_Processing+0x1c6>
 800114e:	2101      	movs	r1, #1
 8001150:	483c      	ldr	r0, [pc, #240]	; (8001244 <JPC_Processing+0x2ac>)
 8001152:	f001 fae8 	bl	8002726 <D_GPIO_Read>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8127 	beq.w	80013ac <JPC_Processing+0x414>
			caseDeltaTime = 0;
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <JPC_Processing+0x2a4>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
			JPC_state += 1;
 8001164:	4b36      	ldr	r3, [pc, #216]	; (8001240 <JPC_Processing+0x2a8>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b34      	ldr	r3, [pc, #208]	; (8001240 <JPC_Processing+0x2a8>)
 800116e:	701a      	strb	r2, [r3, #0]
			Lottery_JP_SetSpeed(JPC_MIN_SPEED,direction);
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	2032      	movs	r0, #50	; 0x32
 8001174:	f000 fba8 	bl	80018c8 <Lottery_JP_SetSpeed>
			Front_detect_num = 0;
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <JPC_Processing+0x288>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
			Rear_detect_num = 0;
 800117e:	4b29      	ldr	r3, [pc, #164]	; (8001224 <JPC_Processing+0x28c>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
			IN_Pocket = 0;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <JPC_Processing+0x290>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
			Slowing_EncNum = 0;
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <JPC_Processing+0x294>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
			Stop_EncNum = 0;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <JPC_Processing+0x298>)
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
			_slowing = false;
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <JPC_Processing+0x29c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800119c:	e106      	b.n	80013ac <JPC_Processing+0x414>
	case JPC_JUDGE_1:
		if(Front_detect_num != 0 && Rear_detect_num != 0){
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <JPC_Processing+0x288>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d077      	beq.n	8001296 <JPC_Processing+0x2fe>
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <JPC_Processing+0x28c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d073      	beq.n	8001296 <JPC_Processing+0x2fe>
			IN_Pocket = JPC_Pocket_cal(Front_detect_num, Rear_detect_num, direction);
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <JPC_Processing+0x288>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <JPC_Processing+0x28c>)
 80011b4:	6811      	ldr	r1, [r2, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fe95 	bl	8000ee8 <JPC_Pocket_cal>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a19      	ldr	r2, [pc, #100]	; (8001228 <JPC_Processing+0x290>)
 80011c2:	6013      	str	r3, [r2, #0]
			if(caseDeltaTime >= 1500){
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <JPC_Processing+0x2a4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f240 52db 	movw	r2, #1499	; 0x5db
 80011cc:	4293      	cmp	r3, r2
 80011ce:	dd55      	ble.n	800127c <JPC_Processing+0x2e4>
				caseDeltaTime = 0;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <JPC_Processing+0x2a4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
				JPC_state += 1;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <JPC_Processing+0x2a8>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <JPC_Processing+0x2a8>)
 80011e0:	701a      	strb	r2, [r3, #0]
				if(direction == 0){
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d12f      	bne.n	8001248 <JPC_Processing+0x2b0>
					Stop_EncNum = JPC_Pocket(Front_detect_num + (station-1)*3);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	441a      	add	r2, r3
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <JPC_Processing+0x288>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff feb1 	bl	8000f60 <JPC_Pocket>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <JPC_Processing+0x298>)
 8001202:	6013      	str	r3, [r2, #0]
					Slowing_EncNum = JPC_Pocket(Stop_EncNum + 1);
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <JPC_Processing+0x298>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3301      	adds	r3, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fea8 	bl	8000f60 <JPC_Pocket>
 8001210:	4603      	mov	r3, r0
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <JPC_Processing+0x294>)
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e031      	b.n	800127c <JPC_Processing+0x2e4>
 8001218:	200000cc 	.word	0x200000cc
 800121c:	20000064 	.word	0x20000064
 8001220:	20000068 	.word	0x20000068
 8001224:	2000006c 	.word	0x2000006c
 8001228:	20000070 	.word	0x20000070
 800122c:	20000074 	.word	0x20000074
 8001230:	20000078 	.word	0x20000078
 8001234:	2000007c 	.word	0x2000007c
 8001238:	20000080 	.word	0x20000080
 800123c:	20000084 	.word	0x20000084
 8001240:	20000088 	.word	0x20000088
 8001244:	40020800 	.word	0x40020800
				}else if(direction == 1){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d116      	bne.n	800127c <JPC_Processing+0x2e4>
					Stop_EncNum = JPC_Pocket(Front_detect_num - (station-1)*3);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3b01      	subs	r3, #1
 8001252:	461a      	mov	r2, r3
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <JPC_Processing+0x440>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe7e 	bl	8000f60 <JPC_Pocket>
 8001264:	4603      	mov	r3, r0
 8001266:	4a5d      	ldr	r2, [pc, #372]	; (80013dc <JPC_Processing+0x444>)
 8001268:	6013      	str	r3, [r2, #0]
					Slowing_EncNum = JPC_Pocket(Stop_EncNum + 1);
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <JPC_Processing+0x444>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe75 	bl	8000f60 <JPC_Pocket>
 8001276:	4603      	mov	r3, r0
 8001278:	4a59      	ldr	r2, [pc, #356]	; (80013e0 <JPC_Processing+0x448>)
 800127a:	6013      	str	r3, [r2, #0]
				}
			}
			D_Mess_printf("JPC IN [%02d][%s]\n",IN_Pocket,JP_PocketName[IN_Pocket-1]);
 800127c:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <JPC_Processing+0x44c>)
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <JPC_Processing+0x44c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3b01      	subs	r3, #1
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <JPC_Processing+0x450>)
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	461a      	mov	r2, r3
 800128e:	4857      	ldr	r0, [pc, #348]	; (80013ec <JPC_Processing+0x454>)
 8001290:	f001 fa5e 	bl	8002750 <D_Mess_printf>
			caseDeltaTime = 0;
		}
		//D_Mess_printf("Front [%02d]\nRear  [%02d]\n",Front_detect_num, Rear_detect_num);
		//caseDeltaTime = 0;
		//JPC_state += 1;
		break;
 8001294:	e091      	b.n	80013ba <JPC_Processing+0x422>
			if(IO_READ_JP_FRONT()){
 8001296:	2102      	movs	r1, #2
 8001298:	4855      	ldr	r0, [pc, #340]	; (80013f0 <JPC_Processing+0x458>)
 800129a:	f001 fa44 	bl	8002726 <D_GPIO_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <JPC_Processing+0x314>
				Front_detect_num = Encoder_Num_JP;
 80012a4:	4b53      	ldr	r3, [pc, #332]	; (80013f4 <JPC_Processing+0x45c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a4b      	ldr	r2, [pc, #300]	; (80013d8 <JPC_Processing+0x440>)
 80012aa:	6013      	str	r3, [r2, #0]
			if(IO_READ_JP_REAR()){
 80012ac:	2101      	movs	r1, #1
 80012ae:	4850      	ldr	r0, [pc, #320]	; (80013f0 <JPC_Processing+0x458>)
 80012b0:	f001 fa39 	bl	8002726 <D_GPIO_Read>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <JPC_Processing+0x32a>
				Rear_detect_num = Encoder_Num_JP;
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <JPC_Processing+0x45c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a4e      	ldr	r2, [pc, #312]	; (80013f8 <JPC_Processing+0x460>)
 80012c0:	6013      	str	r3, [r2, #0]
			caseDeltaTime = 0;
 80012c2:	4b4e      	ldr	r3, [pc, #312]	; (80013fc <JPC_Processing+0x464>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
		break;
 80012c8:	e077      	b.n	80013ba <JPC_Processing+0x422>
	case JPC_STOP_1:
		if(!_slowing){
 80012ca:	4b4d      	ldr	r3, [pc, #308]	; (8001400 <JPC_Processing+0x468>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	f083 0301 	eor.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00c      	beq.n	80012f2 <JPC_Processing+0x35a>
			if(Encoder_Num_JP == Slowing_EncNum){
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <JPC_Processing+0x45c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <JPC_Processing+0x448>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d165      	bne.n	80013b0 <JPC_Processing+0x418>
				_slowing = true;
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <JPC_Processing+0x468>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
				caseDeltaTime = 0;
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <JPC_Processing+0x464>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
				caseDeltaTime = 0;
				//JPC_state += 1;
				JPC_state = JPC_LED_OFF;
			}
		}
		break;
 80012f0:	e05e      	b.n	80013b0 <JPC_Processing+0x418>
			if(caseDeltaTime <= 1500){
 80012f2:	4b42      	ldr	r3, [pc, #264]	; (80013fc <JPC_Processing+0x464>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012fa:	4293      	cmp	r3, r2
 80012fc:	dc16      	bgt.n	800132c <JPC_Processing+0x394>
				Lottery_JP_SetSpeed(JPC_MIN_SPEED - (int)(((double)(JPC_MIN_SPEED - JPC_SLOW_SPEED)/1500.0)*(double)caseDeltaTime),direction);
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <JPC_Processing+0x464>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f8d2 	bl	80004ac <__aeabi_i2d>
 8001308:	a331      	add	r3, pc, #196	; (adr r3, 80013d0 <JPC_Processing+0x438>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f937 	bl	8000580 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fb43 	bl	80009a4 <__aeabi_d2iz>
 800131e:	4603      	mov	r3, r0
 8001320:	f1c3 0332 	rsb	r3, r3, #50	; 0x32
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 face 	bl	80018c8 <Lottery_JP_SetSpeed>
			if(Encoder_Num_JP == Stop_EncNum){
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <JPC_Processing+0x45c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <JPC_Processing+0x444>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d13b      	bne.n	80013b0 <JPC_Processing+0x418>
				Lottery_JP_SetSpeed(0,direction);
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	2000      	movs	r0, #0
 800133c:	f000 fac4 	bl	80018c8 <Lottery_JP_SetSpeed>
				_slowing = false;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <JPC_Processing+0x468>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
				caseDeltaTime = 0;
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <JPC_Processing+0x464>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
				JPC_state = JPC_LED_OFF;
 800134c:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <JPC_Processing+0x46c>)
 800134e:	220f      	movs	r2, #15
 8001350:	701a      	strb	r2, [r3, #0]
		break;
 8001352:	e02d      	b.n	80013b0 <JPC_Processing+0x418>
	case JPC_LED_OFF:
		if(caseDeltaTime >= 2000){
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <JPC_Processing+0x464>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800135c:	db2a      	blt.n	80013b4 <JPC_Processing+0x41c>
			IO_RESET_JP_LED();
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <JPC_Processing+0x458>)
 8001364:	f001 f9cf 	bl	8002706 <D_GPIO_Reset>
			caseDeltaTime = 0;
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <JPC_Processing+0x464>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
			JPC_state += 1;
 800136e:	4b25      	ldr	r3, [pc, #148]	; (8001404 <JPC_Processing+0x46c>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <JPC_Processing+0x46c>)
 8001378:	701a      	strb	r2, [r3, #0]
		}
		//JPC_state = JPC_LIFT_DOWN;
		break;
 800137a:	e01b      	b.n	80013b4 <JPC_Processing+0x41c>
	case JPC_LIFT_DOWN:
		if(caseDeltaTime >= 500){
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <JPC_Processing+0x464>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001384:	db18      	blt.n	80013b8 <JPC_Processing+0x420>
			if(JP_Lift_Down()){
 8001386:	f000 fb0f 	bl	80019a8 <JP_Lift_Down>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <JPC_Processing+0x420>
				caseDeltaTime = 0;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <JPC_Processing+0x464>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
				//JPC_state += 1;
			}
		}
		break;
 8001396:	e00f      	b.n	80013b8 <JPC_Processing+0x420>

	default:
		break;
 8001398:	bf00      	nop
 800139a:	e00e      	b.n	80013ba <JPC_Processing+0x422>
		break;
 800139c:	bf00      	nop
 800139e:	e00c      	b.n	80013ba <JPC_Processing+0x422>
		break;
 80013a0:	bf00      	nop
 80013a2:	e00a      	b.n	80013ba <JPC_Processing+0x422>
		break;
 80013a4:	bf00      	nop
 80013a6:	e008      	b.n	80013ba <JPC_Processing+0x422>
		break;
 80013a8:	bf00      	nop
 80013aa:	e006      	b.n	80013ba <JPC_Processing+0x422>
		break;
 80013ac:	bf00      	nop
 80013ae:	e004      	b.n	80013ba <JPC_Processing+0x422>
		break;
 80013b0:	bf00      	nop
 80013b2:	e002      	b.n	80013ba <JPC_Processing+0x422>
		break;
 80013b4:	bf00      	nop
 80013b6:	e000      	b.n	80013ba <JPC_Processing+0x422>
		break;
 80013b8:	bf00      	nop
	}
	RecentTime = G_System_counter;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <JPC_Processing+0x470>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <JPC_Processing+0x474>)
 80013c2:	601a      	str	r2, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f3af 8000 	nop.w
 80013d0:	3126e979 	.word	0x3126e979
 80013d4:	3f9cac08 	.word	0x3f9cac08
 80013d8:	20000068 	.word	0x20000068
 80013dc:	20000078 	.word	0x20000078
 80013e0:	20000074 	.word	0x20000074
 80013e4:	20000070 	.word	0x20000070
 80013e8:	20000010 	.word	0x20000010
 80013ec:	08007f04 	.word	0x08007f04
 80013f0:	40020800 	.word	0x40020800
 80013f4:	2000000c 	.word	0x2000000c
 80013f8:	2000006c 	.word	0x2000006c
 80013fc:	20000084 	.word	0x20000084
 8001400:	2000007c 	.word	0x2000007c
 8001404:	20000088 	.word	0x20000088
 8001408:	200000cc 	.word	0x200000cc
 800140c:	20000064 	.word	0x20000064

08001410 <JPC_DecelerationSpeed_cal>:

static int JPC_DecelerationSpeed_cal(int time){
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	double x = ((double)JPC_DECELERATOIN_TIME-(double)time)/(double)JPC_DECELERATOIN_TIME;
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff f847 	bl	80004ac <__aeabi_i2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	a11c      	add	r1, pc, #112	; (adr r1, 8001494 <JPC_DecelerationSpeed_cal+0x84>)
 8001424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001428:	f7fe fef2 	bl	8000210 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	a317      	add	r3, pc, #92	; (adr r3, 8001494 <JPC_DecelerationSpeed_cal+0x84>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f9cb 	bl	80007d4 <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double f_x = x*x*x;
 8001446:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800144a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144e:	f7ff f897 	bl	8000580 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800145a:	f7ff f891 	bl	8000580 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int return_speed = JPC_MIN_SPEED + (int)((double)(JPC_MAX_SPEED - JPC_MIN_SPEED)*f_x);
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <JPC_DecelerationSpeed_cal+0x80>)
 800146c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001470:	f7ff f886 	bl	8000580 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fa92 	bl	80009a4 <__aeabi_d2iz>
 8001480:	4603      	mov	r3, r0
 8001482:	3332      	adds	r3, #50	; 0x32
 8001484:	60fb      	str	r3, [r7, #12]
	return return_speed;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	408a9000 	.word	0x408a9000
 8001494:	00000000 	.word	0x00000000
 8001498:	40d38800 	.word	0x40d38800

0800149c <Encoder_1st>:

static int Encoder_1st(void){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_1ST_ENC();
 80014a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a6:	482a      	ldr	r0, [pc, #168]	; (8001550 <Encoder_1st+0xb4>)
 80014a8:	f001 f93d 	bl	8002726 <D_GPIO_Read>
 80014ac:	4603      	mov	r3, r0
 80014ae:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_1ST_HOME();
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	4828      	ldr	r0, [pc, #160]	; (8001554 <Encoder_1st+0xb8>)
 80014b4:	f001 f937 	bl	8002726 <D_GPIO_Read>
 80014b8:	4603      	mov	r3, r0
 80014ba:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <Encoder_1st+0xbc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d005      	beq.n	80014d2 <Encoder_1st+0x36>
		enc_change_count++;
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <Encoder_1st+0xc0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a23      	ldr	r2, [pc, #140]	; (800155c <Encoder_1st+0xc0>)
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e002      	b.n	80014d8 <Encoder_1st+0x3c>
	}else{
		enc_change_count = 0;
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <Encoder_1st+0xc0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <Encoder_1st+0xc0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b04      	cmp	r3, #4
 80014de:	dd0d      	ble.n	80014fc <Encoder_1st+0x60>
		recent_enc_state = enc_state;
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <Encoder_1st+0xbc>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 80014e6:	4b1d      	ldr	r3, [pc, #116]	; (800155c <Encoder_1st+0xc0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d104      	bne.n	80014fc <Encoder_1st+0x60>
			Encoder_Num_1st++;
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <Encoder_1st+0xc4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <Encoder_1st+0xc4>)
 80014fa:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <Encoder_1st+0xc8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d005      	beq.n	8001512 <Encoder_1st+0x76>
		home_change_count++;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <Encoder_1st+0xcc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <Encoder_1st+0xcc>)
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e002      	b.n	8001518 <Encoder_1st+0x7c>
	}else{
		home_change_count = 0;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <Encoder_1st+0xcc>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <Encoder_1st+0xcc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b04      	cmp	r3, #4
 800151e:	dd0b      	ble.n	8001538 <Encoder_1st+0x9c>
		recent_home_state = home_state;
 8001520:	4a10      	ldr	r2, [pc, #64]	; (8001564 <Encoder_1st+0xc8>)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <Encoder_1st+0xcc>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d102      	bne.n	8001538 <Encoder_1st+0x9c>
			Encoder_Num_1st = 24;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <Encoder_1st+0xc4>)
 8001534:	2218      	movs	r2, #24
 8001536:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_1st > 24){
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <Encoder_1st+0xc4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b18      	cmp	r3, #24
 800153e:	dd02      	ble.n	8001546 <Encoder_1st+0xaa>
		Encoder_Num_1st = 1;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <Encoder_1st+0xc4>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]
	}
}
 8001546:	bf00      	nop
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	2000008c 	.word	0x2000008c
 800155c:	20000090 	.word	0x20000090
 8001560:	20000000 	.word	0x20000000
 8001564:	20000094 	.word	0x20000094
 8001568:	20000098 	.word	0x20000098

0800156c <Encoder_2nd>:

static int Encoder_2nd(void){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_2ND_ENC();
 8001572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001576:	482b      	ldr	r0, [pc, #172]	; (8001624 <Encoder_2nd+0xb8>)
 8001578:	f001 f8d5 	bl	8002726 <D_GPIO_Read>
 800157c:	4603      	mov	r3, r0
 800157e:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_2ND_HOME();
 8001580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001584:	4827      	ldr	r0, [pc, #156]	; (8001624 <Encoder_2nd+0xb8>)
 8001586:	f001 f8ce 	bl	8002726 <D_GPIO_Read>
 800158a:	4603      	mov	r3, r0
 800158c:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <Encoder_2nd+0xbc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	d005      	beq.n	80015a4 <Encoder_2nd+0x38>
		enc_change_count++;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <Encoder_2nd+0xc0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a23      	ldr	r2, [pc, #140]	; (800162c <Encoder_2nd+0xc0>)
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e002      	b.n	80015aa <Encoder_2nd+0x3e>
	}else{
		enc_change_count = 0;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <Encoder_2nd+0xc0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <Encoder_2nd+0xc0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	dd0d      	ble.n	80015ce <Encoder_2nd+0x62>
		recent_enc_state = enc_state;
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <Encoder_2nd+0xbc>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <Encoder_2nd+0xc0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d104      	bne.n	80015ce <Encoder_2nd+0x62>
			Encoder_Num_2nd++;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <Encoder_2nd+0xc4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a19      	ldr	r2, [pc, #100]	; (8001630 <Encoder_2nd+0xc4>)
 80015cc:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <Encoder_2nd+0xc8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d005      	beq.n	80015e4 <Encoder_2nd+0x78>
		home_change_count++;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <Encoder_2nd+0xcc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <Encoder_2nd+0xcc>)
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e002      	b.n	80015ea <Encoder_2nd+0x7e>
	}else{
		home_change_count = 0;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <Encoder_2nd+0xcc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <Encoder_2nd+0xcc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	dd0b      	ble.n	800160a <Encoder_2nd+0x9e>
		recent_home_state = home_state;
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <Encoder_2nd+0xc8>)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <Encoder_2nd+0xcc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d102      	bne.n	800160a <Encoder_2nd+0x9e>
			Encoder_Num_2nd = 15;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <Encoder_2nd+0xc4>)
 8001606:	220f      	movs	r2, #15
 8001608:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_2nd > 15){
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <Encoder_2nd+0xc4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b0f      	cmp	r3, #15
 8001610:	dd02      	ble.n	8001618 <Encoder_2nd+0xac>
		Encoder_Num_2nd = 1;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <Encoder_2nd+0xc4>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
	}
}
 8001618:	bf00      	nop
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40020800 	.word	0x40020800
 8001628:	2000009c 	.word	0x2000009c
 800162c:	200000a0 	.word	0x200000a0
 8001630:	20000004 	.word	0x20000004
 8001634:	200000a4 	.word	0x200000a4
 8001638:	200000a8 	.word	0x200000a8

0800163c <Encoder_3rd>:

static int Encoder_3rd(void){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_3RD_ENC();
 8001642:	2104      	movs	r1, #4
 8001644:	482a      	ldr	r0, [pc, #168]	; (80016f0 <Encoder_3rd+0xb4>)
 8001646:	f001 f86e 	bl	8002726 <D_GPIO_Read>
 800164a:	4603      	mov	r3, r0
 800164c:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_3RD_HOME();
 800164e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001652:	4828      	ldr	r0, [pc, #160]	; (80016f4 <Encoder_3rd+0xb8>)
 8001654:	f001 f867 	bl	8002726 <D_GPIO_Read>
 8001658:	4603      	mov	r3, r0
 800165a:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 800165c:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <Encoder_3rd+0xbc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d005      	beq.n	8001672 <Encoder_3rd+0x36>
		enc_change_count++;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <Encoder_3rd+0xc0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a23      	ldr	r2, [pc, #140]	; (80016fc <Encoder_3rd+0xc0>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e002      	b.n	8001678 <Encoder_3rd+0x3c>
	}else{
		enc_change_count = 0;
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <Encoder_3rd+0xc0>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <Encoder_3rd+0xc0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b04      	cmp	r3, #4
 800167e:	dd0d      	ble.n	800169c <Encoder_3rd+0x60>
		recent_enc_state = enc_state;
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <Encoder_3rd+0xbc>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <Encoder_3rd+0xc0>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d104      	bne.n	800169c <Encoder_3rd+0x60>
			Encoder_Num_3rd++;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <Encoder_3rd+0xc4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <Encoder_3rd+0xc4>)
 800169a:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <Encoder_3rd+0xc8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d005      	beq.n	80016b2 <Encoder_3rd+0x76>
		home_change_count++;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <Encoder_3rd+0xcc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a16      	ldr	r2, [pc, #88]	; (8001708 <Encoder_3rd+0xcc>)
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e002      	b.n	80016b8 <Encoder_3rd+0x7c>
	}else{
		home_change_count = 0;
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <Encoder_3rd+0xcc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <Encoder_3rd+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	dd0b      	ble.n	80016d8 <Encoder_3rd+0x9c>
		recent_home_state = home_state;
 80016c0:	4a10      	ldr	r2, [pc, #64]	; (8001704 <Encoder_3rd+0xc8>)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <Encoder_3rd+0xcc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <Encoder_3rd+0x9c>
			Encoder_Num_3rd = 6;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <Encoder_3rd+0xc4>)
 80016d4:	2206      	movs	r2, #6
 80016d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_3rd > 6){
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <Encoder_3rd+0xc4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b06      	cmp	r3, #6
 80016de:	dd02      	ble.n	80016e6 <Encoder_3rd+0xaa>
		Encoder_Num_3rd = 1;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <Encoder_3rd+0xc4>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
	}
}
 80016e6:	bf00      	nop
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40020800 	.word	0x40020800
 80016f8:	200000ac 	.word	0x200000ac
 80016fc:	200000b0 	.word	0x200000b0
 8001700:	20000008 	.word	0x20000008
 8001704:	200000b4 	.word	0x200000b4
 8001708:	200000b8 	.word	0x200000b8

0800170c <Encoder_JP>:


static int Encoder_JP(void){
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	static int enc_change_count = 0;
	static int home_change_count = 0;
	static int recent_enc_state = 0;
	static int recent_home_state = 0;
	int enc_state = (int)IO_READ_JP_ENC();
 8001712:	2110      	movs	r1, #16
 8001714:	482a      	ldr	r0, [pc, #168]	; (80017c0 <Encoder_JP+0xb4>)
 8001716:	f001 f806 	bl	8002726 <D_GPIO_Read>
 800171a:	4603      	mov	r3, r0
 800171c:	607b      	str	r3, [r7, #4]
	int home_state = (int)IO_READ_JP_HOME();
 800171e:	2102      	movs	r1, #2
 8001720:	4827      	ldr	r0, [pc, #156]	; (80017c0 <Encoder_JP+0xb4>)
 8001722:	f001 f800 	bl	8002726 <D_GPIO_Read>
 8001726:	4603      	mov	r3, r0
 8001728:	603b      	str	r3, [r7, #0]
	if(enc_state != recent_enc_state){
 800172a:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <Encoder_JP+0xb8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	429a      	cmp	r2, r3
 8001732:	d005      	beq.n	8001740 <Encoder_JP+0x34>
		enc_change_count++;
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <Encoder_JP+0xbc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <Encoder_JP+0xbc>)
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e002      	b.n	8001746 <Encoder_JP+0x3a>
	}else{
		enc_change_count = 0;
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <Encoder_JP+0xbc>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
	}
	if(enc_change_count >= 5){
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <Encoder_JP+0xbc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b04      	cmp	r3, #4
 800174c:	dd0d      	ble.n	800176a <Encoder_JP+0x5e>
		recent_enc_state = enc_state;
 800174e:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <Encoder_JP+0xb8>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6013      	str	r3, [r2, #0]
		enc_change_count = 0;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <Encoder_JP+0xbc>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
		if(enc_state == 1){
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d104      	bne.n	800176a <Encoder_JP+0x5e>
			Encoder_Num_JP++;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <Encoder_JP+0xc0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <Encoder_JP+0xc0>)
 8001768:	6013      	str	r3, [r2, #0]
		}
	}
	if(home_state != recent_home_state){
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <Encoder_JP+0xc4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d005      	beq.n	8001780 <Encoder_JP+0x74>
		home_change_count++;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <Encoder_JP+0xc8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <Encoder_JP+0xc8>)
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e002      	b.n	8001786 <Encoder_JP+0x7a>
	}else{
		home_change_count = 0;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <Encoder_JP+0xc8>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
	}
	if(home_change_count >= 5){
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <Encoder_JP+0xc8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b04      	cmp	r3, #4
 800178c:	dd0b      	ble.n	80017a6 <Encoder_JP+0x9a>
		recent_home_state = home_state;
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <Encoder_JP+0xc4>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6013      	str	r3, [r2, #0]
		home_change_count = 0;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <Encoder_JP+0xc8>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
		if(home_state == 1){
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <Encoder_JP+0x9a>
			Encoder_Num_JP = 12;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <Encoder_JP+0xc0>)
 80017a2:	220c      	movs	r2, #12
 80017a4:	601a      	str	r2, [r3, #0]
		}
	}
	if(Encoder_Num_JP > 12){
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <Encoder_JP+0xc0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	dd02      	ble.n	80017b4 <Encoder_JP+0xa8>
		Encoder_Num_JP = 1;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <Encoder_JP+0xc0>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
	}
}
 80017b4:	bf00      	nop
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40020000 	.word	0x40020000
 80017c4:	200000bc 	.word	0x200000bc
 80017c8:	200000c0 	.word	0x200000c0
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	200000c4 	.word	0x200000c4
 80017d4:	200000c8 	.word	0x200000c8

080017d8 <Lottery_1st2nd_SetSpeed>:


static void Lottery_1st2nd_SetSpeed(int speed){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	if(speed >= 1000) speed = 1000;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e6:	db02      	blt.n	80017ee <Lottery_1st2nd_SetSpeed+0x16>
 80017e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ec:	607b      	str	r3, [r7, #4]
	if(speed <= 0) speed = 0;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	dc01      	bgt.n	80017f8 <Lottery_1st2nd_SetSpeed+0x20>
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
	int setSpeed = (BLDC_MAX_SPEED / 1000.0) * speed;
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7fe fe57 	bl	80004ac <__aeabi_i2d>
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <Lottery_1st2nd_SetSpeed+0x68>)
 8001804:	f7fe febc 	bl	8000580 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f8c8 	bl	80009a4 <__aeabi_d2iz>
 8001814:	4603      	mov	r3, r0
 8001816:	60fb      	str	r3, [r7, #12]
	if(setSpeed == 0){
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d104      	bne.n	8001828 <Lottery_1st2nd_SetSpeed+0x50>
		IO_RESET_BLDC1_ENA();
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <Lottery_1st2nd_SetSpeed+0x6c>)
 8001822:	f000 ff60 	bl	80026e6 <D_GPIO_Set>
 8001826:	e003      	b.n	8001830 <Lottery_1st2nd_SetSpeed+0x58>
	}else{
		IO_SET_BLDC1_ENA();
 8001828:	2140      	movs	r1, #64	; 0x40
 800182a:	4806      	ldr	r0, [pc, #24]	; (8001844 <Lottery_1st2nd_SetSpeed+0x6c>)
 800182c:	f000 ff6b 	bl	8002706 <D_GPIO_Reset>
	}
	D_PWM_Set(BLDC1,setSpeed);
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	2004      	movs	r0, #4
 8001834:	f001 f9ba 	bl	8002bac <D_PWM_Set>
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40140000 	.word	0x40140000
 8001844:	40020800 	.word	0x40020800

08001848 <Lottery_3rd_SetSpeed>:

static void Lottery_3rd_SetSpeed(int speed){
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	IO_SET_BLDC2_DIR();
 8001850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001854:	481a      	ldr	r0, [pc, #104]	; (80018c0 <Lottery_3rd_SetSpeed+0x78>)
 8001856:	f000 ff46 	bl	80026e6 <D_GPIO_Set>
	if(speed >= 1000) speed = 1000;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001860:	db02      	blt.n	8001868 <Lottery_3rd_SetSpeed+0x20>
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	607b      	str	r3, [r7, #4]
	if(speed <= 0) speed = 0;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dc01      	bgt.n	8001872 <Lottery_3rd_SetSpeed+0x2a>
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
	int setSpeed = (BLDC_MAX_SPEED / 1000.0) * speed;
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fe1a 	bl	80004ac <__aeabi_i2d>
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <Lottery_3rd_SetSpeed+0x7c>)
 800187e:	f7fe fe7f 	bl	8000580 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f88b 	bl	80009a4 <__aeabi_d2iz>
 800188e:	4603      	mov	r3, r0
 8001890:	60fb      	str	r3, [r7, #12]
	if(setSpeed == 0){
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <Lottery_3rd_SetSpeed+0x5c>
		IO_RESET_BLDC2_ENA();
 8001898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <Lottery_3rd_SetSpeed+0x78>)
 800189e:	f000 ff22 	bl	80026e6 <D_GPIO_Set>
 80018a2:	e004      	b.n	80018ae <Lottery_3rd_SetSpeed+0x66>
	}else{
		IO_SET_BLDC2_ENA();
 80018a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <Lottery_3rd_SetSpeed+0x78>)
 80018aa:	f000 ff2c 	bl	8002706 <D_GPIO_Reset>
	}
	D_PWM_Set(BLDC2,setSpeed);
 80018ae:	68f9      	ldr	r1, [r7, #12]
 80018b0:	2002      	movs	r0, #2
 80018b2:	f001 f97b 	bl	8002bac <D_PWM_Set>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40140000 	.word	0x40140000

080018c8 <Lottery_JP_SetSpeed>:

static void Lottery_JP_SetSpeed(int speed, int direction){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
	if(speed >= 1000) speed = 1000;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018d8:	db02      	blt.n	80018e0 <Lottery_JP_SetSpeed+0x18>
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	607b      	str	r3, [r7, #4]
	if(speed <= 0) speed = 0;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dc01      	bgt.n	80018ea <Lottery_JP_SetSpeed+0x22>
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
	int setSpeed = (BLDC_MAX_SPEED / 1000.0) * speed;
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7fe fdde 	bl	80004ac <__aeabi_i2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <Lottery_JP_SetSpeed+0x8c>)
 80018f6:	f7fe fe43 	bl	8000580 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f84f 	bl	80009a4 <__aeabi_d2iz>
 8001906:	4603      	mov	r3, r0
 8001908:	60fb      	str	r3, [r7, #12]
	if(setSpeed == 0){
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <Lottery_JP_SetSpeed+0x54>
		IO_RESET_BLDC3_ENA();
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	4810      	ldr	r0, [pc, #64]	; (8001958 <Lottery_JP_SetSpeed+0x90>)
 8001916:	f000 fee6 	bl	80026e6 <D_GPIO_Set>
 800191a:	e004      	b.n	8001926 <Lottery_JP_SetSpeed+0x5e>
	}else{
		IO_SET_BLDC3_ENA();
 800191c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <Lottery_JP_SetSpeed+0x90>)
 8001922:	f000 fef0 	bl	8002706 <D_GPIO_Reset>
	}
	if(direction == 0){
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d104      	bne.n	8001936 <Lottery_JP_SetSpeed+0x6e>
		IO_RESET_BLDC3_DIR();
 800192c:	2104      	movs	r1, #4
 800192e:	480a      	ldr	r0, [pc, #40]	; (8001958 <Lottery_JP_SetSpeed+0x90>)
 8001930:	f000 fee9 	bl	8002706 <D_GPIO_Reset>
 8001934:	e006      	b.n	8001944 <Lottery_JP_SetSpeed+0x7c>
	}else if(direction == 1){
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d103      	bne.n	8001944 <Lottery_JP_SetSpeed+0x7c>
		IO_SET_BLDC3_DIR();
 800193c:	2104      	movs	r1, #4
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <Lottery_JP_SetSpeed+0x90>)
 8001940:	f000 fed1 	bl	80026e6 <D_GPIO_Set>
	}
	D_PWM_Set(BLDC3,setSpeed);
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	2001      	movs	r0, #1
 8001948:	f001 f930 	bl	8002bac <D_PWM_Set>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40140000 	.word	0x40140000
 8001958:	40020400 	.word	0x40020400

0800195c <JP_Lift_Up>:

static bool JP_Lift_Up(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	if(IO_READ_JP_UPPER()){
 8001960:	2108      	movs	r1, #8
 8001962:	480f      	ldr	r0, [pc, #60]	; (80019a0 <JP_Lift_Up+0x44>)
 8001964:	f000 fedf 	bl	8002726 <D_GPIO_Read>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <JP_Lift_Up+0x2a>
		IO_RESET_JPTOWER_ENA1();
 800196e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <JP_Lift_Up+0x48>)
 8001974:	f000 fec7 	bl	8002706 <D_GPIO_Reset>
		IO_RESET_JPTOWER_ENA2();
 8001978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197c:	4809      	ldr	r0, [pc, #36]	; (80019a4 <JP_Lift_Up+0x48>)
 800197e:	f000 fec2 	bl	8002706 <D_GPIO_Reset>
		return true;
 8001982:	2301      	movs	r3, #1
 8001984:	e00a      	b.n	800199c <JP_Lift_Up+0x40>
	}else{
		IO_SET_JPTOWER_ENA1();
 8001986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <JP_Lift_Up+0x48>)
 800198c:	f000 feab 	bl	80026e6 <D_GPIO_Set>
		IO_RESET_JPTOWER_ENA2();
 8001990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <JP_Lift_Up+0x48>)
 8001996:	f000 feb6 	bl	8002706 <D_GPIO_Reset>
		return false;
 800199a:	2300      	movs	r3, #0
	}
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020400 	.word	0x40020400

080019a8 <JP_Lift_Down>:

static bool JP_Lift_Down(void){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	if(IO_READ_JP_LOWER()){
 80019ac:	2104      	movs	r1, #4
 80019ae:	480f      	ldr	r0, [pc, #60]	; (80019ec <JP_Lift_Down+0x44>)
 80019b0:	f000 feb9 	bl	8002726 <D_GPIO_Read>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <JP_Lift_Down+0x2a>
		IO_RESET_JPTOWER_ENA1();
 80019ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019be:	480c      	ldr	r0, [pc, #48]	; (80019f0 <JP_Lift_Down+0x48>)
 80019c0:	f000 fea1 	bl	8002706 <D_GPIO_Reset>
		IO_RESET_JPTOWER_ENA2();
 80019c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019c8:	4809      	ldr	r0, [pc, #36]	; (80019f0 <JP_Lift_Down+0x48>)
 80019ca:	f000 fe9c 	bl	8002706 <D_GPIO_Reset>
		return true;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00a      	b.n	80019e8 <JP_Lift_Down+0x40>
	}else{
		IO_RESET_JPTOWER_ENA1();
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <JP_Lift_Down+0x48>)
 80019d8:	f000 fe95 	bl	8002706 <D_GPIO_Reset>
		IO_SET_JPTOWER_ENA2();
 80019dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <JP_Lift_Down+0x48>)
 80019e2:	f000 fe80 	bl	80026e6 <D_GPIO_Set>
		return false;
 80019e6:	2300      	movs	r3, #0
	}
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020400 	.word	0x40020400

080019f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f8:	f001 f908 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 f816 	bl	8001a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f000 f9f2 	bl	8001de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a04:	f000 f99a 	bl	8001d3c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001a08:	f000 f944 	bl	8001c94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a0c:	f000 f96c 	bl	8001ce8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a10:	f000 f87a 	bl	8001b08 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001a14:	f000 f8a6 	bl	8001b64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  D_PWM_Init();
 8001a18:	f001 f8b2 	bl	8002b80 <D_PWM_Init>

  appInit();
 8001a1c:	f7ff f966 	bl	8000cec <appInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  appTask();
 8001a20:	f7ff f974 	bl	8000d0c <appTask>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
//		  D_Mess_printf("tes2");
//		  D_Mess_flush();
	  }*/
	  D_Mess_flush();
 8001a24:	f000 feb4 	bl	8002790 <D_Mess_flush>
	  appTask();
 8001a28:	e7fa      	b.n	8001a20 <main+0x2c>
	...

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b094      	sub	sp, #80	; 0x50
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2234      	movs	r2, #52	; 0x34
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 fa1e 	bl	8007e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <SystemClock_Config+0xd4>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <SystemClock_Config+0xd4>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <SystemClock_Config+0xd4>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <SystemClock_Config+0xd8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <SystemClock_Config+0xd8>)
 8001a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <SystemClock_Config+0xd8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a94:	2310      	movs	r3, #16
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001aa4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 f8e2 	bl	8005c84 <HAL_RCC_OscConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001ac6:	f000 fa7f 	bl	8001fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aca:	230f      	movs	r3, #15
 8001acc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fe00 	bl	80056ec <HAL_RCC_ClockConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001af2:	f000 fa69 	bl	8001fc8 <Error_Handler>
  }
}
 8001af6:	bf00      	nop
 8001af8:	3750      	adds	r7, #80	; 0x50
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40007000 	.word	0x40007000

08001b08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <MX_I2C1_Init+0x54>)
 8001b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x58>)
 8001b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b20:	2220      	movs	r2, #32
 8001b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b44:	4804      	ldr	r0, [pc, #16]	; (8001b58 <MX_I2C1_Init+0x50>)
 8001b46:	f001 ffbb 	bl	8003ac0 <HAL_I2C_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b50:	f000 fa3a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000590 	.word	0x20000590
 8001b5c:	40005400 	.word	0x40005400
 8001b60:	000186a0 	.word	0x000186a0

08001b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 0320 	add.w	r3, r7, #32
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b94:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001b96:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <MX_TIM3_Init+0x12c>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001b9c:	2253      	movs	r2, #83	; 0x53
 8001b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001ba8:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bba:	4834      	ldr	r0, [pc, #208]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001bbc:	f004 fb00 	bl	80061c0 <HAL_TIM_Base_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001bc6:	f000 f9ff 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	482d      	ldr	r0, [pc, #180]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001bd8:	f004 fd24 	bl	8006624 <HAL_TIM_ConfigClockSource>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001be2:	f000 f9f1 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001be6:	4829      	ldr	r0, [pc, #164]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001be8:	f004 fb39 	bl	800625e <HAL_TIM_PWM_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001bf2:	f000 f9e9 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bfe:	f107 0320 	add.w	r3, r7, #32
 8001c02:	4619      	mov	r1, r3
 8001c04:	4821      	ldr	r0, [pc, #132]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001c06:	f005 f8e5 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c10:	f000 f9da 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c14:	2360      	movs	r3, #96	; 0x60
 8001c16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4818      	ldr	r0, [pc, #96]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001c2c:	f004 fc38 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001c36:	f000 f9c7 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4812      	ldr	r0, [pc, #72]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001c42:	f004 fc2d 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001c4c:	f000 f9bc 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2208      	movs	r2, #8
 8001c54:	4619      	mov	r1, r3
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001c58:	f004 fc22 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001c62:	f000 f9b1 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001c6e:	f004 fc17 	bl	80064a0 <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001c78:	f000 f9a6 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <MX_TIM3_Init+0x128>)
 8001c7e:	f000 fab1 	bl	80021e4 <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3738      	adds	r7, #56	; 0x38
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200005e4 	.word	0x200005e4
 8001c90:	40000400 	.word	0x40000400

08001c94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <MX_USART1_UART_Init+0x50>)
 8001c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f005 f8fe 	bl	8006ecc <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cd6:	f000 f977 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000074c 	.word	0x2000074c
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <MX_USART2_UART_Init+0x50>)
 8001cf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	220c      	movs	r2, #12
 8001d10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_USART2_UART_Init+0x4c>)
 8001d20:	f005 f8d4 	bl	8006ecc <HAL_UART_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d2a:	f000 f94d 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200007f0 	.word	0x200007f0
 8001d38:	40004400 	.word	0x40004400

08001d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_DMA_Init+0xa8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <MX_DMA_Init+0xa8>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <MX_DMA_Init+0xa8>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <MX_DMA_Init+0xa8>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <MX_DMA_Init+0xa8>)
 8001d68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_DMA_Init+0xa8>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	200b      	movs	r0, #11
 8001d80:	f001 f891 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d84:	200b      	movs	r0, #11
 8001d86:	f001 f8aa 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2010      	movs	r0, #16
 8001d90:	f001 f889 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d94:	2010      	movs	r0, #16
 8001d96:	f001 f8a2 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2011      	movs	r0, #17
 8001da0:	f001 f881 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001da4:	2011      	movs	r0, #17
 8001da6:	f001 f89a 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	202f      	movs	r0, #47	; 0x2f
 8001db0:	f001 f879 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001db4:	202f      	movs	r0, #47	; 0x2f
 8001db6:	f001 f892 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	203a      	movs	r0, #58	; 0x3a
 8001dc0:	f001 f871 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001dc4:	203a      	movs	r0, #58	; 0x3a
 8001dc6:	f001 f88a 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2046      	movs	r0, #70	; 0x46
 8001dd0:	f001 f869 	bl	8002ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001dd4:	2046      	movs	r0, #70	; 0x46
 8001dd6:	f001 f882 	bl	8002ede <HAL_NVIC_EnableIRQ>

}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a62      	ldr	r2, [pc, #392]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b60      	ldr	r3, [pc, #384]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a5b      	ldr	r2, [pc, #364]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	4b55      	ldr	r3, [pc, #340]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a54      	ldr	r2, [pc, #336]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b52      	ldr	r3, [pc, #328]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a4d      	ldr	r2, [pc, #308]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a46      	ldr	r2, [pc, #280]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <MX_GPIO_Init+0x1a8>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8001e90:	4840      	ldr	r0, [pc, #256]	; (8001f94 <MX_GPIO_Init+0x1ac>)
 8001e92:	f001 fdfb 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001e9c:	483e      	ldr	r0, [pc, #248]	; (8001f98 <MX_GPIO_Init+0x1b0>)
 8001e9e:	f001 fdf5 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f24d 0104 	movw	r1, #53252	; 0xd004
 8001ea8:	483c      	ldr	r0, [pc, #240]	; (8001f9c <MX_GPIO_Init+0x1b4>)
 8001eaa:	f001 fdef 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eb4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4834      	ldr	r0, [pc, #208]	; (8001f98 <MX_GPIO_Init+0x1b0>)
 8001ec6:	f001 fc35 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001eca:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001ece:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	482e      	ldr	r0, [pc, #184]	; (8001f98 <MX_GPIO_Init+0x1b0>)
 8001ee0:	f001 fc28 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 8001ee4:	f248 0312 	movw	r3, #32786	; 0x8012
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4826      	ldr	r0, [pc, #152]	; (8001f94 <MX_GPIO_Init+0x1ac>)
 8001efa:	f001 fc1b 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001efe:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	481f      	ldr	r0, [pc, #124]	; (8001f94 <MX_GPIO_Init+0x1ac>)
 8001f18:	f001 fc0c 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8001f1c:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8001f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4818      	ldr	r0, [pc, #96]	; (8001f98 <MX_GPIO_Init+0x1b0>)
 8001f36:	f001 fbfd 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001f3a:	f24d 0304 	movw	r3, #53252	; 0xd004
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <MX_GPIO_Init+0x1b4>)
 8001f54:	f001 fbee 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <MX_GPIO_Init+0x1b8>)
 8001f6c:	f001 fbe2 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	4806      	ldr	r0, [pc, #24]	; (8001f9c <MX_GPIO_Init+0x1b4>)
 8001f84:	f001 fbd6 	bl	8003734 <HAL_GPIO_Init>

}
 8001f88:	bf00      	nop
 8001f8a:	3728      	adds	r7, #40	; 0x28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020c00 	.word	0x40020c00

08001fa4 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(UartHandle);
  if(UartHandle->Instance == USART2){
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_UART_TxCpltCallback+0x20>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_UART_TxCpltCallback+0x16>
	  D_Mess_TransitionCompletedCallBack();
 8001fb6:	f000 fc1d 	bl	80027f4 <D_Mess_TransitionCompletedCallBack>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>
	...

08001fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_MspInit+0x4c>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_MspInit+0x4c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002012:	2007      	movs	r0, #7
 8002014:	f000 ff3c 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a50      	ldr	r2, [pc, #320]	; (8002184 <HAL_I2C_MspInit+0x160>)
 8002042:	4293      	cmp	r3, r2
 8002044:	f040 8099 	bne.w	800217a <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <HAL_I2C_MspInit+0x164>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a4d      	ldr	r2, [pc, #308]	; (8002188 <HAL_I2C_MspInit+0x164>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <HAL_I2C_MspInit+0x164>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	2312      	movs	r3, #18
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002076:	2304      	movs	r3, #4
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4842      	ldr	r0, [pc, #264]	; (800218c <HAL_I2C_MspInit+0x168>)
 8002082:	f001 fb57 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <HAL_I2C_MspInit+0x164>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a3e      	ldr	r2, [pc, #248]	; (8002188 <HAL_I2C_MspInit+0x164>)
 8002090:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b3c      	ldr	r3, [pc, #240]	; (8002188 <HAL_I2C_MspInit+0x164>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020a4:	4a3b      	ldr	r2, [pc, #236]	; (8002194 <HAL_I2C_MspInit+0x170>)
 80020a6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80020a8:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b0:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b6:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c4:	4b32      	ldr	r3, [pc, #200]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020d6:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020dc:	4b2c      	ldr	r3, [pc, #176]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80020e2:	482b      	ldr	r0, [pc, #172]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020e4:	f000 ff16 	bl	8002f14 <HAL_DMA_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80020ee:	f7ff ff6b 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a26      	ldr	r2, [pc, #152]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
 80020f8:	4a25      	ldr	r2, [pc, #148]	; (8002190 <HAL_I2C_MspInit+0x16c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002100:	4a26      	ldr	r2, [pc, #152]	; (800219c <HAL_I2C_MspInit+0x178>)
 8002102:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002106:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800210a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <HAL_I2C_MspInit+0x174>)
 800210e:	2240      	movs	r2, #64	; 0x40
 8002110:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <HAL_I2C_MspInit+0x174>)
 800211a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002122:	2200      	movs	r2, #0
 8002124:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <HAL_I2C_MspInit+0x174>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_I2C_MspInit+0x174>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800213e:	4816      	ldr	r0, [pc, #88]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002140:	f000 fee8 	bl	8002f14 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 800214a:	f7ff ff3d 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002152:	635a      	str	r2, [r3, #52]	; 0x34
 8002154:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_I2C_MspInit+0x174>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	201f      	movs	r0, #31
 8002160:	f000 fea1 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002164:	201f      	movs	r0, #31
 8002166:	f000 feba 	bl	8002ede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2020      	movs	r0, #32
 8002170:	f000 fe99 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002174:	2020      	movs	r0, #32
 8002176:	f000 feb2 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40005400 	.word	0x40005400
 8002188:	40023800 	.word	0x40023800
 800218c:	40020400 	.word	0x40020400
 8002190:	20000790 	.word	0x20000790
 8002194:	40026010 	.word	0x40026010
 8002198:	20000530 	.word	0x20000530
 800219c:	400260b8 	.word	0x400260b8

080021a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_TIM_Base_MspInit+0x3c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10d      	bne.n	80021ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_TIM_Base_MspInit+0x40>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_TIM_Base_MspInit+0x40>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_TIM_Base_MspInit+0x40>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a21      	ldr	r2, [pc, #132]	; (8002288 <HAL_TIM_MspPostInit+0xa4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d13b      	bne.n	800227e <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_TIM_MspPostInit+0xa8>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <HAL_TIM_MspPostInit+0xa8>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_TIM_MspPostInit+0xa8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_TIM_MspPostInit+0xa8>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_TIM_MspPostInit+0xa8>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_TIM_MspPostInit+0xa8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800223e:	23c0      	movs	r3, #192	; 0xc0
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800224e:	2302      	movs	r3, #2
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <HAL_TIM_MspPostInit+0xac>)
 800225a:	f001 fa6b 	bl	8003734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800225e:	2303      	movs	r3, #3
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800226e:	2302      	movs	r3, #2
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <HAL_TIM_MspPostInit+0xb0>)
 800227a:	f001 fa5b 	bl	8003734 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40000400 	.word	0x40000400
 800228c:	40023800 	.word	0x40023800
 8002290:	40020000 	.word	0x40020000
 8002294:	40020400 	.word	0x40020400

08002298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a97      	ldr	r2, [pc, #604]	; (8002514 <HAL_UART_MspInit+0x27c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	f040 8092 	bne.w	80023e0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	4b95      	ldr	r3, [pc, #596]	; (8002518 <HAL_UART_MspInit+0x280>)
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	4a94      	ldr	r2, [pc, #592]	; (8002518 <HAL_UART_MspInit+0x280>)
 80022c6:	f043 0310 	orr.w	r3, r3, #16
 80022ca:	6453      	str	r3, [r2, #68]	; 0x44
 80022cc:	4b92      	ldr	r3, [pc, #584]	; (8002518 <HAL_UART_MspInit+0x280>)
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <HAL_UART_MspInit+0x280>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4a8d      	ldr	r2, [pc, #564]	; (8002518 <HAL_UART_MspInit+0x280>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6313      	str	r3, [r2, #48]	; 0x30
 80022e8:	4b8b      	ldr	r3, [pc, #556]	; (8002518 <HAL_UART_MspInit+0x280>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002306:	2307      	movs	r3, #7
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 031c 	add.w	r3, r7, #28
 800230e:	4619      	mov	r1, r3
 8002310:	4882      	ldr	r0, [pc, #520]	; (800251c <HAL_UART_MspInit+0x284>)
 8002312:	f001 fa0f 	bl	8003734 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002316:	4b82      	ldr	r3, [pc, #520]	; (8002520 <HAL_UART_MspInit+0x288>)
 8002318:	4a82      	ldr	r2, [pc, #520]	; (8002524 <HAL_UART_MspInit+0x28c>)
 800231a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800231c:	4b80      	ldr	r3, [pc, #512]	; (8002520 <HAL_UART_MspInit+0x288>)
 800231e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002322:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002324:	4b7e      	ldr	r3, [pc, #504]	; (8002520 <HAL_UART_MspInit+0x288>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232a:	4b7d      	ldr	r3, [pc, #500]	; (8002520 <HAL_UART_MspInit+0x288>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002330:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <HAL_UART_MspInit+0x288>)
 8002332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002336:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002338:	4b79      	ldr	r3, [pc, #484]	; (8002520 <HAL_UART_MspInit+0x288>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800233e:	4b78      	ldr	r3, [pc, #480]	; (8002520 <HAL_UART_MspInit+0x288>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002344:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_UART_MspInit+0x288>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800234a:	4b75      	ldr	r3, [pc, #468]	; (8002520 <HAL_UART_MspInit+0x288>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002350:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_UART_MspInit+0x288>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002356:	4872      	ldr	r0, [pc, #456]	; (8002520 <HAL_UART_MspInit+0x288>)
 8002358:	f000 fddc 	bl	8002f14 <HAL_DMA_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002362:	f7ff fe31 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a6d      	ldr	r2, [pc, #436]	; (8002520 <HAL_UART_MspInit+0x288>)
 800236a:	639a      	str	r2, [r3, #56]	; 0x38
 800236c:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_UART_MspInit+0x288>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002372:	4b6d      	ldr	r3, [pc, #436]	; (8002528 <HAL_UART_MspInit+0x290>)
 8002374:	4a6d      	ldr	r2, [pc, #436]	; (800252c <HAL_UART_MspInit+0x294>)
 8002376:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002378:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <HAL_UART_MspInit+0x290>)
 800237a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <HAL_UART_MspInit+0x290>)
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_UART_MspInit+0x290>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b66      	ldr	r3, [pc, #408]	; (8002528 <HAL_UART_MspInit+0x290>)
 800238e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002392:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_UART_MspInit+0x290>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_UART_MspInit+0x290>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <HAL_UART_MspInit+0x290>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023a6:	4b60      	ldr	r3, [pc, #384]	; (8002528 <HAL_UART_MspInit+0x290>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ac:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <HAL_UART_MspInit+0x290>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023b2:	485d      	ldr	r0, [pc, #372]	; (8002528 <HAL_UART_MspInit+0x290>)
 80023b4:	f000 fdae 	bl	8002f14 <HAL_DMA_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80023be:	f7ff fe03 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_UART_MspInit+0x290>)
 80023c6:	635a      	str	r2, [r3, #52]	; 0x34
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_UART_MspInit+0x290>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	2025      	movs	r0, #37	; 0x25
 80023d4:	f000 fd67 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d8:	2025      	movs	r0, #37	; 0x25
 80023da:	f000 fd80 	bl	8002ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023de:	e095      	b.n	800250c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_UART_MspInit+0x298>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	f040 8090 	bne.w	800250c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	4b49      	ldr	r3, [pc, #292]	; (8002518 <HAL_UART_MspInit+0x280>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	4a48      	ldr	r2, [pc, #288]	; (8002518 <HAL_UART_MspInit+0x280>)
 80023f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fa:	6413      	str	r3, [r2, #64]	; 0x40
 80023fc:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_UART_MspInit+0x280>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	4b42      	ldr	r3, [pc, #264]	; (8002518 <HAL_UART_MspInit+0x280>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	4a41      	ldr	r2, [pc, #260]	; (8002518 <HAL_UART_MspInit+0x280>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6313      	str	r3, [r2, #48]	; 0x30
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_UART_MspInit+0x280>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002424:	230c      	movs	r3, #12
 8002426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002430:	2303      	movs	r3, #3
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002434:	2307      	movs	r3, #7
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f107 031c 	add.w	r3, r7, #28
 800243c:	4619      	mov	r1, r3
 800243e:	4837      	ldr	r0, [pc, #220]	; (800251c <HAL_UART_MspInit+0x284>)
 8002440:	f001 f978 	bl	8003734 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002444:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002446:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <HAL_UART_MspInit+0x2a0>)
 8002448:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800244a:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_UART_MspInit+0x29c>)
 800244c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002450:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <HAL_UART_MspInit+0x29c>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002464:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002468:	2200      	movs	r2, #0
 800246a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_UART_MspInit+0x29c>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002474:	2200      	movs	r2, #0
 8002476:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_UART_MspInit+0x29c>)
 800247a:	2200      	movs	r2, #0
 800247c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002480:	2200      	movs	r2, #0
 8002482:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002484:	482b      	ldr	r0, [pc, #172]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002486:	f000 fd45 	bl	8002f14 <HAL_DMA_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8002490:	f7ff fd9a 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_UART_MspInit+0x29c>)
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
 800249a:	4a26      	ldr	r2, [pc, #152]	; (8002534 <HAL_UART_MspInit+0x29c>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80024a0:	4b26      	ldr	r3, [pc, #152]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024a2:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_UART_MspInit+0x2a8>)
 80024a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024b0:	2240      	movs	r2, #64	; 0x40
 80024b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024b4:	4b21      	ldr	r3, [pc, #132]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80024e0:	4816      	ldr	r0, [pc, #88]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024e2:	f000 fd17 	bl	8002f14 <HAL_DMA_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_UART_MspInit+0x258>
      Error_Handler();
 80024ec:	f7ff fd6c 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
 80024f6:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_UART_MspInit+0x2a4>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2100      	movs	r1, #0
 8002500:	2026      	movs	r0, #38	; 0x26
 8002502:	f000 fcd0 	bl	8002ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002506:	2026      	movs	r0, #38	; 0x26
 8002508:	f000 fce9 	bl	8002ede <HAL_NVIC_EnableIRQ>
}
 800250c:	bf00      	nop
 800250e:	3730      	adds	r7, #48	; 0x30
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40011000 	.word	0x40011000
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000
 8002520:	2000068c 	.word	0x2000068c
 8002524:	40026440 	.word	0x40026440
 8002528:	2000062c 	.word	0x2000062c
 800252c:	400264b8 	.word	0x400264b8
 8002530:	40004400 	.word	0x40004400
 8002534:	200004d0 	.word	0x200004d0
 8002538:	40026088 	.word	0x40026088
 800253c:	200006ec 	.word	0x200006ec
 8002540:	400260a0 	.word	0x400260a0

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 fb8e 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  G_System_counter++;
 8002594:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <SysTick_Handler+0x18>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a02      	ldr	r2, [pc, #8]	; (80025a4 <SysTick_Handler+0x18>)
 800259c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200000cc 	.word	0x200000cc

080025a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <DMA1_Stream0_IRQHandler+0x10>)
 80025ae:	f000 fe49 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000790 	.word	0x20000790

080025bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <DMA1_Stream5_IRQHandler+0x10>)
 80025c2:	f000 fe3f 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200004d0 	.word	0x200004d0

080025d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <DMA1_Stream6_IRQHandler+0x10>)
 80025d6:	f000 fe35 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200006ec 	.word	0x200006ec

080025e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <I2C1_EV_IRQHandler+0x10>)
 80025ea:	f001 fbad 	bl	8003d48 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000590 	.word	0x20000590

080025f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80025fc:	4802      	ldr	r0, [pc, #8]	; (8002608 <I2C1_ER_IRQHandler+0x10>)
 80025fe:	f001 fd14 	bl	800402a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000590 	.word	0x20000590

0800260c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002610:	4802      	ldr	r0, [pc, #8]	; (800261c <USART1_IRQHandler+0x10>)
 8002612:	f004 fd27 	bl	8007064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000074c 	.word	0x2000074c

08002620 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002624:	4802      	ldr	r0, [pc, #8]	; (8002630 <USART2_IRQHandler+0x10>)
 8002626:	f004 fd1d 	bl	8007064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	200007f0 	.word	0x200007f0

08002634 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <DMA1_Stream7_IRQHandler+0x10>)
 800263a:	f000 fe03 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000530 	.word	0x20000530

08002648 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <DMA2_Stream2_IRQHandler+0x10>)
 800264e:	f000 fdf9 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000068c 	.word	0x2000068c

0800265c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <DMA2_Stream7_IRQHandler+0x10>)
 8002662:	f000 fdef 	bl	8003244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000062c 	.word	0x2000062c

08002670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <SystemInit+0x20>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <SystemInit+0x20>)
 800267c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800269a:	490e      	ldr	r1, [pc, #56]	; (80026d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800269c:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026b0:	4c0b      	ldr	r4, [pc, #44]	; (80026e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026be:	f7ff ffd7 	bl	8002670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026c2:	f005 fbb7 	bl	8007e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c6:	f7ff f995 	bl	80019f4 <main>
  bx  lr    
 80026ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d4:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80026d8:	08007fa8 	.word	0x08007fa8
  ldr r2, =_sbss
 80026dc:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80026e0:	20000844 	.word	0x20000844

080026e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e4:	e7fe      	b.n	80026e4 <ADC_IRQHandler>

080026e6 <D_GPIO_Set>:
#include "../Inc/GPIO.h"
#include <stdlib.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"

void D_GPIO_Set(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_SET);
 80026f2:	887b      	ldrh	r3, [r7, #2]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 f9c7 	bl	8003a8c <HAL_GPIO_WritePin>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <D_GPIO_Reset>:

void D_GPIO_Reset(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(gpio_type,gpio_pin,GPIO_PIN_RESET);
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	2200      	movs	r2, #0
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f001 f9b7 	bl	8003a8c <HAL_GPIO_WritePin>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <D_GPIO_Read>:

bool D_GPIO_Read(GPIO_TypeDef* gpio_type, uint16_t gpio_pin){
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	807b      	strh	r3, [r7, #2]
	return (bool)HAL_GPIO_ReadPin(gpio_type,gpio_pin);
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f001 f990 	bl	8003a5c <HAL_GPIO_ReadPin>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <D_Mess_printf>:

static
volatile bool had_completed = true;


void D_Mess_printf(const char* fmt, ...){
 8002750:	b40f      	push	{r0, r1, r2, r3}
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
  va_list arp;

  //MW_waitForMessageTransitionComplete(100);
  va_start(arp, fmt);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	607b      	str	r3, [r7, #4]
  xvprintf(fmt, arp);
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	6938      	ldr	r0, [r7, #16]
 8002762:	f000 f891 	bl	8002888 <xvprintf>
  va_end(arp);
  if( outptr - buff > MAX_STRING_LENGTH ){
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <D_Mess_printf+0x38>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <D_Mess_printf+0x3c>)
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002772:	dd01      	ble.n	8002778 <D_Mess_printf+0x28>
	  D_Mess_flush();
 8002774:	f000 f80c 	bl	8002790 <D_Mess_flush>
  }
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002782:	b004      	add	sp, #16
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2000083c 	.word	0x2000083c
 800278c:	200000d0 	.word	0x200000d0

08002790 <D_Mess_flush>:
  _xprintf("\n");

  D_Mess_flush();
}

void D_Mess_flush(void){
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
//  if( MW_waitForMessageTransitionComplete(100) != EXIT_SUCCESS ){
//    return;
//  }
	if(!had_completed){
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <D_Mess_flush+0x54>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f083 0301 	eor.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <D_Mess_flush+0x1c>
		outptr = buff;
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <D_Mess_flush+0x58>)
 80027a6:	4a11      	ldr	r2, [pc, #68]	; (80027ec <D_Mess_flush+0x5c>)
 80027a8:	601a      	str	r2, [r3, #0]
		return;
 80027aa:	e01a      	b.n	80027e2 <D_Mess_flush+0x52>
	}
	if( outptr != 0 ){
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <D_Mess_flush+0x58>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d013      	beq.n	80027dc <D_Mess_flush+0x4c>
		*outptr++ = '\n';
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <D_Mess_flush+0x58>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	490b      	ldr	r1, [pc, #44]	; (80027e8 <D_Mess_flush+0x58>)
 80027bc:	600a      	str	r2, [r1, #0]
 80027be:	220a      	movs	r2, #10
 80027c0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)buff, outptr - buff);
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <D_Mess_flush+0x58>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a09      	ldr	r2, [pc, #36]	; (80027ec <D_Mess_flush+0x5c>)
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4907      	ldr	r1, [pc, #28]	; (80027ec <D_Mess_flush+0x5c>)
 80027d0:	4807      	ldr	r0, [pc, #28]	; (80027f0 <D_Mess_flush+0x60>)
 80027d2:	f004 fbc9 	bl	8006f68 <HAL_UART_Transmit_DMA>
		had_completed = false;
 80027d6:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <D_Mess_flush+0x54>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
	}
	outptr = buff;
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <D_Mess_flush+0x58>)
 80027de:	4a03      	ldr	r2, [pc, #12]	; (80027ec <D_Mess_flush+0x5c>)
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	2000002c 	.word	0x2000002c
 80027e8:	2000083c 	.word	0x2000083c
 80027ec:	200000d0 	.word	0x200000d0
 80027f0:	200007f0 	.word	0x200007f0

080027f4 <D_Mess_TransitionCompletedCallBack>:
//    return EXIT_FAILURE;
//  }
//  return EXIT_SUCCESS;
//}

void D_Mess_TransitionCompletedCallBack(void){
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  had_completed = true;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <D_Mess_TransitionCompletedCallBack+0x14>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	2000002c 	.word	0x2000002c

0800280c <xputc>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc(char c){
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if( _CR_CRLF && c == '\n' ){
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b0a      	cmp	r3, #10
 800281a:	d102      	bne.n	8002822 <xputc+0x16>
    xputc('\r');                                        /* CR -> CRLF */
 800281c:	200d      	movs	r0, #13
 800281e:	f7ff fff5 	bl	800280c <xputc>
  }
  if( outptr ){
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <xputc+0x48>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d007      	beq.n	800283a <xputc+0x2e>
    *outptr++ = (unsigned char)c;
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <xputc+0x48>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	4908      	ldr	r1, [pc, #32]	; (8002854 <xputc+0x48>)
 8002832:	600a      	str	r2, [r1, #0]
 8002834:	79fa      	ldrb	r2, [r7, #7]
 8002836:	701a      	strb	r2, [r3, #0]
    return;
 8002838:	e008      	b.n	800284c <xputc+0x40>
  }

  if( xfunc_out ){
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <xputc+0x4c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <xputc+0x40>
    xfunc_out((unsigned char)c);
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <xputc+0x4c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	79fa      	ldrb	r2, [r7, #7]
 8002848:	4610      	mov	r0, r2
 800284a:	4798      	blx	r3
  }
}
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000083c 	.word	0x2000083c
 8002858:	20000838 	.word	0x20000838

0800285c <xputs>:
/*----------------------------------------------*/

void xputs(                                     /* Put a string to the default
                                                 *device */
  const char* str                               /* Pointer to the string */
  ){
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  while( *str ){
 8002864:	e006      	b.n	8002874 <xputs+0x18>
    xputc(*str++);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ffcc 	bl	800280c <xputc>
  while( *str ){
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f4      	bne.n	8002866 <xputs+0xa>
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <xvprintf>:
 */

void xvprintf(
  const char*     fmt,          /* Pointer to the format string */
  va_list arp                           /* Pointer to arguments */
  ){
 8002888:	b580      	push	{r7, lr}
 800288a:	b08e      	sub	sp, #56	; 0x38
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  unsigned long v;
  char s[16], c, d, *p;


  for(;; ){
    c = *fmt++;                                                 /* Get a char */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	77fb      	strb	r3, [r7, #31]
    if( !c ){
 800289c:	7ffb      	ldrb	r3, [r7, #31]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8167 	beq.w	8002b72 <xvprintf+0x2ea>
      break;                                            /* End of format? */
    }
    if( c != '%' ){                                     /* Pass through it if
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
 80028a6:	2b25      	cmp	r3, #37	; 0x25
 80028a8:	d004      	beq.n	80028b4 <xvprintf+0x2c>
                                                         *not a % sequense */
      xputc(c); continue;
 80028aa:	7ffb      	ldrb	r3, [r7, #31]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ffad 	bl	800280c <xputc>
 80028b2:	e15d      	b.n	8002b70 <xvprintf+0x2e8>
    }
    f = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    c = *fmt++;                                                 /* Get first
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	77fb      	strb	r3, [r7, #31]
                                                                * *char of the
                                                                *sequense */
    if( c == '0' ){                                     /* Flag: '0' padded */
 80028c2:	7ffb      	ldrb	r3, [r7, #31]
 80028c4:	2b30      	cmp	r3, #48	; 0x30
 80028c6:	d107      	bne.n	80028d8 <xvprintf+0x50>
      f = 1; c = *fmt++;
 80028c8:	2301      	movs	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e009      	b.n	80028ec <xvprintf+0x64>
    } else {
      if( c == '-' ){                                   /* Flag: left justified
 80028d8:	7ffb      	ldrb	r3, [r7, #31]
 80028da:	2b2d      	cmp	r3, #45	; 0x2d
 80028dc:	d106      	bne.n	80028ec <xvprintf+0x64>
                                                        **/
        f = 2; c = *fmt++;
 80028de:	2302      	movs	r3, #2
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	1c5a      	adds	r2, r3, #1
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	77fb      	strb	r3, [r7, #31]
      }
    }
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 80028ec:	2300      	movs	r3, #0
 80028ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f0:	e00e      	b.n	8002910 <xvprintf+0x88>
                                                                **/
      w = w * 10 + c - '0';
 80028f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	461a      	mov	r2, r3
 80028fe:	7ffb      	ldrb	r3, [r7, #31]
 8002900:	4413      	add	r3, r2
 8002902:	3b30      	subs	r3, #48	; 0x30
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
    for( w = 0; c >= '0' && c <= '9'; c = *fmt++ ){             /* Minimum width
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	77fb      	strb	r3, [r7, #31]
 8002910:	7ffb      	ldrb	r3, [r7, #31]
 8002912:	2b2f      	cmp	r3, #47	; 0x2f
 8002914:	d902      	bls.n	800291c <xvprintf+0x94>
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	2b39      	cmp	r3, #57	; 0x39
 800291a:	d9ea      	bls.n	80028f2 <xvprintf+0x6a>
    }
    if( c == 'l' || c == 'L' ){                 /* Prefix: Size is long int */
 800291c:	7ffb      	ldrb	r3, [r7, #31]
 800291e:	2b6c      	cmp	r3, #108	; 0x6c
 8002920:	d002      	beq.n	8002928 <xvprintf+0xa0>
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	2b4c      	cmp	r3, #76	; 0x4c
 8002926:	d108      	bne.n	800293a <xvprintf+0xb2>
      f |= 4; c = *fmt++;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	77fb      	strb	r3, [r7, #31]
    }
    if( !c ){
 800293a:	7ffb      	ldrb	r3, [r7, #31]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 811a 	beq.w	8002b76 <xvprintf+0x2ee>
      break;                                            /* End of format? */
    }
    d = c;
 8002942:	7ffb      	ldrb	r3, [r7, #31]
 8002944:	77bb      	strb	r3, [r7, #30]
    if( d >= 'a' ){
 8002946:	7fbb      	ldrb	r3, [r7, #30]
 8002948:	2b60      	cmp	r3, #96	; 0x60
 800294a:	d902      	bls.n	8002952 <xvprintf+0xca>
      d -= 0x20;
 800294c:	7fbb      	ldrb	r3, [r7, #30]
 800294e:	3b20      	subs	r3, #32
 8002950:	77bb      	strb	r3, [r7, #30]
    }
    switch( d ){                                        /* Type is... */
 8002952:	7fbb      	ldrb	r3, [r7, #30]
 8002954:	3b42      	subs	r3, #66	; 0x42
 8002956:	2b16      	cmp	r3, #22
 8002958:	d873      	bhi.n	8002a42 <xvprintf+0x1ba>
 800295a:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <xvprintf+0xd8>)
 800295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002960:	08002a2b 	.word	0x08002a2b
 8002964:	08002a19 	.word	0x08002a19
 8002968:	08002a37 	.word	0x08002a37
 800296c:	08002a43 	.word	0x08002a43
 8002970:	08002a43 	.word	0x08002a43
 8002974:	08002a43 	.word	0x08002a43
 8002978:	08002a43 	.word	0x08002a43
 800297c:	08002a43 	.word	0x08002a43
 8002980:	08002a43 	.word	0x08002a43
 8002984:	08002a43 	.word	0x08002a43
 8002988:	08002a43 	.word	0x08002a43
 800298c:	08002a43 	.word	0x08002a43
 8002990:	08002a43 	.word	0x08002a43
 8002994:	08002a31 	.word	0x08002a31
 8002998:	08002a43 	.word	0x08002a43
 800299c:	08002a43 	.word	0x08002a43
 80029a0:	08002a43 	.word	0x08002a43
 80029a4:	080029bd 	.word	0x080029bd
 80029a8:	08002a43 	.word	0x08002a43
 80029ac:	08002a37 	.word	0x08002a37
 80029b0:	08002a43 	.word	0x08002a43
 80029b4:	08002a43 	.word	0x08002a43
 80029b8:	08002a3d 	.word	0x08002a3d
    case 'S':                                                   /* String */
      p = va_arg(arp, char*);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	1d1a      	adds	r2, r3, #4
 80029c0:	603a      	str	r2, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
      for( j = 0; p[j]; j++ ){
 80029c6:	2300      	movs	r3, #0
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ca:	e002      	b.n	80029d2 <xvprintf+0x14a>
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	3301      	adds	r3, #1
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f6      	bne.n	80029cc <xvprintf+0x144>
      }
      while( !( f & 2 ) && j++ < w ){
 80029de:	e002      	b.n	80029e6 <xvprintf+0x15e>
        xputc(' ');
 80029e0:	2020      	movs	r0, #32
 80029e2:	f7ff ff13 	bl	800280c <xputc>
      while( !( f & 2 ) && j++ < w ){
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <xvprintf+0x174>
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f1      	bhi.n	80029e0 <xvprintf+0x158>
      }
      xputs(p);
 80029fc:	69b8      	ldr	r0, [r7, #24]
 80029fe:	f7ff ff2d 	bl	800285c <xputs>
      while( j++ < w ){
 8002a02:	e002      	b.n	8002a0a <xvprintf+0x182>
        xputc(' ');
 8002a04:	2020      	movs	r0, #32
 8002a06:	f7ff ff01 	bl	800280c <xputc>
      while( j++ < w ){
 8002a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d8f6      	bhi.n	8002a04 <xvprintf+0x17c>
      }
      continue;
 8002a16:	e0ab      	b.n	8002b70 <xvprintf+0x2e8>
    case 'C':                                                   /* Character */
      xputc((char)va_arg(arp, int)); continue;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	1d1a      	adds	r2, r3, #4
 8002a1c:	603a      	str	r2, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fef2 	bl	800280c <xputc>
 8002a28:	e0a2      	b.n	8002b70 <xvprintf+0x2e8>
    case 'B':                                                   /* Binary */
      r = 2; break;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2e:	e00d      	b.n	8002a4c <xvprintf+0x1c4>
    case 'O':                                                   /* Octal */
      r = 8; break;
 8002a30:	2308      	movs	r3, #8
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
 8002a34:	e00a      	b.n	8002a4c <xvprintf+0x1c4>
    case 'D':                                                   /* Signed
                                                                 *decimal */
    case 'U':                                                   /* Unsigned
                                                                *decimal */
      r = 10; break;
 8002a36:	230a      	movs	r3, #10
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3a:	e007      	b.n	8002a4c <xvprintf+0x1c4>
    case 'X':                                                   /* Hexdecimal */
      r = 16; break;
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a40:	e004      	b.n	8002a4c <xvprintf+0x1c4>
    default:                                                    /* Unknown type
                                                                 * *(passthrough)
                                                                 **/
      xputc(c); continue;
 8002a42:	7ffb      	ldrb	r3, [r7, #31]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fee1 	bl	800280c <xputc>
 8002a4a:	e091      	b.n	8002b70 <xvprintf+0x2e8>
    }

    /* Get an argument and put it in numeral */
    v = ( f & 4 ) ? va_arg(arp, long) : (( d == 'D' ) ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d004      	beq.n	8002a60 <xvprintf+0x1d8>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	1d1a      	adds	r2, r3, #4
 8002a5a:	603a      	str	r2, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	e00b      	b.n	8002a78 <xvprintf+0x1f0>
 8002a60:	7fbb      	ldrb	r3, [r7, #30]
 8002a62:	2b44      	cmp	r3, #68	; 0x44
 8002a64:	d104      	bne.n	8002a70 <xvprintf+0x1e8>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	1d1a      	adds	r2, r3, #4
 8002a6a:	603a      	str	r2, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	e003      	b.n	8002a78 <xvprintf+0x1f0>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	1d1a      	adds	r2, r3, #4
 8002a74:	603a      	str	r2, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	623b      	str	r3, [r7, #32]
    if( d == 'D' && ( v & 0x80000000 )){
 8002a7a:	7fbb      	ldrb	r3, [r7, #30]
 8002a7c:	2b44      	cmp	r3, #68	; 0x44
 8002a7e:	d109      	bne.n	8002a94 <xvprintf+0x20c>
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da06      	bge.n	8002a94 <xvprintf+0x20c>
      v = 0 - v;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	425b      	negs	r3, r3
 8002a8a:	623b      	str	r3, [r7, #32]
      f |= 8;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f043 0308 	orr.w	r3, r3, #8
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
    }
    i = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
    do {
      d = (char)( v % r ); v /= r;
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002aa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aa2:	fb01 f202 	mul.w	r2, r1, r2
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	77bb      	strb	r3, [r7, #30]
 8002aaa:	6a3a      	ldr	r2, [r7, #32]
 8002aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	623b      	str	r3, [r7, #32]
      if( d > 9 ){
 8002ab4:	7fbb      	ldrb	r3, [r7, #30]
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	d908      	bls.n	8002acc <xvprintf+0x244>
        d += ( c == 'x' ) ? 0x27 : 0x07;
 8002aba:	7ffb      	ldrb	r3, [r7, #31]
 8002abc:	2b78      	cmp	r3, #120	; 0x78
 8002abe:	d101      	bne.n	8002ac4 <xvprintf+0x23c>
 8002ac0:	2227      	movs	r2, #39	; 0x27
 8002ac2:	e000      	b.n	8002ac6 <xvprintf+0x23e>
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	7fbb      	ldrb	r3, [r7, #30]
 8002ac8:	4413      	add	r3, r2
 8002aca:	77bb      	strb	r3, [r7, #30]
      }
      s[i++] = d + '0';
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8002ad2:	7fba      	ldrb	r2, [r7, #30]
 8002ad4:	3230      	adds	r2, #48	; 0x30
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002adc:	440b      	add	r3, r1
 8002ade:	f803 2c30 	strb.w	r2, [r3, #-48]
    } while( v && i < sizeof( s ));
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <xvprintf+0x266>
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d9d4      	bls.n	8002a98 <xvprintf+0x210>
    if( f & 8 ){
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <xvprintf+0x282>
      s[i++] = '-';
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	633a      	str	r2, [r7, #48]	; 0x30
 8002afe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b02:	4413      	add	r3, r2
 8002b04:	222d      	movs	r2, #45	; 0x2d
 8002b06:	f803 2c30 	strb.w	r2, [r3, #-48]
    }
    j = i; d = ( f & 1 ) ? '0' : ' ';
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <xvprintf+0x294>
 8002b18:	2330      	movs	r3, #48	; 0x30
 8002b1a:	e000      	b.n	8002b1e <xvprintf+0x296>
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	77bb      	strb	r3, [r7, #30]
    while( !( f & 2 ) && j++ < w ){
 8002b20:	e003      	b.n	8002b2a <xvprintf+0x2a2>
      xputc(d);
 8002b22:	7fbb      	ldrb	r3, [r7, #30]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fe71 	bl	800280c <xputc>
    while( !( f & 2 ) && j++ < w ){
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <xvprintf+0x2b8>
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d8f0      	bhi.n	8002b22 <xvprintf+0x29a>
    }
    do { xputc(s[--i]); } while( i );
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	3b01      	subs	r3, #1
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
 8002b46:	f107 0208 	add.w	r2, r7, #8
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fe5b 	bl	800280c <xputc>
 8002b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f1      	bne.n	8002b40 <xvprintf+0x2b8>
    while( j++ < w ){
 8002b5c:	e002      	b.n	8002b64 <xvprintf+0x2dc>
      xputc(' ');
 8002b5e:	2020      	movs	r0, #32
 8002b60:	f7ff fe54 	bl	800280c <xputc>
    while( j++ < w ){
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d8f6      	bhi.n	8002b5e <xvprintf+0x2d6>
    c = *fmt++;                                                 /* Get a char */
 8002b70:	e68f      	b.n	8002892 <xvprintf+0xa>
      break;                                            /* End of format? */
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <xvprintf+0x2f0>
      break;                                            /* End of format? */
 8002b76:	bf00      	nop
    }
  }
} /* xvprintf */
 8002b78:	bf00      	nop
 8002b7a:	3738      	adds	r7, #56	; 0x38
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <D_PWM_Init>:
#include <stdlib.h>
#include "stm32f4xx_hal.h"

//extern TIM_HandleTypeDef htim3;

void D_PWM_Init(void){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002b84:	2100      	movs	r1, #0
 8002b86:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <D_PWM_Init+0x28>)
 8002b88:	f003 fbc2 	bl	8006310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <D_PWM_Init+0x28>)
 8002b90:	f003 fbbe 	bl	8006310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002b94:	2108      	movs	r1, #8
 8002b96:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <D_PWM_Init+0x28>)
 8002b98:	f003 fbba 	bl	8006310 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002b9c:	210c      	movs	r1, #12
 8002b9e:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <D_PWM_Init+0x28>)
 8002ba0:	f003 fbb6 	bl	8006310 <HAL_TIM_PWM_Start>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200005e4 	.word	0x200005e4

08002bac <D_PWM_Set>:

void D_PWM_Set(int channel, int value){
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d81e      	bhi.n	8002bfc <D_PWM_Set+0x50>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <D_PWM_Set+0x18>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdf 	.word	0x08002bdf
 8002bcc:	08002be9 	.word	0x08002be9
 8002bd0:	08002bf3 	.word	0x08002bf3
	switch(channel){
	case 1:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <D_PWM_Set+0x5c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002bdc:	e00e      	b.n	8002bfc <D_PWM_Set+0x50>
	case 2:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <D_PWM_Set+0x5c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002be6:	e009      	b.n	8002bfc <D_PWM_Set+0x50>
	case 3:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, value);
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <D_PWM_Set+0x5c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8002bf0:	e004      	b.n	8002bfc <D_PWM_Set+0x50>
	case 4:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, value);
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <D_PWM_Set+0x5c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002bfa:	bf00      	nop
	}
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	200005e4 	.word	0x200005e4

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 f92b 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff f9c8 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f943 	bl	8002efa <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c8c:	f000 f90b 	bl	8002ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	; (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000028 	.word	0x20000028
 8002ca8:	20000034 	.word	0x20000034
 8002cac:	20000030 	.word	0x20000030

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000034 	.word	0x20000034
 8002cd4:	20000840 	.word	0x20000840

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000840 	.word	0x20000840

08002cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d22:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <__NVIC_SetPriorityGrouping+0x44>)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60d3      	str	r3, [r2, #12]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d3c:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <__NVIC_GetPriorityGrouping+0x18>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 0307 	and.w	r3, r3, #7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db0b      	blt.n	8002d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4907      	ldr	r1, [pc, #28]	; (8002d8c <__NVIC_EnableIRQ+0x38>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	db0a      	blt.n	8002dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	490c      	ldr	r1, [pc, #48]	; (8002ddc <__NVIC_SetPriority+0x4c>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	0112      	lsls	r2, r2, #4
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	440b      	add	r3, r1
 8002db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db8:	e00a      	b.n	8002dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	4908      	ldr	r1, [pc, #32]	; (8002de0 <__NVIC_SetPriority+0x50>)
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	0112      	lsls	r2, r2, #4
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	440b      	add	r3, r1
 8002dce:	761a      	strb	r2, [r3, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000e100 	.word	0xe000e100
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b089      	sub	sp, #36	; 0x24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f1c3 0307 	rsb	r3, r3, #7
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf28      	it	cs
 8002e02:	2304      	movcs	r3, #4
 8002e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d902      	bls.n	8002e14 <NVIC_EncodePriority+0x30>
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3b03      	subs	r3, #3
 8002e12:	e000      	b.n	8002e16 <NVIC_EncodePriority+0x32>
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43da      	mvns	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	401a      	ands	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	43d9      	mvns	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	4313      	orrs	r3, r2
         );
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3724      	adds	r7, #36	; 0x24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
	...

08002e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e5c:	d301      	bcc.n	8002e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00f      	b.n	8002e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <SysTick_Config+0x40>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6a:	210f      	movs	r1, #15
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e70:	f7ff ff8e 	bl	8002d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <SysTick_Config+0x40>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <SysTick_Config+0x40>)
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff29 	bl	8002cf0 <__NVIC_SetPriorityGrouping>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff3e 	bl	8002d38 <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff8e 	bl	8002de4 <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5d 	bl	8002d90 <__NVIC_SetPriority>
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff31 	bl	8002d54 <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa2 	bl	8002e4c <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff feda 	bl	8002cd8 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e099      	b.n	8003064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f50:	e00f      	b.n	8002f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f52:	f7ff fec1 	bl	8002cd8 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d908      	bls.n	8002f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e078      	b.n	8003064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e8      	bne.n	8002f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_DMA_Init+0x158>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d107      	bne.n	8002fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2b04      	cmp	r3, #4
 8003004:	d117      	bne.n	8003036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fb0f 	bl	800363c <DMA_CheckFifoParam>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003032:	2301      	movs	r3, #1
 8003034:	e016      	b.n	8003064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fac6 	bl	80035d0 <DMA_CalcBaseAndBitshift>
 8003044:	4603      	mov	r3, r0
 8003046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	223f      	movs	r2, #63	; 0x3f
 800304e:	409a      	lsls	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	f010803f 	.word	0xf010803f

08003070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_DMA_Start_IT+0x26>
 8003092:	2302      	movs	r3, #2
 8003094:	e040      	b.n	8003118 <HAL_DMA_Start_IT+0xa8>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d12f      	bne.n	800310a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fa58 	bl	8003574 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	223f      	movs	r2, #63	; 0x3f
 80030ca:	409a      	lsls	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0216 	orr.w	r2, r2, #22
 80030de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0208 	orr.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e005      	b.n	8003116 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003112:	2302      	movs	r3, #2
 8003114:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800312e:	f7ff fdd3 	bl	8002cd8 <HAL_GetTick>
 8003132:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e052      	b.n	80031f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0216 	bic.w	r2, r2, #22
 8003160:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003170:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_DMA_Abort+0x62>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0208 	bic.w	r2, r2, #8
 8003190:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0201 	bic.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a2:	e013      	b.n	80031cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a4:	f7ff fd98 	bl	8002cd8 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d90c      	bls.n	80031cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2203      	movs	r2, #3
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e015      	b.n	80031f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e4      	bne.n	80031a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	223f      	movs	r2, #63	; 0x3f
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d004      	beq.n	800321e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e00c      	b.n	8003238 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003250:	4b92      	ldr	r3, [pc, #584]	; (800349c <HAL_DMA_IRQHandler+0x258>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a92      	ldr	r2, [pc, #584]	; (80034a0 <HAL_DMA_IRQHandler+0x25c>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0a9b      	lsrs	r3, r3, #10
 800325c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	2208      	movs	r2, #8
 8003270:	409a      	lsls	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4013      	ands	r3, r2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01a      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0204 	bic.w	r2, r2, #4
 8003296:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	2208      	movs	r2, #8
 800329e:	409a      	lsls	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	f043 0201 	orr.w	r2, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	2201      	movs	r2, #1
 80032b6:	409a      	lsls	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d2:	2201      	movs	r2, #1
 80032d4:	409a      	lsls	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0202 	orr.w	r2, r3, #2
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	2204      	movs	r2, #4
 80032ec:	409a      	lsls	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00b      	beq.n	800331c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	2204      	movs	r2, #4
 800330a:	409a      	lsls	r2, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	2210      	movs	r2, #16
 8003322:	409a      	lsls	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d043      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d03c      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	2210      	movs	r2, #16
 8003340:	409a      	lsls	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d018      	beq.n	8003386 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d024      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	4798      	blx	r3
 8003372:	e01f      	b.n	80033b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01b      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
 8003384:	e016      	b.n	80033b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0208 	bic.w	r2, r2, #8
 80033a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	2220      	movs	r2, #32
 80033ba:	409a      	lsls	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 808e 	beq.w	80034e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 8086 	beq.w	80034e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2220      	movs	r2, #32
 80033dc:	409a      	lsls	r2, r3
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b05      	cmp	r3, #5
 80033ec:	d136      	bne.n	800345c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0216 	bic.w	r2, r2, #22
 80033fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <HAL_DMA_IRQHandler+0x1da>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0208 	bic.w	r2, r2, #8
 800342c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	223f      	movs	r2, #63	; 0x3f
 8003434:	409a      	lsls	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	d07d      	beq.n	800354e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
        }
        return;
 800345a:	e078      	b.n	800354e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d108      	bne.n	800348a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	2b00      	cmp	r3, #0
 800347e:	d030      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
 8003488:	e02b      	b.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
 800349a:	e022      	b.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
 800349c:	20000028 	.word	0x20000028
 80034a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0210 	bic.w	r2, r2, #16
 80034c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d032      	beq.n	8003550 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d022      	beq.n	800353c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2205      	movs	r2, #5
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0201 	bic.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3301      	adds	r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	429a      	cmp	r2, r3
 8003518:	d307      	bcc.n	800352a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f2      	bne.n	800350e <HAL_DMA_IRQHandler+0x2ca>
 8003528:	e000      	b.n	800352c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800352a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e000      	b.n	8003550 <HAL_DMA_IRQHandler+0x30c>
        return;
 800354e:	bf00      	nop
    }
  }
}
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop

08003558 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003566:	b2db      	uxtb	r3, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003590:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d108      	bne.n	80035b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035b2:	e007      	b.n	80035c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3b10      	subs	r3, #16
 80035e0:	4a14      	ldr	r2, [pc, #80]	; (8003634 <DMA_CalcBaseAndBitshift+0x64>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <DMA_CalcBaseAndBitshift+0x68>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d909      	bls.n	8003612 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	; 0x58
 8003610:	e007      	b.n	8003622 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	aaaaaaab 	.word	0xaaaaaaab
 8003638:	08007f90 	.word	0x08007f90

0800363c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2300      	movs	r3, #0
 8003646:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11f      	bne.n	8003696 <DMA_CheckFifoParam+0x5a>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2b03      	cmp	r3, #3
 800365a:	d856      	bhi.n	800370a <DMA_CheckFifoParam+0xce>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <DMA_CheckFifoParam+0x28>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003687 	.word	0x08003687
 800366c:	08003675 	.word	0x08003675
 8003670:	0800370b 	.word	0x0800370b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d046      	beq.n	800370e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003684:	e043      	b.n	800370e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800368e:	d140      	bne.n	8003712 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003694:	e03d      	b.n	8003712 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369e:	d121      	bne.n	80036e4 <DMA_CheckFifoParam+0xa8>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d837      	bhi.n	8003716 <DMA_CheckFifoParam+0xda>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <DMA_CheckFifoParam+0x70>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c3 	.word	0x080036c3
 80036b4:	080036bd 	.word	0x080036bd
 80036b8:	080036d5 	.word	0x080036d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      break;
 80036c0:	e030      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d025      	beq.n	800371a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d2:	e022      	b.n	800371a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036dc:	d11f      	bne.n	800371e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036e2:	e01c      	b.n	800371e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d903      	bls.n	80036f2 <DMA_CheckFifoParam+0xb6>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d003      	beq.n	80036f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036f0:	e018      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
      break;
 80036f6:	e015      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
      break;
 8003708:	e00b      	b.n	8003722 <DMA_CheckFifoParam+0xe6>
      break;
 800370a:	bf00      	nop
 800370c:	e00a      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800370e:	bf00      	nop
 8003710:	e008      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003712:	bf00      	nop
 8003714:	e006      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003716:	bf00      	nop
 8003718:	e004      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;   
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <DMA_CheckFifoParam+0xe8>
      break;
 8003722:	bf00      	nop
    }
  } 
  
  return status; 
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	e165      	b.n	8003a1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003750:	2201      	movs	r2, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	f040 8154 	bne.w	8003a16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d005      	beq.n	8003786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003782:	2b02      	cmp	r3, #2
 8003784:	d130      	bne.n	80037e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037bc:	2201      	movs	r2, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 0201 	and.w	r2, r3, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0303 	and.w	r3, r3, #3
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d017      	beq.n	8003824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d123      	bne.n	8003878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	220f      	movs	r2, #15
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	691a      	ldr	r2, [r3, #16]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4313      	orrs	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	08da      	lsrs	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3208      	adds	r2, #8
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0203 	and.w	r2, r3, #3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80ae 	beq.w	8003a16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	4b5d      	ldr	r3, [pc, #372]	; (8003a34 <HAL_GPIO_Init+0x300>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	4a5c      	ldr	r2, [pc, #368]	; (8003a34 <HAL_GPIO_Init+0x300>)
 80038c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038c8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ca:	4b5a      	ldr	r3, [pc, #360]	; (8003a34 <HAL_GPIO_Init+0x300>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038d6:	4a58      	ldr	r2, [pc, #352]	; (8003a38 <HAL_GPIO_Init+0x304>)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	220f      	movs	r2, #15
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4f      	ldr	r2, [pc, #316]	; (8003a3c <HAL_GPIO_Init+0x308>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d025      	beq.n	800394e <HAL_GPIO_Init+0x21a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4e      	ldr	r2, [pc, #312]	; (8003a40 <HAL_GPIO_Init+0x30c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01f      	beq.n	800394a <HAL_GPIO_Init+0x216>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <HAL_GPIO_Init+0x310>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d019      	beq.n	8003946 <HAL_GPIO_Init+0x212>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_GPIO_Init+0x314>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_GPIO_Init+0x20e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <HAL_GPIO_Init+0x318>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00d      	beq.n	800393e <HAL_GPIO_Init+0x20a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <HAL_GPIO_Init+0x31c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <HAL_GPIO_Init+0x206>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a49      	ldr	r2, [pc, #292]	; (8003a54 <HAL_GPIO_Init+0x320>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d101      	bne.n	8003936 <HAL_GPIO_Init+0x202>
 8003932:	2306      	movs	r3, #6
 8003934:	e00c      	b.n	8003950 <HAL_GPIO_Init+0x21c>
 8003936:	2307      	movs	r3, #7
 8003938:	e00a      	b.n	8003950 <HAL_GPIO_Init+0x21c>
 800393a:	2305      	movs	r3, #5
 800393c:	e008      	b.n	8003950 <HAL_GPIO_Init+0x21c>
 800393e:	2304      	movs	r3, #4
 8003940:	e006      	b.n	8003950 <HAL_GPIO_Init+0x21c>
 8003942:	2303      	movs	r3, #3
 8003944:	e004      	b.n	8003950 <HAL_GPIO_Init+0x21c>
 8003946:	2302      	movs	r3, #2
 8003948:	e002      	b.n	8003950 <HAL_GPIO_Init+0x21c>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_GPIO_Init+0x21c>
 800394e:	2300      	movs	r3, #0
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	f002 0203 	and.w	r2, r2, #3
 8003956:	0092      	lsls	r2, r2, #2
 8003958:	4093      	lsls	r3, r2
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003960:	4935      	ldr	r1, [pc, #212]	; (8003a38 <HAL_GPIO_Init+0x304>)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	3302      	adds	r3, #2
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800396e:	4b3a      	ldr	r3, [pc, #232]	; (8003a58 <HAL_GPIO_Init+0x324>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003992:	4a31      	ldr	r2, [pc, #196]	; (8003a58 <HAL_GPIO_Init+0x324>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003998:	4b2f      	ldr	r3, [pc, #188]	; (8003a58 <HAL_GPIO_Init+0x324>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039bc:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039c2:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	43db      	mvns	r3, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4013      	ands	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039e6:	4a1c      	ldr	r2, [pc, #112]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <HAL_GPIO_Init+0x324>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a10:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <HAL_GPIO_Init+0x324>)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	f67f ae96 	bls.w	8003750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3724      	adds	r7, #36	; 0x24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40013800 	.word	0x40013800
 8003a3c:	40020000 	.word	0x40020000
 8003a40:	40020400 	.word	0x40020400
 8003a44:	40020800 	.word	0x40020800
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40021400 	.word	0x40021400
 8003a54:	40021800 	.word	0x40021800
 8003a58:	40013c00 	.word	0x40013c00

08003a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	460b      	mov	r3, r1
 8003a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	887b      	ldrh	r3, [r7, #2]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a74:	2301      	movs	r3, #1
 8003a76:	73fb      	strb	r3, [r7, #15]
 8003a78:	e001      	b.n	8003a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e12b      	b.n	8003d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe fa9c 	bl	8002024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0201 	bic.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b24:	f001 fed4 	bl	80058d0 <HAL_RCC_GetPCLK1Freq>
 8003b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a81      	ldr	r2, [pc, #516]	; (8003d34 <HAL_I2C_Init+0x274>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d807      	bhi.n	8003b44 <HAL_I2C_Init+0x84>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a80      	ldr	r2, [pc, #512]	; (8003d38 <HAL_I2C_Init+0x278>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bf94      	ite	ls
 8003b3c:	2301      	movls	r3, #1
 8003b3e:	2300      	movhi	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	e006      	b.n	8003b52 <HAL_I2C_Init+0x92>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a7d      	ldr	r2, [pc, #500]	; (8003d3c <HAL_I2C_Init+0x27c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	bf94      	ite	ls
 8003b4c:	2301      	movls	r3, #1
 8003b4e:	2300      	movhi	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e0e7      	b.n	8003d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a78      	ldr	r2, [pc, #480]	; (8003d40 <HAL_I2C_Init+0x280>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0c9b      	lsrs	r3, r3, #18
 8003b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a6a      	ldr	r2, [pc, #424]	; (8003d34 <HAL_I2C_Init+0x274>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d802      	bhi.n	8003b94 <HAL_I2C_Init+0xd4>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3301      	adds	r3, #1
 8003b92:	e009      	b.n	8003ba8 <HAL_I2C_Init+0xe8>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	4a69      	ldr	r2, [pc, #420]	; (8003d44 <HAL_I2C_Init+0x284>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	495c      	ldr	r1, [pc, #368]	; (8003d34 <HAL_I2C_Init+0x274>)
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	d819      	bhi.n	8003bfc <HAL_I2C_Init+0x13c>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e59      	subs	r1, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bdc:	400b      	ands	r3, r1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_I2C_Init+0x138>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1e59      	subs	r1, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	e051      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	e04f      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d111      	bne.n	8003c28 <HAL_I2C_Init+0x168>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e58      	subs	r0, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	440b      	add	r3, r1
 8003c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e012      	b.n	8003c4e <HAL_I2C_Init+0x18e>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e58      	subs	r0, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	0099      	lsls	r1, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <HAL_I2C_Init+0x196>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e022      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10e      	bne.n	8003c7c <HAL_I2C_Init+0x1bc>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	1e58      	subs	r0, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	440b      	add	r3, r1
 8003c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c7a:	e00f      	b.n	8003c9c <HAL_I2C_Init+0x1dc>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1e58      	subs	r0, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	460b      	mov	r3, r1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	0099      	lsls	r1, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	6809      	ldr	r1, [r1, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69da      	ldr	r2, [r3, #28]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6911      	ldr	r1, [r2, #16]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68d2      	ldr	r2, [r2, #12]
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	000186a0 	.word	0x000186a0
 8003d38:	001e847f 	.word	0x001e847f
 8003d3c:	003d08ff 	.word	0x003d08ff
 8003d40:	431bde83 	.word	0x431bde83
 8003d44:	10624dd3 	.word	0x10624dd3

08003d48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d70:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d003      	beq.n	8003d80 <HAL_I2C_EV_IRQHandler+0x38>
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	f040 80c1 	bne.w	8003f02 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003da0:	d003      	beq.n	8003daa <HAL_I2C_EV_IRQHandler+0x62>
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003da8:	d101      	bne.n	8003dae <HAL_I2C_EV_IRQHandler+0x66>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <HAL_I2C_EV_IRQHandler+0x68>
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	f000 8132 	beq.w	800401a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00c      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0x92>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	0a5b      	lsrs	r3, r3, #9
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f001 fc71 	bl	80056b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fd79 	bl	80048ca <I2C_Master_SB>
 8003dd8:	e092      	b.n	8003f00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0xb2>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	0a5b      	lsrs	r3, r3, #9
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fdef 	bl	80049d6 <I2C_Master_ADD10>
 8003df8:	e082      	b.n	8003f00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d009      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0xd2>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	0a5b      	lsrs	r3, r3, #9
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fe09 	bl	8004a2a <I2C_Master_ADDR>
 8003e18:	e072      	b.n	8003f00 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d03b      	beq.n	8003e9e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e34:	f000 80f3 	beq.w	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	09db      	lsrs	r3, r3, #7
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00f      	beq.n	8003e64 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	0a9b      	lsrs	r3, r3, #10
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f9f3 	bl	8004248 <I2C_MasterTransmit_TXE>
 8003e62:	e04d      	b.n	8003f00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80d6 	beq.w	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	0a5b      	lsrs	r3, r3, #9
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 80cf 	beq.w	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
 8003e82:	2b21      	cmp	r3, #33	; 0x21
 8003e84:	d103      	bne.n	8003e8e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa7a 	bl	8004380 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e8c:	e0c7      	b.n	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	f040 80c4 	bne.w	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fae8 	bl	800446c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9c:	e0bf      	b.n	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eac:	f000 80b7 	beq.w	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00f      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x194>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	0a9b      	lsrs	r3, r3, #10
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x194>
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d103      	bne.n	8003edc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fb5d 	bl	8004594 <I2C_MasterReceive_RXNE>
 8003eda:	e011      	b.n	8003f00 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 809a 	beq.w	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	0a5b      	lsrs	r3, r3, #9
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8093 	beq.w	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fbfc 	bl	80046f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003efe:	e08e      	b.n	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f00:	e08d      	b.n	800401e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e007      	b.n	8003f24 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	085b      	lsrs	r3, r3, #1
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <HAL_I2C_EV_IRQHandler+0x20e>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	0a5b      	lsrs	r3, r3, #9
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00c      	beq.n	8003f56 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f4c:	69b9      	ldr	r1, [r7, #24]
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 ffba 	bl	8004ec8 <I2C_Slave_ADDR>
 8003f54:	e066      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x22e>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	0a5b      	lsrs	r3, r3, #9
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fff4 	bl	8004f5c <I2C_Slave_STOPF>
 8003f74:	e056      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f76:	7bbb      	ldrb	r3, [r7, #14]
 8003f78:	2b21      	cmp	r3, #33	; 0x21
 8003f7a:	d002      	beq.n	8003f82 <HAL_I2C_EV_IRQHandler+0x23a>
 8003f7c:	7bbb      	ldrb	r3, [r7, #14]
 8003f7e:	2b29      	cmp	r3, #41	; 0x29
 8003f80:	d125      	bne.n	8003fce <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	09db      	lsrs	r3, r3, #7
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00f      	beq.n	8003fae <HAL_I2C_EV_IRQHandler+0x266>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	0a9b      	lsrs	r3, r3, #10
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_I2C_EV_IRQHandler+0x266>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	089b      	lsrs	r3, r3, #2
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fed0 	bl	8004d4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fac:	e039      	b.n	8004022 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d033      	beq.n	8004022 <HAL_I2C_EV_IRQHandler+0x2da>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	0a5b      	lsrs	r3, r3, #9
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d02d      	beq.n	8004022 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fefd 	bl	8004dc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fcc:	e029      	b.n	8004022 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00f      	beq.n	8003ffa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	0a9b      	lsrs	r3, r3, #10
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_I2C_EV_IRQHandler+0x2b2>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 ff08 	bl	8004e08 <I2C_SlaveReceive_RXNE>
 8003ff8:	e014      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00e      	beq.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	0a5b      	lsrs	r3, r3, #9
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 ff36 	bl	8004e84 <I2C_SlaveReceive_BTF>
 8004018:	e004      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800401a:	bf00      	nop
 800401c:	e002      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800401e:	bf00      	nop
 8004020:	e000      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004022:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b08a      	sub	sp, #40	; 0x28
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004042:	2300      	movs	r3, #0
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	0a1b      	lsrs	r3, r3, #8
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00e      	beq.n	8004078 <HAL_I2C_ER_IRQHandler+0x4e>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004076:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	0a5b      	lsrs	r3, r3, #9
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <HAL_I2C_ER_IRQHandler+0x78>
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	f043 0302 	orr.w	r3, r3, #2
 8004096:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80040a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	0a9b      	lsrs	r3, r3, #10
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03f      	beq.n	800412e <HAL_I2C_ER_IRQHandler+0x104>
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	0a1b      	lsrs	r3, r3, #8
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d039      	beq.n	800412e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80040ba:	7efb      	ldrb	r3, [r7, #27]
 80040bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80040d4:	7ebb      	ldrb	r3, [r7, #26]
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d112      	bne.n	8004100 <HAL_I2C_ER_IRQHandler+0xd6>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10f      	bne.n	8004100 <HAL_I2C_ER_IRQHandler+0xd6>
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b21      	cmp	r3, #33	; 0x21
 80040e4:	d008      	beq.n	80040f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b29      	cmp	r3, #41	; 0x29
 80040ea:	d005      	beq.n	80040f8 <HAL_I2C_ER_IRQHandler+0xce>
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	2b28      	cmp	r3, #40	; 0x28
 80040f0:	d106      	bne.n	8004100 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b21      	cmp	r3, #33	; 0x21
 80040f6:	d103      	bne.n	8004100 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f001 f85f 	bl	80051bc <I2C_Slave_AF>
 80040fe:	e016      	b.n	800412e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004108:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004112:	7efb      	ldrb	r3, [r7, #27]
 8004114:	2b10      	cmp	r3, #16
 8004116:	d002      	beq.n	800411e <HAL_I2C_ER_IRQHandler+0xf4>
 8004118:	7efb      	ldrb	r3, [r7, #27]
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d107      	bne.n	800412e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	0adb      	lsrs	r3, r3, #11
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <HAL_I2C_ER_IRQHandler+0x12e>
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	0a1b      	lsrs	r3, r3, #8
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d008      	beq.n	8004158 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f043 0308 	orr.w	r3, r3, #8
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004156:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f001 f896 	bl	800529c <I2C_ITError>
  }
}
 8004170:	bf00      	nop
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
 80041d4:	4613      	mov	r3, r2
 80041d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800425e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	2b00      	cmp	r3, #0
 800426c:	d150      	bne.n	8004310 <I2C_MasterTransmit_TXE+0xc8>
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b21      	cmp	r3, #33	; 0x21
 8004272:	d14d      	bne.n	8004310 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b08      	cmp	r3, #8
 8004278:	d01d      	beq.n	80042b6 <I2C_MasterTransmit_TXE+0x6e>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b20      	cmp	r3, #32
 800427e:	d01a      	beq.n	80042b6 <I2C_MasterTransmit_TXE+0x6e>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004286:	d016      	beq.n	80042b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004296:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2211      	movs	r2, #17
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff62 	bl	8004178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042b4:	e060      	b.n	8004378 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d107      	bne.n	8004300 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff7d 	bl	80041f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042fe:	e03b      	b.n	8004378 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff35 	bl	8004178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800430e:	e033      	b.n	8004378 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	2b21      	cmp	r3, #33	; 0x21
 8004314:	d005      	beq.n	8004322 <I2C_MasterTransmit_TXE+0xda>
 8004316:	7bbb      	ldrb	r3, [r7, #14]
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d12d      	bne.n	8004378 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b22      	cmp	r3, #34	; 0x22
 8004320:	d12a      	bne.n	8004378 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d108      	bne.n	800433e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800433c:	e01c      	b.n	8004378 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d103      	bne.n	8004352 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f88e 	bl	800446c <I2C_MemoryTransmit_TXE_BTF>
}
 8004350:	e012      	b.n	8004378 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	781a      	ldrb	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004376:	e7ff      	b.n	8004378 <I2C_MasterTransmit_TXE+0x130>
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b21      	cmp	r3, #33	; 0x21
 8004398:	d164      	bne.n	8004464 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80043c8:	e04c      	b.n	8004464 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d01d      	beq.n	800440c <I2C_MasterTransmit_BTF+0x8c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d01a      	beq.n	800440c <I2C_MasterTransmit_BTF+0x8c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043dc:	d016      	beq.n	800440c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2211      	movs	r2, #17
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff feb7 	bl	8004178 <HAL_I2C_MasterTxCpltCallback>
}
 800440a:	e02b      	b.n	8004464 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800441a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b40      	cmp	r3, #64	; 0x40
 8004444:	d107      	bne.n	8004456 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fed2 	bl	80041f8 <HAL_I2C_MemTxCpltCallback>
}
 8004454:	e006      	b.n	8004464 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fe8a 	bl	8004178 <HAL_I2C_MasterTxCpltCallback>
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11d      	bne.n	80044c0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d10b      	bne.n	80044a4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004490:	b2da      	uxtb	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449c:	1c9a      	adds	r2, r3, #2
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80044a2:	e073      	b.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	121b      	asrs	r3, r3, #8
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044be:	e065      	b.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10b      	bne.n	80044e0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044de:	e055      	b.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d151      	bne.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	2b22      	cmp	r3, #34	; 0x22
 80044ec:	d10d      	bne.n	800450a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044fc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004508:	e040      	b.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b21      	cmp	r3, #33	; 0x21
 8004518:	d112      	bne.n	8004540 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	781a      	ldrb	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800453e:	e025      	b.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d120      	bne.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	2b21      	cmp	r3, #33	; 0x21
 800454e:	d11d      	bne.n	800458c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800455e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fe36 	bl	80041f8 <HAL_I2C_MemTxCpltCallback>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b22      	cmp	r3, #34	; 0x22
 80045a6:	f040 80a2 	bne.w	80046ee <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d921      	bls.n	80045fc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	f040 8082 	bne.w	80046ee <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80045fa:	e078      	b.n	80046ee <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	2b02      	cmp	r3, #2
 8004602:	d074      	beq.n	80046ee <I2C_MasterReceive_RXNE+0x15a>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d002      	beq.n	8004610 <I2C_MasterReceive_RXNE+0x7c>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d16e      	bne.n	80046ee <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 f81d 	bl	8005650 <I2C_WaitOnSTOPRequestThroughIT>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d142      	bne.n	80046a2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800463a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d10a      	bne.n	800468c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff fdc1 	bl	800420c <HAL_I2C_MemRxCpltCallback>
}
 800468a:	e030      	b.n	80046ee <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2212      	movs	r2, #18
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fd76 	bl	800418c <HAL_I2C_MasterRxCpltCallback>
}
 80046a0:	e025      	b.n	80046ee <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff fd99 	bl	8004220 <HAL_I2C_ErrorCallback>
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	2b04      	cmp	r3, #4
 800470c:	d11b      	bne.n	8004746 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004744:	e0bd      	b.n	80048c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d129      	bne.n	80047a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b04      	cmp	r3, #4
 8004764:	d00a      	beq.n	800477c <I2C_MasterReceive_BTF+0x86>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d007      	beq.n	800477c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800477a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047a2:	e08e      	b.n	80048c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d176      	bne.n	800489c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d002      	beq.n	80047ba <I2C_MasterReceive_BTF+0xc4>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b10      	cmp	r3, #16
 80047b8:	d108      	bne.n	80047cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e019      	b.n	8004800 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d002      	beq.n	80047d8 <I2C_MasterReceive_BTF+0xe2>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d108      	bne.n	80047ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	e00a      	b.n	8004800 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d007      	beq.n	8004800 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800485a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d10a      	bne.n	8004886 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fcc4 	bl	800420c <HAL_I2C_MemRxCpltCallback>
}
 8004884:	e01d      	b.n	80048c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2212      	movs	r2, #18
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fc79 	bl	800418c <HAL_I2C_MasterRxCpltCallback>
}
 800489a:	e012      	b.n	80048c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d117      	bne.n	800490e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80048f8:	e067      	b.n	80049ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	b2da      	uxtb	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	611a      	str	r2, [r3, #16]
}
 800490c:	e05d      	b.n	80049ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004916:	d133      	bne.n	8004980 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b21      	cmp	r3, #33	; 0x21
 8004922:	d109      	bne.n	8004938 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004934:	611a      	str	r2, [r3, #16]
 8004936:	e008      	b.n	800494a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	b2da      	uxtb	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	2b00      	cmp	r3, #0
 8004950:	d004      	beq.n	800495c <I2C_Master_SB+0x92>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	2b00      	cmp	r3, #0
 8004962:	d032      	beq.n	80049ca <I2C_Master_SB+0x100>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d02d      	beq.n	80049ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497c:	605a      	str	r2, [r3, #4]
}
 800497e:	e024      	b.n	80049ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10e      	bne.n	80049a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	b29b      	uxth	r3, r3
 800498e:	11db      	asrs	r3, r3, #7
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f003 0306 	and.w	r3, r3, #6
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f063 030f 	orn	r3, r3, #15
 800499c:	b2da      	uxtb	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]
}
 80049a4:	e011      	b.n	80049ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10d      	bne.n	80049ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	11db      	asrs	r3, r3, #7
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0306 	and.w	r3, r3, #6
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f063 030e 	orn	r3, r3, #14
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d004      	beq.n	80049fc <I2C_Master_ADD10+0x26>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d108      	bne.n	8004a0e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <I2C_Master_ADD10+0x48>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a1c:	605a      	str	r2, [r3, #4]
  }
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b091      	sub	sp, #68	; 0x44
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b22      	cmp	r3, #34	; 0x22
 8004a52:	f040 8169 	bne.w	8004d28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <I2C_Master_ADDR+0x54>
 8004a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d10b      	bne.n	8004a7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a66:	2300      	movs	r3, #0
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7c:	e160      	b.n	8004d40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11d      	bne.n	8004ac2 <I2C_Master_ADDR+0x98>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a8e:	d118      	bne.n	8004ac2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a90:	2300      	movs	r3, #0
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	651a      	str	r2, [r3, #80]	; 0x50
 8004ac0:	e13e      	b.n	8004d40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d113      	bne.n	8004af4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004acc:	2300      	movs	r3, #0
 8004ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e115      	b.n	8004d20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	f040 808a 	bne.w	8004c14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b06:	d137      	bne.n	8004b78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b26:	d113      	bne.n	8004b50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	e0e7      	b.n	8004d20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	623b      	str	r3, [r7, #32]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	623b      	str	r3, [r7, #32]
 8004b64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e0d3      	b.n	8004d20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d02e      	beq.n	8004bdc <I2C_Master_ADDR+0x1b2>
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d02b      	beq.n	8004bdc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	2b12      	cmp	r3, #18
 8004b88:	d102      	bne.n	8004b90 <I2C_Master_ADDR+0x166>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d125      	bne.n	8004bdc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d00e      	beq.n	8004bb4 <I2C_Master_ADDR+0x18a>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d00b      	beq.n	8004bb4 <I2C_Master_ADDR+0x18a>
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d008      	beq.n	8004bb4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e007      	b.n	8004bc4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bc2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	e0a1      	b.n	8004d20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bec:	2300      	movs	r3, #0
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e085      	b.n	8004d20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d14d      	bne.n	8004cba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d016      	beq.n	8004c52 <I2C_Master_ADDR+0x228>
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d013      	beq.n	8004c52 <I2C_Master_ADDR+0x228>
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d010      	beq.n	8004c52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e007      	b.n	8004c62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d117      	bne.n	8004ca2 <I2C_Master_ADDR+0x278>
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c78:	d00b      	beq.n	8004c92 <I2C_Master_ADDR+0x268>
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d008      	beq.n	8004c92 <I2C_Master_ADDR+0x268>
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d005      	beq.n	8004c92 <I2C_Master_ADDR+0x268>
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d002      	beq.n	8004c92 <I2C_Master_ADDR+0x268>
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	2b20      	cmp	r3, #32
 8004c90:	d107      	bne.n	8004ca2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ca0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	e032      	b.n	8004d20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd8:	d117      	bne.n	8004d0a <I2C_Master_ADDR+0x2e0>
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ce0:	d00b      	beq.n	8004cfa <I2C_Master_ADDR+0x2d0>
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d008      	beq.n	8004cfa <I2C_Master_ADDR+0x2d0>
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d005      	beq.n	8004cfa <I2C_Master_ADDR+0x2d0>
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b10      	cmp	r3, #16
 8004cf2:	d002      	beq.n	8004cfa <I2C_Master_ADDR+0x2d0>
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d107      	bne.n	8004d0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d26:	e00b      	b.n	8004d40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	e7ff      	b.n	8004d40 <I2C_Master_ADDR+0x316>
 8004d40:	bf00      	nop
 8004d42:	3744      	adds	r7, #68	; 0x44
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d02b      	beq.n	8004dbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	781a      	ldrb	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d114      	bne.n	8004dbe <I2C_SlaveTransmit_TXE+0x72>
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b29      	cmp	r3, #41	; 0x29
 8004d98:	d111      	bne.n	8004dbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2221      	movs	r2, #33	; 0x21
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2228      	movs	r2, #40	; 0x28
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff f9f1 	bl	80041a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d011      	beq.n	8004dfc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d02c      	beq.n	8004e7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d114      	bne.n	8004e7c <I2C_SlaveReceive_RXNE+0x74>
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b2a      	cmp	r3, #42	; 0x2a
 8004e56:	d111      	bne.n	8004e7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2222      	movs	r2, #34	; 0x22
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2228      	movs	r2, #40	; 0x28
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff f99c 	bl	80041b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d012      	beq.n	8004ebc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ee2:	2b28      	cmp	r3, #40	; 0x28
 8004ee4:	d127      	bne.n	8004f36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	089b      	lsrs	r3, r3, #2
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	09db      	lsrs	r3, r3, #7
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d103      	bne.n	8004f1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	81bb      	strh	r3, [r7, #12]
 8004f18:	e002      	b.n	8004f20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f28:	89ba      	ldrh	r2, [r7, #12]
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff f94a 	bl	80041c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f34:	e00e      	b.n	8004f54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60bb      	str	r3, [r7, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb8:	d172      	bne.n	80050a0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	2b22      	cmp	r3, #34	; 0x22
 8004fbe:	d002      	beq.n	8004fc6 <I2C_Slave_STOPF+0x6a>
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc4:	d135      	bne.n	8005032 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ff8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe faaa 	bl	8003558 <HAL_DMA_GetState>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d049      	beq.n	800509e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	4a69      	ldr	r2, [pc, #420]	; (80051b4 <I2C_Slave_STOPF+0x258>)
 8005010:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe f8f2 	bl	8003200 <HAL_DMA_Abort_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d03d      	beq.n	800509e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800502c:	4610      	mov	r0, r2
 800502e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005030:	e035      	b.n	800509e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f043 0204 	orr.w	r2, r3, #4
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005064:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe fa74 	bl	8003558 <HAL_DMA_GetState>
 8005070:	4603      	mov	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d014      	beq.n	80050a0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507a:	4a4e      	ldr	r2, [pc, #312]	; (80051b4 <I2C_Slave_STOPF+0x258>)
 800507c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe f8bc 	bl	8003200 <HAL_DMA_Abort_IT>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005098:	4610      	mov	r0, r2
 800509a:	4798      	blx	r3
 800509c:	e000      	b.n	80050a0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800509e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d03e      	beq.n	8005128 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d112      	bne.n	80050de <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d112      	bne.n	8005112 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691a      	ldr	r2, [r3, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	f043 0204 	orr.w	r2, r3, #4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f8b3 	bl	800529c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005136:	e039      	b.n	80051ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b2a      	cmp	r3, #42	; 0x2a
 800513c:	d109      	bne.n	8005152 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2228      	movs	r2, #40	; 0x28
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff f831 	bl	80041b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b28      	cmp	r3, #40	; 0x28
 800515c:	d111      	bne.n	8005182 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <I2C_Slave_STOPF+0x25c>)
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff f832 	bl	80041e4 <HAL_I2C_ListenCpltCallback>
}
 8005180:	e014      	b.n	80051ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	2b22      	cmp	r3, #34	; 0x22
 8005188:	d002      	beq.n	8005190 <I2C_Slave_STOPF+0x234>
 800518a:	7bfb      	ldrb	r3, [r7, #15]
 800518c:	2b22      	cmp	r3, #34	; 0x22
 800518e:	d10d      	bne.n	80051ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff f804 	bl	80041b4 <HAL_I2C_SlaveRxCpltCallback>
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	08005501 	.word	0x08005501
 80051b8:	ffff0000 	.word	0xffff0000

080051bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d002      	beq.n	80051de <I2C_Slave_AF+0x22>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d129      	bne.n	8005232 <I2C_Slave_AF+0x76>
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	2b28      	cmp	r3, #40	; 0x28
 80051e2:	d126      	bne.n	8005232 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <I2C_Slave_AF+0xdc>)
 80051e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005202:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005212:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fe ffda 	bl	80041e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005230:	e02e      	b.n	8005290 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2b21      	cmp	r3, #33	; 0x21
 8005236:	d126      	bne.n	8005286 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <I2C_Slave_AF+0xdc>)
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2221      	movs	r2, #33	; 0x21
 8005242:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005262:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800526c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fe ff8e 	bl	80041a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005284:	e004      	b.n	8005290 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800528e:	615a      	str	r2, [r3, #20]
}
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	ffff0000 	.word	0xffff0000

0800529c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052b4:	7bbb      	ldrb	r3, [r7, #14]
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d002      	beq.n	80052c0 <I2C_ITError+0x24>
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d10a      	bne.n	80052d6 <I2C_ITError+0x3a>
 80052c0:	7bfb      	ldrb	r3, [r7, #15]
 80052c2:	2b22      	cmp	r3, #34	; 0x22
 80052c4:	d107      	bne.n	80052d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052dc:	2b28      	cmp	r3, #40	; 0x28
 80052de:	d107      	bne.n	80052f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2228      	movs	r2, #40	; 0x28
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80052ee:	e015      	b.n	800531c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fe:	d00a      	beq.n	8005316 <I2C_ITError+0x7a>
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b60      	cmp	r3, #96	; 0x60
 8005304:	d007      	beq.n	8005316 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532a:	d162      	bne.n	80053f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800533a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b01      	cmp	r3, #1
 8005348:	d020      	beq.n	800538c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	4a6a      	ldr	r2, [pc, #424]	; (80054f8 <I2C_ITError+0x25c>)
 8005350:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	4618      	mov	r0, r3
 8005358:	f7fd ff52 	bl	8003200 <HAL_DMA_Abort_IT>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8089 	beq.w	8005476 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005386:	4610      	mov	r0, r2
 8005388:	4798      	blx	r3
 800538a:	e074      	b.n	8005476 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	4a59      	ldr	r2, [pc, #356]	; (80054f8 <I2C_ITError+0x25c>)
 8005392:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	4618      	mov	r0, r3
 800539a:	f7fd ff31 	bl	8003200 <HAL_DMA_Abort_IT>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d068      	beq.n	8005476 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d10b      	bne.n	80053ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053ec:	4610      	mov	r0, r2
 80053ee:	4798      	blx	r3
 80053f0:	e041      	b.n	8005476 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b60      	cmp	r3, #96	; 0x60
 80053fc:	d125      	bne.n	800544a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d10b      	bne.n	8005432 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fe fef6 	bl	8004234 <HAL_I2C_AbortCpltCallback>
 8005448:	e015      	b.n	8005476 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d10b      	bne.n	8005470 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fe fed5 	bl	8004220 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10e      	bne.n	80054a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800548c:	2b00      	cmp	r3, #0
 800548e:	d109      	bne.n	80054a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005496:	2b00      	cmp	r3, #0
 8005498:	d104      	bne.n	80054a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d007      	beq.n	80054b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	d113      	bne.n	80054f0 <I2C_ITError+0x254>
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b28      	cmp	r3, #40	; 0x28
 80054cc:	d110      	bne.n	80054f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <I2C_ITError+0x260>)
 80054d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fe fe7a 	bl	80041e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	08005501 	.word	0x08005501
 80054fc:	ffff0000 	.word	0xffff0000

08005500 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005518:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800551a:	4b4b      	ldr	r3, [pc, #300]	; (8005648 <I2C_DMAAbort+0x148>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	08db      	lsrs	r3, r3, #3
 8005520:	4a4a      	ldr	r2, [pc, #296]	; (800564c <I2C_DMAAbort+0x14c>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	0a1a      	lsrs	r2, r3, #8
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	00da      	lsls	r2, r3, #3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005546:	e00a      	b.n	800555e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555c:	d0ea      	beq.n	8005534 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556a:	2200      	movs	r2, #0
 800556c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	2200      	movs	r2, #0
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	2200      	movs	r2, #0
 80055a2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	2200      	movs	r2, #0
 80055b2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0201 	bic.w	r2, r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d10e      	bne.n	80055ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055e6:	6978      	ldr	r0, [r7, #20]
 80055e8:	f7fe fe24 	bl	8004234 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055ec:	e027      	b.n	800563e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055ee:	7cfb      	ldrb	r3, [r7, #19]
 80055f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055f4:	2b28      	cmp	r3, #40	; 0x28
 80055f6:	d117      	bne.n	8005628 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005616:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2200      	movs	r2, #0
 800561c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2228      	movs	r2, #40	; 0x28
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005626:	e007      	b.n	8005638 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005638:	6978      	ldr	r0, [r7, #20]
 800563a:	f7fe fdf1 	bl	8004220 <HAL_I2C_ErrorCallback>
}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000028 	.word	0x20000028
 800564c:	14f8b589 	.word	0x14f8b589

08005650 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800565c:	4b13      	ldr	r3, [pc, #76]	; (80056ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	08db      	lsrs	r3, r3, #3
 8005662:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	0a1a      	lsrs	r2, r3, #8
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3b01      	subs	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d107      	bne.n	800568e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e008      	b.n	80056a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800569c:	d0e9      	beq.n	8005672 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	20000028 	.word	0x20000028
 80056b0:	14f8b589 	.word	0x14f8b589

080056b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80056c4:	d103      	bne.n	80056ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056cc:	e007      	b.n	80056de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80056d6:	d102      	bne.n	80056de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2208      	movs	r2, #8
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0cc      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005700:	4b68      	ldr	r3, [pc, #416]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d90c      	bls.n	8005728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b63      	ldr	r3, [pc, #396]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0b8      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d020      	beq.n	8005776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005740:	4b59      	ldr	r3, [pc, #356]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a58      	ldr	r2, [pc, #352]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800574a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005758:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	4a52      	ldr	r2, [pc, #328]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005764:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	494d      	ldr	r1, [pc, #308]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	4313      	orrs	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d044      	beq.n	800580c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d119      	bne.n	80057ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e07f      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d003      	beq.n	80057aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d107      	bne.n	80057ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057aa:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e06f      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ba:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e067      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ca:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f023 0203 	bic.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4934      	ldr	r1, [pc, #208]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057dc:	f7fd fa7c 	bl	8002cd8 <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	e00a      	b.n	80057fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e4:	f7fd fa78 	bl	8002cd8 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e04f      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 020c 	and.w	r2, r3, #12
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	429a      	cmp	r2, r3
 800580a:	d1eb      	bne.n	80057e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800580c:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d20c      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e032      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4916      	ldr	r1, [pc, #88]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	490e      	ldr	r1, [pc, #56]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005872:	f000 f855 	bl	8005920 <HAL_RCC_GetSysClockFreq>
 8005876:	4602      	mov	r2, r0
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	490a      	ldr	r1, [pc, #40]	; (80058ac <HAL_RCC_ClockConfig+0x1c0>)
 8005884:	5ccb      	ldrb	r3, [r1, r3]
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <HAL_RCC_ClockConfig+0x1c4>)
 800588c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd f9dc 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40023c00 	.word	0x40023c00
 80058a8:	40023800 	.word	0x40023800
 80058ac:	08007f78 	.word	0x08007f78
 80058b0:	20000028 	.word	0x20000028
 80058b4:	20000030 	.word	0x20000030

080058b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058bc:	4b03      	ldr	r3, [pc, #12]	; (80058cc <HAL_RCC_GetHCLKFreq+0x14>)
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000028 	.word	0x20000028

080058d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058d4:	f7ff fff0 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 80058d8:	4602      	mov	r2, r0
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	0a9b      	lsrs	r3, r3, #10
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	4903      	ldr	r1, [pc, #12]	; (80058f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e6:	5ccb      	ldrb	r3, [r1, r3]
 80058e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40023800 	.word	0x40023800
 80058f4:	08007f88 	.word	0x08007f88

080058f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058fc:	f7ff ffdc 	bl	80058b8 <HAL_RCC_GetHCLKFreq>
 8005900:	4602      	mov	r2, r0
 8005902:	4b05      	ldr	r3, [pc, #20]	; (8005918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	0b5b      	lsrs	r3, r3, #13
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	4903      	ldr	r1, [pc, #12]	; (800591c <HAL_RCC_GetPCLK2Freq+0x24>)
 800590e:	5ccb      	ldrb	r3, [r1, r3]
 8005910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	bd80      	pop	{r7, pc}
 8005918:	40023800 	.word	0x40023800
 800591c:	08007f88 	.word	0x08007f88

08005920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005924:	b088      	sub	sp, #32
 8005926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800593c:	4bce      	ldr	r3, [pc, #824]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 030c 	and.w	r3, r3, #12
 8005944:	2b0c      	cmp	r3, #12
 8005946:	f200 818d 	bhi.w	8005c64 <HAL_RCC_GetSysClockFreq+0x344>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_RCC_GetSysClockFreq+0x30>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005985 	.word	0x08005985
 8005954:	08005c65 	.word	0x08005c65
 8005958:	08005c65 	.word	0x08005c65
 800595c:	08005c65 	.word	0x08005c65
 8005960:	0800598b 	.word	0x0800598b
 8005964:	08005c65 	.word	0x08005c65
 8005968:	08005c65 	.word	0x08005c65
 800596c:	08005c65 	.word	0x08005c65
 8005970:	08005991 	.word	0x08005991
 8005974:	08005c65 	.word	0x08005c65
 8005978:	08005c65 	.word	0x08005c65
 800597c:	08005c65 	.word	0x08005c65
 8005980:	08005b05 	.word	0x08005b05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005984:	4bbd      	ldr	r3, [pc, #756]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005986:	61bb      	str	r3, [r7, #24]
       break;
 8005988:	e16f      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800598a:	4bbd      	ldr	r3, [pc, #756]	; (8005c80 <HAL_RCC_GetSysClockFreq+0x360>)
 800598c:	61bb      	str	r3, [r7, #24]
      break;
 800598e:	e16c      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005990:	4bb9      	ldr	r3, [pc, #740]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005998:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800599a:	4bb7      	ldr	r3, [pc, #732]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d053      	beq.n	8005a4e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059a6:	4bb4      	ldr	r3, [pc, #720]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	099b      	lsrs	r3, r3, #6
 80059ac:	461a      	mov	r2, r3
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059b6:	f04f 0100 	mov.w	r1, #0
 80059ba:	ea02 0400 	and.w	r4, r2, r0
 80059be:	603c      	str	r4, [r7, #0]
 80059c0:	400b      	ands	r3, r1
 80059c2:	607b      	str	r3, [r7, #4]
 80059c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059c8:	4620      	mov	r0, r4
 80059ca:	4629      	mov	r1, r5
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	014b      	lsls	r3, r1, #5
 80059d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80059da:	0142      	lsls	r2, r0, #5
 80059dc:	4610      	mov	r0, r2
 80059de:	4619      	mov	r1, r3
 80059e0:	4623      	mov	r3, r4
 80059e2:	1ac0      	subs	r0, r0, r3
 80059e4:	462b      	mov	r3, r5
 80059e6:	eb61 0103 	sbc.w	r1, r1, r3
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	018b      	lsls	r3, r1, #6
 80059f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80059f8:	0182      	lsls	r2, r0, #6
 80059fa:	1a12      	subs	r2, r2, r0
 80059fc:	eb63 0301 	sbc.w	r3, r3, r1
 8005a00:	f04f 0000 	mov.w	r0, #0
 8005a04:	f04f 0100 	mov.w	r1, #0
 8005a08:	00d9      	lsls	r1, r3, #3
 8005a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a0e:	00d0      	lsls	r0, r2, #3
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4621      	mov	r1, r4
 8005a16:	1852      	adds	r2, r2, r1
 8005a18:	4629      	mov	r1, r5
 8005a1a:	eb43 0101 	adc.w	r1, r3, r1
 8005a1e:	460b      	mov	r3, r1
 8005a20:	f04f 0000 	mov.w	r0, #0
 8005a24:	f04f 0100 	mov.w	r1, #0
 8005a28:	0259      	lsls	r1, r3, #9
 8005a2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a2e:	0250      	lsls	r0, r2, #9
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4610      	mov	r0, r2
 8005a36:	4619      	mov	r1, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	f7fa ffd8 	bl	80009f4 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e04c      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4e:	4b8a      	ldr	r3, [pc, #552]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	099b      	lsrs	r3, r3, #6
 8005a54:	461a      	mov	r2, r3
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a5e:	f04f 0100 	mov.w	r1, #0
 8005a62:	ea02 0a00 	and.w	sl, r2, r0
 8005a66:	ea03 0b01 	and.w	fp, r3, r1
 8005a6a:	4650      	mov	r0, sl
 8005a6c:	4659      	mov	r1, fp
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	014b      	lsls	r3, r1, #5
 8005a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a7c:	0142      	lsls	r2, r0, #5
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	ebb0 000a 	subs.w	r0, r0, sl
 8005a86:	eb61 010b 	sbc.w	r1, r1, fp
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	018b      	lsls	r3, r1, #6
 8005a94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a98:	0182      	lsls	r2, r0, #6
 8005a9a:	1a12      	subs	r2, r2, r0
 8005a9c:	eb63 0301 	sbc.w	r3, r3, r1
 8005aa0:	f04f 0000 	mov.w	r0, #0
 8005aa4:	f04f 0100 	mov.w	r1, #0
 8005aa8:	00d9      	lsls	r1, r3, #3
 8005aaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aae:	00d0      	lsls	r0, r2, #3
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	eb12 020a 	adds.w	r2, r2, sl
 8005ab8:	eb43 030b 	adc.w	r3, r3, fp
 8005abc:	f04f 0000 	mov.w	r0, #0
 8005ac0:	f04f 0100 	mov.w	r1, #0
 8005ac4:	0299      	lsls	r1, r3, #10
 8005ac6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005aca:	0290      	lsls	r0, r2, #10
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	f7fa ff8a 	bl	80009f4 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ae8:	4b63      	ldr	r3, [pc, #396]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	0c1b      	lsrs	r3, r3, #16
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	3301      	adds	r3, #1
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b00:	61bb      	str	r3, [r7, #24]
      break;
 8005b02:	e0b2      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b04:	4b5c      	ldr	r3, [pc, #368]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b0e:	4b5a      	ldr	r3, [pc, #360]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d04d      	beq.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b1a:	4b57      	ldr	r3, [pc, #348]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	099b      	lsrs	r3, r3, #6
 8005b20:	461a      	mov	r2, r3
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	ea02 0800 	and.w	r8, r2, r0
 8005b32:	ea03 0901 	and.w	r9, r3, r1
 8005b36:	4640      	mov	r0, r8
 8005b38:	4649      	mov	r1, r9
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	014b      	lsls	r3, r1, #5
 8005b44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b48:	0142      	lsls	r2, r0, #5
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	ebb0 0008 	subs.w	r0, r0, r8
 8005b52:	eb61 0109 	sbc.w	r1, r1, r9
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	018b      	lsls	r3, r1, #6
 8005b60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b64:	0182      	lsls	r2, r0, #6
 8005b66:	1a12      	subs	r2, r2, r0
 8005b68:	eb63 0301 	sbc.w	r3, r3, r1
 8005b6c:	f04f 0000 	mov.w	r0, #0
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	00d9      	lsls	r1, r3, #3
 8005b76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b7a:	00d0      	lsls	r0, r2, #3
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	eb12 0208 	adds.w	r2, r2, r8
 8005b84:	eb43 0309 	adc.w	r3, r3, r9
 8005b88:	f04f 0000 	mov.w	r0, #0
 8005b8c:	f04f 0100 	mov.w	r1, #0
 8005b90:	0259      	lsls	r1, r3, #9
 8005b92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b96:	0250      	lsls	r0, r2, #9
 8005b98:	4602      	mov	r2, r0
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	f7fa ff24 	bl	80009f4 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e04a      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb6:	4b30      	ldr	r3, [pc, #192]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bc6:	f04f 0100 	mov.w	r1, #0
 8005bca:	ea02 0400 	and.w	r4, r2, r0
 8005bce:	ea03 0501 	and.w	r5, r3, r1
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	014b      	lsls	r3, r1, #5
 8005be0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005be4:	0142      	lsls	r2, r0, #5
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	1b00      	subs	r0, r0, r4
 8005bec:	eb61 0105 	sbc.w	r1, r1, r5
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	018b      	lsls	r3, r1, #6
 8005bfa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005bfe:	0182      	lsls	r2, r0, #6
 8005c00:	1a12      	subs	r2, r2, r0
 8005c02:	eb63 0301 	sbc.w	r3, r3, r1
 8005c06:	f04f 0000 	mov.w	r0, #0
 8005c0a:	f04f 0100 	mov.w	r1, #0
 8005c0e:	00d9      	lsls	r1, r3, #3
 8005c10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c14:	00d0      	lsls	r0, r2, #3
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	1912      	adds	r2, r2, r4
 8005c1c:	eb45 0303 	adc.w	r3, r5, r3
 8005c20:	f04f 0000 	mov.w	r0, #0
 8005c24:	f04f 0100 	mov.w	r1, #0
 8005c28:	0299      	lsls	r1, r3, #10
 8005c2a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c2e:	0290      	lsls	r0, r2, #10
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4610      	mov	r0, r2
 8005c36:	4619      	mov	r1, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	f7fa fed8 	bl	80009f4 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4613      	mov	r3, r2
 8005c4a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	0f1b      	lsrs	r3, r3, #28
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	61bb      	str	r3, [r7, #24]
      break;
 8005c62:	e002      	b.n	8005c6a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005c66:	61bb      	str	r3, [r7, #24]
      break;
 8005c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3720      	adds	r7, #32
 8005c70:	46bd      	mov	sp, r7
 8005c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c76:	bf00      	nop
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	00f42400 	.word	0x00f42400
 8005c80:	007a1200 	.word	0x007a1200

08005c84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e28d      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 8083 	beq.w	8005daa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ca4:	4b94      	ldr	r3, [pc, #592]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 030c 	and.w	r3, r3, #12
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d019      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005cb0:	4b91      	ldr	r3, [pc, #580]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d106      	bne.n	8005cca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005cbc:	4b8e      	ldr	r3, [pc, #568]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc8:	d00c      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cca:	4b8b      	ldr	r3, [pc, #556]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d112      	bne.n	8005cfc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cd6:	4b88      	ldr	r3, [pc, #544]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce2:	d10b      	bne.n	8005cfc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce4:	4b84      	ldr	r3, [pc, #528]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d05b      	beq.n	8005da8 <HAL_RCC_OscConfig+0x124>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d157      	bne.n	8005da8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e25a      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d106      	bne.n	8005d14 <HAL_RCC_OscConfig+0x90>
 8005d06:	4b7c      	ldr	r3, [pc, #496]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a7b      	ldr	r2, [pc, #492]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	e01d      	b.n	8005d50 <HAL_RCC_OscConfig+0xcc>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d1c:	d10c      	bne.n	8005d38 <HAL_RCC_OscConfig+0xb4>
 8005d1e:	4b76      	ldr	r3, [pc, #472]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a75      	ldr	r2, [pc, #468]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	4b73      	ldr	r3, [pc, #460]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a72      	ldr	r2, [pc, #456]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e00b      	b.n	8005d50 <HAL_RCC_OscConfig+0xcc>
 8005d38:	4b6f      	ldr	r3, [pc, #444]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a6e      	ldr	r2, [pc, #440]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	4b6c      	ldr	r3, [pc, #432]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a6b      	ldr	r2, [pc, #428]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d013      	beq.n	8005d80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d58:	f7fc ffbe 	bl	8002cd8 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d60:	f7fc ffba 	bl	8002cd8 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b64      	cmp	r3, #100	; 0x64
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e21f      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d72:	4b61      	ldr	r3, [pc, #388]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f0      	beq.n	8005d60 <HAL_RCC_OscConfig+0xdc>
 8005d7e:	e014      	b.n	8005daa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fc ffaa 	bl	8002cd8 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d88:	f7fc ffa6 	bl	8002cd8 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e20b      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d9a:	4b57      	ldr	r3, [pc, #348]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x104>
 8005da6:	e000      	b.n	8005daa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d06f      	beq.n	8005e96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005db6:	4b50      	ldr	r3, [pc, #320]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005dc2:	4b4d      	ldr	r3, [pc, #308]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d105      	bne.n	8005dda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005dce:	4b4a      	ldr	r3, [pc, #296]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00b      	beq.n	8005df2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dda:	4b47      	ldr	r3, [pc, #284]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d11c      	bne.n	8005e20 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005de6:	4b44      	ldr	r3, [pc, #272]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d116      	bne.n	8005e20 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005df2:	4b41      	ldr	r3, [pc, #260]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_RCC_OscConfig+0x186>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d001      	beq.n	8005e0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e1d3      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e0a:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4937      	ldr	r1, [pc, #220]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e1e:	e03a      	b.n	8005e96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d020      	beq.n	8005e6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e28:	4b34      	ldr	r3, [pc, #208]	; (8005efc <HAL_RCC_OscConfig+0x278>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2e:	f7fc ff53 	bl	8002cd8 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e36:	f7fc ff4f 	bl	8002cd8 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e1b4      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e48:	4b2b      	ldr	r3, [pc, #172]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e54:	4b28      	ldr	r3, [pc, #160]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4925      	ldr	r1, [pc, #148]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	600b      	str	r3, [r1, #0]
 8005e68:	e015      	b.n	8005e96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <HAL_RCC_OscConfig+0x278>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fc ff32 	bl	8002cd8 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e78:	f7fc ff2e 	bl	8002cd8 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e193      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d036      	beq.n	8005f10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d016      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eaa:	4b15      	ldr	r3, [pc, #84]	; (8005f00 <HAL_RCC_OscConfig+0x27c>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb0:	f7fc ff12 	bl	8002cd8 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb8:	f7fc ff0e 	bl	8002cd8 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e173      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_OscConfig+0x274>)
 8005ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0f0      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x234>
 8005ed6:	e01b      	b.n	8005f10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed8:	4b09      	ldr	r3, [pc, #36]	; (8005f00 <HAL_RCC_OscConfig+0x27c>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ede:	f7fc fefb 	bl	8002cd8 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee4:	e00e      	b.n	8005f04 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ee6:	f7fc fef7 	bl	8002cd8 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d907      	bls.n	8005f04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e15c      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	42470000 	.word	0x42470000
 8005f00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f04:	4b8a      	ldr	r3, [pc, #552]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ea      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 8097 	beq.w	800604c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f22:	4b83      	ldr	r3, [pc, #524]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]
 8005f32:	4b7f      	ldr	r3, [pc, #508]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	4a7e      	ldr	r2, [pc, #504]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f3e:	4b7c      	ldr	r3, [pc, #496]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	60bb      	str	r3, [r7, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4e:	4b79      	ldr	r3, [pc, #484]	; (8006134 <HAL_RCC_OscConfig+0x4b0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d118      	bne.n	8005f8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5a:	4b76      	ldr	r3, [pc, #472]	; (8006134 <HAL_RCC_OscConfig+0x4b0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a75      	ldr	r2, [pc, #468]	; (8006134 <HAL_RCC_OscConfig+0x4b0>)
 8005f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f66:	f7fc feb7 	bl	8002cd8 <HAL_GetTick>
 8005f6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	e008      	b.n	8005f80 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6e:	f7fc feb3 	bl	8002cd8 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e118      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	4b6c      	ldr	r3, [pc, #432]	; (8006134 <HAL_RCC_OscConfig+0x4b0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d106      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x31e>
 8005f94:	4b66      	ldr	r3, [pc, #408]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	4a65      	ldr	r2, [pc, #404]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa0:	e01c      	b.n	8005fdc <HAL_RCC_OscConfig+0x358>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x340>
 8005faa:	4b61      	ldr	r3, [pc, #388]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fae:	4a60      	ldr	r2, [pc, #384]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fb0:	f043 0304 	orr.w	r3, r3, #4
 8005fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb6:	4b5e      	ldr	r3, [pc, #376]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fba:	4a5d      	ldr	r2, [pc, #372]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc2:	e00b      	b.n	8005fdc <HAL_RCC_OscConfig+0x358>
 8005fc4:	4b5a      	ldr	r3, [pc, #360]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	4a59      	ldr	r2, [pc, #356]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd0:	4b57      	ldr	r3, [pc, #348]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	4a56      	ldr	r2, [pc, #344]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8005fd6:	f023 0304 	bic.w	r3, r3, #4
 8005fda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d015      	beq.n	8006010 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe4:	f7fc fe78 	bl	8002cd8 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fea:	e00a      	b.n	8006002 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fec:	f7fc fe74 	bl	8002cd8 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0d7      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006002:	4b4b      	ldr	r3, [pc, #300]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8006004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0ee      	beq.n	8005fec <HAL_RCC_OscConfig+0x368>
 800600e:	e014      	b.n	800603a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006010:	f7fc fe62 	bl	8002cd8 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006016:	e00a      	b.n	800602e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006018:	f7fc fe5e 	bl	8002cd8 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	f241 3288 	movw	r2, #5000	; 0x1388
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e0c1      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602e:	4b40      	ldr	r3, [pc, #256]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1ee      	bne.n	8006018 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d105      	bne.n	800604c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006040:	4b3b      	ldr	r3, [pc, #236]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	4a3a      	ldr	r2, [pc, #232]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8006046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800604a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80ad 	beq.w	80061b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
 800605e:	2b08      	cmp	r3, #8
 8006060:	d060      	beq.n	8006124 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d145      	bne.n	80060f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800606a:	4b33      	ldr	r3, [pc, #204]	; (8006138 <HAL_RCC_OscConfig+0x4b4>)
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fc fe32 	bl	8002cd8 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006078:	f7fc fe2e 	bl	8002cd8 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e093      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608a:	4b29      	ldr	r3, [pc, #164]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f0      	bne.n	8006078 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69da      	ldr	r2, [r3, #28]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	019b      	lsls	r3, r3, #6
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	3b01      	subs	r3, #1
 80060b0:	041b      	lsls	r3, r3, #16
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	061b      	lsls	r3, r3, #24
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	071b      	lsls	r3, r3, #28
 80060c2:	491b      	ldr	r1, [pc, #108]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c8:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <HAL_RCC_OscConfig+0x4b4>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ce:	f7fc fe03 	bl	8002cd8 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d6:	f7fc fdff 	bl	8002cd8 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e064      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_OscConfig+0x452>
 80060f4:	e05c      	b.n	80061b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <HAL_RCC_OscConfig+0x4b4>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fc:	f7fc fdec 	bl	8002cd8 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006104:	f7fc fde8 	bl	8002cd8 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e04d      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <HAL_RCC_OscConfig+0x4ac>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x480>
 8006122:	e045      	b.n	80061b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d107      	bne.n	800613c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e040      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
 8006130:	40023800 	.word	0x40023800
 8006134:	40007000 	.word	0x40007000
 8006138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <HAL_RCC_OscConfig+0x538>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d030      	beq.n	80061ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006154:	429a      	cmp	r2, r3
 8006156:	d129      	bne.n	80061ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d122      	bne.n	80061ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800616c:	4013      	ands	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006174:	4293      	cmp	r3, r2
 8006176:	d119      	bne.n	80061ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	3b01      	subs	r3, #1
 8006186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006188:	429a      	cmp	r2, r3
 800618a:	d10f      	bne.n	80061ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006198:	429a      	cmp	r2, r3
 800619a:	d107      	bne.n	80061ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40023800 	.word	0x40023800

080061c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e041      	b.n	8006256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fb ffda 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3304      	adds	r3, #4
 80061fc:	4619      	mov	r1, r3
 80061fe:	4610      	mov	r0, r2
 8006200:	f000 fad8 	bl	80067b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e041      	b.n	80062f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f839 	bl	80062fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2202      	movs	r2, #2
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3304      	adds	r3, #4
 800629a:	4619      	mov	r1, r3
 800629c:	4610      	mov	r0, r2
 800629e:	f000 fa89 	bl	80067b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <HAL_TIM_PWM_Start+0x24>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	bf14      	ite	ne
 800632c:	2301      	movne	r3, #1
 800632e:	2300      	moveq	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	e022      	b.n	800637a <HAL_TIM_PWM_Start+0x6a>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b04      	cmp	r3, #4
 8006338:	d109      	bne.n	800634e <HAL_TIM_PWM_Start+0x3e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b01      	cmp	r3, #1
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e015      	b.n	800637a <HAL_TIM_PWM_Start+0x6a>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b08      	cmp	r3, #8
 8006352:	d109      	bne.n	8006368 <HAL_TIM_PWM_Start+0x58>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	bf14      	ite	ne
 8006360:	2301      	movne	r3, #1
 8006362:	2300      	moveq	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	e008      	b.n	800637a <HAL_TIM_PWM_Start+0x6a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e07c      	b.n	800647c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <HAL_TIM_PWM_Start+0x82>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006390:	e013      	b.n	80063ba <HAL_TIM_PWM_Start+0xaa>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b04      	cmp	r3, #4
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_PWM_Start+0x92>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a0:	e00b      	b.n	80063ba <HAL_TIM_PWM_Start+0xaa>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Start+0xa2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063b0:	e003      	b.n	80063ba <HAL_TIM_PWM_Start+0xaa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2201      	movs	r2, #1
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fce0 	bl	8006d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2d      	ldr	r2, [pc, #180]	; (8006484 <HAL_TIM_PWM_Start+0x174>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_TIM_PWM_Start+0xcc>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a2c      	ldr	r2, [pc, #176]	; (8006488 <HAL_TIM_PWM_Start+0x178>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d101      	bne.n	80063e0 <HAL_TIM_PWM_Start+0xd0>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <HAL_TIM_PWM_Start+0xd2>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a22      	ldr	r2, [pc, #136]	; (8006484 <HAL_TIM_PWM_Start+0x174>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_TIM_PWM_Start+0x136>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006408:	d01d      	beq.n	8006446 <HAL_TIM_PWM_Start+0x136>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <HAL_TIM_PWM_Start+0x17c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_TIM_PWM_Start+0x136>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <HAL_TIM_PWM_Start+0x180>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_TIM_PWM_Start+0x136>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1c      	ldr	r2, [pc, #112]	; (8006494 <HAL_TIM_PWM_Start+0x184>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_TIM_PWM_Start+0x136>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a16      	ldr	r2, [pc, #88]	; (8006488 <HAL_TIM_PWM_Start+0x178>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_TIM_PWM_Start+0x136>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a18      	ldr	r2, [pc, #96]	; (8006498 <HAL_TIM_PWM_Start+0x188>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_TIM_PWM_Start+0x136>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a16      	ldr	r2, [pc, #88]	; (800649c <HAL_TIM_PWM_Start+0x18c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d111      	bne.n	800646a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b06      	cmp	r3, #6
 8006456:	d010      	beq.n	800647a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	e007      	b.n	800647a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0201 	orr.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40014000 	.word	0x40014000
 800649c:	40001800 	.word	0x40001800

080064a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e0ae      	b.n	800661c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b0c      	cmp	r3, #12
 80064ca:	f200 809f 	bhi.w	800660c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	08006509 	.word	0x08006509
 80064d8:	0800660d 	.word	0x0800660d
 80064dc:	0800660d 	.word	0x0800660d
 80064e0:	0800660d 	.word	0x0800660d
 80064e4:	08006549 	.word	0x08006549
 80064e8:	0800660d 	.word	0x0800660d
 80064ec:	0800660d 	.word	0x0800660d
 80064f0:	0800660d 	.word	0x0800660d
 80064f4:	0800658b 	.word	0x0800658b
 80064f8:	0800660d 	.word	0x0800660d
 80064fc:	0800660d 	.word	0x0800660d
 8006500:	0800660d 	.word	0x0800660d
 8006504:	080065cb 	.word	0x080065cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f9f0 	bl	80068f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0208 	orr.w	r2, r2, #8
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0204 	bic.w	r2, r2, #4
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	619a      	str	r2, [r3, #24]
      break;
 8006546:	e064      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fa40 	bl	80069d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6999      	ldr	r1, [r3, #24]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	021a      	lsls	r2, r3, #8
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	619a      	str	r2, [r3, #24]
      break;
 8006588:	e043      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fa95 	bl	8006ac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0208 	orr.w	r2, r2, #8
 80065a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0204 	bic.w	r2, r2, #4
 80065b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	61da      	str	r2, [r3, #28]
      break;
 80065c8:	e023      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fae9 	bl	8006ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69da      	ldr	r2, [r3, #28]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69da      	ldr	r2, [r3, #28]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69d9      	ldr	r1, [r3, #28]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	021a      	lsls	r2, r3, #8
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	61da      	str	r2, [r3, #28]
      break;
 800660a:	e002      	b.n	8006612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	75fb      	strb	r3, [r7, #23]
      break;
 8006610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800661a:	7dfb      	ldrb	r3, [r7, #23]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_TIM_ConfigClockSource+0x1c>
 800663c:	2302      	movs	r3, #2
 800663e:	e0b4      	b.n	80067aa <HAL_TIM_ConfigClockSource+0x186>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800665e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006678:	d03e      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0xd4>
 800667a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667e:	f200 8087 	bhi.w	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 8006682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006686:	f000 8086 	beq.w	8006796 <HAL_TIM_ConfigClockSource+0x172>
 800668a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800668e:	d87f      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 8006690:	2b70      	cmp	r3, #112	; 0x70
 8006692:	d01a      	beq.n	80066ca <HAL_TIM_ConfigClockSource+0xa6>
 8006694:	2b70      	cmp	r3, #112	; 0x70
 8006696:	d87b      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 8006698:	2b60      	cmp	r3, #96	; 0x60
 800669a:	d050      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x11a>
 800669c:	2b60      	cmp	r3, #96	; 0x60
 800669e:	d877      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066a0:	2b50      	cmp	r3, #80	; 0x50
 80066a2:	d03c      	beq.n	800671e <HAL_TIM_ConfigClockSource+0xfa>
 80066a4:	2b50      	cmp	r3, #80	; 0x50
 80066a6:	d873      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d058      	beq.n	800675e <HAL_TIM_ConfigClockSource+0x13a>
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d86f      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	2b30      	cmp	r3, #48	; 0x30
 80066b2:	d064      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066b4:	2b30      	cmp	r3, #48	; 0x30
 80066b6:	d86b      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d060      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d867      	bhi.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d05c      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d05a      	beq.n	800677e <HAL_TIM_ConfigClockSource+0x15a>
 80066c8:	e062      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	6899      	ldr	r1, [r3, #8]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f000 fb35 	bl	8006d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	609a      	str	r2, [r3, #8]
      break;
 80066f6:	e04f      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6899      	ldr	r1, [r3, #8]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f000 fb1e 	bl	8006d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800671a:	609a      	str	r2, [r3, #8]
      break;
 800671c:	e03c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	461a      	mov	r2, r3
 800672c:	f000 fa92 	bl	8006c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2150      	movs	r1, #80	; 0x50
 8006736:	4618      	mov	r0, r3
 8006738:	f000 faeb 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 800673c:	e02c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	6859      	ldr	r1, [r3, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	461a      	mov	r2, r3
 800674c:	f000 fab1 	bl	8006cb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2160      	movs	r1, #96	; 0x60
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fadb 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 800675c:	e01c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6859      	ldr	r1, [r3, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	461a      	mov	r2, r3
 800676c:	f000 fa72 	bl	8006c54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2140      	movs	r1, #64	; 0x40
 8006776:	4618      	mov	r0, r3
 8006778:	f000 facb 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 800677c:	e00c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f000 fac2 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 800678e:	e003      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	73fb      	strb	r3, [r7, #15]
      break;
 8006794:	e000      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a40      	ldr	r2, [pc, #256]	; (80068c8 <TIM_Base_SetConfig+0x114>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d013      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d2:	d00f      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3d      	ldr	r2, [pc, #244]	; (80068cc <TIM_Base_SetConfig+0x118>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00b      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3c      	ldr	r2, [pc, #240]	; (80068d0 <TIM_Base_SetConfig+0x11c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d007      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a3b      	ldr	r2, [pc, #236]	; (80068d4 <TIM_Base_SetConfig+0x120>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_Base_SetConfig+0x40>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a3a      	ldr	r2, [pc, #232]	; (80068d8 <TIM_Base_SetConfig+0x124>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d108      	bne.n	8006806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <TIM_Base_SetConfig+0x114>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d02b      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006814:	d027      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2c      	ldr	r2, [pc, #176]	; (80068cc <TIM_Base_SetConfig+0x118>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d023      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2b      	ldr	r2, [pc, #172]	; (80068d0 <TIM_Base_SetConfig+0x11c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01f      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <TIM_Base_SetConfig+0x120>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01b      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a29      	ldr	r2, [pc, #164]	; (80068d8 <TIM_Base_SetConfig+0x124>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d017      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a28      	ldr	r2, [pc, #160]	; (80068dc <TIM_Base_SetConfig+0x128>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a27      	ldr	r2, [pc, #156]	; (80068e0 <TIM_Base_SetConfig+0x12c>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00f      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <TIM_Base_SetConfig+0x130>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00b      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a25      	ldr	r2, [pc, #148]	; (80068e8 <TIM_Base_SetConfig+0x134>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a24      	ldr	r2, [pc, #144]	; (80068ec <TIM_Base_SetConfig+0x138>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <TIM_Base_SetConfig+0x13c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d108      	bne.n	8006878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <TIM_Base_SetConfig+0x114>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_Base_SetConfig+0xf8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <TIM_Base_SetConfig+0x124>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d103      	bne.n	80068b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	691a      	ldr	r2, [r3, #16]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	615a      	str	r2, [r3, #20]
}
 80068ba:	bf00      	nop
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40010400 	.word	0x40010400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800
 80068e8:	40001800 	.word	0x40001800
 80068ec:	40001c00 	.word	0x40001c00
 80068f0:	40002000 	.word	0x40002000

080068f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0201 	bic.w	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0302 	bic.w	r3, r3, #2
 800693c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a20      	ldr	r2, [pc, #128]	; (80069cc <TIM_OC1_SetConfig+0xd8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC1_SetConfig+0x64>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1f      	ldr	r2, [pc, #124]	; (80069d0 <TIM_OC1_SetConfig+0xdc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d10c      	bne.n	8006972 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0308 	bic.w	r3, r3, #8
 800695e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	; (80069cc <TIM_OC1_SetConfig+0xd8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_OC1_SetConfig+0x8e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a14      	ldr	r2, [pc, #80]	; (80069d0 <TIM_OC1_SetConfig+0xdc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d111      	bne.n	80069a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40010400 	.word	0x40010400

080069d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0210 	bic.w	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0320 	bic.w	r3, r3, #32
 8006a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a22      	ldr	r2, [pc, #136]	; (8006ab8 <TIM_OC2_SetConfig+0xe4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC2_SetConfig+0x68>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a21      	ldr	r2, [pc, #132]	; (8006abc <TIM_OC2_SetConfig+0xe8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10d      	bne.n	8006a58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a17      	ldr	r2, [pc, #92]	; (8006ab8 <TIM_OC2_SetConfig+0xe4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d003      	beq.n	8006a68 <TIM_OC2_SetConfig+0x94>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a16      	ldr	r2, [pc, #88]	; (8006abc <TIM_OC2_SetConfig+0xe8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d113      	bne.n	8006a90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40010400 	.word	0x40010400

08006ac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	021b      	lsls	r3, r3, #8
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a21      	ldr	r2, [pc, #132]	; (8006ba0 <TIM_OC3_SetConfig+0xe0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d003      	beq.n	8006b26 <TIM_OC3_SetConfig+0x66>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a20      	ldr	r2, [pc, #128]	; (8006ba4 <TIM_OC3_SetConfig+0xe4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d10d      	bne.n	8006b42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC3_SetConfig+0xe0>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_OC3_SetConfig+0x92>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <TIM_OC3_SetConfig+0xe4>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d113      	bne.n	8006b7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	021b      	lsls	r3, r3, #8
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	031b      	lsls	r3, r3, #12
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a12      	ldr	r2, [pc, #72]	; (8006c4c <TIM_OC4_SetConfig+0xa4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_OC4_SetConfig+0x68>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a11      	ldr	r2, [pc, #68]	; (8006c50 <TIM_OC4_SetConfig+0xa8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d109      	bne.n	8006c24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	019b      	lsls	r3, r3, #6
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	40010000 	.word	0x40010000
 8006c50:	40010400 	.word	0x40010400

08006c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0201 	bic.w	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 030a 	bic.w	r3, r3, #10
 8006c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f023 0210 	bic.w	r2, r3, #16
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	031b      	lsls	r3, r3, #12
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f043 0307 	orr.w	r3, r3, #7
 8006d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	021a      	lsls	r2, r3, #8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	609a      	str	r2, [r3, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1a      	ldr	r2, [r3, #32]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	43db      	mvns	r3, r3
 8006daa:	401a      	ands	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1a      	ldr	r2, [r3, #32]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e05a      	b.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d01d      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d10c      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40000400 	.word	0x40000400
 8006eb8:	40000800 	.word	0x40000800
 8006ebc:	40000c00 	.word	0x40000c00
 8006ec0:	40010400 	.word	0x40010400
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40001800 	.word	0x40001800

08006ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e03f      	b.n	8006f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fb f9d0 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2224      	movs	r2, #36	; 0x24
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fdc7 	bl	8007aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08c      	sub	sp, #48	; 0x30
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b20      	cmp	r3, #32
 8006f80:	d165      	bne.n	800704e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <HAL_UART_Transmit_DMA+0x26>
 8006f88:	88fb      	ldrh	r3, [r7, #6]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e05e      	b.n	8007050 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_UART_Transmit_DMA+0x38>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e057      	b.n	8007050 <HAL_UART_Transmit_DMA+0xe8>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	88fa      	ldrh	r2, [r7, #6]
 8006fb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2221      	movs	r2, #33	; 0x21
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fcc:	4a22      	ldr	r2, [pc, #136]	; (8007058 <HAL_UART_Transmit_DMA+0xf0>)
 8006fce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd4:	4a21      	ldr	r2, [pc, #132]	; (800705c <HAL_UART_Transmit_DMA+0xf4>)
 8006fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fdc:	4a20      	ldr	r2, [pc, #128]	; (8007060 <HAL_UART_Transmit_DMA+0xf8>)
 8006fde:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006fe8:	f107 0308 	add.w	r3, r7, #8
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	6819      	ldr	r1, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	88fb      	ldrh	r3, [r7, #6]
 8007000:	f7fc f836 	bl	8003070 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800700c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3314      	adds	r3, #20
 800701c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	617b      	str	r3, [r7, #20]
   return(result);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007036:	627a      	str	r2, [r7, #36]	; 0x24
 8007038:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6a39      	ldr	r1, [r7, #32]
 800703c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	61fb      	str	r3, [r7, #28]
   return(result);
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	e000      	b.n	8007050 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	3730      	adds	r7, #48	; 0x30
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	080075d5 	.word	0x080075d5
 800705c:	0800766f 	.word	0x0800766f
 8007060:	0800768b 	.word	0x0800768b

08007064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b0ba      	sub	sp, #232	; 0xe8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800708a:	2300      	movs	r3, #0
 800708c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007090:	2300      	movs	r3, #0
 8007092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10f      	bne.n	80070ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_UART_IRQHandler+0x66>
 80070b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d003      	beq.n	80070ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fc32 	bl	800792c <UART_Receive_IT>
      return;
 80070c8:	e256      	b.n	8007578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 80de 	beq.w	8007290 <HAL_UART_IRQHandler+0x22c>
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80d1 	beq.w	8007290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HAL_UART_IRQHandler+0xae>
 80070fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f043 0201 	orr.w	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <HAL_UART_IRQHandler+0xd2>
 800711e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	f043 0202 	orr.w	r2, r3, #2
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <HAL_UART_IRQHandler+0xf6>
 8007142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f043 0204 	orr.w	r2, r3, #4
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800715a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d011      	beq.n	800718a <HAL_UART_IRQHandler+0x126>
 8007166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d005      	beq.n	800718a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007182:	f043 0208 	orr.w	r2, r3, #8
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	f000 81ed 	beq.w	800756e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <HAL_UART_IRQHandler+0x14e>
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fbbd 	bl	800792c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071bc:	2b40      	cmp	r3, #64	; 0x40
 80071be:	bf0c      	ite	eq
 80071c0:	2301      	moveq	r3, #1
 80071c2:	2300      	movne	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <HAL_UART_IRQHandler+0x17a>
 80071d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d04f      	beq.n	800727e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fac5 	bl	800776e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	d141      	bne.n	8007276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3314      	adds	r3, #20
 80071f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800720c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3314      	adds	r3, #20
 800721a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800721e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800722a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1d9      	bne.n	80071f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007242:	2b00      	cmp	r3, #0
 8007244:	d013      	beq.n	800726e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	4a7d      	ldr	r2, [pc, #500]	; (8007440 <HAL_UART_IRQHandler+0x3dc>)
 800724c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007252:	4618      	mov	r0, r3
 8007254:	f7fb ffd4 	bl	8003200 <HAL_DMA_Abort_IT>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007268:	4610      	mov	r0, r2
 800726a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	e00e      	b.n	800728c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f99a 	bl	80075a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007274:	e00a      	b.n	800728c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f996 	bl	80075a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e006      	b.n	800728c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f992 	bl	80075a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800728a:	e170      	b.n	800756e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	bf00      	nop
    return;
 800728e:	e16e      	b.n	800756e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	2b01      	cmp	r3, #1
 8007296:	f040 814a 	bne.w	800752e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800729a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729e:	f003 0310 	and.w	r3, r3, #16
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 8143 	beq.w	800752e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 813c 	beq.w	800752e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072b6:	2300      	movs	r3, #0
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d6:	2b40      	cmp	r3, #64	; 0x40
 80072d8:	f040 80b4 	bne.w	8007444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8140 	beq.w	8007572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072fa:	429a      	cmp	r2, r3
 80072fc:	f080 8139 	bcs.w	8007572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007312:	f000 8088 	beq.w	8007426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	330c      	adds	r3, #12
 800731c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800732c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800734e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800735a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1d9      	bne.n	8007316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3314      	adds	r3, #20
 8007368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3314      	adds	r3, #20
 8007382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800738a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800738e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e1      	bne.n	8007362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3314      	adds	r3, #20
 80073a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e3      	bne.n	800739e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	330c      	adds	r3, #12
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073f6:	f023 0310 	bic.w	r3, r3, #16
 80073fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	330c      	adds	r3, #12
 8007404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007408:	65ba      	str	r2, [r7, #88]	; 0x58
 800740a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800740e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e3      	bne.n	80073e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	4618      	mov	r0, r3
 8007422:	f7fb fe7d 	bl	8003120 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800742e:	b29b      	uxth	r3, r3
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	b29b      	uxth	r3, r3
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f8c0 	bl	80075bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800743c:	e099      	b.n	8007572 <HAL_UART_IRQHandler+0x50e>
 800743e:	bf00      	nop
 8007440:	08007835 	.word	0x08007835
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800744c:	b29b      	uxth	r3, r3
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007458:	b29b      	uxth	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 808b 	beq.w	8007576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 8086 	beq.w	8007576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800747a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800748e:	647a      	str	r2, [r7, #68]	; 0x44
 8007490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800749c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e3      	bne.n	800746a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3314      	adds	r3, #20
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	623b      	str	r3, [r7, #32]
   return(result);
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	f023 0301 	bic.w	r3, r3, #1
 80074b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3314      	adds	r3, #20
 80074c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074c6:	633a      	str	r2, [r7, #48]	; 0x30
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e3      	bne.n	80074a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0310 	bic.w	r3, r3, #16
 80074fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	330c      	adds	r3, #12
 8007508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800750c:	61fa      	str	r2, [r7, #28]
 800750e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	69b9      	ldr	r1, [r7, #24]
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	617b      	str	r3, [r7, #20]
   return(result);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e3      	bne.n	80074e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f848 	bl	80075bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800752c:	e023      	b.n	8007576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <HAL_UART_IRQHandler+0x4ea>
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f988 	bl	800785c <UART_Transmit_IT>
    return;
 800754c:	e014      	b.n	8007578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00e      	beq.n	8007578 <HAL_UART_IRQHandler+0x514>
 800755a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d008      	beq.n	8007578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9c8 	bl	80078fc <UART_EndTransmit_IT>
    return;
 800756c:	e004      	b.n	8007578 <HAL_UART_IRQHandler+0x514>
    return;
 800756e:	bf00      	nop
 8007570:	e002      	b.n	8007578 <HAL_UART_IRQHandler+0x514>
      return;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <HAL_UART_IRQHandler+0x514>
      return;
 8007576:	bf00      	nop
  }
}
 8007578:	37e8      	adds	r7, #232	; 0xe8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop

08007580 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b090      	sub	sp, #64	; 0x40
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d137      	bne.n	8007660 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80075f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f2:	2200      	movs	r2, #0
 80075f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3314      	adds	r3, #20
 80075fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	623b      	str	r3, [r7, #32]
   return(result);
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
 800760e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3314      	adds	r3, #20
 8007614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007616:	633a      	str	r2, [r7, #48]	; 0x30
 8007618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800762a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	330c      	adds	r3, #12
 8007630:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	60fb      	str	r3, [r7, #12]
   return(result);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007640:	637b      	str	r3, [r7, #52]	; 0x34
 8007642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	330c      	adds	r3, #12
 8007648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800764a:	61fa      	str	r2, [r7, #28]
 800764c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	69b9      	ldr	r1, [r7, #24]
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	617b      	str	r3, [r7, #20]
   return(result);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800765e:	e002      	b.n	8007666 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007660:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007662:	f7fa fc9f 	bl	8001fa4 <HAL_UART_TxCpltCallback>
}
 8007666:	bf00      	nop
 8007668:	3740      	adds	r7, #64	; 0x40
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f7ff ff7f 	bl	8007580 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a6:	2b80      	cmp	r3, #128	; 0x80
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b21      	cmp	r3, #33	; 0x21
 80076bc:	d108      	bne.n	80076d0 <UART_DMAError+0x46>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076ca:	68b8      	ldr	r0, [r7, #8]
 80076cc:	f000 f827 	bl	800771e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	bf0c      	ite	eq
 80076de:	2301      	moveq	r3, #1
 80076e0:	2300      	movne	r3, #0
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b22      	cmp	r3, #34	; 0x22
 80076f0:	d108      	bne.n	8007704 <UART_DMAError+0x7a>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d005      	beq.n	8007704 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076fe:	68b8      	ldr	r0, [r7, #8]
 8007700:	f000 f835 	bl	800776e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007708:	f043 0210 	orr.w	r2, r3, #16
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f7ff ff49 	bl	80075a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800771e:	b480      	push	{r7}
 8007720:	b089      	sub	sp, #36	; 0x24
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	60bb      	str	r3, [r7, #8]
   return(result);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	330c      	adds	r3, #12
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	61ba      	str	r2, [r7, #24]
 8007748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	613b      	str	r3, [r7, #16]
   return(result);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2220      	movs	r2, #32
 800775e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007762:	bf00      	nop
 8007764:	3724      	adds	r7, #36	; 0x24
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800776e:	b480      	push	{r7}
 8007770:	b095      	sub	sp, #84	; 0x54
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	330c      	adds	r3, #12
 800777c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	330c      	adds	r3, #12
 8007794:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007796:	643a      	str	r2, [r7, #64]	; 0x40
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800779c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e5      	bne.n	8007776 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3314      	adds	r3, #20
 80077b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3314      	adds	r3, #20
 80077c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d119      	bne.n	800781a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	f023 0310 	bic.w	r3, r3, #16
 80077fc:	647b      	str	r3, [r7, #68]	; 0x44
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	330c      	adds	r3, #12
 8007804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007806:	61ba      	str	r2, [r7, #24]
 8007808:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	613b      	str	r3, [r7, #16]
   return(result);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007828:	bf00      	nop
 800782a:	3754      	adds	r7, #84	; 0x54
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7ff feaa 	bl	80075a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007854:	bf00      	nop
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b21      	cmp	r3, #33	; 0x21
 800786e:	d13e      	bne.n	80078ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007878:	d114      	bne.n	80078a4 <UART_Transmit_IT+0x48>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d110      	bne.n	80078a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007896:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	1c9a      	adds	r2, r3, #2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	621a      	str	r2, [r3, #32]
 80078a2:	e008      	b.n	80078b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	1c59      	adds	r1, r3, #1
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6211      	str	r1, [r2, #32]
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	4619      	mov	r1, r3
 80078c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10f      	bne.n	80078ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e000      	b.n	80078f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
  }
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007912:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2220      	movs	r2, #32
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7fa fb41 	bl	8001fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	; 0x30
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b22      	cmp	r3, #34	; 0x22
 800793e:	f040 80ab 	bne.w	8007a98 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800794a:	d117      	bne.n	800797c <UART_Receive_IT+0x50>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d113      	bne.n	800797c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007954:	2300      	movs	r3, #0
 8007956:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796a:	b29a      	uxth	r2, r3
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	1c9a      	adds	r2, r3, #2
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	629a      	str	r2, [r3, #40]	; 0x28
 800797a:	e026      	b.n	80079ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800798e:	d007      	beq.n	80079a0 <UART_Receive_IT+0x74>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <UART_Receive_IT+0x82>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d106      	bne.n	80079ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	e008      	b.n	80079c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	4619      	mov	r1, r3
 80079d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d15a      	bne.n	8007a94 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0220 	bic.w	r2, r2, #32
 80079ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	695a      	ldr	r2, [r3, #20]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f022 0201 	bic.w	r2, r2, #1
 8007a0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d135      	bne.n	8007a8a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	613b      	str	r3, [r7, #16]
   return(result);
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f023 0310 	bic.w	r3, r3, #16
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	330c      	adds	r3, #12
 8007a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a44:	623a      	str	r2, [r7, #32]
 8007a46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	69f9      	ldr	r1, [r7, #28]
 8007a4a:	6a3a      	ldr	r2, [r7, #32]
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d10a      	bne.n	8007a7c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a66:	2300      	movs	r3, #0
 8007a68:	60fb      	str	r3, [r7, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fd9a 	bl	80075bc <HAL_UARTEx_RxEventCallback>
 8007a88:	e002      	b.n	8007a90 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff fd82 	bl	8007594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e002      	b.n	8007a9a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
  }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3730      	adds	r7, #48	; 0x30
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	b09f      	sub	sp, #124	; 0x7c
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aba:	68d9      	ldr	r1, [r3, #12]
 8007abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	ea40 0301 	orr.w	r3, r0, r1
 8007ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ae8:	f021 010c 	bic.w	r1, r1, #12
 8007aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007af2:	430b      	orrs	r3, r1
 8007af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b02:	6999      	ldr	r1, [r3, #24]
 8007b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	ea40 0301 	orr.w	r3, r0, r1
 8007b0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4bc5      	ldr	r3, [pc, #788]	; (8007e28 <UART_SetConfig+0x384>)
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d004      	beq.n	8007b22 <UART_SetConfig+0x7e>
 8007b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4bc3      	ldr	r3, [pc, #780]	; (8007e2c <UART_SetConfig+0x388>)
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d103      	bne.n	8007b2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b22:	f7fd fee9 	bl	80058f8 <HAL_RCC_GetPCLK2Freq>
 8007b26:	6778      	str	r0, [r7, #116]	; 0x74
 8007b28:	e002      	b.n	8007b30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b2a:	f7fd fed1 	bl	80058d0 <HAL_RCC_GetPCLK1Freq>
 8007b2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b38:	f040 80b6 	bne.w	8007ca8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b3e:	461c      	mov	r4, r3
 8007b40:	f04f 0500 	mov.w	r5, #0
 8007b44:	4622      	mov	r2, r4
 8007b46:	462b      	mov	r3, r5
 8007b48:	1891      	adds	r1, r2, r2
 8007b4a:	6439      	str	r1, [r7, #64]	; 0x40
 8007b4c:	415b      	adcs	r3, r3
 8007b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b54:	1912      	adds	r2, r2, r4
 8007b56:	eb45 0303 	adc.w	r3, r5, r3
 8007b5a:	f04f 0000 	mov.w	r0, #0
 8007b5e:	f04f 0100 	mov.w	r1, #0
 8007b62:	00d9      	lsls	r1, r3, #3
 8007b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b68:	00d0      	lsls	r0, r2, #3
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	1911      	adds	r1, r2, r4
 8007b70:	6639      	str	r1, [r7, #96]	; 0x60
 8007b72:	416b      	adcs	r3, r5
 8007b74:	667b      	str	r3, [r7, #100]	; 0x64
 8007b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b84:	415b      	adcs	r3, r3
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b90:	f7f8 ff30 	bl	80009f4 <__aeabi_uldivmod>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4ba5      	ldr	r3, [pc, #660]	; (8007e30 <UART_SetConfig+0x38c>)
 8007b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b9e:	095b      	lsrs	r3, r3, #5
 8007ba0:	011e      	lsls	r6, r3, #4
 8007ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba4:	461c      	mov	r4, r3
 8007ba6:	f04f 0500 	mov.w	r5, #0
 8007baa:	4622      	mov	r2, r4
 8007bac:	462b      	mov	r3, r5
 8007bae:	1891      	adds	r1, r2, r2
 8007bb0:	6339      	str	r1, [r7, #48]	; 0x30
 8007bb2:	415b      	adcs	r3, r3
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007bba:	1912      	adds	r2, r2, r4
 8007bbc:	eb45 0303 	adc.w	r3, r5, r3
 8007bc0:	f04f 0000 	mov.w	r0, #0
 8007bc4:	f04f 0100 	mov.w	r1, #0
 8007bc8:	00d9      	lsls	r1, r3, #3
 8007bca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bce:	00d0      	lsls	r0, r2, #3
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	1911      	adds	r1, r2, r4
 8007bd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bd8:	416b      	adcs	r3, r5
 8007bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	461a      	mov	r2, r3
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	1891      	adds	r1, r2, r2
 8007be8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bea:	415b      	adcs	r3, r3
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007bf6:	f7f8 fefd 	bl	80009f4 <__aeabi_uldivmod>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4b8c      	ldr	r3, [pc, #560]	; (8007e30 <UART_SetConfig+0x38c>)
 8007c00:	fba3 1302 	umull	r1, r3, r3, r2
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	2164      	movs	r1, #100	; 0x64
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	3332      	adds	r3, #50	; 0x32
 8007c12:	4a87      	ldr	r2, [pc, #540]	; (8007e30 <UART_SetConfig+0x38c>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	005b      	lsls	r3, r3, #1
 8007c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c20:	441e      	add	r6, r3
 8007c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c24:	4618      	mov	r0, r3
 8007c26:	f04f 0100 	mov.w	r1, #0
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	1894      	adds	r4, r2, r2
 8007c30:	623c      	str	r4, [r7, #32]
 8007c32:	415b      	adcs	r3, r3
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
 8007c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c3a:	1812      	adds	r2, r2, r0
 8007c3c:	eb41 0303 	adc.w	r3, r1, r3
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	f04f 0500 	mov.w	r5, #0
 8007c48:	00dd      	lsls	r5, r3, #3
 8007c4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c4e:	00d4      	lsls	r4, r2, #3
 8007c50:	4622      	mov	r2, r4
 8007c52:	462b      	mov	r3, r5
 8007c54:	1814      	adds	r4, r2, r0
 8007c56:	653c      	str	r4, [r7, #80]	; 0x50
 8007c58:	414b      	adcs	r3, r1
 8007c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	461a      	mov	r2, r3
 8007c62:	f04f 0300 	mov.w	r3, #0
 8007c66:	1891      	adds	r1, r2, r2
 8007c68:	61b9      	str	r1, [r7, #24]
 8007c6a:	415b      	adcs	r3, r3
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c76:	f7f8 febd 	bl	80009f4 <__aeabi_uldivmod>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4b6c      	ldr	r3, [pc, #432]	; (8007e30 <UART_SetConfig+0x38c>)
 8007c80:	fba3 1302 	umull	r1, r3, r3, r2
 8007c84:	095b      	lsrs	r3, r3, #5
 8007c86:	2164      	movs	r1, #100	; 0x64
 8007c88:	fb01 f303 	mul.w	r3, r1, r3
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	3332      	adds	r3, #50	; 0x32
 8007c92:	4a67      	ldr	r2, [pc, #412]	; (8007e30 <UART_SetConfig+0x38c>)
 8007c94:	fba2 2303 	umull	r2, r3, r2, r3
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	f003 0207 	and.w	r2, r3, #7
 8007c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4432      	add	r2, r6
 8007ca4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ca6:	e0b9      	b.n	8007e1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007caa:	461c      	mov	r4, r3
 8007cac:	f04f 0500 	mov.w	r5, #0
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	1891      	adds	r1, r2, r2
 8007cb6:	6139      	str	r1, [r7, #16]
 8007cb8:	415b      	adcs	r3, r3
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cc0:	1912      	adds	r2, r2, r4
 8007cc2:	eb45 0303 	adc.w	r3, r5, r3
 8007cc6:	f04f 0000 	mov.w	r0, #0
 8007cca:	f04f 0100 	mov.w	r1, #0
 8007cce:	00d9      	lsls	r1, r3, #3
 8007cd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cd4:	00d0      	lsls	r0, r2, #3
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	eb12 0804 	adds.w	r8, r2, r4
 8007cde:	eb43 0905 	adc.w	r9, r3, r5
 8007ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	008b      	lsls	r3, r1, #2
 8007cf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cfa:	0082      	lsls	r2, r0, #2
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	4649      	mov	r1, r9
 8007d00:	f7f8 fe78 	bl	80009f4 <__aeabi_uldivmod>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4b49      	ldr	r3, [pc, #292]	; (8007e30 <UART_SetConfig+0x38c>)
 8007d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d0e:	095b      	lsrs	r3, r3, #5
 8007d10:	011e      	lsls	r6, r3, #4
 8007d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d14:	4618      	mov	r0, r3
 8007d16:	f04f 0100 	mov.w	r1, #0
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	1894      	adds	r4, r2, r2
 8007d20:	60bc      	str	r4, [r7, #8]
 8007d22:	415b      	adcs	r3, r3
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d2a:	1812      	adds	r2, r2, r0
 8007d2c:	eb41 0303 	adc.w	r3, r1, r3
 8007d30:	f04f 0400 	mov.w	r4, #0
 8007d34:	f04f 0500 	mov.w	r5, #0
 8007d38:	00dd      	lsls	r5, r3, #3
 8007d3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d3e:	00d4      	lsls	r4, r2, #3
 8007d40:	4622      	mov	r2, r4
 8007d42:	462b      	mov	r3, r5
 8007d44:	1814      	adds	r4, r2, r0
 8007d46:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d48:	414b      	adcs	r3, r1
 8007d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f04f 0100 	mov.w	r1, #0
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	008b      	lsls	r3, r1, #2
 8007d60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d64:	0082      	lsls	r2, r0, #2
 8007d66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d6a:	f7f8 fe43 	bl	80009f4 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4b2f      	ldr	r3, [pc, #188]	; (8007e30 <UART_SetConfig+0x38c>)
 8007d74:	fba3 1302 	umull	r1, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	2164      	movs	r1, #100	; 0x64
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	3332      	adds	r3, #50	; 0x32
 8007d86:	4a2a      	ldr	r2, [pc, #168]	; (8007e30 <UART_SetConfig+0x38c>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d92:	441e      	add	r6, r3
 8007d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d96:	4618      	mov	r0, r3
 8007d98:	f04f 0100 	mov.w	r1, #0
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	1894      	adds	r4, r2, r2
 8007da2:	603c      	str	r4, [r7, #0]
 8007da4:	415b      	adcs	r3, r3
 8007da6:	607b      	str	r3, [r7, #4]
 8007da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dac:	1812      	adds	r2, r2, r0
 8007dae:	eb41 0303 	adc.w	r3, r1, r3
 8007db2:	f04f 0400 	mov.w	r4, #0
 8007db6:	f04f 0500 	mov.w	r5, #0
 8007dba:	00dd      	lsls	r5, r3, #3
 8007dbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dc0:	00d4      	lsls	r4, r2, #3
 8007dc2:	4622      	mov	r2, r4
 8007dc4:	462b      	mov	r3, r5
 8007dc6:	eb12 0a00 	adds.w	sl, r2, r0
 8007dca:	eb43 0b01 	adc.w	fp, r3, r1
 8007dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f04f 0100 	mov.w	r1, #0
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	008b      	lsls	r3, r1, #2
 8007de2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007de6:	0082      	lsls	r2, r0, #2
 8007de8:	4650      	mov	r0, sl
 8007dea:	4659      	mov	r1, fp
 8007dec:	f7f8 fe02 	bl	80009f4 <__aeabi_uldivmod>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <UART_SetConfig+0x38c>)
 8007df6:	fba3 1302 	umull	r1, r3, r3, r2
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	2164      	movs	r1, #100	; 0x64
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	3332      	adds	r3, #50	; 0x32
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <UART_SetConfig+0x38c>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	f003 020f 	and.w	r2, r3, #15
 8007e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4432      	add	r2, r6
 8007e1a:	609a      	str	r2, [r3, #8]
}
 8007e1c:	bf00      	nop
 8007e1e:	377c      	adds	r7, #124	; 0x7c
 8007e20:	46bd      	mov	sp, r7
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	bf00      	nop
 8007e28:	40011000 	.word	0x40011000
 8007e2c:	40011400 	.word	0x40011400
 8007e30:	51eb851f 	.word	0x51eb851f

08007e34 <__libc_init_array>:
 8007e34:	b570      	push	{r4, r5, r6, lr}
 8007e36:	4d0d      	ldr	r5, [pc, #52]	; (8007e6c <__libc_init_array+0x38>)
 8007e38:	4c0d      	ldr	r4, [pc, #52]	; (8007e70 <__libc_init_array+0x3c>)
 8007e3a:	1b64      	subs	r4, r4, r5
 8007e3c:	10a4      	asrs	r4, r4, #2
 8007e3e:	2600      	movs	r6, #0
 8007e40:	42a6      	cmp	r6, r4
 8007e42:	d109      	bne.n	8007e58 <__libc_init_array+0x24>
 8007e44:	4d0b      	ldr	r5, [pc, #44]	; (8007e74 <__libc_init_array+0x40>)
 8007e46:	4c0c      	ldr	r4, [pc, #48]	; (8007e78 <__libc_init_array+0x44>)
 8007e48:	f000 f820 	bl	8007e8c <_init>
 8007e4c:	1b64      	subs	r4, r4, r5
 8007e4e:	10a4      	asrs	r4, r4, #2
 8007e50:	2600      	movs	r6, #0
 8007e52:	42a6      	cmp	r6, r4
 8007e54:	d105      	bne.n	8007e62 <__libc_init_array+0x2e>
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5c:	4798      	blx	r3
 8007e5e:	3601      	adds	r6, #1
 8007e60:	e7ee      	b.n	8007e40 <__libc_init_array+0xc>
 8007e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e66:	4798      	blx	r3
 8007e68:	3601      	adds	r6, #1
 8007e6a:	e7f2      	b.n	8007e52 <__libc_init_array+0x1e>
 8007e6c:	08007fa0 	.word	0x08007fa0
 8007e70:	08007fa0 	.word	0x08007fa0
 8007e74:	08007fa0 	.word	0x08007fa0
 8007e78:	08007fa4 	.word	0x08007fa4

08007e7c <memset>:
 8007e7c:	4402      	add	r2, r0
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d100      	bne.n	8007e86 <memset+0xa>
 8007e84:	4770      	bx	lr
 8007e86:	f803 1b01 	strb.w	r1, [r3], #1
 8007e8a:	e7f9      	b.n	8007e80 <memset+0x4>

08007e8c <_init>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr

08007e98 <_fini>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	bf00      	nop
 8007e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9e:	bc08      	pop	{r3}
 8007ea0:	469e      	mov	lr, r3
 8007ea2:	4770      	bx	lr
